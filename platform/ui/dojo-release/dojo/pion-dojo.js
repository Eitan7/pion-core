/*
	Copyright (c) 2004-2011, The Dojo Foundation All Rights Reserved.
	Available via Academic Free License >= 2.1 OR the modified BSD license.
	see: http://dojotoolkit.org/license for details
*/

/*
	This is an optimized version of Dojo, built for deployment and not for
	development. To get sources and documentation, please visit:

		http://dojotoolkit.org
*/

if(!dojo._hasResource["dojo.date.stamp"]){
dojo._hasResource["dojo.date.stamp"]=true;
dojo.provide("dojo.date.stamp");
dojo.getObject("date.stamp",true,dojo);
dojo.date.stamp.fromISOString=function(_1,_2){
if(!dojo.date.stamp._isoRegExp){
dojo.date.stamp._isoRegExp=/^(?:(\d{4})(?:-(\d{2})(?:-(\d{2}))?)?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(.\d+)?)?((?:[+-](\d{2}):(\d{2}))|Z)?)?$/;
}
var _3=dojo.date.stamp._isoRegExp.exec(_1),_4=null;
if(_3){
_3.shift();
if(_3[1]){
_3[1]--;
}
if(_3[6]){
_3[6]*=1000;
}
if(_2){
_2=new Date(_2);
dojo.forEach(dojo.map(["FullYear","Month","Date","Hours","Minutes","Seconds","Milliseconds"],function(_5){
return _2["get"+_5]();
}),function(_6,_7){
_3[_7]=_3[_7]||_6;
});
}
_4=new Date(_3[0]||1970,_3[1]||0,_3[2]||1,_3[3]||0,_3[4]||0,_3[5]||0,_3[6]||0);
if(_3[0]<100){
_4.setFullYear(_3[0]||1970);
}
var _8=0,_9=_3[7]&&_3[7].charAt(0);
if(_9!="Z"){
_8=((_3[8]||0)*60)+(Number(_3[9])||0);
if(_9!="-"){
_8*=-1;
}
}
if(_9){
_8-=_4.getTimezoneOffset();
}
if(_8){
_4.setTime(_4.getTime()+_8*60000);
}
}
return _4;
};
dojo.date.stamp.toISOString=function(_a,_b){
var _c=function(n){
return (n<10)?"0"+n:n;
};
_b=_b||{};
var _d=[],_e=_b.zulu?"getUTC":"get",_f="";
if(_b.selector!="time"){
var _10=_a[_e+"FullYear"]();
_f=["0000".substr((_10+"").length)+_10,_c(_a[_e+"Month"]()+1),_c(_a[_e+"Date"]())].join("-");
}
_d.push(_f);
if(_b.selector!="date"){
var _11=[_c(_a[_e+"Hours"]()),_c(_a[_e+"Minutes"]()),_c(_a[_e+"Seconds"]())].join(":");
var _12=_a[_e+"Milliseconds"]();
if(_b.milliseconds){
_11+="."+(_12<100?"0":"")+_c(_12);
}
if(_b.zulu){
_11+="Z";
}else{
if(_b.selector!="time"){
var _13=_a.getTimezoneOffset();
var _14=Math.abs(_13);
_11+=(_13>0?"-":"+")+_c(Math.floor(_14/60))+":"+_c(_14%60);
}
}
_d.push(_11);
}
return _d.join("T");
};
}
if(!dojo._hasResource["dojo.parser"]){
dojo._hasResource["dojo.parser"]=true;
dojo.provide("dojo.parser");
new Date("X");
dojo.parser=new function(){
var d=dojo;
function _15(_16){
if(d.isString(_16)){
return "string";
}
if(typeof _16=="number"){
return "number";
}
if(typeof _16=="boolean"){
return "boolean";
}
if(d.isFunction(_16)){
return "function";
}
if(d.isArray(_16)){
return "array";
}
if(_16 instanceof Date){
return "date";
}
if(_16 instanceof d._Url){
return "url";
}
return "object";
};
function _17(_18,_19){
switch(_19){
case "string":
return _18;
case "number":
return _18.length?Number(_18):NaN;
case "boolean":
return typeof _18=="boolean"?_18:!(_18.toLowerCase()=="false");
case "function":
if(d.isFunction(_18)){
_18=_18.toString();
_18=d.trim(_18.substring(_18.indexOf("{")+1,_18.length-1));
}
try{
if(_18===""||_18.search(/[^\w\.]+/i)!=-1){
return new Function(_18);
}else{
return d.getObject(_18,false)||new Function(_18);
}
}
catch(e){
return new Function();
}
case "array":
return _18?_18.split(/\s*,\s*/):[];
case "date":
switch(_18){
case "":
return new Date("");
case "now":
return new Date();
default:
return d.date.stamp.fromISOString(_18);
}
case "url":
return d.baseUrl+_18;
default:
return d.fromJson(_18);
}
};
var _1a={},_1b={};
d.connect(d,"extend",function(){
_1b={};
});
function _1c(cls,_1d){
for(var _1e in cls){
if(_1e.charAt(0)=="_"){
continue;
}
if(_1e in _1a){
continue;
}
_1d[_1e]=_15(cls[_1e]);
}
return _1d;
};
function _1f(_20,_21){
var c=_1b[_20];
if(!c){
var cls=d.getObject(_20),_22=null;
if(!cls){
return null;
}
if(!_21){
_22=_1c(cls.prototype,{});
}
c={cls:cls,params:_22};
}else{
if(!_21&&!c.params){
c.params=_1c(c.cls.prototype,{});
}
}
return c;
};
this._functionFromScript=function(_23,_24){
var _25="";
var _26="";
var _27=(_23.getAttribute(_24+"args")||_23.getAttribute("args"));
if(_27){
d.forEach(_27.split(/\s*,\s*/),function(_28,idx){
_25+="var "+_28+" = arguments["+idx+"]; ";
});
}
var _29=_23.getAttribute("with");
if(_29&&_29.length){
d.forEach(_29.split(/\s*,\s*/),function(_2a){
_25+="with("+_2a+"){";
_26+="}";
});
}
return new Function(_25+_23.innerHTML+_26);
};
this.instantiate=function(_2b,_2c,_2d){
var _2e=[],_2c=_2c||{};
_2d=_2d||{};
var _2f=(_2d.scope||d._scopeName)+"Type",_30="data-"+(_2d.scope||d._scopeName)+"-";
d.forEach(_2b,function(obj){
if(!obj){
return;
}
var _31,_32,_33,_34,_35,_36;
if(obj.node){
_31=obj.node;
_32=obj.type;
_36=obj.fastpath;
_33=obj.clsInfo||(_32&&_1f(_32,_36));
_34=_33&&_33.cls;
_35=obj.scripts;
}else{
_31=obj;
_32=_2f in _2c?_2c[_2f]:_31.getAttribute(_2f);
_33=_32&&_1f(_32);
_34=_33&&_33.cls;
_35=(_34&&(_34._noScript||_34.prototype._noScript)?[]:d.query("> script[type^='dojo/']",_31));
}
if(!_33){
throw new Error("Could not load class '"+_32);
}
var _37={};
if(_2d.defaults){
d._mixin(_37,_2d.defaults);
}
if(obj.inherited){
d._mixin(_37,obj.inherited);
}
if(_36){
var _38=_31.getAttribute(_30+"props");
if(_38&&_38.length){
try{
_38=d.fromJson.call(_2d.propsThis,"{"+_38+"}");
d._mixin(_37,_38);
}
catch(e){
throw new Error(e.toString()+" in data-dojo-props='"+_38+"'");
}
}
var _39=_31.getAttribute(_30+"attach-point");
if(_39){
_37.dojoAttachPoint=_39;
}
var _3a=_31.getAttribute(_30+"attach-event");
if(_3a){
_37.dojoAttachEvent=_3a;
}
dojo.mixin(_37,_2c);
}else{
var _3b=_31.attributes;
for(var _3c in _33.params){
var _3d=_3c in _2c?{value:_2c[_3c],specified:true}:_3b.getNamedItem(_3c);
if(!_3d||(!_3d.specified&&(!dojo.isIE||_3c.toLowerCase()!="value"))){
continue;
}
var _3e=_3d.value;
switch(_3c){
case "class":
_3e="className" in _2c?_2c.className:_31.className;
break;
case "style":
_3e="style" in _2c?_2c.style:(_31.style&&_31.style.cssText);
}
var _3f=_33.params[_3c];
if(typeof _3e=="string"){
_37[_3c]=_17(_3e,_3f);
}else{
_37[_3c]=_3e;
}
}
}
var _40=[],_41=[];
d.forEach(_35,function(_42){
_31.removeChild(_42);
var _43=(_42.getAttribute(_30+"event")||_42.getAttribute("event")),_32=_42.getAttribute("type"),nf=d.parser._functionFromScript(_42,_30);
if(_43){
if(_32=="dojo/connect"){
_40.push({event:_43,func:nf});
}else{
_37[_43]=nf;
}
}else{
_41.push(nf);
}
});
var _44=_34.markupFactory||_34.prototype&&_34.prototype.markupFactory;
var _45=_44?_44(_37,_31,_34):new _34(_37,_31);
_2e.push(_45);
var _46=(_31.getAttribute(_30+"id")||_31.getAttribute("jsId"));
if(_46){
d.setObject(_46,_45);
}
d.forEach(_40,function(_47){
d.connect(_45,_47.event,null,_47.func);
});
d.forEach(_41,function(_48){
_48.call(_45);
});
});
if(!_2c._started){
d.forEach(_2e,function(_49){
if(!_2d.noStart&&_49&&dojo.isFunction(_49.startup)&&!_49._started&&(!_49.getParent||!_49.getParent())){
_49.startup();
}
});
}
return _2e;
};
this.parse=function(_4a,_4b){
var _4c;
if(!_4b&&_4a&&_4a.rootNode){
_4b=_4a;
_4c=_4b.rootNode;
}else{
_4c=_4a;
}
_4c=_4c?dojo.byId(_4c):dojo.body();
_4b=_4b||{};
var _4d=(_4b.scope||d._scopeName)+"Type",_4e="data-"+(_4b.scope||d._scopeName)+"-";
function _4f(_50,_51){
var _52=dojo.clone(_50.inherited);
dojo.forEach(["dir","lang"],function(_53){
var val=_50.node.getAttribute(_53);
if(val){
_52[_53]=val;
}
});
var _54=_50.clsInfo&&!_50.clsInfo.cls.prototype._noScript?_50.scripts:null;
var _55=(!_50.clsInfo||!_50.clsInfo.cls.prototype.stopParser)||(_4b&&_4b.template);
for(var _56=_50.node.firstChild;_56;_56=_56.nextSibling){
if(_56.nodeType==1){
var _57,_58=_55&&_56.getAttribute(_4e+"type");
if(_58){
_57=_58;
}else{
_57=_55&&_56.getAttribute(_4d);
}
var _59=_58==_57;
if(_57){
var _5a={"type":_57,fastpath:_59,clsInfo:_1f(_57,_59),node:_56,scripts:[],inherited:_52};
_51.push(_5a);
_4f(_5a,_51);
}else{
if(_54&&_56.nodeName.toLowerCase()=="script"){
_57=_56.getAttribute("type");
if(_57&&/^dojo\/\w/i.test(_57)){
_54.push(_56);
}
}else{
if(_55){
_4f({node:_56,inherited:_52},_51);
}
}
}
}
}
};
var _5b={};
if(_4b&&_4b.inherited){
for(var key in _4b.inherited){
if(_4b.inherited[key]){
_5b[key]=_4b.inherited[key];
}
}
}
var _5c=[];
_4f({node:_4c,inherited:_5b},_5c);
var _5d=_4b&&_4b.template?{template:true}:null;
return this.instantiate(_5c,_5d,_4b);
};
}();
(function(){
var _5e=function(){
if(dojo.config.parseOnLoad){
dojo.parser.parse();
}
};
if(dojo.getObject("dijit.wai.onload")===dojo._loaders[0]){
dojo._loaders.splice(1,0,_5e);
}else{
dojo._loaders.unshift(_5e);
}
})();
}
if(!dojo._hasResource["dojo.data.util.filter"]){
dojo._hasResource["dojo.data.util.filter"]=true;
dojo.provide("dojo.data.util.filter");
dojo.getObject("data.util.filter",true,dojo);
dojo.data.util.filter.patternToRegExp=function(_5f,_60){
var rxp="^";
var c=null;
for(var i=0;i<_5f.length;i++){
c=_5f.charAt(i);
switch(c){
case "\\":
rxp+=c;
i++;
rxp+=_5f.charAt(i);
break;
case "*":
rxp+=".*";
break;
case "?":
rxp+=".";
break;
case "$":
case "^":
case "/":
case "+":
case ".":
case "|":
case "(":
case ")":
case "{":
case "}":
case "[":
case "]":
rxp+="\\";
default:
rxp+=c;
}
}
rxp+="$";
if(_60){
return new RegExp(rxp,"mi");
}else{
return new RegExp(rxp,"m");
}
};
}
if(!dojo._hasResource["dojo.data.util.sorter"]){
dojo._hasResource["dojo.data.util.sorter"]=true;
dojo.provide("dojo.data.util.sorter");
dojo.getObject("data.util.sorter",true,dojo);
dojo.data.util.sorter.basicComparator=function(a,b){
var r=-1;
if(a===null){
a=undefined;
}
if(b===null){
b=undefined;
}
if(a==b){
r=0;
}else{
if(a>b||a==null){
r=1;
}
}
return r;
};
dojo.data.util.sorter.createSortFunction=function(_61,_62){
var _63=[];
function _64(_65,dir,_66,s){
return function(_67,_68){
var a=s.getValue(_67,_65);
var b=s.getValue(_68,_65);
return dir*_66(a,b);
};
};
var _69;
var map=_62.comparatorMap;
var bc=dojo.data.util.sorter.basicComparator;
for(var i=0;i<_61.length;i++){
_69=_61[i];
var _6a=_69.attribute;
if(_6a){
var dir=(_69.descending)?-1:1;
var _6b=bc;
if(map){
if(typeof _6a!=="string"&&("toString" in _6a)){
_6a=_6a.toString();
}
_6b=map[_6a]||bc;
}
_63.push(_64(_6a,dir,_6b,_62));
}
}
return function(_6c,_6d){
var i=0;
while(i<_63.length){
var ret=_63[i++](_6c,_6d);
if(ret!==0){
return ret;
}
}
return 0;
};
};
}
if(!dojo._hasResource["dojo.data.util.simpleFetch"]){
dojo._hasResource["dojo.data.util.simpleFetch"]=true;
dojo.provide("dojo.data.util.simpleFetch");
dojo.getObject("data.util.simpleFetch",true,dojo);
dojo.data.util.simpleFetch.fetch=function(_6e){
_6e=_6e||{};
if(!_6e.store){
_6e.store=this;
}
var _6f=this;
var _70=function(_71,_72){
if(_72.onError){
var _73=_72.scope||dojo.global;
_72.onError.call(_73,_71,_72);
}
};
var _74=function(_75,_76){
var _77=_76.abort||null;
var _78=false;
var _79=_76.start?_76.start:0;
var _7a=(_76.count&&(_76.count!==Infinity))?(_79+_76.count):_75.length;
_76.abort=function(){
_78=true;
if(_77){
_77.call(_76);
}
};
var _7b=_76.scope||dojo.global;
if(!_76.store){
_76.store=_6f;
}
if(_76.onBegin){
_76.onBegin.call(_7b,_75.length,_76);
}
if(_76.sort){
_75.sort(dojo.data.util.sorter.createSortFunction(_76.sort,_6f));
}
if(_76.onItem){
for(var i=_79;(i<_75.length)&&(i<_7a);++i){
var _7c=_75[i];
if(!_78){
_76.onItem.call(_7b,_7c,_76);
}
}
}
if(_76.onComplete&&!_78){
var _7d=null;
if(!_76.onItem){
_7d=_75.slice(_79,_7a);
}
_76.onComplete.call(_7b,_7d,_76);
}
};
this._fetchItems(_6e,_74,_70);
return _6e;
};
}
if(!dojo._hasResource["dojo.data.ItemFileReadStore"]){
dojo._hasResource["dojo.data.ItemFileReadStore"]=true;
dojo.provide("dojo.data.ItemFileReadStore");
dojo.declare("dojo.data.ItemFileReadStore",null,{constructor:function(_7e){
this._arrayOfAllItems=[];
this._arrayOfTopLevelItems=[];
this._loadFinished=false;
this._jsonFileUrl=_7e.url;
this._ccUrl=_7e.url;
this.url=_7e.url;
this._jsonData=_7e.data;
this.data=null;
this._datatypeMap=_7e.typeMap||{};
if(!this._datatypeMap["Date"]){
this._datatypeMap["Date"]={type:Date,deserialize:function(_7f){
return dojo.date.stamp.fromISOString(_7f);
}};
}
this._features={"dojo.data.api.Read":true,"dojo.data.api.Identity":true};
this._itemsByIdentity=null;
this._storeRefPropName="_S";
this._itemNumPropName="_0";
this._rootItemPropName="_RI";
this._reverseRefMap="_RRM";
this._loadInProgress=false;
this._queuedFetches=[];
if(_7e.urlPreventCache!==undefined){
this.urlPreventCache=_7e.urlPreventCache?true:false;
}
if(_7e.hierarchical!==undefined){
this.hierarchical=_7e.hierarchical?true:false;
}
if(_7e.clearOnClose){
this.clearOnClose=true;
}
if("failOk" in _7e){
this.failOk=_7e.failOk?true:false;
}
},url:"",_ccUrl:"",data:null,typeMap:null,clearOnClose:false,urlPreventCache:false,failOk:false,hierarchical:true,_assertIsItem:function(_80){
if(!this.isItem(_80)){
throw new Error("dojo.data.ItemFileReadStore: Invalid item argument.");
}
},_assertIsAttribute:function(_81){
if(typeof _81!=="string"){
throw new Error("dojo.data.ItemFileReadStore: Invalid attribute argument.");
}
},getValue:function(_82,_83,_84){
var _85=this.getValues(_82,_83);
return (_85.length>0)?_85[0]:_84;
},getValues:function(_86,_87){
this._assertIsItem(_86);
this._assertIsAttribute(_87);
return (_86[_87]||[]).slice(0);
},getAttributes:function(_88){
this._assertIsItem(_88);
var _89=[];
for(var key in _88){
if((key!==this._storeRefPropName)&&(key!==this._itemNumPropName)&&(key!==this._rootItemPropName)&&(key!==this._reverseRefMap)){
_89.push(key);
}
}
return _89;
},hasAttribute:function(_8a,_8b){
this._assertIsItem(_8a);
this._assertIsAttribute(_8b);
return (_8b in _8a);
},containsValue:function(_8c,_8d,_8e){
var _8f=undefined;
if(typeof _8e==="string"){
_8f=dojo.data.util.filter.patternToRegExp(_8e,false);
}
return this._containsValue(_8c,_8d,_8e,_8f);
},_containsValue:function(_90,_91,_92,_93){
return dojo.some(this.getValues(_90,_91),function(_94){
if(_94!==null&&!dojo.isObject(_94)&&_93){
if(_94.toString().match(_93)){
return true;
}
}else{
if(_92===_94){
return true;
}
}
});
},isItem:function(_95){
if(_95&&_95[this._storeRefPropName]===this){
if(this._arrayOfAllItems[_95[this._itemNumPropName]]===_95){
return true;
}
}
return false;
},isItemLoaded:function(_96){
return this.isItem(_96);
},loadItem:function(_97){
this._assertIsItem(_97.item);
},getFeatures:function(){
return this._features;
},getLabel:function(_98){
if(this._labelAttr&&this.isItem(_98)){
return this.getValue(_98,this._labelAttr);
}
return undefined;
},getLabelAttributes:function(_99){
if(this._labelAttr){
return [this._labelAttr];
}
return null;
},_fetchItems:function(_9a,_9b,_9c){
var _9d=this,_9e=function(_9f,_a0){
var _a1=[],i,key;
if(_9f.query){
var _a2,_a3=_9f.queryOptions?_9f.queryOptions.ignoreCase:false;
var _a4={};
for(key in _9f.query){
_a2=_9f.query[key];
if(typeof _a2==="string"){
_a4[key]=dojo.data.util.filter.patternToRegExp(_a2,_a3);
}else{
if(_a2 instanceof RegExp){
_a4[key]=_a2;
}
}
}
for(i=0;i<_a0.length;++i){
var _a5=true;
var _a6=_a0[i];
if(_a6===null){
_a5=false;
}else{
for(key in _9f.query){
_a2=_9f.query[key];
if(!_9d._containsValue(_a6,key,_a2,_a4[key])){
_a5=false;
}
}
}
if(_a5){
_a1.push(_a6);
}
}
_9b(_a1,_9f);
}else{
for(i=0;i<_a0.length;++i){
var _a7=_a0[i];
if(_a7!==null){
_a1.push(_a7);
}
}
_9b(_a1,_9f);
}
};
if(this._loadFinished){
_9e(_9a,this._getItemsArray(_9a.queryOptions));
}else{
if(this._jsonFileUrl!==this._ccUrl){
dojo.deprecated("dojo.data.ItemFileReadStore: ","To change the url, set the url property of the store,"+" not _jsonFileUrl.  _jsonFileUrl support will be removed in 2.0");
this._ccUrl=this._jsonFileUrl;
this.url=this._jsonFileUrl;
}else{
if(this.url!==this._ccUrl){
this._jsonFileUrl=this.url;
this._ccUrl=this.url;
}
}
if(this.data!=null){
this._jsonData=this.data;
this.data=null;
}
if(this._jsonFileUrl){
if(this._loadInProgress){
this._queuedFetches.push({args:_9a,filter:_9e});
}else{
this._loadInProgress=true;
var _a8={url:_9d._jsonFileUrl,handleAs:"json-comment-optional",preventCache:this.urlPreventCache,failOk:this.failOk};
var _a9=dojo.xhrGet(_a8);
_a9.addCallback(function(_aa){
try{
_9d._getItemsFromLoadedData(_aa);
_9d._loadFinished=true;
_9d._loadInProgress=false;
_9e(_9a,_9d._getItemsArray(_9a.queryOptions));
_9d._handleQueuedFetches();
}
catch(e){
_9d._loadFinished=true;
_9d._loadInProgress=false;
_9c(e,_9a);
}
});
_a9.addErrback(function(_ab){
_9d._loadInProgress=false;
_9c(_ab,_9a);
});
var _ac=null;
if(_9a.abort){
_ac=_9a.abort;
}
_9a.abort=function(){
var df=_a9;
if(df&&df.fired===-1){
df.cancel();
df=null;
}
if(_ac){
_ac.call(_9a);
}
};
}
}else{
if(this._jsonData){
try{
this._loadFinished=true;
this._getItemsFromLoadedData(this._jsonData);
this._jsonData=null;
_9e(_9a,this._getItemsArray(_9a.queryOptions));
}
catch(e){
_9c(e,_9a);
}
}else{
_9c(new Error("dojo.data.ItemFileReadStore: No JSON source data was provided as either URL or a nested Javascript object."),_9a);
}
}
}
},_handleQueuedFetches:function(){
if(this._queuedFetches.length>0){
for(var i=0;i<this._queuedFetches.length;i++){
var _ad=this._queuedFetches[i],_ae=_ad.args,_af=_ad.filter;
if(_af){
_af(_ae,this._getItemsArray(_ae.queryOptions));
}else{
this.fetchItemByIdentity(_ae);
}
}
this._queuedFetches=[];
}
},_getItemsArray:function(_b0){
if(_b0&&_b0.deep){
return this._arrayOfAllItems;
}
return this._arrayOfTopLevelItems;
},close:function(_b1){
if(this.clearOnClose&&this._loadFinished&&!this._loadInProgress){
if(((this._jsonFileUrl==""||this._jsonFileUrl==null)&&(this.url==""||this.url==null))&&this.data==null){
console.debug("dojo.data.ItemFileReadStore: WARNING!  Data reload "+" information has not been provided."+"  Please set 'url' or 'data' to the appropriate value before"+" the next fetch");
}
this._arrayOfAllItems=[];
this._arrayOfTopLevelItems=[];
this._loadFinished=false;
this._itemsByIdentity=null;
this._loadInProgress=false;
this._queuedFetches=[];
}
},_getItemsFromLoadedData:function(_b2){
var _b3=false,_b4=this;
function _b5(_b6){
var _b7=((_b6!==null)&&(typeof _b6==="object")&&(!dojo.isArray(_b6)||_b3)&&(!dojo.isFunction(_b6))&&(_b6.constructor==Object||dojo.isArray(_b6))&&(typeof _b6._reference==="undefined")&&(typeof _b6._type==="undefined")&&(typeof _b6._value==="undefined")&&_b4.hierarchical);
return _b7;
};
function _b8(_b9){
_b4._arrayOfAllItems.push(_b9);
for(var _ba in _b9){
var _bb=_b9[_ba];
if(_bb){
if(dojo.isArray(_bb)){
var _bc=_bb;
for(var k=0;k<_bc.length;++k){
var _bd=_bc[k];
if(_b5(_bd)){
_b8(_bd);
}
}
}else{
if(_b5(_bb)){
_b8(_bb);
}
}
}
}
};
this._labelAttr=_b2.label;
var i,_be;
this._arrayOfAllItems=[];
this._arrayOfTopLevelItems=_b2.items;
for(i=0;i<this._arrayOfTopLevelItems.length;++i){
_be=this._arrayOfTopLevelItems[i];
if(dojo.isArray(_be)){
_b3=true;
}
_b8(_be);
_be[this._rootItemPropName]=true;
}
var _bf={},key;
for(i=0;i<this._arrayOfAllItems.length;++i){
_be=this._arrayOfAllItems[i];
for(key in _be){
if(key!==this._rootItemPropName){
var _c0=_be[key];
if(_c0!==null){
if(!dojo.isArray(_c0)){
_be[key]=[_c0];
}
}else{
_be[key]=[null];
}
}
_bf[key]=key;
}
}
while(_bf[this._storeRefPropName]){
this._storeRefPropName+="_";
}
while(_bf[this._itemNumPropName]){
this._itemNumPropName+="_";
}
while(_bf[this._reverseRefMap]){
this._reverseRefMap+="_";
}
var _c1;
var _c2=_b2.identifier;
if(_c2){
this._itemsByIdentity={};
this._features["dojo.data.api.Identity"]=_c2;
for(i=0;i<this._arrayOfAllItems.length;++i){
_be=this._arrayOfAllItems[i];
_c1=_be[_c2];
var _c3=_c1[0];
if(!Object.hasOwnProperty.call(this._itemsByIdentity,_c3)){
this._itemsByIdentity[_c3]=_be;
}else{
if(this._jsonFileUrl){
throw new Error("dojo.data.ItemFileReadStore:  The json data as specified by: ["+this._jsonFileUrl+"] is malformed.  Items within the list have identifier: ["+_c2+"].  Value collided: ["+_c3+"]");
}else{
if(this._jsonData){
throw new Error("dojo.data.ItemFileReadStore:  The json data provided by the creation arguments is malformed.  Items within the list have identifier: ["+_c2+"].  Value collided: ["+_c3+"]");
}
}
}
}
}else{
this._features["dojo.data.api.Identity"]=Number;
}
for(i=0;i<this._arrayOfAllItems.length;++i){
_be=this._arrayOfAllItems[i];
_be[this._storeRefPropName]=this;
_be[this._itemNumPropName]=i;
}
for(i=0;i<this._arrayOfAllItems.length;++i){
_be=this._arrayOfAllItems[i];
for(key in _be){
_c1=_be[key];
for(var j=0;j<_c1.length;++j){
_c0=_c1[j];
if(_c0!==null&&typeof _c0=="object"){
if(("_type" in _c0)&&("_value" in _c0)){
var _c4=_c0._type;
var _c5=this._datatypeMap[_c4];
if(!_c5){
throw new Error("dojo.data.ItemFileReadStore: in the typeMap constructor arg, no object class was specified for the datatype '"+_c4+"'");
}else{
if(dojo.isFunction(_c5)){
_c1[j]=new _c5(_c0._value);
}else{
if(dojo.isFunction(_c5.deserialize)){
_c1[j]=_c5.deserialize(_c0._value);
}else{
throw new Error("dojo.data.ItemFileReadStore: Value provided in typeMap was neither a constructor, nor a an object with a deserialize function");
}
}
}
}
if(_c0._reference){
var _c6=_c0._reference;
if(!dojo.isObject(_c6)){
_c1[j]=this._getItemByIdentity(_c6);
}else{
for(var k=0;k<this._arrayOfAllItems.length;++k){
var _c7=this._arrayOfAllItems[k],_c8=true;
for(var _c9 in _c6){
if(_c7[_c9]!=_c6[_c9]){
_c8=false;
}
}
if(_c8){
_c1[j]=_c7;
}
}
}
if(this.referenceIntegrity){
var _ca=_c1[j];
if(this.isItem(_ca)){
this._addReferenceToMap(_ca,_be,key);
}
}
}else{
if(this.isItem(_c0)){
if(this.referenceIntegrity){
this._addReferenceToMap(_c0,_be,key);
}
}
}
}
}
}
}
},_addReferenceToMap:function(_cb,_cc,_cd){
},getIdentity:function(_ce){
var _cf=this._features["dojo.data.api.Identity"];
if(_cf===Number){
return _ce[this._itemNumPropName];
}else{
var _d0=_ce[_cf];
if(_d0){
return _d0[0];
}
}
return null;
},fetchItemByIdentity:function(_d1){
var _d2,_d3;
if(!this._loadFinished){
var _d4=this;
if(this._jsonFileUrl!==this._ccUrl){
dojo.deprecated("dojo.data.ItemFileReadStore: ","To change the url, set the url property of the store,"+" not _jsonFileUrl.  _jsonFileUrl support will be removed in 2.0");
this._ccUrl=this._jsonFileUrl;
this.url=this._jsonFileUrl;
}else{
if(this.url!==this._ccUrl){
this._jsonFileUrl=this.url;
this._ccUrl=this.url;
}
}
if(this.data!=null&&this._jsonData==null){
this._jsonData=this.data;
this.data=null;
}
if(this._jsonFileUrl){
if(this._loadInProgress){
this._queuedFetches.push({args:_d1});
}else{
this._loadInProgress=true;
var _d5={url:_d4._jsonFileUrl,handleAs:"json-comment-optional",preventCache:this.urlPreventCache,failOk:this.failOk};
var _d6=dojo.xhrGet(_d5);
_d6.addCallback(function(_d7){
var _d8=_d1.scope?_d1.scope:dojo.global;
try{
_d4._getItemsFromLoadedData(_d7);
_d4._loadFinished=true;
_d4._loadInProgress=false;
_d2=_d4._getItemByIdentity(_d1.identity);
if(_d1.onItem){
_d1.onItem.call(_d8,_d2);
}
_d4._handleQueuedFetches();
}
catch(error){
_d4._loadInProgress=false;
if(_d1.onError){
_d1.onError.call(_d8,error);
}
}
});
_d6.addErrback(function(_d9){
_d4._loadInProgress=false;
if(_d1.onError){
var _da=_d1.scope?_d1.scope:dojo.global;
_d1.onError.call(_da,_d9);
}
});
}
}else{
if(this._jsonData){
_d4._getItemsFromLoadedData(_d4._jsonData);
_d4._jsonData=null;
_d4._loadFinished=true;
_d2=_d4._getItemByIdentity(_d1.identity);
if(_d1.onItem){
_d3=_d1.scope?_d1.scope:dojo.global;
_d1.onItem.call(_d3,_d2);
}
}
}
}else{
_d2=this._getItemByIdentity(_d1.identity);
if(_d1.onItem){
_d3=_d1.scope?_d1.scope:dojo.global;
_d1.onItem.call(_d3,_d2);
}
}
},_getItemByIdentity:function(_db){
var _dc=null;
if(this._itemsByIdentity&&Object.hasOwnProperty.call(this._itemsByIdentity,_db)){
_dc=this._itemsByIdentity[_db];
}else{
if(Object.hasOwnProperty.call(this._arrayOfAllItems,_db)){
_dc=this._arrayOfAllItems[_db];
}
}
if(_dc===undefined){
_dc=null;
}
return _dc;
},getIdentityAttributes:function(_dd){
var _de=this._features["dojo.data.api.Identity"];
if(_de===Number){
return null;
}else{
return [_de];
}
},_forceLoad:function(){
var _df=this;
if(this._jsonFileUrl!==this._ccUrl){
dojo.deprecated("dojo.data.ItemFileReadStore: ","To change the url, set the url property of the store,"+" not _jsonFileUrl.  _jsonFileUrl support will be removed in 2.0");
this._ccUrl=this._jsonFileUrl;
this.url=this._jsonFileUrl;
}else{
if(this.url!==this._ccUrl){
this._jsonFileUrl=this.url;
this._ccUrl=this.url;
}
}
if(this.data!=null){
this._jsonData=this.data;
this.data=null;
}
if(this._jsonFileUrl){
var _e0={url:this._jsonFileUrl,handleAs:"json-comment-optional",preventCache:this.urlPreventCache,failOk:this.failOk,sync:true};
var _e1=dojo.xhrGet(_e0);
_e1.addCallback(function(_e2){
try{
if(_df._loadInProgress!==true&&!_df._loadFinished){
_df._getItemsFromLoadedData(_e2);
_df._loadFinished=true;
}else{
if(_df._loadInProgress){
throw new Error("dojo.data.ItemFileReadStore:  Unable to perform a synchronous load, an async load is in progress.");
}
}
}
catch(e){
console.log(e);
throw e;
}
});
_e1.addErrback(function(_e3){
throw _e3;
});
}else{
if(this._jsonData){
_df._getItemsFromLoadedData(_df._jsonData);
_df._jsonData=null;
_df._loadFinished=true;
}
}
}});
dojo.extend(dojo.data.ItemFileReadStore,dojo.data.util.simpleFetch);
}
if(!dojo._hasResource["dojo.data.ItemFileWriteStore"]){
dojo._hasResource["dojo.data.ItemFileWriteStore"]=true;
dojo.provide("dojo.data.ItemFileWriteStore");
dojo.declare("dojo.data.ItemFileWriteStore",dojo.data.ItemFileReadStore,{constructor:function(_e4){
this._features["dojo.data.api.Write"]=true;
this._features["dojo.data.api.Notification"]=true;
this._pending={_newItems:{},_modifiedItems:{},_deletedItems:{}};
if(!this._datatypeMap["Date"].serialize){
this._datatypeMap["Date"].serialize=function(obj){
return dojo.date.stamp.toISOString(obj,{zulu:true});
};
}
if(_e4&&(_e4.referenceIntegrity===false)){
this.referenceIntegrity=false;
}
this._saveInProgress=false;
},referenceIntegrity:true,_assert:function(_e5){
if(!_e5){
throw new Error("assertion failed in ItemFileWriteStore");
}
},_getIdentifierAttribute:function(){
var _e6=this.getFeatures()["dojo.data.api.Identity"];
return _e6;
},newItem:function(_e7,_e8){
this._assert(!this._saveInProgress);
if(!this._loadFinished){
this._forceLoad();
}
if(typeof _e7!="object"&&typeof _e7!="undefined"){
throw new Error("newItem() was passed something other than an object");
}
var _e9=null;
var _ea=this._getIdentifierAttribute();
if(_ea===Number){
_e9=this._arrayOfAllItems.length;
}else{
_e9=_e7[_ea];
if(typeof _e9==="undefined"){
throw new Error("newItem() was not passed an identity for the new item");
}
if(dojo.isArray(_e9)){
throw new Error("newItem() was not passed an single-valued identity");
}
}
if(this._itemsByIdentity){
this._assert(typeof this._itemsByIdentity[_e9]==="undefined");
}
this._assert(typeof this._pending._newItems[_e9]==="undefined");
this._assert(typeof this._pending._deletedItems[_e9]==="undefined");
var _eb={};
_eb[this._storeRefPropName]=this;
_eb[this._itemNumPropName]=this._arrayOfAllItems.length;
if(this._itemsByIdentity){
this._itemsByIdentity[_e9]=_eb;
_eb[_ea]=[_e9];
}
this._arrayOfAllItems.push(_eb);
var _ec=null;
if(_e8&&_e8.parent&&_e8.attribute){
_ec={item:_e8.parent,attribute:_e8.attribute,oldValue:undefined};
var _ed=this.getValues(_e8.parent,_e8.attribute);
if(_ed&&_ed.length>0){
var _ee=_ed.slice(0,_ed.length);
if(_ed.length===1){
_ec.oldValue=_ed[0];
}else{
_ec.oldValue=_ed.slice(0,_ed.length);
}
_ee.push(_eb);
this._setValueOrValues(_e8.parent,_e8.attribute,_ee,false);
_ec.newValue=this.getValues(_e8.parent,_e8.attribute);
}else{
this._setValueOrValues(_e8.parent,_e8.attribute,_eb,false);
_ec.newValue=_eb;
}
}else{
_eb[this._rootItemPropName]=true;
this._arrayOfTopLevelItems.push(_eb);
}
this._pending._newItems[_e9]=_eb;
for(var key in _e7){
if(key===this._storeRefPropName||key===this._itemNumPropName){
throw new Error("encountered bug in ItemFileWriteStore.newItem");
}
var _ef=_e7[key];
if(!dojo.isArray(_ef)){
_ef=[_ef];
}
_eb[key]=_ef;
if(this.referenceIntegrity){
for(var i=0;i<_ef.length;i++){
var val=_ef[i];
if(this.isItem(val)){
this._addReferenceToMap(val,_eb,key);
}
}
}
}
this.onNew(_eb,_ec);
return _eb;
},_removeArrayElement:function(_f0,_f1){
var _f2=dojo.indexOf(_f0,_f1);
if(_f2!=-1){
_f0.splice(_f2,1);
return true;
}
return false;
},deleteItem:function(_f3){
this._assert(!this._saveInProgress);
this._assertIsItem(_f3);
var _f4=_f3[this._itemNumPropName];
var _f5=this.getIdentity(_f3);
if(this.referenceIntegrity){
var _f6=this.getAttributes(_f3);
if(_f3[this._reverseRefMap]){
_f3["backup_"+this._reverseRefMap]=dojo.clone(_f3[this._reverseRefMap]);
}
dojo.forEach(_f6,function(_f7){
dojo.forEach(this.getValues(_f3,_f7),function(_f8){
if(this.isItem(_f8)){
if(!_f3["backupRefs_"+this._reverseRefMap]){
_f3["backupRefs_"+this._reverseRefMap]=[];
}
_f3["backupRefs_"+this._reverseRefMap].push({id:this.getIdentity(_f8),attr:_f7});
this._removeReferenceFromMap(_f8,_f3,_f7);
}
},this);
},this);
var _f9=_f3[this._reverseRefMap];
if(_f9){
for(var _fa in _f9){
var _fb=null;
if(this._itemsByIdentity){
_fb=this._itemsByIdentity[_fa];
}else{
_fb=this._arrayOfAllItems[_fa];
}
if(_fb){
for(var _fc in _f9[_fa]){
var _fd=this.getValues(_fb,_fc)||[];
var _fe=dojo.filter(_fd,function(_ff){
return !(this.isItem(_ff)&&this.getIdentity(_ff)==_f5);
},this);
this._removeReferenceFromMap(_f3,_fb,_fc);
if(_fe.length<_fd.length){
this._setValueOrValues(_fb,_fc,_fe,true);
}
}
}
}
}
}
this._arrayOfAllItems[_f4]=null;
_f3[this._storeRefPropName]=null;
if(this._itemsByIdentity){
delete this._itemsByIdentity[_f5];
}
this._pending._deletedItems[_f5]=_f3;
if(_f3[this._rootItemPropName]){
this._removeArrayElement(this._arrayOfTopLevelItems,_f3);
}
this.onDelete(_f3);
return true;
},setValue:function(item,_100,_101){
return this._setValueOrValues(item,_100,_101,true);
},setValues:function(item,_102,_103){
return this._setValueOrValues(item,_102,_103,true);
},unsetAttribute:function(item,_104){
return this._setValueOrValues(item,_104,[],true);
},_setValueOrValues:function(item,_105,_106,_107){
this._assert(!this._saveInProgress);
this._assertIsItem(item);
this._assert(dojo.isString(_105));
this._assert(typeof _106!=="undefined");
var _108=this._getIdentifierAttribute();
if(_105==_108){
throw new Error("ItemFileWriteStore does not have support for changing the value of an item's identifier.");
}
var _109=this._getValueOrValues(item,_105);
var _10a=this.getIdentity(item);
if(!this._pending._modifiedItems[_10a]){
var _10b={};
for(var key in item){
if((key===this._storeRefPropName)||(key===this._itemNumPropName)||(key===this._rootItemPropName)){
_10b[key]=item[key];
}else{
if(key===this._reverseRefMap){
_10b[key]=dojo.clone(item[key]);
}else{
_10b[key]=item[key].slice(0,item[key].length);
}
}
}
this._pending._modifiedItems[_10a]=_10b;
}
var _10c=false;
if(dojo.isArray(_106)&&_106.length===0){
_10c=delete item[_105];
_106=undefined;
if(this.referenceIntegrity&&_109){
var _10d=_109;
if(!dojo.isArray(_10d)){
_10d=[_10d];
}
for(var i=0;i<_10d.length;i++){
var _10e=_10d[i];
if(this.isItem(_10e)){
this._removeReferenceFromMap(_10e,item,_105);
}
}
}
}else{
var _10f;
if(dojo.isArray(_106)){
var _110=_106;
_10f=_106.slice(0,_106.length);
}else{
_10f=[_106];
}
if(this.referenceIntegrity){
if(_109){
var _10d=_109;
if(!dojo.isArray(_10d)){
_10d=[_10d];
}
var map={};
dojo.forEach(_10d,function(_111){
if(this.isItem(_111)){
var id=this.getIdentity(_111);
map[id.toString()]=true;
}
},this);
dojo.forEach(_10f,function(_112){
if(this.isItem(_112)){
var id=this.getIdentity(_112);
if(map[id.toString()]){
delete map[id.toString()];
}else{
this._addReferenceToMap(_112,item,_105);
}
}
},this);
for(var rId in map){
var _113;
if(this._itemsByIdentity){
_113=this._itemsByIdentity[rId];
}else{
_113=this._arrayOfAllItems[rId];
}
this._removeReferenceFromMap(_113,item,_105);
}
}else{
for(var i=0;i<_10f.length;i++){
var _10e=_10f[i];
if(this.isItem(_10e)){
this._addReferenceToMap(_10e,item,_105);
}
}
}
}
item[_105]=_10f;
_10c=true;
}
if(_107){
this.onSet(item,_105,_109,_106);
}
return _10c;
},_addReferenceToMap:function(_114,_115,_116){
var _117=this.getIdentity(_115);
var _118=_114[this._reverseRefMap];
if(!_118){
_118=_114[this._reverseRefMap]={};
}
var _119=_118[_117];
if(!_119){
_119=_118[_117]={};
}
_119[_116]=true;
},_removeReferenceFromMap:function(_11a,_11b,_11c){
var _11d=this.getIdentity(_11b);
var _11e=_11a[this._reverseRefMap];
var _11f;
if(_11e){
for(_11f in _11e){
if(_11f==_11d){
delete _11e[_11f][_11c];
if(this._isEmpty(_11e[_11f])){
delete _11e[_11f];
}
}
}
if(this._isEmpty(_11e)){
delete _11a[this._reverseRefMap];
}
}
},_dumpReferenceMap:function(){
var i;
for(i=0;i<this._arrayOfAllItems.length;i++){
var item=this._arrayOfAllItems[i];
if(item&&item[this._reverseRefMap]){
console.log("Item: ["+this.getIdentity(item)+"] is referenced by: "+dojo.toJson(item[this._reverseRefMap]));
}
}
},_getValueOrValues:function(item,_120){
var _121=undefined;
if(this.hasAttribute(item,_120)){
var _122=this.getValues(item,_120);
if(_122.length==1){
_121=_122[0];
}else{
_121=_122;
}
}
return _121;
},_flatten:function(_123){
if(this.isItem(_123)){
var item=_123;
var _124=this.getIdentity(item);
var _125={_reference:_124};
return _125;
}else{
if(typeof _123==="object"){
for(var type in this._datatypeMap){
var _126=this._datatypeMap[type];
if(dojo.isObject(_126)&&!dojo.isFunction(_126)){
if(_123 instanceof _126.type){
if(!_126.serialize){
throw new Error("ItemFileWriteStore:  No serializer defined for type mapping: ["+type+"]");
}
return {_type:type,_value:_126.serialize(_123)};
}
}else{
if(_123 instanceof _126){
return {_type:type,_value:_123.toString()};
}
}
}
}
return _123;
}
},_getNewFileContentString:function(){
var _127={};
var _128=this._getIdentifierAttribute();
if(_128!==Number){
_127.identifier=_128;
}
if(this._labelAttr){
_127.label=this._labelAttr;
}
_127.items=[];
for(var i=0;i<this._arrayOfAllItems.length;++i){
var item=this._arrayOfAllItems[i];
if(item!==null){
var _129={};
for(var key in item){
if(key!==this._storeRefPropName&&key!==this._itemNumPropName&&key!==this._reverseRefMap&&key!==this._rootItemPropName){
var _12a=key;
var _12b=this.getValues(item,_12a);
if(_12b.length==1){
_129[_12a]=this._flatten(_12b[0]);
}else{
var _12c=[];
for(var j=0;j<_12b.length;++j){
_12c.push(this._flatten(_12b[j]));
_129[_12a]=_12c;
}
}
}
}
_127.items.push(_129);
}
}
var _12d=true;
return dojo.toJson(_127,_12d);
},_isEmpty:function(_12e){
var _12f=true;
if(dojo.isObject(_12e)){
var i;
for(i in _12e){
_12f=false;
break;
}
}else{
if(dojo.isArray(_12e)){
if(_12e.length>0){
_12f=false;
}
}
}
return _12f;
},save:function(_130){
this._assert(!this._saveInProgress);
this._saveInProgress=true;
var self=this;
var _131=function(){
self._pending={_newItems:{},_modifiedItems:{},_deletedItems:{}};
self._saveInProgress=false;
if(_130&&_130.onComplete){
var _132=_130.scope||dojo.global;
_130.onComplete.call(_132);
}
};
var _133=function(err){
self._saveInProgress=false;
if(_130&&_130.onError){
var _134=_130.scope||dojo.global;
_130.onError.call(_134,err);
}
};
if(this._saveEverything){
var _135=this._getNewFileContentString();
this._saveEverything(_131,_133,_135);
}
if(this._saveCustom){
this._saveCustom(_131,_133);
}
if(!this._saveEverything&&!this._saveCustom){
_131();
}
},revert:function(){
this._assert(!this._saveInProgress);
var _136;
for(_136 in this._pending._modifiedItems){
var _137=this._pending._modifiedItems[_136];
var _138=null;
if(this._itemsByIdentity){
_138=this._itemsByIdentity[_136];
}else{
_138=this._arrayOfAllItems[_136];
}
_137[this._storeRefPropName]=this;
for(key in _138){
delete _138[key];
}
dojo.mixin(_138,_137);
}
var _139;
for(_136 in this._pending._deletedItems){
_139=this._pending._deletedItems[_136];
_139[this._storeRefPropName]=this;
var _13a=_139[this._itemNumPropName];
if(_139["backup_"+this._reverseRefMap]){
_139[this._reverseRefMap]=_139["backup_"+this._reverseRefMap];
delete _139["backup_"+this._reverseRefMap];
}
this._arrayOfAllItems[_13a]=_139;
if(this._itemsByIdentity){
this._itemsByIdentity[_136]=_139;
}
if(_139[this._rootItemPropName]){
this._arrayOfTopLevelItems.push(_139);
}
}
for(_136 in this._pending._deletedItems){
_139=this._pending._deletedItems[_136];
if(_139["backupRefs_"+this._reverseRefMap]){
dojo.forEach(_139["backupRefs_"+this._reverseRefMap],function(_13b){
var _13c;
if(this._itemsByIdentity){
_13c=this._itemsByIdentity[_13b.id];
}else{
_13c=this._arrayOfAllItems[_13b.id];
}
this._addReferenceToMap(_13c,_139,_13b.attr);
},this);
delete _139["backupRefs_"+this._reverseRefMap];
}
}
for(_136 in this._pending._newItems){
var _13d=this._pending._newItems[_136];
_13d[this._storeRefPropName]=null;
this._arrayOfAllItems[_13d[this._itemNumPropName]]=null;
if(_13d[this._rootItemPropName]){
this._removeArrayElement(this._arrayOfTopLevelItems,_13d);
}
if(this._itemsByIdentity){
delete this._itemsByIdentity[_136];
}
}
this._pending={_newItems:{},_modifiedItems:{},_deletedItems:{}};
return true;
},isDirty:function(item){
if(item){
var _13e=this.getIdentity(item);
return new Boolean(this._pending._newItems[_13e]||this._pending._modifiedItems[_13e]||this._pending._deletedItems[_13e]).valueOf();
}else{
if(!this._isEmpty(this._pending._newItems)||!this._isEmpty(this._pending._modifiedItems)||!this._isEmpty(this._pending._deletedItems)){
return true;
}
return false;
}
},onSet:function(item,_13f,_140,_141){
},onNew:function(_142,_143){
},onDelete:function(_144){
},close:function(_145){
if(this.clearOnClose){
if(!this.isDirty()){
this.inherited(arguments);
}else{
throw new Error("dojo.data.ItemFileWriteStore: There are unsaved changes present in the store.  Please save or revert the changes before invoking close.");
}
}
}});
}
if(!dojo._hasResource["dojo.dnd.common"]){
dojo._hasResource["dojo.dnd.common"]=true;
dojo.provide("dojo.dnd.common");
dojo.getObject("dnd",true,dojo);
dojo.dnd.getCopyKeyState=dojo.isCopyKey;
dojo.dnd._uniqueId=0;
dojo.dnd.getUniqueId=function(){
var id;
do{
id=dojo._scopeName+"Unique"+(++dojo.dnd._uniqueId);
}while(dojo.byId(id));
return id;
};
dojo.dnd._empty={};
dojo.dnd.isFormElement=function(e){
var t=e.target;
if(t.nodeType==3){
t=t.parentNode;
}
return " button textarea input select option ".indexOf(" "+t.tagName.toLowerCase()+" ")>=0;
};
}
if(!dojo._hasResource["dojo.window"]){
dojo._hasResource["dojo.window"]=true;
dojo.provide("dojo.window");
dojo.getObject("window",true,dojo);
dojo.window.getBox=function(){
var _146=(dojo.doc.compatMode=="BackCompat")?dojo.body():dojo.doc.documentElement;
var _147=dojo._docScroll();
return {w:_146.clientWidth,h:_146.clientHeight,l:_147.x,t:_147.y};
};
dojo.window.get=function(doc){
if(dojo.isIE&&window!==document.parentWindow){
doc.parentWindow.execScript("document._parentWindow = window;","Javascript");
var win=doc._parentWindow;
doc._parentWindow=null;
return win;
}
return doc.parentWindow||doc.defaultView;
};
dojo.window.scrollIntoView=function(node,pos){
try{
node=dojo.byId(node);
var doc=node.ownerDocument||dojo.doc,body=doc.body||dojo.body(),html=doc.documentElement||body.parentNode,isIE=dojo.isIE,isWK=dojo.isWebKit;
if((!(dojo.isMoz||isIE||isWK||dojo.isOpera)||node==body||node==html)&&(typeof node.scrollIntoView!="undefined")){
node.scrollIntoView(false);
return;
}
var _148=doc.compatMode=="BackCompat",_149=(isIE>=9&&node.ownerDocument.parentWindow.frameElement)?((html.clientHeight>0&&html.clientWidth>0&&(body.clientHeight==0||body.clientWidth==0||body.clientHeight>html.clientHeight||body.clientWidth>html.clientWidth))?html:body):(_148?body:html),_14a=isWK?body:_149,_14b=_149.clientWidth,_14c=_149.clientHeight,rtl=!dojo._isBodyLtr(),_14d=pos||dojo.position(node),el=node.parentNode,_14e=function(el){
return ((isIE<=6||(isIE&&_148))?false:(dojo.style(el,"position").toLowerCase()=="fixed"));
};
if(_14e(node)){
return;
}
while(el){
if(el==body){
el=_14a;
}
var _14f=dojo.position(el),_150=_14e(el);
if(el==_14a){
_14f.w=_14b;
_14f.h=_14c;
if(_14a==html&&isIE&&rtl){
_14f.x+=_14a.offsetWidth-_14f.w;
}
if(_14f.x<0||!isIE){
_14f.x=0;
}
if(_14f.y<0||!isIE){
_14f.y=0;
}
}else{
var pb=dojo._getPadBorderExtents(el);
_14f.w-=pb.w;
_14f.h-=pb.h;
_14f.x+=pb.l;
_14f.y+=pb.t;
var _151=el.clientWidth,_152=_14f.w-_151;
if(_151>0&&_152>0){
_14f.w=_151;
_14f.x+=(rtl&&(isIE||el.clientLeft>pb.l))?_152:0;
}
_151=el.clientHeight;
_152=_14f.h-_151;
if(_151>0&&_152>0){
_14f.h=_151;
}
}
if(_150){
if(_14f.y<0){
_14f.h+=_14f.y;
_14f.y=0;
}
if(_14f.x<0){
_14f.w+=_14f.x;
_14f.x=0;
}
if(_14f.y+_14f.h>_14c){
_14f.h=_14c-_14f.y;
}
if(_14f.x+_14f.w>_14b){
_14f.w=_14b-_14f.x;
}
}
var l=_14d.x-_14f.x,t=_14d.y-Math.max(_14f.y,0),r=l+_14d.w-_14f.w,bot=t+_14d.h-_14f.h;
if(r*l>0){
var s=Math[l<0?"max":"min"](l,r);
if(rtl&&((isIE==8&&!_148)||isIE>=9)){
s=-s;
}
_14d.x+=el.scrollLeft;
el.scrollLeft+=s;
_14d.x-=el.scrollLeft;
}
if(bot*t>0){
_14d.y+=el.scrollTop;
el.scrollTop+=Math[t<0?"max":"min"](t,bot);
_14d.y-=el.scrollTop;
}
el=(el!=_14a)&&!_150&&el.parentNode;
}
}
catch(error){
console.error("scrollIntoView: "+error);
node.scrollIntoView(false);
}
};
}
if(!dojo._hasResource["dojo.dnd.autoscroll"]){
dojo._hasResource["dojo.dnd.autoscroll"]=true;
dojo.provide("dojo.dnd.autoscroll");
dojo.getObject("dnd",true,dojo);
dojo.dnd.getViewport=dojo.window.getBox;
dojo.dnd.V_TRIGGER_AUTOSCROLL=32;
dojo.dnd.H_TRIGGER_AUTOSCROLL=32;
dojo.dnd.V_AUTOSCROLL_VALUE=16;
dojo.dnd.H_AUTOSCROLL_VALUE=16;
dojo.dnd.autoScroll=function(e){
var v=dojo.window.getBox(),dx=0,dy=0;
if(e.clientX<dojo.dnd.H_TRIGGER_AUTOSCROLL){
dx=-dojo.dnd.H_AUTOSCROLL_VALUE;
}else{
if(e.clientX>v.w-dojo.dnd.H_TRIGGER_AUTOSCROLL){
dx=dojo.dnd.H_AUTOSCROLL_VALUE;
}
}
if(e.clientY<dojo.dnd.V_TRIGGER_AUTOSCROLL){
dy=-dojo.dnd.V_AUTOSCROLL_VALUE;
}else{
if(e.clientY>v.h-dojo.dnd.V_TRIGGER_AUTOSCROLL){
dy=dojo.dnd.V_AUTOSCROLL_VALUE;
}
}
window.scrollBy(dx,dy);
};
dojo.dnd._validNodes={"div":1,"p":1,"td":1};
dojo.dnd._validOverflow={"auto":1,"scroll":1};
dojo.dnd.autoScrollNodes=function(e){
for(var n=e.target;n;){
if(n.nodeType==1&&(n.tagName.toLowerCase() in dojo.dnd._validNodes)){
var s=dojo.getComputedStyle(n);
if(s.overflow.toLowerCase() in dojo.dnd._validOverflow){
var b=dojo._getContentBox(n,s),t=dojo.position(n,true);
var w=Math.min(dojo.dnd.H_TRIGGER_AUTOSCROLL,b.w/2),h=Math.min(dojo.dnd.V_TRIGGER_AUTOSCROLL,b.h/2),rx=e.pageX-t.x,ry=e.pageY-t.y,dx=0,dy=0;
if(dojo.isWebKit||dojo.isOpera){
rx+=dojo.body().scrollLeft;
ry+=dojo.body().scrollTop;
}
if(rx>0&&rx<b.w){
if(rx<w){
dx=-w;
}else{
if(rx>b.w-w){
dx=w;
}
}
}
if(ry>0&&ry<b.h){
if(ry<h){
dy=-h;
}else{
if(ry>b.h-h){
dy=h;
}
}
}
var _153=n.scrollLeft,_154=n.scrollTop;
n.scrollLeft=n.scrollLeft+dx;
n.scrollTop=n.scrollTop+dy;
if(_153!=n.scrollLeft||_154!=n.scrollTop){
return;
}
}
}
try{
n=n.parentNode;
}
catch(x){
n=null;
}
}
dojo.dnd.autoScroll(e);
};
}
if(!dojo._hasResource["dojo.dnd.Mover"]){
dojo._hasResource["dojo.dnd.Mover"]=true;
dojo.provide("dojo.dnd.Mover");
dojo.declare("dojo.dnd.Mover",null,{constructor:function(node,e,host){
this.node=dojo.byId(node);
var pos=e.touches?e.touches[0]:e;
this.marginBox={l:pos.pageX,t:pos.pageY};
this.mouseButton=e.button;
var h=(this.host=host),d=node.ownerDocument;
this.events=[dojo.connect(d,"onmousemove",this,"onFirstMove"),dojo.connect(d,"ontouchmove",this,"onFirstMove"),dojo.connect(d,"onmousemove",this,"onMouseMove"),dojo.connect(d,"ontouchmove",this,"onMouseMove"),dojo.connect(d,"onmouseup",this,"onMouseUp"),dojo.connect(d,"ontouchend",this,"onMouseUp"),dojo.connect(d,"ondragstart",dojo.stopEvent),dojo.connect(d.body,"onselectstart",dojo.stopEvent)];
if(h&&h.onMoveStart){
h.onMoveStart(this);
}
},onMouseMove:function(e){
dojo.dnd.autoScroll(e);
var m=this.marginBox,pos=e.touches?e.touches[0]:e;
this.host.onMove(this,{l:m.l+pos.pageX,t:m.t+pos.pageY},e);
dojo.stopEvent(e);
},onMouseUp:function(e){
if(dojo.isWebKit&&dojo.isMac&&this.mouseButton==2?e.button==0:this.mouseButton==e.button){
this.destroy();
}
dojo.stopEvent(e);
},onFirstMove:function(e){
var s=this.node.style,l,t,h=this.host;
switch(s.position){
case "relative":
case "absolute":
l=Math.round(parseFloat(s.left))||0;
t=Math.round(parseFloat(s.top))||0;
break;
default:
s.position="absolute";
var m=dojo.marginBox(this.node);
var b=dojo.doc.body;
var bs=dojo.getComputedStyle(b);
var bm=dojo._getMarginBox(b,bs);
var bc=dojo._getContentBox(b,bs);
l=m.l-(bc.l-bm.l);
t=m.t-(bc.t-bm.t);
break;
}
this.marginBox.l=l-this.marginBox.l;
this.marginBox.t=t-this.marginBox.t;
if(h&&h.onFirstMove){
h.onFirstMove(this,e);
}
dojo.disconnect(this.events.shift());
dojo.disconnect(this.events.shift());
},destroy:function(){
dojo.forEach(this.events,dojo.disconnect);
var h=this.host;
if(h&&h.onMoveStop){
h.onMoveStop(this);
}
this.events=this.node=this.host=null;
}});
}
if(!dojo._hasResource["dojo.dnd.Moveable"]){
dojo._hasResource["dojo.dnd.Moveable"]=true;
dojo.provide("dojo.dnd.Moveable");
dojo.declare("dojo.dnd.Moveable",null,{handle:"",delay:0,skip:false,constructor:function(node,_155){
this.node=dojo.byId(node);
if(!_155){
_155={};
}
this.handle=_155.handle?dojo.byId(_155.handle):null;
if(!this.handle){
this.handle=this.node;
}
this.delay=_155.delay>0?_155.delay:0;
this.skip=_155.skip;
this.mover=_155.mover?_155.mover:dojo.dnd.Mover;
this.events=[dojo.connect(this.handle,"onmousedown",this,"onMouseDown"),dojo.connect(this.handle,"ontouchstart",this,"onMouseDown"),dojo.connect(this.handle,"ondragstart",this,"onSelectStart"),dojo.connect(this.handle,"onselectstart",this,"onSelectStart")];
},markupFactory:function(_156,node){
return new dojo.dnd.Moveable(node,_156);
},destroy:function(){
dojo.forEach(this.events,dojo.disconnect);
this.events=this.node=this.handle=null;
},onMouseDown:function(e){
if(this.skip&&dojo.dnd.isFormElement(e)){
return;
}
if(this.delay){
this.events.push(dojo.connect(this.handle,"onmousemove",this,"onMouseMove"),dojo.connect(this.handle,"ontouchmove",this,"onMouseMove"),dojo.connect(this.handle,"onmouseup",this,"onMouseUp"),dojo.connect(this.handle,"ontouchend",this,"onMouseUp"));
var pos=e.touches?e.touches[0]:e;
this._lastX=pos.pageX;
this._lastY=pos.pageY;
}else{
this.onDragDetected(e);
}
dojo.stopEvent(e);
},onMouseMove:function(e){
var pos=e.touches?e.touches[0]:e;
if(Math.abs(pos.pageX-this._lastX)>this.delay||Math.abs(pos.pageY-this._lastY)>this.delay){
this.onMouseUp(e);
this.onDragDetected(e);
}
dojo.stopEvent(e);
},onMouseUp:function(e){
for(var i=0;i<2;++i){
dojo.disconnect(this.events.pop());
}
dojo.stopEvent(e);
},onSelectStart:function(e){
if(!this.skip||!dojo.dnd.isFormElement(e)){
dojo.stopEvent(e);
}
},onDragDetected:function(e){
new this.mover(this.node,e,this);
},onMoveStart:function(_157){
dojo.publish("/dnd/move/start",[_157]);
dojo.addClass(dojo.body(),"dojoMove");
dojo.addClass(this.node,"dojoMoveItem");
},onMoveStop:function(_158){
dojo.publish("/dnd/move/stop",[_158]);
dojo.removeClass(dojo.body(),"dojoMove");
dojo.removeClass(this.node,"dojoMoveItem");
},onFirstMove:function(_159,e){
},onMove:function(_15a,_15b,e){
this.onMoving(_15a,_15b);
var s=_15a.node.style;
s.left=_15b.l+"px";
s.top=_15b.t+"px";
this.onMoved(_15a,_15b);
},onMoving:function(_15c,_15d){
},onMoved:function(_15e,_15f){
}});
}
if(!dojo._hasResource["dojo.dnd.move"]){
dojo._hasResource["dojo.dnd.move"]=true;
dojo.provide("dojo.dnd.move");
dojo.declare("dojo.dnd.move.constrainedMoveable",dojo.dnd.Moveable,{constraints:function(){
},within:false,markupFactory:function(_160,node){
return new dojo.dnd.move.constrainedMoveable(node,_160);
},constructor:function(node,_161){
if(!_161){
_161={};
}
this.constraints=_161.constraints;
this.within=_161.within;
},onFirstMove:function(_162){
var c=this.constraintBox=this.constraints.call(this,_162);
c.r=c.l+c.w;
c.b=c.t+c.h;
if(this.within){
var mb=dojo._getMarginSize(_162.node);
c.r-=mb.w;
c.b-=mb.h;
}
},onMove:function(_163,_164){
var c=this.constraintBox,s=_163.node.style;
this.onMoving(_163,_164);
_164.l=_164.l<c.l?c.l:c.r<_164.l?c.r:_164.l;
_164.t=_164.t<c.t?c.t:c.b<_164.t?c.b:_164.t;
s.left=_164.l+"px";
s.top=_164.t+"px";
this.onMoved(_163,_164);
}});
dojo.declare("dojo.dnd.move.boxConstrainedMoveable",dojo.dnd.move.constrainedMoveable,{box:{},markupFactory:function(_165,node){
return new dojo.dnd.move.boxConstrainedMoveable(node,_165);
},constructor:function(node,_166){
var box=_166&&_166.box;
this.constraints=function(){
return box;
};
}});
dojo.declare("dojo.dnd.move.parentConstrainedMoveable",dojo.dnd.move.constrainedMoveable,{area:"content",markupFactory:function(_167,node){
return new dojo.dnd.move.parentConstrainedMoveable(node,_167);
},constructor:function(node,_168){
var area=_168&&_168.area;
this.constraints=function(){
var n=this.node.parentNode,s=dojo.getComputedStyle(n),mb=dojo._getMarginBox(n,s);
if(area=="margin"){
return mb;
}
var t=dojo._getMarginExtents(n,s);
mb.l+=t.l,mb.t+=t.t,mb.w-=t.w,mb.h-=t.h;
if(area=="border"){
return mb;
}
t=dojo._getBorderExtents(n,s);
mb.l+=t.l,mb.t+=t.t,mb.w-=t.w,mb.h-=t.h;
if(area=="padding"){
return mb;
}
t=dojo._getPadExtents(n,s);
mb.l+=t.l,mb.t+=t.t,mb.w-=t.w,mb.h-=t.h;
return mb;
};
}});
dojo.dnd.constrainedMover=dojo.dnd.move.constrainedMover;
dojo.dnd.boxConstrainedMover=dojo.dnd.move.boxConstrainedMover;
dojo.dnd.parentConstrainedMover=dojo.dnd.move.parentConstrainedMover;
}
if(!dojo._hasResource["dojo.dnd.Container"]){
dojo._hasResource["dojo.dnd.Container"]=true;
dojo.provide("dojo.dnd.Container");
dojo.declare("dojo.dnd.Container",null,{skipForm:false,constructor:function(node,_169){
this.node=dojo.byId(node);
if(!_169){
_169={};
}
this.creator=_169.creator||null;
this.skipForm=_169.skipForm;
this.parent=_169.dropParent&&dojo.byId(_169.dropParent);
this.map={};
this.current=null;
this.containerState="";
dojo.addClass(this.node,"dojoDndContainer");
if(!(_169&&_169._skipStartup)){
this.startup();
}
this.events=[dojo.connect(this.node,"onmouseover",this,"onMouseOver"),dojo.connect(this.node,"onmouseout",this,"onMouseOut"),dojo.connect(this.node,"ondragstart",this,"onSelectStart"),dojo.connect(this.node,"onselectstart",this,"onSelectStart")];
},creator:function(){
},getItem:function(key){
return this.map[key];
},setItem:function(key,data){
this.map[key]=data;
},delItem:function(key){
delete this.map[key];
},forInItems:function(f,o){
o=o||dojo.global;
var m=this.map,e=dojo.dnd._empty;
for(var i in m){
if(i in e){
continue;
}
f.call(o,m[i],i,this);
}
return o;
},clearItems:function(){
this.map={};
},getAllNodes:function(){
return dojo.query("> .dojoDndItem",this.parent);
},sync:function(){
var map={};
this.getAllNodes().forEach(function(node){
if(node.id){
var item=this.getItem(node.id);
if(item){
map[node.id]=item;
return;
}
}else{
node.id=dojo.dnd.getUniqueId();
}
var type=node.getAttribute("dndType"),data=node.getAttribute("dndData");
map[node.id]={data:data||node.innerHTML,type:type?type.split(/\s*,\s*/):["text"]};
},this);
this.map=map;
return this;
},insertNodes:function(data,_16a,_16b){
if(!this.parent.firstChild){
_16b=null;
}else{
if(_16a){
if(!_16b){
_16b=this.parent.firstChild;
}
}else{
if(_16b){
_16b=_16b.nextSibling;
}
}
}
if(_16b){
for(var i=0;i<data.length;++i){
var t=this._normalizedCreator(data[i]);
this.setItem(t.node.id,{data:t.data,type:t.type});
this.parent.insertBefore(t.node,_16b);
}
}else{
for(var i=0;i<data.length;++i){
var t=this._normalizedCreator(data[i]);
this.setItem(t.node.id,{data:t.data,type:t.type});
this.parent.appendChild(t.node);
}
}
return this;
},destroy:function(){
dojo.forEach(this.events,dojo.disconnect);
this.clearItems();
this.node=this.parent=this.current=null;
},markupFactory:function(_16c,node){
_16c._skipStartup=true;
return new dojo.dnd.Container(node,_16c);
},startup:function(){
if(!this.parent){
this.parent=this.node;
if(this.parent.tagName.toLowerCase()=="table"){
var c=this.parent.getElementsByTagName("tbody");
if(c&&c.length){
this.parent=c[0];
}
}
}
this.defaultCreator=dojo.dnd._defaultCreator(this.parent);
this.sync();
},onMouseOver:function(e){
var n=e.relatedTarget;
while(n){
if(n==this.node){
break;
}
try{
n=n.parentNode;
}
catch(x){
n=null;
}
}
if(!n){
this._changeState("Container","Over");
this.onOverEvent();
}
n=this._getChildByEvent(e);
if(this.current==n){
return;
}
if(this.current){
this._removeItemClass(this.current,"Over");
}
if(n){
this._addItemClass(n,"Over");
}
this.current=n;
},onMouseOut:function(e){
for(var n=e.relatedTarget;n;){
if(n==this.node){
return;
}
try{
n=n.parentNode;
}
catch(x){
n=null;
}
}
if(this.current){
this._removeItemClass(this.current,"Over");
this.current=null;
}
this._changeState("Container","");
this.onOutEvent();
},onSelectStart:function(e){
if(!this.skipForm||!dojo.dnd.isFormElement(e)){
dojo.stopEvent(e);
}
},onOverEvent:function(){
},onOutEvent:function(){
},_changeState:function(type,_16d){
var _16e="dojoDnd"+type;
var _16f=type.toLowerCase()+"State";
dojo.replaceClass(this.node,_16e+_16d,_16e+this[_16f]);
this[_16f]=_16d;
},_addItemClass:function(node,type){
dojo.addClass(node,"dojoDndItem"+type);
},_removeItemClass:function(node,type){
dojo.removeClass(node,"dojoDndItem"+type);
},_getChildByEvent:function(e){
var node=e.target;
if(node){
for(var _170=node.parentNode;_170;node=_170,_170=node.parentNode){
if(_170==this.parent&&dojo.hasClass(node,"dojoDndItem")){
return node;
}
}
}
return null;
},_normalizedCreator:function(item,hint){
var t=(this.creator||this.defaultCreator).call(this,item,hint);
if(!dojo.isArray(t.type)){
t.type=["text"];
}
if(!t.node.id){
t.node.id=dojo.dnd.getUniqueId();
}
dojo.addClass(t.node,"dojoDndItem");
return t;
}});
dojo.dnd._createNode=function(tag){
if(!tag){
return dojo.dnd._createSpan;
}
return function(text){
return dojo.create(tag,{innerHTML:text});
};
};
dojo.dnd._createTrTd=function(text){
var tr=dojo.create("tr");
dojo.create("td",{innerHTML:text},tr);
return tr;
};
dojo.dnd._createSpan=function(text){
return dojo.create("span",{innerHTML:text});
};
dojo.dnd._defaultCreatorNodes={ul:"li",ol:"li",div:"div",p:"div"};
dojo.dnd._defaultCreator=function(node){
var tag=node.tagName.toLowerCase();
var c=tag=="tbody"||tag=="thead"?dojo.dnd._createTrTd:dojo.dnd._createNode(dojo.dnd._defaultCreatorNodes[tag]);
return function(item,hint){
var _171=item&&dojo.isObject(item),data,type,n;
if(_171&&item.tagName&&item.nodeType&&item.getAttribute){
data=item.getAttribute("dndData")||item.innerHTML;
type=item.getAttribute("dndType");
type=type?type.split(/\s*,\s*/):["text"];
n=item;
}else{
data=(_171&&item.data)?item.data:item;
type=(_171&&item.type)?item.type:["text"];
n=(hint=="avatar"?dojo.dnd._createSpan:c)(String(data));
}
if(!n.id){
n.id=dojo.dnd.getUniqueId();
}
return {node:n,data:data,type:type};
};
};
}
if(!dojo._hasResource["dojo.dnd.Selector"]){
dojo._hasResource["dojo.dnd.Selector"]=true;
dojo.provide("dojo.dnd.Selector");
dojo.declare("dojo.dnd.Selector",dojo.dnd.Container,{constructor:function(node,_172){
if(!_172){
_172={};
}
this.singular=_172.singular;
this.autoSync=_172.autoSync;
this.selection={};
this.anchor=null;
this.simpleSelection=false;
this.events.push(dojo.connect(this.node,"onmousedown",this,"onMouseDown"),dojo.connect(this.node,"onmouseup",this,"onMouseUp"));
},singular:false,getSelectedNodes:function(){
var t=new dojo.NodeList();
var e=dojo.dnd._empty;
for(var i in this.selection){
if(i in e){
continue;
}
t.push(dojo.byId(i));
}
return t;
},selectNone:function(){
return this._removeSelection()._removeAnchor();
},selectAll:function(){
this.forInItems(function(data,id){
this._addItemClass(dojo.byId(id),"Selected");
this.selection[id]=1;
},this);
return this._removeAnchor();
},deleteSelectedNodes:function(){
var e=dojo.dnd._empty;
for(var i in this.selection){
if(i in e){
continue;
}
var n=dojo.byId(i);
this.delItem(i);
dojo.destroy(n);
}
this.anchor=null;
this.selection={};
return this;
},forInSelectedItems:function(f,o){
o=o||dojo.global;
var s=this.selection,e=dojo.dnd._empty;
for(var i in s){
if(i in e){
continue;
}
f.call(o,this.getItem(i),i,this);
}
},sync:function(){
dojo.dnd.Selector.superclass.sync.call(this);
if(this.anchor){
if(!this.getItem(this.anchor.id)){
this.anchor=null;
}
}
var t=[],e=dojo.dnd._empty;
for(var i in this.selection){
if(i in e){
continue;
}
if(!this.getItem(i)){
t.push(i);
}
}
dojo.forEach(t,function(i){
delete this.selection[i];
},this);
return this;
},insertNodes:function(_173,data,_174,_175){
var _176=this._normalizedCreator;
this._normalizedCreator=function(item,hint){
var t=_176.call(this,item,hint);
if(_173){
if(!this.anchor){
this.anchor=t.node;
this._removeItemClass(t.node,"Selected");
this._addItemClass(this.anchor,"Anchor");
}else{
if(this.anchor!=t.node){
this._removeItemClass(t.node,"Anchor");
this._addItemClass(t.node,"Selected");
}
}
this.selection[t.node.id]=1;
}else{
this._removeItemClass(t.node,"Selected");
this._removeItemClass(t.node,"Anchor");
}
return t;
};
dojo.dnd.Selector.superclass.insertNodes.call(this,data,_174,_175);
this._normalizedCreator=_176;
return this;
},destroy:function(){
dojo.dnd.Selector.superclass.destroy.call(this);
this.selection=this.anchor=null;
},markupFactory:function(_177,node){
_177._skipStartup=true;
return new dojo.dnd.Selector(node,_177);
},onMouseDown:function(e){
if(this.autoSync){
this.sync();
}
if(!this.current){
return;
}
if(!this.singular&&!dojo.isCopyKey(e)&&!e.shiftKey&&(this.current.id in this.selection)){
this.simpleSelection=true;
if(e.button===dojo.mouseButtons.LEFT){
dojo.stopEvent(e);
}
return;
}
if(!this.singular&&e.shiftKey){
if(!dojo.isCopyKey(e)){
this._removeSelection();
}
var c=this.getAllNodes();
if(c.length){
if(!this.anchor){
this.anchor=c[0];
this._addItemClass(this.anchor,"Anchor");
}
this.selection[this.anchor.id]=1;
if(this.anchor!=this.current){
var i=0;
for(;i<c.length;++i){
var node=c[i];
if(node==this.anchor||node==this.current){
break;
}
}
for(++i;i<c.length;++i){
var node=c[i];
if(node==this.anchor||node==this.current){
break;
}
this._addItemClass(node,"Selected");
this.selection[node.id]=1;
}
this._addItemClass(this.current,"Selected");
this.selection[this.current.id]=1;
}
}
}else{
if(this.singular){
if(this.anchor==this.current){
if(dojo.isCopyKey(e)){
this.selectNone();
}
}else{
this.selectNone();
this.anchor=this.current;
this._addItemClass(this.anchor,"Anchor");
this.selection[this.current.id]=1;
}
}else{
if(dojo.isCopyKey(e)){
if(this.anchor==this.current){
delete this.selection[this.anchor.id];
this._removeAnchor();
}else{
if(this.current.id in this.selection){
this._removeItemClass(this.current,"Selected");
delete this.selection[this.current.id];
}else{
if(this.anchor){
this._removeItemClass(this.anchor,"Anchor");
this._addItemClass(this.anchor,"Selected");
}
this.anchor=this.current;
this._addItemClass(this.current,"Anchor");
this.selection[this.current.id]=1;
}
}
}else{
if(!(this.current.id in this.selection)){
this.selectNone();
this.anchor=this.current;
this._addItemClass(this.current,"Anchor");
this.selection[this.current.id]=1;
}
}
}
}
dojo.stopEvent(e);
},onMouseUp:function(e){
if(!this.simpleSelection){
return;
}
this.simpleSelection=false;
this.selectNone();
if(this.current){
this.anchor=this.current;
this._addItemClass(this.anchor,"Anchor");
this.selection[this.current.id]=1;
}
},onMouseMove:function(e){
this.simpleSelection=false;
},onOverEvent:function(){
this.onmousemoveEvent=dojo.connect(this.node,"onmousemove",this,"onMouseMove");
},onOutEvent:function(){
dojo.disconnect(this.onmousemoveEvent);
delete this.onmousemoveEvent;
},_removeSelection:function(){
var e=dojo.dnd._empty;
for(var i in this.selection){
if(i in e){
continue;
}
var node=dojo.byId(i);
if(node){
this._removeItemClass(node,"Selected");
}
}
this.selection={};
return this;
},_removeAnchor:function(){
if(this.anchor){
this._removeItemClass(this.anchor,"Anchor");
this.anchor=null;
}
return this;
}});
}
if(!dojo._hasResource["dojo.dnd.Avatar"]){
dojo._hasResource["dojo.dnd.Avatar"]=true;
dojo.provide("dojo.dnd.Avatar");
dojo.declare("dojo.dnd.Avatar",null,{constructor:function(_178){
this.manager=_178;
this.construct();
},construct:function(){
this.isA11y=dojo.hasClass(dojo.body(),"dijit_a11y");
var a=dojo.create("table",{"class":"dojoDndAvatar",style:{position:"absolute",zIndex:"1999",margin:"0px"}}),_179=this.manager.source,node,b=dojo.create("tbody",null,a),tr=dojo.create("tr",null,b),td=dojo.create("td",null,tr),icon=this.isA11y?dojo.create("span",{id:"a11yIcon",innerHTML:this.manager.copy?"+":"<"},td):null,span=dojo.create("span",{innerHTML:_179.generateText?this._generateText():""},td),k=Math.min(5,this.manager.nodes.length),i=0;
dojo.attr(tr,{"class":"dojoDndAvatarHeader",style:{opacity:0.9}});
for(;i<k;++i){
if(_179.creator){
node=_179._normalizedCreator(_179.getItem(this.manager.nodes[i].id).data,"avatar").node;
}else{
node=this.manager.nodes[i].cloneNode(true);
if(node.tagName.toLowerCase()=="tr"){
var _17a=dojo.create("table"),_17b=dojo.create("tbody",null,_17a);
_17b.appendChild(node);
node=_17a;
}
}
node.id="";
tr=dojo.create("tr",null,b);
td=dojo.create("td",null,tr);
td.appendChild(node);
dojo.attr(tr,{"class":"dojoDndAvatarItem",style:{opacity:(9-i)/10}});
}
this.node=a;
},destroy:function(){
dojo.destroy(this.node);
this.node=false;
},update:function(){
dojo[(this.manager.canDropFlag?"add":"remove")+"Class"](this.node,"dojoDndAvatarCanDrop");
if(this.isA11y){
var icon=dojo.byId("a11yIcon");
var text="+";
if(this.manager.canDropFlag&&!this.manager.copy){
text="< ";
}else{
if(!this.manager.canDropFlag&&!this.manager.copy){
text="o";
}else{
if(!this.manager.canDropFlag){
text="x";
}
}
}
icon.innerHTML=text;
}
dojo.query(("tr.dojoDndAvatarHeader td span"+(this.isA11y?" span":"")),this.node).forEach(function(node){
node.innerHTML=this._generateText();
},this);
},_generateText:function(){
return this.manager.nodes.length.toString();
}});
}
if(!dojo._hasResource["dojo.dnd.Manager"]){
dojo._hasResource["dojo.dnd.Manager"]=true;
dojo.provide("dojo.dnd.Manager");
dojo.declare("dojo.dnd.Manager",null,{constructor:function(){
this.avatar=null;
this.source=null;
this.nodes=[];
this.copy=true;
this.target=null;
this.canDropFlag=false;
this.events=[];
},OFFSET_X:16,OFFSET_Y:16,overSource:function(_17c){
if(this.avatar){
this.target=(_17c&&_17c.targetState!="Disabled")?_17c:null;
this.canDropFlag=Boolean(this.target);
this.avatar.update();
}
dojo.publish("/dnd/source/over",[_17c]);
},outSource:function(_17d){
if(this.avatar){
if(this.target==_17d){
this.target=null;
this.canDropFlag=false;
this.avatar.update();
dojo.publish("/dnd/source/over",[null]);
}
}else{
dojo.publish("/dnd/source/over",[null]);
}
},startDrag:function(_17e,_17f,copy){
this.source=_17e;
this.nodes=_17f;
this.copy=Boolean(copy);
this.avatar=this.makeAvatar();
dojo.body().appendChild(this.avatar.node);
dojo.publish("/dnd/start",[_17e,_17f,this.copy]);
this.events=[dojo.connect(dojo.doc,"onmousemove",this,"onMouseMove"),dojo.connect(dojo.doc,"onmouseup",this,"onMouseUp"),dojo.connect(dojo.doc,"onkeydown",this,"onKeyDown"),dojo.connect(dojo.doc,"onkeyup",this,"onKeyUp"),dojo.connect(dojo.doc,"ondragstart",dojo.stopEvent),dojo.connect(dojo.body(),"onselectstart",dojo.stopEvent)];
var c="dojoDnd"+(copy?"Copy":"Move");
dojo.addClass(dojo.body(),c);
},canDrop:function(flag){
var _180=Boolean(this.target&&flag);
if(this.canDropFlag!=_180){
this.canDropFlag=_180;
this.avatar.update();
}
},stopDrag:function(){
dojo.removeClass(dojo.body(),["dojoDndCopy","dojoDndMove"]);
dojo.forEach(this.events,dojo.disconnect);
this.events=[];
this.avatar.destroy();
this.avatar=null;
this.source=this.target=null;
this.nodes=[];
},makeAvatar:function(){
return new dojo.dnd.Avatar(this);
},updateAvatar:function(){
this.avatar.update();
},onMouseMove:function(e){
var a=this.avatar;
if(a){
dojo.dnd.autoScrollNodes(e);
var s=a.node.style;
s.left=(e.pageX+this.OFFSET_X)+"px";
s.top=(e.pageY+this.OFFSET_Y)+"px";
var copy=Boolean(this.source.copyState(dojo.isCopyKey(e)));
if(this.copy!=copy){
this._setCopyStatus(copy);
}
}
},onMouseUp:function(e){
if(this.avatar){
if(this.target&&this.canDropFlag){
var copy=Boolean(this.source.copyState(dojo.isCopyKey(e))),_181=[this.source,this.nodes,copy,this.target,e];
dojo.publish("/dnd/drop/before",_181);
dojo.publish("/dnd/drop",_181);
}else{
dojo.publish("/dnd/cancel");
}
this.stopDrag();
}
},onKeyDown:function(e){
if(this.avatar){
switch(e.keyCode){
case dojo.keys.CTRL:
var copy=Boolean(this.source.copyState(true));
if(this.copy!=copy){
this._setCopyStatus(copy);
}
break;
case dojo.keys.ESCAPE:
dojo.publish("/dnd/cancel");
this.stopDrag();
break;
}
}
},onKeyUp:function(e){
if(this.avatar&&e.keyCode==dojo.keys.CTRL){
var copy=Boolean(this.source.copyState(false));
if(this.copy!=copy){
this._setCopyStatus(copy);
}
}
},_setCopyStatus:function(copy){
this.copy=copy;
this.source._markDndStatus(this.copy);
this.updateAvatar();
dojo.replaceClass(dojo.body(),"dojoDnd"+(this.copy?"Copy":"Move"),"dojoDnd"+(this.copy?"Move":"Copy"));
}});
dojo.dnd._manager=null;
dojo.dnd.manager=function(){
if(!dojo.dnd._manager){
dojo.dnd._manager=new dojo.dnd.Manager();
}
return dojo.dnd._manager;
};
}
if(!dojo._hasResource["dojo.dnd.Source"]){
dojo._hasResource["dojo.dnd.Source"]=true;
dojo.provide("dojo.dnd.Source");
dojo.declare("dojo.dnd.Source",dojo.dnd.Selector,{isSource:true,horizontal:false,copyOnly:false,selfCopy:false,selfAccept:true,skipForm:false,withHandles:false,autoSync:false,delay:0,accept:["text"],generateText:true,constructor:function(node,_182){
dojo.mixin(this,dojo.mixin({},_182));
var type=this.accept;
if(type.length){
this.accept={};
for(var i=0;i<type.length;++i){
this.accept[type[i]]=1;
}
}
this.isDragging=false;
this.mouseDown=false;
this.targetAnchor=null;
this.targetBox=null;
this.before=true;
this._lastX=0;
this._lastY=0;
this.sourceState="";
if(this.isSource){
dojo.addClass(this.node,"dojoDndSource");
}
this.targetState="";
if(this.accept){
dojo.addClass(this.node,"dojoDndTarget");
}
if(this.horizontal){
dojo.addClass(this.node,"dojoDndHorizontal");
}
this.topics=[dojo.subscribe("/dnd/source/over",this,"onDndSourceOver"),dojo.subscribe("/dnd/start",this,"onDndStart"),dojo.subscribe("/dnd/drop",this,"onDndDrop"),dojo.subscribe("/dnd/cancel",this,"onDndCancel")];
},checkAcceptance:function(_183,_184){
if(this==_183){
return !this.copyOnly||this.selfAccept;
}
for(var i=0;i<_184.length;++i){
var type=_183.getItem(_184[i].id).type;
var flag=false;
for(var j=0;j<type.length;++j){
if(type[j] in this.accept){
flag=true;
break;
}
}
if(!flag){
return false;
}
}
return true;
},copyState:function(_185,self){
if(_185){
return true;
}
if(arguments.length<2){
self=this==dojo.dnd.manager().target;
}
if(self){
if(this.copyOnly){
return this.selfCopy;
}
}else{
return this.copyOnly;
}
return false;
},destroy:function(){
dojo.dnd.Source.superclass.destroy.call(this);
dojo.forEach(this.topics,dojo.unsubscribe);
this.targetAnchor=null;
},markupFactory:function(_186,node){
_186._skipStartup=true;
return new dojo.dnd.Source(node,_186);
},onMouseMove:function(e){
if(this.isDragging&&this.targetState=="Disabled"){
return;
}
dojo.dnd.Source.superclass.onMouseMove.call(this,e);
var m=dojo.dnd.manager();
if(!this.isDragging){
if(this.mouseDown&&this.isSource&&(Math.abs(e.pageX-this._lastX)>this.delay||Math.abs(e.pageY-this._lastY)>this.delay)){
var _187=this.getSelectedNodes();
if(_187.length){
m.startDrag(this,_187,this.copyState(dojo.isCopyKey(e),true));
}
}
}
if(this.isDragging){
var _188=false;
if(this.current){
if(!this.targetBox||this.targetAnchor!=this.current){
this.targetBox=dojo.position(this.current,true);
}
if(this.horizontal){
_188=(e.pageX-this.targetBox.x)<(this.targetBox.w/2);
}else{
_188=(e.pageY-this.targetBox.y)<(this.targetBox.h/2);
}
}
if(this.current!=this.targetAnchor||_188!=this.before){
this._markTargetAnchor(_188);
m.canDrop(!this.current||m.source!=this||!(this.current.id in this.selection));
}
}
},onMouseDown:function(e){
if(!this.mouseDown&&this._legalMouseDown(e)&&(!this.skipForm||!dojo.dnd.isFormElement(e))){
this.mouseDown=true;
this._lastX=e.pageX;
this._lastY=e.pageY;
dojo.dnd.Source.superclass.onMouseDown.call(this,e);
}
},onMouseUp:function(e){
if(this.mouseDown){
this.mouseDown=false;
dojo.dnd.Source.superclass.onMouseUp.call(this,e);
}
},onDndSourceOver:function(_189){
if(this!=_189){
this.mouseDown=false;
if(this.targetAnchor){
this._unmarkTargetAnchor();
}
}else{
if(this.isDragging){
var m=dojo.dnd.manager();
m.canDrop(this.targetState!="Disabled"&&(!this.current||m.source!=this||!(this.current.id in this.selection)));
}
}
},onDndStart:function(_18a,_18b,copy){
if(this.autoSync){
this.sync();
}
if(this.isSource){
this._changeState("Source",this==_18a?(copy?"Copied":"Moved"):"");
}
var _18c=this.accept&&this.checkAcceptance(_18a,_18b);
this._changeState("Target",_18c?"":"Disabled");
if(this==_18a){
dojo.dnd.manager().overSource(this);
}
this.isDragging=true;
},onDndDrop:function(_18d,_18e,copy,_18f){
if(this==_18f){
this.onDrop(_18d,_18e,copy);
}
this.onDndCancel();
},onDndCancel:function(){
if(this.targetAnchor){
this._unmarkTargetAnchor();
this.targetAnchor=null;
}
this.before=true;
this.isDragging=false;
this.mouseDown=false;
this._changeState("Source","");
this._changeState("Target","");
},onDrop:function(_190,_191,copy){
if(this!=_190){
this.onDropExternal(_190,_191,copy);
}else{
this.onDropInternal(_191,copy);
}
},onDropExternal:function(_192,_193,copy){
var _194=this._normalizedCreator;
if(this.creator){
this._normalizedCreator=function(node,hint){
return _194.call(this,_192.getItem(node.id).data,hint);
};
}else{
if(copy){
this._normalizedCreator=function(node,hint){
var t=_192.getItem(node.id);
var n=node.cloneNode(true);
n.id=dojo.dnd.getUniqueId();
return {node:n,data:t.data,type:t.type};
};
}else{
this._normalizedCreator=function(node,hint){
var t=_192.getItem(node.id);
_192.delItem(node.id);
return {node:node,data:t.data,type:t.type};
};
}
}
this.selectNone();
if(!copy&&!this.creator){
_192.selectNone();
}
this.insertNodes(true,_193,this.before,this.current);
if(!copy&&this.creator){
_192.deleteSelectedNodes();
}
this._normalizedCreator=_194;
},onDropInternal:function(_195,copy){
var _196=this._normalizedCreator;
if(this.current&&this.current.id in this.selection){
return;
}
if(copy){
if(this.creator){
this._normalizedCreator=function(node,hint){
return _196.call(this,this.getItem(node.id).data,hint);
};
}else{
this._normalizedCreator=function(node,hint){
var t=this.getItem(node.id);
var n=node.cloneNode(true);
n.id=dojo.dnd.getUniqueId();
return {node:n,data:t.data,type:t.type};
};
}
}else{
if(!this.current){
return;
}
this._normalizedCreator=function(node,hint){
var t=this.getItem(node.id);
return {node:node,data:t.data,type:t.type};
};
}
this._removeSelection();
this.insertNodes(true,_195,this.before,this.current);
this._normalizedCreator=_196;
},onDraggingOver:function(){
},onDraggingOut:function(){
},onOverEvent:function(){
dojo.dnd.Source.superclass.onOverEvent.call(this);
dojo.dnd.manager().overSource(this);
if(this.isDragging&&this.targetState!="Disabled"){
this.onDraggingOver();
}
},onOutEvent:function(){
dojo.dnd.Source.superclass.onOutEvent.call(this);
dojo.dnd.manager().outSource(this);
if(this.isDragging&&this.targetState!="Disabled"){
this.onDraggingOut();
}
},_markTargetAnchor:function(_197){
if(this.current==this.targetAnchor&&this.before==_197){
return;
}
if(this.targetAnchor){
this._removeItemClass(this.targetAnchor,this.before?"Before":"After");
}
this.targetAnchor=this.current;
this.targetBox=null;
this.before=_197;
if(this.targetAnchor){
this._addItemClass(this.targetAnchor,this.before?"Before":"After");
}
},_unmarkTargetAnchor:function(){
if(!this.targetAnchor){
return;
}
this._removeItemClass(this.targetAnchor,this.before?"Before":"After");
this.targetAnchor=null;
this.targetBox=null;
this.before=true;
},_markDndStatus:function(copy){
this._changeState("Source",copy?"Copied":"Moved");
},_legalMouseDown:function(e){
if(!dojo.mouseButtons.isLeft(e)){
return false;
}
if(!this.withHandles){
return true;
}
for(var node=e.target;node&&node!==this.node;node=node.parentNode){
if(dojo.hasClass(node,"dojoDndHandle")){
return true;
}
if(dojo.hasClass(node,"dojoDndItem")||dojo.hasClass(node,"dojoDndIgnore")){
break;
}
}
return false;
}});
dojo.declare("dojo.dnd.Target",dojo.dnd.Source,{constructor:function(node,_198){
this.isSource=false;
dojo.removeClass(this.node,"dojoDndSource");
},markupFactory:function(_199,node){
_199._skipStartup=true;
return new dojo.dnd.Target(node,_199);
}});
dojo.declare("dojo.dnd.AutoSource",dojo.dnd.Source,{constructor:function(node,_19a){
this.autoSync=true;
},markupFactory:function(_19b,node){
_19b._skipStartup=true;
return new dojo.dnd.AutoSource(node,_19b);
}});
}
if(!dojo._hasResource["dojo.dnd.TimedMoveable"]){
dojo._hasResource["dojo.dnd.TimedMoveable"]=true;
dojo.provide("dojo.dnd.TimedMoveable");
(function(){
var _19c=dojo.dnd.Moveable.prototype.onMove;
dojo.declare("dojo.dnd.TimedMoveable",dojo.dnd.Moveable,{timeout:40,constructor:function(node,_19d){
if(!_19d){
_19d={};
}
if(_19d.timeout&&typeof _19d.timeout=="number"&&_19d.timeout>=0){
this.timeout=_19d.timeout;
}
},markupFactory:function(_19e,node){
return new dojo.dnd.TimedMoveable(node,_19e);
},onMoveStop:function(_19f){
if(_19f._timer){
clearTimeout(_19f._timer);
_19c.call(this,_19f,_19f._leftTop);
}
dojo.dnd.Moveable.prototype.onMoveStop.apply(this,arguments);
},onMove:function(_1a0,_1a1){
_1a0._leftTop=_1a1;
if(!_1a0._timer){
var _1a2=this;
_1a0._timer=setTimeout(function(){
_1a0._timer=null;
_19c.call(_1a2,_1a0,_1a0._leftTop);
},this.timeout);
}
}});
})();
}
if(!dojo._hasResource["dojo.fx.Toggler"]){
dojo._hasResource["dojo.fx.Toggler"]=true;
dojo.provide("dojo.fx.Toggler");
dojo.declare("dojo.fx.Toggler",null,{node:null,showFunc:dojo.fadeIn,hideFunc:dojo.fadeOut,showDuration:200,hideDuration:200,constructor:function(args){
var _1a3=this;
dojo.mixin(_1a3,args);
_1a3.node=args.node;
_1a3._showArgs=dojo.mixin({},args);
_1a3._showArgs.node=_1a3.node;
_1a3._showArgs.duration=_1a3.showDuration;
_1a3.showAnim=_1a3.showFunc(_1a3._showArgs);
_1a3._hideArgs=dojo.mixin({},args);
_1a3._hideArgs.node=_1a3.node;
_1a3._hideArgs.duration=_1a3.hideDuration;
_1a3.hideAnim=_1a3.hideFunc(_1a3._hideArgs);
dojo.connect(_1a3.showAnim,"beforeBegin",dojo.hitch(_1a3.hideAnim,"stop",true));
dojo.connect(_1a3.hideAnim,"beforeBegin",dojo.hitch(_1a3.showAnim,"stop",true));
},show:function(_1a4){
return this.showAnim.play(_1a4||0);
},hide:function(_1a5){
return this.hideAnim.play(_1a5||0);
}});
}
if(!dojo._hasResource["dojo.fx"]){
dojo._hasResource["dojo.fx"]=true;
dojo.provide("dojo.fx");
(function(){
var d=dojo,_1a6={_fire:function(evt,args){
if(this[evt]){
this[evt].apply(this,args||[]);
}
return this;
}};
var _1a7=function(_1a8){
this._index=-1;
this._animations=_1a8||[];
this._current=this._onAnimateCtx=this._onEndCtx=null;
this.duration=0;
d.forEach(this._animations,function(a){
this.duration+=a.duration;
if(a.delay){
this.duration+=a.delay;
}
},this);
};
d.extend(_1a7,{_onAnimate:function(){
this._fire("onAnimate",arguments);
},_onEnd:function(){
d.disconnect(this._onAnimateCtx);
d.disconnect(this._onEndCtx);
this._onAnimateCtx=this._onEndCtx=null;
if(this._index+1==this._animations.length){
this._fire("onEnd");
}else{
this._current=this._animations[++this._index];
this._onAnimateCtx=d.connect(this._current,"onAnimate",this,"_onAnimate");
this._onEndCtx=d.connect(this._current,"onEnd",this,"_onEnd");
this._current.play(0,true);
}
},play:function(_1a9,_1aa){
if(!this._current){
this._current=this._animations[this._index=0];
}
if(!_1aa&&this._current.status()=="playing"){
return this;
}
var _1ab=d.connect(this._current,"beforeBegin",this,function(){
this._fire("beforeBegin");
}),_1ac=d.connect(this._current,"onBegin",this,function(arg){
this._fire("onBegin",arguments);
}),_1ad=d.connect(this._current,"onPlay",this,function(arg){
this._fire("onPlay",arguments);
d.disconnect(_1ab);
d.disconnect(_1ac);
d.disconnect(_1ad);
});
if(this._onAnimateCtx){
d.disconnect(this._onAnimateCtx);
}
this._onAnimateCtx=d.connect(this._current,"onAnimate",this,"_onAnimate");
if(this._onEndCtx){
d.disconnect(this._onEndCtx);
}
this._onEndCtx=d.connect(this._current,"onEnd",this,"_onEnd");
this._current.play.apply(this._current,arguments);
return this;
},pause:function(){
if(this._current){
var e=d.connect(this._current,"onPause",this,function(arg){
this._fire("onPause",arguments);
d.disconnect(e);
});
this._current.pause();
}
return this;
},gotoPercent:function(_1ae,_1af){
this.pause();
var _1b0=this.duration*_1ae;
this._current=null;
d.some(this._animations,function(a){
if(a.duration<=_1b0){
this._current=a;
return true;
}
_1b0-=a.duration;
return false;
});
if(this._current){
this._current.gotoPercent(_1b0/this._current.duration,_1af);
}
return this;
},stop:function(_1b1){
if(this._current){
if(_1b1){
for(;this._index+1<this._animations.length;++this._index){
this._animations[this._index].stop(true);
}
this._current=this._animations[this._index];
}
var e=d.connect(this._current,"onStop",this,function(arg){
this._fire("onStop",arguments);
d.disconnect(e);
});
this._current.stop();
}
return this;
},status:function(){
return this._current?this._current.status():"stopped";
},destroy:function(){
if(this._onAnimateCtx){
d.disconnect(this._onAnimateCtx);
}
if(this._onEndCtx){
d.disconnect(this._onEndCtx);
}
}});
d.extend(_1a7,_1a6);
dojo.fx.chain=function(_1b2){
return new _1a7(_1b2);
};
var _1b3=function(_1b4){
this._animations=_1b4||[];
this._connects=[];
this._finished=0;
this.duration=0;
d.forEach(_1b4,function(a){
var _1b5=a.duration;
if(a.delay){
_1b5+=a.delay;
}
if(this.duration<_1b5){
this.duration=_1b5;
}
this._connects.push(d.connect(a,"onEnd",this,"_onEnd"));
},this);
this._pseudoAnimation=new d.Animation({curve:[0,1],duration:this.duration});
var self=this;
d.forEach(["beforeBegin","onBegin","onPlay","onAnimate","onPause","onStop","onEnd"],function(evt){
self._connects.push(d.connect(self._pseudoAnimation,evt,function(){
self._fire(evt,arguments);
}));
});
};
d.extend(_1b3,{_doAction:function(_1b6,args){
d.forEach(this._animations,function(a){
a[_1b6].apply(a,args);
});
return this;
},_onEnd:function(){
if(++this._finished>this._animations.length){
this._fire("onEnd");
}
},_call:function(_1b7,args){
var t=this._pseudoAnimation;
t[_1b7].apply(t,args);
},play:function(_1b8,_1b9){
this._finished=0;
this._doAction("play",arguments);
this._call("play",arguments);
return this;
},pause:function(){
this._doAction("pause",arguments);
this._call("pause",arguments);
return this;
},gotoPercent:function(_1ba,_1bb){
var ms=this.duration*_1ba;
d.forEach(this._animations,function(a){
a.gotoPercent(a.duration<ms?1:(ms/a.duration),_1bb);
});
this._call("gotoPercent",arguments);
return this;
},stop:function(_1bc){
this._doAction("stop",arguments);
this._call("stop",arguments);
return this;
},status:function(){
return this._pseudoAnimation.status();
},destroy:function(){
d.forEach(this._connects,dojo.disconnect);
}});
d.extend(_1b3,_1a6);
dojo.fx.combine=function(_1bd){
return new _1b3(_1bd);
};
dojo.fx.wipeIn=function(args){
var node=args.node=d.byId(args.node),s=node.style,o;
var anim=d.animateProperty(d.mixin({properties:{height:{start:function(){
o=s.overflow;
s.overflow="hidden";
if(s.visibility=="hidden"||s.display=="none"){
s.height="1px";
s.display="";
s.visibility="";
return 1;
}else{
var _1be=d.style(node,"height");
return Math.max(_1be,1);
}
},end:function(){
return node.scrollHeight;
}}}},args));
d.connect(anim,"onEnd",function(){
s.height="auto";
s.overflow=o;
});
return anim;
};
dojo.fx.wipeOut=function(args){
var node=args.node=d.byId(args.node),s=node.style,o;
var anim=d.animateProperty(d.mixin({properties:{height:{end:1}}},args));
d.connect(anim,"beforeBegin",function(){
o=s.overflow;
s.overflow="hidden";
s.display="";
});
d.connect(anim,"onEnd",function(){
s.overflow=o;
s.height="auto";
s.display="none";
});
return anim;
};
dojo.fx.slideTo=function(args){
var node=args.node=d.byId(args.node),top=null,left=null;
var init=(function(n){
return function(){
var cs=d.getComputedStyle(n);
var pos=cs.position;
top=(pos=="absolute"?n.offsetTop:parseInt(cs.top)||0);
left=(pos=="absolute"?n.offsetLeft:parseInt(cs.left)||0);
if(pos!="absolute"&&pos!="relative"){
var ret=d.position(n,true);
top=ret.y;
left=ret.x;
n.style.position="absolute";
n.style.top=top+"px";
n.style.left=left+"px";
}
};
})(node);
init();
var anim=d.animateProperty(d.mixin({properties:{top:args.top||0,left:args.left||0}},args));
d.connect(anim,"beforeBegin",anim,init);
return anim;
};
})();
}
if(!dojo._hasResource["dijit._base.manager"]){
dojo._hasResource["dijit._base.manager"]=true;
dojo.provide("dijit._base.manager");
dojo.declare("dijit.WidgetSet",null,{constructor:function(){
this._hash={};
this.length=0;
},add:function(_1bf){
if(this._hash[_1bf.id]){
throw new Error("Tried to register widget with id=="+_1bf.id+" but that id is already registered");
}
this._hash[_1bf.id]=_1bf;
this.length++;
},remove:function(id){
if(this._hash[id]){
delete this._hash[id];
this.length--;
}
},forEach:function(func,_1c0){
_1c0=_1c0||dojo.global;
var i=0,id;
for(id in this._hash){
func.call(_1c0,this._hash[id],i++,this._hash);
}
return this;
},filter:function(_1c1,_1c2){
_1c2=_1c2||dojo.global;
var res=new dijit.WidgetSet(),i=0,id;
for(id in this._hash){
var w=this._hash[id];
if(_1c1.call(_1c2,w,i++,this._hash)){
res.add(w);
}
}
return res;
},byId:function(id){
return this._hash[id];
},byClass:function(cls){
var res=new dijit.WidgetSet(),id,_1c3;
for(id in this._hash){
_1c3=this._hash[id];
if(_1c3.declaredClass==cls){
res.add(_1c3);
}
}
return res;
},toArray:function(){
var ar=[];
for(var id in this._hash){
ar.push(this._hash[id]);
}
return ar;
},map:function(func,_1c4){
return dojo.map(this.toArray(),func,_1c4);
},every:function(func,_1c5){
_1c5=_1c5||dojo.global;
var x=0,i;
for(i in this._hash){
if(!func.call(_1c5,this._hash[i],x++,this._hash)){
return false;
}
}
return true;
},some:function(func,_1c6){
_1c6=_1c6||dojo.global;
var x=0,i;
for(i in this._hash){
if(func.call(_1c6,this._hash[i],x++,this._hash)){
return true;
}
}
return false;
}});
(function(){
dijit.registry=new dijit.WidgetSet();
var hash=dijit.registry._hash,attr=dojo.attr,_1c7=dojo.hasAttr,_1c8=dojo.style;
dijit.byId=function(id){
return typeof id=="string"?hash[id]:id;
};
var _1c9={};
dijit.getUniqueId=function(_1ca){
var id;
do{
id=_1ca+"_"+(_1ca in _1c9?++_1c9[_1ca]:_1c9[_1ca]=0);
}while(hash[id]);
return dijit._scopeName=="dijit"?id:dijit._scopeName+"_"+id;
};
dijit.findWidgets=function(root){
var _1cb=[];
function _1cc(root){
for(var node=root.firstChild;node;node=node.nextSibling){
if(node.nodeType==1){
var _1cd=node.getAttribute("widgetId");
if(_1cd){
var _1ce=hash[_1cd];
if(_1ce){
_1cb.push(_1ce);
}
}else{
_1cc(node);
}
}
}
};
_1cc(root);
return _1cb;
};
dijit._destroyAll=function(){
dijit._curFocus=null;
dijit._prevFocus=null;
dijit._activeStack=[];
dojo.forEach(dijit.findWidgets(dojo.body()),function(_1cf){
if(!_1cf._destroyed){
if(_1cf.destroyRecursive){
_1cf.destroyRecursive();
}else{
if(_1cf.destroy){
_1cf.destroy();
}
}
}
});
};
if(dojo.isIE){
dojo.addOnWindowUnload(function(){
dijit._destroyAll();
});
}
dijit.byNode=function(node){
return hash[node.getAttribute("widgetId")];
};
dijit.getEnclosingWidget=function(node){
while(node){
var id=node.getAttribute&&node.getAttribute("widgetId");
if(id){
return hash[id];
}
node=node.parentNode;
}
return null;
};
var _1d0=(dijit._isElementShown=function(elem){
var s=_1c8(elem);
return (s.visibility!="hidden")&&(s.visibility!="collapsed")&&(s.display!="none")&&(attr(elem,"type")!="hidden");
});
dijit.hasDefaultTabStop=function(elem){
switch(elem.nodeName.toLowerCase()){
case "a":
return _1c7(elem,"href");
case "area":
case "button":
case "input":
case "object":
case "select":
case "textarea":
return true;
case "iframe":
var body;
try{
var _1d1=elem.contentDocument;
if("designMode" in _1d1&&_1d1.designMode=="on"){
return true;
}
body=_1d1.body;
}
catch(e1){
try{
body=elem.contentWindow.document.body;
}
catch(e2){
return false;
}
}
return body.contentEditable=="true"||(body.firstChild&&body.firstChild.contentEditable=="true");
default:
return elem.contentEditable=="true";
}
};
var _1d2=(dijit.isTabNavigable=function(elem){
if(attr(elem,"disabled")){
return false;
}else{
if(_1c7(elem,"tabIndex")){
return attr(elem,"tabIndex")>=0;
}else{
return dijit.hasDefaultTabStop(elem);
}
}
});
dijit._getTabNavigable=function(root){
var _1d3,last,_1d4,_1d5,_1d6,_1d7,_1d8={};
function _1d9(node){
return node&&node.tagName.toLowerCase()=="input"&&node.type&&node.type.toLowerCase()=="radio"&&node.name&&node.name.toLowerCase();
};
var _1da=function(_1db){
dojo.query("> *",_1db).forEach(function(_1dc){
if((dojo.isIE&&_1dc.scopeName!=="HTML")||!_1d0(_1dc)){
return;
}
if(_1d2(_1dc)){
var _1dd=attr(_1dc,"tabIndex");
if(!_1c7(_1dc,"tabIndex")||_1dd==0){
if(!_1d3){
_1d3=_1dc;
}
last=_1dc;
}else{
if(_1dd>0){
if(!_1d4||_1dd<_1d5){
_1d5=_1dd;
_1d4=_1dc;
}
if(!_1d6||_1dd>=_1d7){
_1d7=_1dd;
_1d6=_1dc;
}
}
}
var rn=_1d9(_1dc);
if(dojo.attr(_1dc,"checked")&&rn){
_1d8[rn]=_1dc;
}
}
if(_1dc.nodeName.toUpperCase()!="SELECT"){
_1da(_1dc);
}
});
};
if(_1d0(root)){
_1da(root);
}
function rs(node){
return _1d8[_1d9(node)]||node;
};
return {first:rs(_1d3),last:rs(last),lowest:rs(_1d4),highest:rs(_1d6)};
};
dijit.getFirstInTabbingOrder=function(root){
var _1de=dijit._getTabNavigable(dojo.byId(root));
return _1de.lowest?_1de.lowest:_1de.first;
};
dijit.getLastInTabbingOrder=function(root){
var _1df=dijit._getTabNavigable(dojo.byId(root));
return _1df.last?_1df.last:_1df.highest;
};
dijit.defaultDuration=dojo.config["defaultDuration"]||200;
})();
}
if(!dojo._hasResource["dojo.Stateful"]){
dojo._hasResource["dojo.Stateful"]=true;
dojo.provide("dojo.Stateful");
dojo.declare("dojo.Stateful",null,{postscript:function(_1e0){
if(_1e0){
dojo.mixin(this,_1e0);
}
},get:function(name){
return this[name];
},set:function(name,_1e1){
if(typeof name==="object"){
for(var x in name){
this.set(x,name[x]);
}
return this;
}
var _1e2=this[name];
this[name]=_1e1;
if(this._watchCallbacks){
this._watchCallbacks(name,_1e2,_1e1);
}
return this;
},watch:function(name,_1e3){
var _1e4=this._watchCallbacks;
if(!_1e4){
var self=this;
_1e4=this._watchCallbacks=function(name,_1e5,_1e6,_1e7){
var _1e8=function(_1e9){
if(_1e9){
_1e9=_1e9.slice();
for(var i=0,l=_1e9.length;i<l;i++){
try{
_1e9[i].call(self,name,_1e5,_1e6);
}
catch(e){
console.error(e);
}
}
}
};
_1e8(_1e4["_"+name]);
if(!_1e7){
_1e8(_1e4["*"]);
}
};
}
if(!_1e3&&typeof name==="function"){
_1e3=name;
name="*";
}else{
name="_"+name;
}
var _1ea=_1e4[name];
if(typeof _1ea!=="object"){
_1ea=_1e4[name]=[];
}
_1ea.push(_1e3);
return {unwatch:function(){
_1ea.splice(dojo.indexOf(_1ea,_1e3),1);
}};
}});
}
if(!dojo._hasResource["dijit._WidgetBase"]){
dojo._hasResource["dijit._WidgetBase"]=true;
dojo.provide("dijit._WidgetBase");
(function(){
dojo.declare("dijit._WidgetBase",dojo.Stateful,{id:"",lang:"",dir:"","class":"",style:"",title:"",tooltip:"",baseClass:"",srcNodeRef:null,domNode:null,containerNode:null,attributeMap:{id:"",dir:"",lang:"","class":"",style:"",title:""},_blankGif:(dojo.config.blankGif||dojo.moduleUrl("dojo","resources/blank.gif")).toString(),postscript:function(_1eb,_1ec){
this.create(_1eb,_1ec);
},create:function(_1ed,_1ee){
this.srcNodeRef=dojo.byId(_1ee);
this._connects=[];
this._subscribes=[];
if(this.srcNodeRef&&(typeof this.srcNodeRef.id=="string")){
this.id=this.srcNodeRef.id;
}
if(_1ed){
this.params=_1ed;
dojo._mixin(this,_1ed);
}
this.postMixInProperties();
if(!this.id){
this.id=dijit.getUniqueId(this.declaredClass.replace(/\./g,"_"));
}
dijit.registry.add(this);
this.buildRendering();
if(this.domNode){
this._applyAttributes();
var _1ef=this.srcNodeRef;
if(_1ef&&_1ef.parentNode&&this.domNode!==_1ef){
_1ef.parentNode.replaceChild(this.domNode,_1ef);
}
}
if(this.domNode){
this.domNode.setAttribute("widgetId",this.id);
}
this.postCreate();
if(this.srcNodeRef&&!this.srcNodeRef.parentNode){
delete this.srcNodeRef;
}
this._created=true;
},_applyAttributes:function(){
var _1f0=function(attr,_1f1){
if((_1f1.params&&attr in _1f1.params)||_1f1[attr]){
_1f1.set(attr,_1f1[attr]);
}
};
for(var attr in this.attributeMap){
_1f0(attr,this);
}
dojo.forEach(this._getSetterAttributes(),function(a){
if(!(a in this.attributeMap)){
_1f0(a,this);
}
},this);
},_getSetterAttributes:function(){
var ctor=this.constructor;
if(!ctor._setterAttrs){
var r=(ctor._setterAttrs=[]),_1f2,_1f3=ctor.prototype;
for(var _1f4 in _1f3){
if(dojo.isFunction(_1f3[_1f4])&&(_1f2=_1f4.match(/^_set([a-zA-Z]*)Attr$/))&&_1f2[1]){
r.push(_1f2[1].charAt(0).toLowerCase()+_1f2[1].substr(1));
}
}
}
return ctor._setterAttrs;
},postMixInProperties:function(){
},buildRendering:function(){
if(!this.domNode){
this.domNode=this.srcNodeRef||dojo.create("div");
}
if(this.baseClass){
var _1f5=this.baseClass.split(" ");
if(!this.isLeftToRight()){
_1f5=_1f5.concat(dojo.map(_1f5,function(name){
return name+"Rtl";
}));
}
dojo.addClass(this.domNode,_1f5);
}
},postCreate:function(){
},startup:function(){
this._started=true;
},destroyRecursive:function(_1f6){
this._beingDestroyed=true;
this.destroyDescendants(_1f6);
this.destroy(_1f6);
},destroy:function(_1f7){
this._beingDestroyed=true;
this.uninitialize();
var d=dojo,dfe=d.forEach,dun=d.unsubscribe;
dfe(this._connects,function(_1f8){
dfe(_1f8,d.disconnect);
});
dfe(this._subscribes,function(_1f9){
dun(_1f9);
});
dfe(this._supportingWidgets||[],function(w){
if(w.destroyRecursive){
w.destroyRecursive();
}else{
if(w.destroy){
w.destroy();
}
}
});
this.destroyRendering(_1f7);
dijit.registry.remove(this.id);
this._destroyed=true;
},destroyRendering:function(_1fa){
if(this.bgIframe){
this.bgIframe.destroy(_1fa);
delete this.bgIframe;
}
if(this.domNode){
if(_1fa){
dojo.removeAttr(this.domNode,"widgetId");
}else{
dojo.destroy(this.domNode);
}
delete this.domNode;
}
if(this.srcNodeRef){
if(!_1fa){
dojo.destroy(this.srcNodeRef);
}
delete this.srcNodeRef;
}
},destroyDescendants:function(_1fb){
dojo.forEach(this.getChildren(),function(_1fc){
if(_1fc.destroyRecursive){
_1fc.destroyRecursive(_1fb);
}
});
},uninitialize:function(){
return false;
},_setClassAttr:function(_1fd){
var _1fe=this[this.attributeMap["class"]||"domNode"];
dojo.replaceClass(_1fe,_1fd,this["class"]);
this._set("class",_1fd);
},_setStyleAttr:function(_1ff){
var _200=this[this.attributeMap.style||"domNode"];
if(dojo.isObject(_1ff)){
dojo.style(_200,_1ff);
}else{
if(_200.style.cssText){
_200.style.cssText+="; "+_1ff;
}else{
_200.style.cssText=_1ff;
}
}
this._set("style",_1ff);
},_attrToDom:function(attr,_201){
var _202=this.attributeMap[attr];
dojo.forEach(dojo.isArray(_202)?_202:[_202],function(_203){
var _204=this[_203.node||_203||"domNode"];
var type=_203.type||"attribute";
switch(type){
case "attribute":
if(dojo.isFunction(_201)){
_201=dojo.hitch(this,_201);
}
var _205=_203.attribute?_203.attribute:(/^on[A-Z][a-zA-Z]*$/.test(attr)?attr.toLowerCase():attr);
dojo.attr(_204,_205,_201);
break;
case "innerText":
_204.innerHTML="";
_204.appendChild(dojo.doc.createTextNode(_201));
break;
case "innerHTML":
_204.innerHTML=_201;
break;
case "class":
dojo.replaceClass(_204,_201,this[attr]);
break;
}
},this);
},get:function(name){
var _206=this._getAttrNames(name);
return this[_206.g]?this[_206.g]():this[name];
},set:function(name,_207){
if(typeof name==="object"){
for(var x in name){
this.set(x,name[x]);
}
return this;
}
var _208=this._getAttrNames(name);
if(this[_208.s]){
var _209=this[_208.s].apply(this,Array.prototype.slice.call(arguments,1));
}else{
if(name in this.attributeMap){
this._attrToDom(name,_207);
}
this._set(name,_207);
}
return _209||this;
},_attrPairNames:{},_getAttrNames:function(name){
var apn=this._attrPairNames;
if(apn[name]){
return apn[name];
}
var uc=name.charAt(0).toUpperCase()+name.substr(1);
return (apn[name]={n:name+"Node",s:"_set"+uc+"Attr",g:"_get"+uc+"Attr"});
},_set:function(name,_20a){
var _20b=this[name];
this[name]=_20a;
if(this._watchCallbacks&&this._created&&_20a!==_20b){
this._watchCallbacks(name,_20b,_20a);
}
},toString:function(){
return "[Widget "+this.declaredClass+", "+(this.id||"NO ID")+"]";
},getDescendants:function(){
return this.containerNode?dojo.query("[widgetId]",this.containerNode).map(dijit.byNode):[];
},getChildren:function(){
return this.containerNode?dijit.findWidgets(this.containerNode):[];
},connect:function(obj,_20c,_20d){
var _20e=[dojo._connect(obj,_20c,this,_20d)];
this._connects.push(_20e);
return _20e;
},disconnect:function(_20f){
for(var i=0;i<this._connects.length;i++){
if(this._connects[i]==_20f){
dojo.forEach(_20f,dojo.disconnect);
this._connects.splice(i,1);
return;
}
}
},subscribe:function(_210,_211){
var _212=dojo.subscribe(_210,this,_211);
this._subscribes.push(_212);
return _212;
},unsubscribe:function(_213){
for(var i=0;i<this._subscribes.length;i++){
if(this._subscribes[i]==_213){
dojo.unsubscribe(_213);
this._subscribes.splice(i,1);
return;
}
}
},isLeftToRight:function(){
return this.dir?(this.dir=="ltr"):dojo._isBodyLtr();
},placeAt:function(_214,_215){
if(_214.declaredClass&&_214.addChild){
_214.addChild(this,_215);
}else{
dojo.place(this.domNode,_214,_215);
}
return this;
}});
})();
}
if(!dojo._hasResource["dijit._base.focus"]){
dojo._hasResource["dijit._base.focus"]=true;
dojo.provide("dijit._base.focus");
dojo.mixin(dijit,{_curFocus:null,_prevFocus:null,isCollapsed:function(){
return dijit.getBookmark().isCollapsed;
},getBookmark:function(){
var bm,rg,tg,sel=dojo.doc.selection,cf=dijit._curFocus;
if(dojo.global.getSelection){
sel=dojo.global.getSelection();
if(sel){
if(sel.isCollapsed){
tg=cf?cf.tagName:"";
if(tg){
tg=tg.toLowerCase();
if(tg=="textarea"||(tg=="input"&&(!cf.type||cf.type.toLowerCase()=="text"))){
sel={start:cf.selectionStart,end:cf.selectionEnd,node:cf,pRange:true};
return {isCollapsed:(sel.end<=sel.start),mark:sel};
}
}
bm={isCollapsed:true};
if(sel.rangeCount){
bm.mark=sel.getRangeAt(0).cloneRange();
}
}else{
rg=sel.getRangeAt(0);
bm={isCollapsed:false,mark:rg.cloneRange()};
}
}
}else{
if(sel){
tg=cf?cf.tagName:"";
tg=tg.toLowerCase();
if(cf&&tg&&(tg=="button"||tg=="textarea"||tg=="input")){
if(sel.type&&sel.type.toLowerCase()=="none"){
return {isCollapsed:true,mark:null};
}else{
rg=sel.createRange();
return {isCollapsed:rg.text&&rg.text.length?false:true,mark:{range:rg,pRange:true}};
}
}
bm={};
try{
rg=sel.createRange();
bm.isCollapsed=!(sel.type=="Text"?rg.htmlText.length:rg.length);
}
catch(e){
bm.isCollapsed=true;
return bm;
}
if(sel.type.toUpperCase()=="CONTROL"){
if(rg.length){
bm.mark=[];
var i=0,len=rg.length;
while(i<len){
bm.mark.push(rg.item(i++));
}
}else{
bm.isCollapsed=true;
bm.mark=null;
}
}else{
bm.mark=rg.getBookmark();
}
}else{
console.warn("No idea how to store the current selection for this browser!");
}
}
return bm;
},moveToBookmark:function(_216){
var _217=dojo.doc,mark=_216.mark;
if(mark){
if(dojo.global.getSelection){
var sel=dojo.global.getSelection();
if(sel&&sel.removeAllRanges){
if(mark.pRange){
var r=mark;
var n=r.node;
n.selectionStart=r.start;
n.selectionEnd=r.end;
}else{
sel.removeAllRanges();
sel.addRange(mark);
}
}else{
console.warn("No idea how to restore selection for this browser!");
}
}else{
if(_217.selection&&mark){
var rg;
if(mark.pRange){
rg=mark.range;
}else{
if(dojo.isArray(mark)){
rg=_217.body.createControlRange();
dojo.forEach(mark,function(n){
rg.addElement(n);
});
}else{
rg=_217.body.createTextRange();
rg.moveToBookmark(mark);
}
}
rg.select();
}
}
}
},getFocus:function(menu,_218){
var node=!dijit._curFocus||(menu&&dojo.isDescendant(dijit._curFocus,menu.domNode))?dijit._prevFocus:dijit._curFocus;
return {node:node,bookmark:(node==dijit._curFocus)&&dojo.withGlobal(_218||dojo.global,dijit.getBookmark),openedForWindow:_218};
},focus:function(_219){
if(!_219){
return;
}
var node="node" in _219?_219.node:_219,_21a=_219.bookmark,_21b=_219.openedForWindow,_21c=_21a?_21a.isCollapsed:false;
if(node){
var _21d=(node.tagName.toLowerCase()=="iframe")?node.contentWindow:node;
if(_21d&&_21d.focus){
try{
_21d.focus();
}
catch(e){
}
}
dijit._onFocusNode(node);
}
if(_21a&&dojo.withGlobal(_21b||dojo.global,dijit.isCollapsed)&&!_21c){
if(_21b){
_21b.focus();
}
try{
dojo.withGlobal(_21b||dojo.global,dijit.moveToBookmark,null,[_21a]);
}
catch(e2){
}
}
},_activeStack:[],registerIframe:function(_21e){
return dijit.registerWin(_21e.contentWindow,_21e);
},unregisterIframe:function(_21f){
dijit.unregisterWin(_21f);
},registerWin:function(_220,_221){
var _222=function(evt){
dijit._justMouseDowned=true;
setTimeout(function(){
dijit._justMouseDowned=false;
},0);
if(dojo.isIE&&evt&&evt.srcElement&&evt.srcElement.parentNode==null){
return;
}
dijit._onTouchNode(_221||evt.target||evt.srcElement,"mouse");
};
var doc=dojo.isIE?_220.document.documentElement:_220.document;
if(doc){
if(dojo.isIE){
_220.document.body.attachEvent("onmousedown",_222);
var _223=function(evt){
if(evt.srcElement.tagName.toLowerCase()!="#document"&&dijit.isTabNavigable(evt.srcElement)){
dijit._onFocusNode(_221||evt.srcElement);
}else{
dijit._onTouchNode(_221||evt.srcElement);
}
};
doc.attachEvent("onactivate",_223);
var _224=function(evt){
dijit._onBlurNode(_221||evt.srcElement);
};
doc.attachEvent("ondeactivate",_224);
return function(){
_220.document.detachEvent("onmousedown",_222);
doc.detachEvent("onactivate",_223);
doc.detachEvent("ondeactivate",_224);
doc=null;
};
}else{
doc.body.addEventListener("mousedown",_222,true);
var _225=function(evt){
dijit._onFocusNode(_221||evt.target);
};
doc.addEventListener("focus",_225,true);
var _226=function(evt){
dijit._onBlurNode(_221||evt.target);
};
doc.addEventListener("blur",_226,true);
return function(){
doc.body.removeEventListener("mousedown",_222,true);
doc.removeEventListener("focus",_225,true);
doc.removeEventListener("blur",_226,true);
doc=null;
};
}
}
},unregisterWin:function(_227){
_227&&_227();
},_onBlurNode:function(node){
dijit._prevFocus=dijit._curFocus;
dijit._curFocus=null;
if(dijit._justMouseDowned){
return;
}
if(dijit._clearActiveWidgetsTimer){
clearTimeout(dijit._clearActiveWidgetsTimer);
}
dijit._clearActiveWidgetsTimer=setTimeout(function(){
delete dijit._clearActiveWidgetsTimer;
dijit._setStack([]);
dijit._prevFocus=null;
},100);
},_onTouchNode:function(node,by){
if(dijit._clearActiveWidgetsTimer){
clearTimeout(dijit._clearActiveWidgetsTimer);
delete dijit._clearActiveWidgetsTimer;
}
var _228=[];
try{
while(node){
var _229=dojo.attr(node,"dijitPopupParent");
if(_229){
node=dijit.byId(_229).domNode;
}else{
if(node.tagName&&node.tagName.toLowerCase()=="body"){
if(node===dojo.body()){
break;
}
node=dojo.window.get(node.ownerDocument).frameElement;
}else{
var id=node.getAttribute&&node.getAttribute("widgetId"),_22a=id&&dijit.byId(id);
if(_22a&&!(by=="mouse"&&_22a.get("disabled"))){
_228.unshift(id);
}
node=node.parentNode;
}
}
}
}
catch(e){
}
dijit._setStack(_228,by);
},_onFocusNode:function(node){
if(!node){
return;
}
if(node.nodeType==9){
return;
}
dijit._onTouchNode(node);
if(node==dijit._curFocus){
return;
}
if(dijit._curFocus){
dijit._prevFocus=dijit._curFocus;
}
dijit._curFocus=node;
dojo.publish("focusNode",[node]);
},_setStack:function(_22b,by){
var _22c=dijit._activeStack;
dijit._activeStack=_22b;
for(var _22d=0;_22d<Math.min(_22c.length,_22b.length);_22d++){
if(_22c[_22d]!=_22b[_22d]){
break;
}
}
var _22e;
for(var i=_22c.length-1;i>=_22d;i--){
_22e=dijit.byId(_22c[i]);
if(_22e){
_22e._focused=false;
_22e.set("focused",false);
_22e._hasBeenBlurred=true;
if(_22e._onBlur){
_22e._onBlur(by);
}
dojo.publish("widgetBlur",[_22e,by]);
}
}
for(i=_22d;i<_22b.length;i++){
_22e=dijit.byId(_22b[i]);
if(_22e){
_22e._focused=true;
_22e.set("focused",true);
if(_22e._onFocus){
_22e._onFocus(by);
}
dojo.publish("widgetFocus",[_22e,by]);
}
}
}});
dojo.addOnLoad(function(){
var _22f=dijit.registerWin(window);
if(dojo.isIE){
dojo.addOnWindowUnload(function(){
dijit.unregisterWin(_22f);
_22f=null;
});
}
});
}
if(!dojo._hasResource["dojo.AdapterRegistry"]){
dojo._hasResource["dojo.AdapterRegistry"]=true;
dojo.provide("dojo.AdapterRegistry");
dojo.AdapterRegistry=function(_230){
this.pairs=[];
this.returnWrappers=_230||false;
};
dojo.extend(dojo.AdapterRegistry,{register:function(name,_231,wrap,_232,_233){
this.pairs[((_233)?"unshift":"push")]([name,_231,wrap,_232]);
},match:function(){
for(var i=0;i<this.pairs.length;i++){
var pair=this.pairs[i];
if(pair[1].apply(this,arguments)){
if((pair[3])||(this.returnWrappers)){
return pair[2];
}else{
return pair[2].apply(this,arguments);
}
}
}
throw new Error("No match found");
},unregister:function(name){
for(var i=0;i<this.pairs.length;i++){
var pair=this.pairs[i];
if(pair[0]==name){
this.pairs.splice(i,1);
return true;
}
}
return false;
}});
}
if(!dojo._hasResource["dijit._base.place"]){
dojo._hasResource["dijit._base.place"]=true;
dojo.provide("dijit._base.place");
dijit.getViewport=function(){
return dojo.window.getBox();
};
dijit.placeOnScreen=function(node,pos,_234,_235){
var _236=dojo.map(_234,function(_237){
var c={corner:_237,pos:{x:pos.x,y:pos.y}};
if(_235){
c.pos.x+=_237.charAt(1)=="L"?_235.x:-_235.x;
c.pos.y+=_237.charAt(0)=="T"?_235.y:-_235.y;
}
return c;
});
return dijit._place(node,_236);
};
dijit._place=function(node,_238,_239,_23a){
var view=dojo.window.getBox();
if(!node.parentNode||String(node.parentNode.tagName).toLowerCase()!="body"){
dojo.body().appendChild(node);
}
var best=null;
dojo.some(_238,function(_23b){
var _23c=_23b.corner;
var pos=_23b.pos;
var _23d=0;
var _23e={w:_23c.charAt(1)=="L"?(view.l+view.w)-pos.x:pos.x-view.l,h:_23c.charAt(1)=="T"?(view.t+view.h)-pos.y:pos.y-view.t};
if(_239){
var res=_239(node,_23b.aroundCorner,_23c,_23e,_23a);
_23d=typeof res=="undefined"?0:res;
}
var _23f=node.style;
var _240=_23f.display;
var _241=_23f.visibility;
_23f.visibility="hidden";
_23f.display="";
var mb=dojo.marginBox(node);
_23f.display=_240;
_23f.visibility=_241;
var _242=Math.max(view.l,_23c.charAt(1)=="L"?pos.x:(pos.x-mb.w)),_243=Math.max(view.t,_23c.charAt(0)=="T"?pos.y:(pos.y-mb.h)),endX=Math.min(view.l+view.w,_23c.charAt(1)=="L"?(_242+mb.w):pos.x),endY=Math.min(view.t+view.h,_23c.charAt(0)=="T"?(_243+mb.h):pos.y),_244=endX-_242,_245=endY-_243;
_23d+=(mb.w-_244)+(mb.h-_245);
if(best==null||_23d<best.overflow){
best={corner:_23c,aroundCorner:_23b.aroundCorner,x:_242,y:_243,w:_244,h:_245,overflow:_23d,spaceAvailable:_23e};
}
return !_23d;
});
if(best.overflow&&_239){
_239(node,best.aroundCorner,best.corner,best.spaceAvailable,_23a);
}
var l=dojo._isBodyLtr(),s=node.style;
s.top=best.y+"px";
s[l?"left":"right"]=(l?best.x:view.w-best.x-best.w)+"px";
return best;
};
dijit.placeOnScreenAroundNode=function(node,_246,_247,_248){
_246=dojo.byId(_246);
var _249=dojo.position(_246,true);
return dijit._placeOnScreenAroundRect(node,_249.x,_249.y,_249.w,_249.h,_247,_248);
};
dijit.placeOnScreenAroundRectangle=function(node,_24a,_24b,_24c){
return dijit._placeOnScreenAroundRect(node,_24a.x,_24a.y,_24a.width,_24a.height,_24b,_24c);
};
dijit._placeOnScreenAroundRect=function(node,x,y,_24d,_24e,_24f,_250){
var _251=[];
for(var _252 in _24f){
_251.push({aroundCorner:_252,corner:_24f[_252],pos:{x:x+(_252.charAt(1)=="L"?0:_24d),y:y+(_252.charAt(0)=="T"?0:_24e)}});
}
return dijit._place(node,_251,_250,{w:_24d,h:_24e});
};
dijit.placementRegistry=new dojo.AdapterRegistry();
dijit.placementRegistry.register("node",function(n,x){
return typeof x=="object"&&typeof x.offsetWidth!="undefined"&&typeof x.offsetHeight!="undefined";
},dijit.placeOnScreenAroundNode);
dijit.placementRegistry.register("rect",function(n,x){
return typeof x=="object"&&"x" in x&&"y" in x&&"width" in x&&"height" in x;
},dijit.placeOnScreenAroundRectangle);
dijit.placeOnScreenAroundElement=function(node,_253,_254,_255){
return dijit.placementRegistry.match.apply(dijit.placementRegistry,arguments);
};
dijit.getPopupAroundAlignment=function(_256,_257){
var _258={};
dojo.forEach(_256,function(pos){
switch(pos){
case "after":
_258[_257?"BR":"BL"]=_257?"BL":"BR";
break;
case "before":
_258[_257?"BL":"BR"]=_257?"BR":"BL";
break;
case "below-alt":
_257=!_257;
case "below":
_258[_257?"BL":"BR"]=_257?"TL":"TR";
_258[_257?"BR":"BL"]=_257?"TR":"TL";
break;
case "above-alt":
_257=!_257;
case "above":
default:
_258[_257?"TL":"TR"]=_257?"BL":"BR";
_258[_257?"TR":"TL"]=_257?"BR":"BL";
break;
}
});
return _258;
};
}
if(!dojo._hasResource["dijit._base.window"]){
dojo._hasResource["dijit._base.window"]=true;
dojo.provide("dijit._base.window");
dijit.getDocumentWindow=function(doc){
return dojo.window.get(doc);
};
}
if(!dojo._hasResource["dijit._base.popup"]){
dojo._hasResource["dijit._base.popup"]=true;
dojo.provide("dijit._base.popup");
dijit.popup={_stack:[],_beginZIndex:1000,_idGen:1,_createWrapper:function(_259){
var _25a=_259.declaredClass?_259._popupWrapper:(_259.parentNode&&dojo.hasClass(_259.parentNode,"dijitPopup")),node=_259.domNode||_259;
if(!_25a){
_25a=dojo.create("div",{"class":"dijitPopup",style:{display:"none"},role:"presentation"},dojo.body());
_25a.appendChild(node);
var s=node.style;
s.display="";
s.visibility="";
s.position="";
s.top="0px";
if(_259.declaredClass){
_259._popupWrapper=_25a;
dojo.connect(_259,"destroy",function(){
dojo.destroy(_25a);
delete _259._popupWrapper;
});
}
}
return _25a;
},moveOffScreen:function(_25b){
var _25c=this._createWrapper(_25b);
dojo.style(_25c,{visibility:"hidden",top:"-9999px",display:""});
},hide:function(_25d){
var _25e=this._createWrapper(_25d);
dojo.style(_25e,"display","none");
},getTopPopup:function(){
var _25f=this._stack;
for(var pi=_25f.length-1;pi>0&&_25f[pi].parent===_25f[pi-1].widget;pi--){
}
return _25f[pi];
},open:function(args){
var _260=this._stack,_261=args.popup,_262=args.orient||((args.parent?args.parent.isLeftToRight():dojo._isBodyLtr())?{"BL":"TL","BR":"TR","TL":"BL","TR":"BR"}:{"BR":"TR","BL":"TL","TR":"BR","TL":"BL"}),_263=args.around,id=(args.around&&args.around.id)?(args.around.id+"_dropdown"):("popup_"+this._idGen++);
while(_260.length&&(!args.parent||!dojo.isDescendant(args.parent.domNode,_260[_260.length-1].widget.domNode))){
dijit.popup.close(_260[_260.length-1].widget);
}
var _264=this._createWrapper(_261);
dojo.attr(_264,{id:id,style:{zIndex:this._beginZIndex+_260.length},"class":"dijitPopup "+(_261.baseClass||_261["class"]||"").split(" ")[0]+"Popup",dijitPopupParent:args.parent?args.parent.id:""});
if(dojo.isIE||dojo.isMoz){
if(!_261.bgIframe){
_261.bgIframe=new dijit.BackgroundIframe(_264);
}
}
var best=_263?dijit.placeOnScreenAroundElement(_264,_263,_262,_261.orient?dojo.hitch(_261,"orient"):null):dijit.placeOnScreen(_264,args,_262=="R"?["TR","BR","TL","BL"]:["TL","BL","TR","BR"],args.padding);
_264.style.display="";
_264.style.visibility="visible";
_261.domNode.style.visibility="visible";
var _265=[];
_265.push(dojo.connect(_264,"onkeypress",this,function(evt){
if(evt.charOrCode==dojo.keys.ESCAPE&&args.onCancel){
dojo.stopEvent(evt);
args.onCancel();
}else{
if(evt.charOrCode===dojo.keys.TAB){
dojo.stopEvent(evt);
var _266=this.getTopPopup();
if(_266&&_266.onCancel){
_266.onCancel();
}
}
}
}));
if(_261.onCancel){
_265.push(dojo.connect(_261,"onCancel",args.onCancel));
}
_265.push(dojo.connect(_261,_261.onExecute?"onExecute":"onChange",this,function(){
var _267=this.getTopPopup();
if(_267&&_267.onExecute){
_267.onExecute();
}
}));
_260.push({widget:_261,parent:args.parent,onExecute:args.onExecute,onCancel:args.onCancel,onClose:args.onClose,handlers:_265});
if(_261.onOpen){
_261.onOpen(best);
}
return best;
},close:function(_268){
var _269=this._stack;
while((_268&&dojo.some(_269,function(elem){
return elem.widget==_268;
}))||(!_268&&_269.length)){
var top=_269.pop(),_26a=top.widget,_26b=top.onClose;
if(_26a.onClose){
_26a.onClose();
}
dojo.forEach(top.handlers,dojo.disconnect);
if(_26a&&_26a.domNode){
this.hide(_26a);
}
if(_26b){
_26b();
}
}
}};
dijit._frames=new function(){
var _26c=[];
this.pop=function(){
var _26d;
if(_26c.length){
_26d=_26c.pop();
_26d.style.display="";
}else{
if(dojo.isIE<9){
var burl=dojo.config["dojoBlankHtmlUrl"]||(dojo.moduleUrl("dojo","resources/blank.html")+"")||"javascript:\"\"";
var html="<iframe src='"+burl+"'"+" style='position: absolute; left: 0px; top: 0px;"+"z-index: -1; filter:Alpha(Opacity=\"0\");'>";
_26d=dojo.doc.createElement(html);
}else{
_26d=dojo.create("iframe");
_26d.src="javascript:\"\"";
_26d.className="dijitBackgroundIframe";
dojo.style(_26d,"opacity",0.1);
}
_26d.tabIndex=-1;
dijit.setWaiRole(_26d,"presentation");
}
return _26d;
};
this.push=function(_26e){
_26e.style.display="none";
_26c.push(_26e);
};
}();
dijit.BackgroundIframe=function(node){
if(!node.id){
throw new Error("no id");
}
if(dojo.isIE||dojo.isMoz){
var _26f=(this.iframe=dijit._frames.pop());
node.appendChild(_26f);
if(dojo.isIE<7||dojo.isQuirks){
this.resize(node);
this._conn=dojo.connect(node,"onresize",this,function(){
this.resize(node);
});
}else{
dojo.style(_26f,{width:"100%",height:"100%"});
}
}
};
dojo.extend(dijit.BackgroundIframe,{resize:function(node){
if(this.iframe){
dojo.style(this.iframe,{width:node.offsetWidth+"px",height:node.offsetHeight+"px"});
}
},destroy:function(){
if(this._conn){
dojo.disconnect(this._conn);
this._conn=null;
}
if(this.iframe){
dijit._frames.push(this.iframe);
delete this.iframe;
}
}});
}
if(!dojo._hasResource["dijit._base.scroll"]){
dojo._hasResource["dijit._base.scroll"]=true;
dojo.provide("dijit._base.scroll");
dijit.scrollIntoView=function(node,pos){
dojo.window.scrollIntoView(node,pos);
};
}
if(!dojo._hasResource["dojo.uacss"]){
dojo._hasResource["dojo.uacss"]=true;
dojo.provide("dojo.uacss");
(function(){
var d=dojo,html=d.doc.documentElement,ie=d.isIE,_270=d.isOpera,maj=Math.floor,ff=d.isFF,_271=d.boxModel.replace(/-/,""),_272={dj_ie:ie,dj_ie6:maj(ie)==6,dj_ie7:maj(ie)==7,dj_ie8:maj(ie)==8,dj_ie9:maj(ie)==9,dj_quirks:d.isQuirks,dj_iequirks:ie&&d.isQuirks,dj_opera:_270,dj_khtml:d.isKhtml,dj_webkit:d.isWebKit,dj_safari:d.isSafari,dj_chrome:d.isChrome,dj_gecko:d.isMozilla,dj_ff3:maj(ff)==3};
_272["dj_"+_271]=true;
var _273="";
for(var clz in _272){
if(_272[clz]){
_273+=clz+" ";
}
}
html.className=d.trim(html.className+" "+_273);
dojo._loaders.unshift(function(){
if(!dojo._isBodyLtr()){
var _274="dj_rtl dijitRtl "+_273.replace(/ /g,"-rtl ");
html.className=d.trim(html.className+" "+_274);
}
});
})();
}
if(!dojo._hasResource["dijit._base.sniff"]){
dojo._hasResource["dijit._base.sniff"]=true;
dojo.provide("dijit._base.sniff");
}
if(!dojo._hasResource["dijit._base.typematic"]){
dojo._hasResource["dijit._base.typematic"]=true;
dojo.provide("dijit._base.typematic");
dijit.typematic={_fireEventAndReload:function(){
this._timer=null;
this._callback(++this._count,this._node,this._evt);
this._currentTimeout=Math.max(this._currentTimeout<0?this._initialDelay:(this._subsequentDelay>1?this._subsequentDelay:Math.round(this._currentTimeout*this._subsequentDelay)),this._minDelay);
this._timer=setTimeout(dojo.hitch(this,"_fireEventAndReload"),this._currentTimeout);
},trigger:function(evt,_275,node,_276,obj,_277,_278,_279){
if(obj!=this._obj){
this.stop();
this._initialDelay=_278||500;
this._subsequentDelay=_277||0.9;
this._minDelay=_279||10;
this._obj=obj;
this._evt=evt;
this._node=node;
this._currentTimeout=-1;
this._count=-1;
this._callback=dojo.hitch(_275,_276);
this._fireEventAndReload();
this._evt=dojo.mixin({faux:true},evt);
}
},stop:function(){
if(this._timer){
clearTimeout(this._timer);
this._timer=null;
}
if(this._obj){
this._callback(-1,this._node,this._evt);
this._obj=null;
}
},addKeyListener:function(node,_27a,_27b,_27c,_27d,_27e,_27f){
if(_27a.keyCode){
_27a.charOrCode=_27a.keyCode;
dojo.deprecated("keyCode attribute parameter for dijit.typematic.addKeyListener is deprecated. Use charOrCode instead.","","2.0");
}else{
if(_27a.charCode){
_27a.charOrCode=String.fromCharCode(_27a.charCode);
dojo.deprecated("charCode attribute parameter for dijit.typematic.addKeyListener is deprecated. Use charOrCode instead.","","2.0");
}
}
return [dojo.connect(node,"onkeypress",this,function(evt){
if(evt.charOrCode==_27a.charOrCode&&(_27a.ctrlKey===undefined||_27a.ctrlKey==evt.ctrlKey)&&(_27a.altKey===undefined||_27a.altKey==evt.altKey)&&(_27a.metaKey===undefined||_27a.metaKey==(evt.metaKey||false))&&(_27a.shiftKey===undefined||_27a.shiftKey==evt.shiftKey)){
dojo.stopEvent(evt);
dijit.typematic.trigger(evt,_27b,node,_27c,_27a,_27d,_27e,_27f);
}else{
if(dijit.typematic._obj==_27a){
dijit.typematic.stop();
}
}
}),dojo.connect(node,"onkeyup",this,function(evt){
if(dijit.typematic._obj==_27a){
dijit.typematic.stop();
}
})];
},addMouseListener:function(node,_280,_281,_282,_283,_284){
var dc=dojo.connect;
return [dc(node,"mousedown",this,function(evt){
dojo.stopEvent(evt);
dijit.typematic.trigger(evt,_280,node,_281,node,_282,_283,_284);
}),dc(node,"mouseup",this,function(evt){
dojo.stopEvent(evt);
dijit.typematic.stop();
}),dc(node,"mouseout",this,function(evt){
dojo.stopEvent(evt);
dijit.typematic.stop();
}),dc(node,"mousemove",this,function(evt){
evt.preventDefault();
}),dc(node,"dblclick",this,function(evt){
dojo.stopEvent(evt);
if(dojo.isIE){
dijit.typematic.trigger(evt,_280,node,_281,node,_282,_283,_284);
setTimeout(dojo.hitch(this,dijit.typematic.stop),50);
}
})];
},addListener:function(_285,_286,_287,_288,_289,_28a,_28b,_28c){
return this.addKeyListener(_286,_287,_288,_289,_28a,_28b,_28c).concat(this.addMouseListener(_285,_288,_289,_28a,_28b,_28c));
}};
}
if(!dojo._hasResource["dijit._base.wai"]){
dojo._hasResource["dijit._base.wai"]=true;
dojo.provide("dijit._base.wai");
dijit.wai={onload:function(){
var div=dojo.create("div",{id:"a11yTestNode",style:{cssText:"border: 1px solid;"+"border-color:red green;"+"position: absolute;"+"height: 5px;"+"top: -999px;"+"background-image: url(\""+(dojo.config.blankGif||dojo.moduleUrl("dojo","resources/blank.gif"))+"\");"}},dojo.body());
var cs=dojo.getComputedStyle(div);
if(cs){
var _28d=cs.backgroundImage;
var _28e=(cs.borderTopColor==cs.borderRightColor)||(_28d!=null&&(_28d=="none"||_28d=="url(invalid-url:)"));
dojo[_28e?"addClass":"removeClass"](dojo.body(),"dijit_a11y");
if(dojo.isIE){
div.outerHTML="";
}else{
dojo.body().removeChild(div);
}
}
}};
if(dojo.isIE||dojo.isMoz){
dojo._loaders.unshift(dijit.wai.onload);
}
dojo.mixin(dijit,{hasWaiRole:function(elem,role){
var _28f=this.getWaiRole(elem);
return role?(_28f.indexOf(role)>-1):(_28f.length>0);
},getWaiRole:function(elem){
return dojo.trim((dojo.attr(elem,"role")||"").replace("wairole:",""));
},setWaiRole:function(elem,role){
dojo.attr(elem,"role",role);
},removeWaiRole:function(elem,role){
var _290=dojo.attr(elem,"role");
if(!_290){
return;
}
if(role){
var t=dojo.trim((" "+_290+" ").replace(" "+role+" "," "));
dojo.attr(elem,"role",t);
}else{
elem.removeAttribute("role");
}
},hasWaiState:function(elem,_291){
return elem.hasAttribute?elem.hasAttribute("aria-"+_291):!!elem.getAttribute("aria-"+_291);
},getWaiState:function(elem,_292){
return elem.getAttribute("aria-"+_292)||"";
},setWaiState:function(elem,_293,_294){
elem.setAttribute("aria-"+_293,_294);
},removeWaiState:function(elem,_295){
elem.removeAttribute("aria-"+_295);
}});
}
if(!dojo._hasResource["dijit._base"]){
dojo._hasResource["dijit._base"]=true;
dojo.provide("dijit._base");
}
if(!dojo._hasResource["dijit._Widget"]){
dojo._hasResource["dijit._Widget"]=true;
dojo.provide("dijit._Widget");
dojo.connect(dojo,"_connect",function(_296,_297){
if(_296&&dojo.isFunction(_296._onConnect)){
_296._onConnect(_297);
}
});
dijit._connectOnUseEventHandler=function(_298){
};
dijit._lastKeyDownNode=null;
if(dojo.isIE){
(function(){
var _299=function(evt){
dijit._lastKeyDownNode=evt.srcElement;
};
dojo.doc.attachEvent("onkeydown",_299);
dojo.addOnWindowUnload(function(){
dojo.doc.detachEvent("onkeydown",_299);
});
})();
}else{
dojo.doc.addEventListener("keydown",function(evt){
dijit._lastKeyDownNode=evt.target;
},true);
}
(function(){
dojo.declare("dijit._Widget",dijit._WidgetBase,{_deferredConnects:{onClick:"",onDblClick:"",onKeyDown:"",onKeyPress:"",onKeyUp:"",onMouseMove:"",onMouseDown:"",onMouseOut:"",onMouseOver:"",onMouseLeave:"",onMouseEnter:"",onMouseUp:""},onClick:dijit._connectOnUseEventHandler,onDblClick:dijit._connectOnUseEventHandler,onKeyDown:dijit._connectOnUseEventHandler,onKeyPress:dijit._connectOnUseEventHandler,onKeyUp:dijit._connectOnUseEventHandler,onMouseDown:dijit._connectOnUseEventHandler,onMouseMove:dijit._connectOnUseEventHandler,onMouseOut:dijit._connectOnUseEventHandler,onMouseOver:dijit._connectOnUseEventHandler,onMouseLeave:dijit._connectOnUseEventHandler,onMouseEnter:dijit._connectOnUseEventHandler,onMouseUp:dijit._connectOnUseEventHandler,create:function(_29a,_29b){
this._deferredConnects=dojo.clone(this._deferredConnects);
for(var attr in this.attributeMap){
delete this._deferredConnects[attr];
}
for(attr in this._deferredConnects){
if(this[attr]!==dijit._connectOnUseEventHandler){
delete this._deferredConnects[attr];
}
}
this.inherited(arguments);
if(this.domNode){
for(attr in this.params){
this._onConnect(attr);
}
}
},_onConnect:function(_29c){
if(_29c in this._deferredConnects){
var _29d=this[this._deferredConnects[_29c]||"domNode"];
this.connect(_29d,_29c.toLowerCase(),_29c);
delete this._deferredConnects[_29c];
}
},focused:false,isFocusable:function(){
return this.focus&&(dojo.style(this.domNode,"display")!="none");
},onFocus:function(){
},onBlur:function(){
},_onFocus:function(e){
this.onFocus();
},_onBlur:function(){
this.onBlur();
},setAttribute:function(attr,_29e){
dojo.deprecated(this.declaredClass+"::setAttribute(attr, value) is deprecated. Use set() instead.","","2.0");
this.set(attr,_29e);
},attr:function(name,_29f){
if(dojo.config.isDebug){
var _2a0=arguments.callee._ach||(arguments.callee._ach={}),_2a1=(arguments.callee.caller||"unknown caller").toString();
if(!_2a0[_2a1]){
dojo.deprecated(this.declaredClass+"::attr() is deprecated. Use get() or set() instead, called from "+_2a1,"","2.0");
_2a0[_2a1]=true;
}
}
var args=arguments.length;
if(args>=2||typeof name==="object"){
return this.set.apply(this,arguments);
}else{
return this.get(name);
}
},nodesWithKeyClick:["input","button"],connect:function(obj,_2a2,_2a3){
var d=dojo,dc=d._connect,_2a4=this.inherited(arguments,[obj,_2a2=="ondijitclick"?"onclick":_2a2,_2a3]);
if(_2a2=="ondijitclick"){
if(d.indexOf(this.nodesWithKeyClick,obj.nodeName.toLowerCase())==-1){
var m=d.hitch(this,_2a3);
_2a4.push(dc(obj,"onkeydown",this,function(e){
if((e.keyCode==d.keys.ENTER||e.keyCode==d.keys.SPACE)&&!e.ctrlKey&&!e.shiftKey&&!e.altKey&&!e.metaKey){
dijit._lastKeyDownNode=e.target;
if(!("openDropDown" in this&&obj==this._buttonNode)){
e.preventDefault();
}
}
}),dc(obj,"onkeyup",this,function(e){
if((e.keyCode==d.keys.ENTER||e.keyCode==d.keys.SPACE)&&e.target==dijit._lastKeyDownNode&&!e.ctrlKey&&!e.shiftKey&&!e.altKey&&!e.metaKey){
dijit._lastKeyDownNode=null;
return m(e);
}
}));
}
}
return _2a4;
},_onShow:function(){
this.onShow();
},onShow:function(){
},onHide:function(){
},onClose:function(){
return true;
}});
})();
}
if(!dojo._hasResource["dojo.string"]){
dojo._hasResource["dojo.string"]=true;
dojo.provide("dojo.string");
dojo.getObject("string",true,dojo);
dojo.string.rep=function(str,num){
if(num<=0||!str){
return "";
}
var buf=[];
for(;;){
if(num&1){
buf.push(str);
}
if(!(num>>=1)){
break;
}
str+=str;
}
return buf.join("");
};
dojo.string.pad=function(text,size,ch,end){
if(!ch){
ch="0";
}
var out=String(text),pad=dojo.string.rep(ch,Math.ceil((size-out.length)/ch.length));
return end?out+pad:pad+out;
};
dojo.string.substitute=function(_2a5,map,_2a6,_2a7){
_2a7=_2a7||dojo.global;
_2a6=_2a6?dojo.hitch(_2a7,_2a6):function(v){
return v;
};
return _2a5.replace(/\$\{([^\s\:\}]+)(?:\:([^\s\:\}]+))?\}/g,function(_2a8,key,_2a9){
var _2aa=dojo.getObject(key,false,map);
if(_2a9){
_2aa=dojo.getObject(_2a9,false,_2a7).call(_2a7,_2aa,key);
}
return _2a6(_2aa,key).toString();
});
};
dojo.string.trim=String.prototype.trim?dojo.trim:function(str){
str=str.replace(/^\s+/,"");
for(var i=str.length-1;i>=0;i--){
if(/\S/.test(str.charAt(i))){
str=str.substring(0,i+1);
break;
}
}
return str;
};
}
if(!dojo._hasResource["dojo.cache"]){
dojo._hasResource["dojo.cache"]=true;
dojo.provide("dojo.cache");
var cache={};
dojo.cache=function(_2ab,url,_2ac){
if(typeof _2ab=="string"){
var _2ad=dojo.moduleUrl(_2ab,url);
}else{
_2ad=_2ab;
_2ac=url;
}
var key=_2ad.toString();
var val=_2ac;
if(_2ac!=undefined&&!dojo.isString(_2ac)){
val=("value" in _2ac?_2ac.value:undefined);
}
var _2ae=_2ac&&_2ac.sanitize?true:false;
if(typeof val=="string"){
val=cache[key]=_2ae?dojo.cache._sanitize(val):val;
}else{
if(val===null){
delete cache[key];
}else{
if(!(key in cache)){
val=dojo._getText(key);
cache[key]=_2ae?dojo.cache._sanitize(val):val;
}
val=cache[key];
}
}
return val;
};
dojo.cache._sanitize=function(val){
if(val){
val=val.replace(/^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,"");
var _2af=val.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im);
if(_2af){
val=_2af[1];
}
}else{
val="";
}
return val;
};
}
if(!dojo._hasResource["dijit._Templated"]){
dojo._hasResource["dijit._Templated"]=true;
dojo.provide("dijit._Templated");
dojo.declare("dijit._Templated",null,{templateString:null,templatePath:null,widgetsInTemplate:false,_skipNodeCache:false,_earlyTemplatedStartup:false,constructor:function(){
this._attachPoints=[];
this._attachEvents=[];
},_stringRepl:function(tmpl){
var _2b0=this.declaredClass,_2b1=this;
return dojo.string.substitute(tmpl,this,function(_2b2,key){
if(key.charAt(0)=="!"){
_2b2=dojo.getObject(key.substr(1),false,_2b1);
}
if(typeof _2b2=="undefined"){
throw new Error(_2b0+" template:"+key);
}
if(_2b2==null){
return "";
}
return key.charAt(0)=="!"?_2b2:_2b2.toString().replace(/"/g,"&quot;");
},this);
},buildRendering:function(){
var _2b3=dijit._Templated.getCachedTemplate(this.templatePath,this.templateString,this._skipNodeCache);
var node;
if(dojo.isString(_2b3)){
node=dojo._toDom(this._stringRepl(_2b3));
if(node.nodeType!=1){
throw new Error("Invalid template: "+_2b3);
}
}else{
node=_2b3.cloneNode(true);
}
this.domNode=node;
this.inherited(arguments);
this._attachTemplateNodes(node);
if(this.widgetsInTemplate){
var cw=(this._startupWidgets=dojo.parser.parse(node,{noStart:!this._earlyTemplatedStartup,template:true,inherited:{dir:this.dir,lang:this.lang},propsThis:this,scope:"dojo"}));
this._supportingWidgets=dijit.findWidgets(node);
this._attachTemplateNodes(cw,function(n,p){
return n[p];
});
}
this._fillContent(this.srcNodeRef);
},_fillContent:function(_2b4){
var dest=this.containerNode;
if(_2b4&&dest){
while(_2b4.hasChildNodes()){
dest.appendChild(_2b4.firstChild);
}
}
},_attachTemplateNodes:function(_2b5,_2b6){
_2b6=_2b6||function(n,p){
return n.getAttribute(p);
};
var _2b7=dojo.isArray(_2b5)?_2b5:(_2b5.all||_2b5.getElementsByTagName("*"));
var x=dojo.isArray(_2b5)?0:-1;
for(;x<_2b7.length;x++){
var _2b8=(x==-1)?_2b5:_2b7[x];
if(this.widgetsInTemplate&&(_2b6(_2b8,"dojoType")||_2b6(_2b8,"data-dojo-type"))){
continue;
}
var _2b9=_2b6(_2b8,"dojoAttachPoint")||_2b6(_2b8,"data-dojo-attach-point");
if(_2b9){
var _2ba,_2bb=_2b9.split(/\s*,\s*/);
while((_2ba=_2bb.shift())){
if(dojo.isArray(this[_2ba])){
this[_2ba].push(_2b8);
}else{
this[_2ba]=_2b8;
}
this._attachPoints.push(_2ba);
}
}
var _2bc=_2b6(_2b8,"dojoAttachEvent")||_2b6(_2b8,"data-dojo-attach-event");
if(_2bc){
var _2bd,_2be=_2bc.split(/\s*,\s*/);
var trim=dojo.trim;
while((_2bd=_2be.shift())){
if(_2bd){
var _2bf=null;
if(_2bd.indexOf(":")!=-1){
var _2c0=_2bd.split(":");
_2bd=trim(_2c0[0]);
_2bf=trim(_2c0[1]);
}else{
_2bd=trim(_2bd);
}
if(!_2bf){
_2bf=_2bd;
}
this._attachEvents.push(this.connect(_2b8,_2bd,_2bf));
}
}
}
var role=_2b6(_2b8,"waiRole");
if(role){
dijit.setWaiRole(_2b8,role);
}
var _2c1=_2b6(_2b8,"waiState");
if(_2c1){
dojo.forEach(_2c1.split(/\s*,\s*/),function(_2c2){
if(_2c2.indexOf("-")!=-1){
var pair=_2c2.split("-");
dijit.setWaiState(_2b8,pair[0],pair[1]);
}
});
}
}
},startup:function(){
dojo.forEach(this._startupWidgets,function(w){
if(w&&!w._started&&w.startup){
w.startup();
}
});
this.inherited(arguments);
},destroyRendering:function(){
dojo.forEach(this._attachPoints,function(_2c3){
delete this[_2c3];
},this);
this._attachPoints=[];
dojo.forEach(this._attachEvents,this.disconnect,this);
this._attachEvents=[];
this.inherited(arguments);
}});
dijit._Templated._templateCache={};
dijit._Templated.getCachedTemplate=function(_2c4,_2c5,_2c6){
var _2c7=dijit._Templated._templateCache;
var key=_2c5||_2c4;
var _2c8=_2c7[key];
if(_2c8){
try{
if(!_2c8.ownerDocument||_2c8.ownerDocument==dojo.doc){
return _2c8;
}
}
catch(e){
}
dojo.destroy(_2c8);
}
if(!_2c5){
_2c5=dojo.cache(_2c4,{sanitize:true});
}
_2c5=dojo.string.trim(_2c5);
if(_2c6||_2c5.match(/\$\{([^\}]+)\}/g)){
return (_2c7[key]=_2c5);
}else{
var node=dojo._toDom(_2c5);
if(node.nodeType!=1){
throw new Error("Invalid template: "+_2c5);
}
return (_2c7[key]=node);
}
};
if(dojo.isIE){
dojo.addOnWindowUnload(function(){
var _2c9=dijit._Templated._templateCache;
for(var key in _2c9){
var _2ca=_2c9[key];
if(typeof _2ca=="object"){
dojo.destroy(_2ca);
}
delete _2c9[key];
}
});
}
dojo.extend(dijit._Widget,{dojoAttachEvent:"",dojoAttachPoint:"",waiRole:"",waiState:""});
}
if(!dojo._hasResource["dijit._CssStateMixin"]){
dojo._hasResource["dijit._CssStateMixin"]=true;
dojo.provide("dijit._CssStateMixin");
dojo.declare("dijit._CssStateMixin",[],{cssStateNodes:{},hovering:false,active:false,_applyAttributes:function(){
this.inherited(arguments);
dojo.forEach(["onmouseenter","onmouseleave","onmousedown"],function(e){
this.connect(this.domNode,e,"_cssMouseEvent");
},this);
dojo.forEach(["disabled","readOnly","checked","selected","focused","state","hovering","active"],function(attr){
this.watch(attr,dojo.hitch(this,"_setStateClass"));
},this);
for(var ap in this.cssStateNodes){
this._trackMouseState(this[ap],this.cssStateNodes[ap]);
}
this._setStateClass();
},_cssMouseEvent:function(_2cb){
if(!this.disabled){
switch(_2cb.type){
case "mouseenter":
case "mouseover":
this._set("hovering",true);
this._set("active",this._mouseDown);
break;
case "mouseleave":
case "mouseout":
this._set("hovering",false);
this._set("active",false);
break;
case "mousedown":
this._set("active",true);
this._mouseDown=true;
var _2cc=this.connect(dojo.body(),"onmouseup",function(){
this._mouseDown=false;
this._set("active",false);
this.disconnect(_2cc);
});
break;
}
}
},_setStateClass:function(){
var _2cd=this.baseClass.split(" ");
function _2ce(_2cf){
_2cd=_2cd.concat(dojo.map(_2cd,function(c){
return c+_2cf;
}),"dijit"+_2cf);
};
if(!this.isLeftToRight()){
_2ce("Rtl");
}
if(this.checked){
_2ce("Checked");
}
if(this.state){
_2ce(this.state);
}
if(this.selected){
_2ce("Selected");
}
if(this.disabled){
_2ce("Disabled");
}else{
if(this.readOnly){
_2ce("ReadOnly");
}else{
if(this.active){
_2ce("Active");
}else{
if(this.hovering){
_2ce("Hover");
}
}
}
}
if(this._focused){
_2ce("Focused");
}
var tn=this.stateNode||this.domNode,_2d0={};
dojo.forEach(tn.className.split(" "),function(c){
_2d0[c]=true;
});
if("_stateClasses" in this){
dojo.forEach(this._stateClasses,function(c){
delete _2d0[c];
});
}
dojo.forEach(_2cd,function(c){
_2d0[c]=true;
});
var _2d1=[];
for(var c in _2d0){
_2d1.push(c);
}
tn.className=_2d1.join(" ");
this._stateClasses=_2cd;
},_trackMouseState:function(node,_2d2){
var _2d3=false,_2d4=false,_2d5=false;
var self=this,cn=dojo.hitch(this,"connect",node);
function _2d6(){
var _2d7=("disabled" in self&&self.disabled)||("readonly" in self&&self.readonly);
dojo.toggleClass(node,_2d2+"Hover",_2d3&&!_2d4&&!_2d7);
dojo.toggleClass(node,_2d2+"Active",_2d4&&!_2d7);
dojo.toggleClass(node,_2d2+"Focused",_2d5&&!_2d7);
};
cn("onmouseenter",function(){
_2d3=true;
_2d6();
});
cn("onmouseleave",function(){
_2d3=false;
_2d4=false;
_2d6();
});
cn("onmousedown",function(){
_2d4=true;
_2d6();
});
cn("onmouseup",function(){
_2d4=false;
_2d6();
});
cn("onfocus",function(){
_2d5=true;
_2d6();
});
cn("onblur",function(){
_2d5=false;
_2d6();
});
this.watch("disabled",_2d6);
this.watch("readOnly",_2d6);
}});
}
if(!dojo._hasResource["dijit.form._FormMixin"]){
dojo._hasResource["dijit.form._FormMixin"]=true;
dojo.provide("dijit.form._FormMixin");
dojo.declare("dijit.form._FormMixin",null,{state:"",reset:function(){
dojo.forEach(this.getDescendants(),function(_2d8){
if(_2d8.reset){
_2d8.reset();
}
});
},validate:function(){
var _2d9=false;
return dojo.every(dojo.map(this.getDescendants(),function(_2da){
_2da._hasBeenBlurred=true;
var _2db=_2da.disabled||!_2da.validate||_2da.validate();
if(!_2db&&!_2d9){
dojo.window.scrollIntoView(_2da.containerNode||_2da.domNode);
_2da.focus();
_2d9=true;
}
return _2db;
}),function(item){
return item;
});
},setValues:function(val){
dojo.deprecated(this.declaredClass+"::setValues() is deprecated. Use set('value', val) instead.","","2.0");
return this.set("value",val);
},_setValueAttr:function(obj){
var map={};
dojo.forEach(this.getDescendants(),function(_2dc){
if(!_2dc.name){
return;
}
var _2dd=map[_2dc.name]||(map[_2dc.name]=[]);
_2dd.push(_2dc);
});
for(var name in map){
if(!map.hasOwnProperty(name)){
continue;
}
var _2de=map[name],_2df=dojo.getObject(name,false,obj);
if(_2df===undefined){
continue;
}
if(!dojo.isArray(_2df)){
_2df=[_2df];
}
if(typeof _2de[0].checked=="boolean"){
dojo.forEach(_2de,function(w,i){
w.set("value",dojo.indexOf(_2df,w.value)!=-1);
});
}else{
if(_2de[0].multiple){
_2de[0].set("value",_2df);
}else{
dojo.forEach(_2de,function(w,i){
w.set("value",_2df[i]);
});
}
}
}
},getValues:function(){
dojo.deprecated(this.declaredClass+"::getValues() is deprecated. Use get('value') instead.","","2.0");
return this.get("value");
},_getValueAttr:function(){
var obj={};
dojo.forEach(this.getDescendants(),function(_2e0){
var name=_2e0.name;
if(!name||_2e0.disabled){
return;
}
var _2e1=_2e0.get("value");
if(typeof _2e0.checked=="boolean"){
if(/Radio/.test(_2e0.declaredClass)){
if(_2e1!==false){
dojo.setObject(name,_2e1,obj);
}else{
_2e1=dojo.getObject(name,false,obj);
if(_2e1===undefined){
dojo.setObject(name,null,obj);
}
}
}else{
var ary=dojo.getObject(name,false,obj);
if(!ary){
ary=[];
dojo.setObject(name,ary,obj);
}
if(_2e1!==false){
ary.push(_2e1);
}
}
}else{
var prev=dojo.getObject(name,false,obj);
if(typeof prev!="undefined"){
if(dojo.isArray(prev)){
prev.push(_2e1);
}else{
dojo.setObject(name,[prev,_2e1],obj);
}
}else{
dojo.setObject(name,_2e1,obj);
}
}
});
return obj;
},isValid:function(){
return this.state=="";
},onValidStateChange:function(_2e2){
},_getState:function(){
var _2e3=dojo.map(this._descendants,function(w){
return w.get("state")||"";
});
return dojo.indexOf(_2e3,"Error")>=0?"Error":dojo.indexOf(_2e3,"Incomplete")>=0?"Incomplete":"";
},disconnectChildren:function(){
dojo.forEach(this._childConnections||[],dojo.hitch(this,"disconnect"));
dojo.forEach(this._childWatches||[],function(w){
w.unwatch();
});
},connectChildren:function(_2e4){
var _2e5=this;
this.disconnectChildren();
this._descendants=this.getDescendants();
var set=_2e4?function(name,val){
_2e5[name]=val;
}:dojo.hitch(this,"_set");
set("value",this.get("value"));
set("state",this._getState());
var _2e6=(this._childConnections=[]),_2e7=(this._childWatches=[]);
dojo.forEach(dojo.filter(this._descendants,function(item){
return item.validate;
}),function(_2e8){
dojo.forEach(["state","disabled"],function(attr){
_2e7.push(_2e8.watch(attr,function(attr,_2e9,_2ea){
_2e5.set("state",_2e5._getState());
}));
});
});
var _2eb=function(){
if(_2e5._onChangeDelayTimer){
clearTimeout(_2e5._onChangeDelayTimer);
}
_2e5._onChangeDelayTimer=setTimeout(function(){
delete _2e5._onChangeDelayTimer;
_2e5._set("value",_2e5.get("value"));
},10);
};
dojo.forEach(dojo.filter(this._descendants,function(item){
return item.onChange;
}),function(_2ec){
_2e6.push(_2e5.connect(_2ec,"onChange",_2eb));
_2e7.push(_2ec.watch("disabled",_2eb));
});
},startup:function(){
this.inherited(arguments);
this.connectChildren(true);
this.watch("state",function(attr,_2ed,_2ee){
this.onValidStateChange(_2ee=="");
});
},destroy:function(){
this.disconnectChildren();
this.inherited(arguments);
}});
}
if(!dojo._hasResource["dijit._DialogMixin"]){
dojo._hasResource["dijit._DialogMixin"]=true;
dojo.provide("dijit._DialogMixin");
dojo.declare("dijit._DialogMixin",null,{attributeMap:dijit._Widget.prototype.attributeMap,execute:function(_2ef){
},onCancel:function(){
},onExecute:function(){
},_onSubmit:function(){
this.onExecute();
this.execute(this.get("value"));
},_getFocusItems:function(){
var _2f0=dijit._getTabNavigable(this.containerNode);
this._firstFocusItem=_2f0.lowest||_2f0.first||this.closeButtonNode||this.domNode;
this._lastFocusItem=_2f0.last||_2f0.highest||this._firstFocusItem;
}});
}
if(!dojo._hasResource["dijit.DialogUnderlay"]){
dojo._hasResource["dijit.DialogUnderlay"]=true;
dojo.provide("dijit.DialogUnderlay");
dojo.declare("dijit.DialogUnderlay",[dijit._Widget,dijit._Templated],{templateString:"<div class='dijitDialogUnderlayWrapper'><div class='dijitDialogUnderlay' dojoAttachPoint='node'></div></div>",dialogId:"","class":"",attributeMap:{id:"domNode"},_setDialogIdAttr:function(id){
dojo.attr(this.node,"id",id+"_underlay");
this._set("dialogId",id);
},_setClassAttr:function(_2f1){
this.node.className="dijitDialogUnderlay "+_2f1;
this._set("class",_2f1);
},postCreate:function(){
dojo.body().appendChild(this.domNode);
},layout:function(){
var is=this.node.style,os=this.domNode.style;
os.display="none";
var _2f2=dojo.window.getBox();
os.top=_2f2.t+"px";
os.left=_2f2.l+"px";
is.width=_2f2.w+"px";
is.height=_2f2.h+"px";
os.display="block";
},show:function(){
this.domNode.style.display="block";
this.layout();
this.bgIframe=new dijit.BackgroundIframe(this.domNode);
},hide:function(){
this.bgIframe.destroy();
delete this.bgIframe;
this.domNode.style.display="none";
}});
}
if(!dojo._hasResource["dijit._Contained"]){
dojo._hasResource["dijit._Contained"]=true;
dojo.provide("dijit._Contained");
dojo.declare("dijit._Contained",null,{getParent:function(){
var _2f3=dijit.getEnclosingWidget(this.domNode.parentNode);
return _2f3&&_2f3.isContainer?_2f3:null;
},_getSibling:function(_2f4){
var node=this.domNode;
do{
node=node[_2f4+"Sibling"];
}while(node&&node.nodeType!=1);
return node&&dijit.byNode(node);
},getPreviousSibling:function(){
return this._getSibling("previous");
},getNextSibling:function(){
return this._getSibling("next");
},getIndexInParent:function(){
var p=this.getParent();
if(!p||!p.getIndexOfChild){
return -1;
}
return p.getIndexOfChild(this);
}});
}
if(!dojo._hasResource["dijit._Container"]){
dojo._hasResource["dijit._Container"]=true;
dojo.provide("dijit._Container");
dojo.declare("dijit._Container",null,{isContainer:true,buildRendering:function(){
this.inherited(arguments);
if(!this.containerNode){
this.containerNode=this.domNode;
}
},addChild:function(_2f5,_2f6){
var _2f7=this.containerNode;
if(_2f6&&typeof _2f6=="number"){
var _2f8=this.getChildren();
if(_2f8&&_2f8.length>=_2f6){
_2f7=_2f8[_2f6-1].domNode;
_2f6="after";
}
}
dojo.place(_2f5.domNode,_2f7,_2f6);
if(this._started&&!_2f5._started){
_2f5.startup();
}
},removeChild:function(_2f9){
if(typeof _2f9=="number"){
_2f9=this.getChildren()[_2f9];
}
if(_2f9){
var node=_2f9.domNode;
if(node&&node.parentNode){
node.parentNode.removeChild(node);
}
}
},hasChildren:function(){
return this.getChildren().length>0;
},destroyDescendants:function(_2fa){
dojo.forEach(this.getChildren(),function(_2fb){
_2fb.destroyRecursive(_2fa);
});
},_getSiblingOfChild:function(_2fc,dir){
var node=_2fc.domNode,_2fd=(dir>0?"nextSibling":"previousSibling");
do{
node=node[_2fd];
}while(node&&(node.nodeType!=1||!dijit.byNode(node)));
return node&&dijit.byNode(node);
},getIndexOfChild:function(_2fe){
return dojo.indexOf(this.getChildren(),_2fe);
},startup:function(){
if(this._started){
return;
}
dojo.forEach(this.getChildren(),function(_2ff){
_2ff.startup();
});
this.inherited(arguments);
}});
}
if(!dojo._hasResource["dijit.layout._LayoutWidget"]){
dojo._hasResource["dijit.layout._LayoutWidget"]=true;
dojo.provide("dijit.layout._LayoutWidget");
dojo.declare("dijit.layout._LayoutWidget",[dijit._Widget,dijit._Container,dijit._Contained],{baseClass:"dijitLayoutContainer",isLayoutContainer:true,buildRendering:function(){
this.inherited(arguments);
dojo.addClass(this.domNode,"dijitContainer");
},startup:function(){
if(this._started){
return;
}
this.inherited(arguments);
var _300=this.getParent&&this.getParent();
if(!(_300&&_300.isLayoutContainer)){
this.resize();
this.connect(dojo.isIE?this.domNode:dojo.global,"onresize",function(){
this.resize();
});
}
},resize:function(_301,_302){
var node=this.domNode;
if(_301){
dojo.marginBox(node,_301);
if(_301.t){
node.style.top=_301.t+"px";
}
if(_301.l){
node.style.left=_301.l+"px";
}
}
var mb=_302||{};
dojo.mixin(mb,_301||{});
if(!("h" in mb)||!("w" in mb)){
mb=dojo.mixin(dojo.marginBox(node),mb);
}
var cs=dojo.getComputedStyle(node);
var me=dojo._getMarginExtents(node,cs);
var be=dojo._getBorderExtents(node,cs);
var bb=(this._borderBox={w:mb.w-(me.w+be.w),h:mb.h-(me.h+be.h)});
var pe=dojo._getPadExtents(node,cs);
this._contentBox={l:dojo._toPixelValue(node,cs.paddingLeft),t:dojo._toPixelValue(node,cs.paddingTop),w:bb.w-pe.w,h:bb.h-pe.h};
this.layout();
},layout:function(){
},_setupChild:function(_303){
var cls=this.baseClass+"-child "+(_303.baseClass?this.baseClass+"-"+_303.baseClass:"");
dojo.addClass(_303.domNode,cls);
},addChild:function(_304,_305){
this.inherited(arguments);
if(this._started){
this._setupChild(_304);
}
},removeChild:function(_306){
var cls=this.baseClass+"-child"+(_306.baseClass?" "+this.baseClass+"-"+_306.baseClass:"");
dojo.removeClass(_306.domNode,cls);
this.inherited(arguments);
}});
dijit.layout.marginBox2contentBox=function(node,mb){
var cs=dojo.getComputedStyle(node);
var me=dojo._getMarginExtents(node,cs);
var pb=dojo._getPadBorderExtents(node,cs);
return {l:dojo._toPixelValue(node,cs.paddingLeft),t:dojo._toPixelValue(node,cs.paddingTop),w:mb.w-(me.w+pb.w),h:mb.h-(me.h+pb.h)};
};
(function(){
var _307=function(word){
return word.substring(0,1).toUpperCase()+word.substring(1);
};
var size=function(_308,dim){
var _309=_308.resize?_308.resize(dim):dojo.marginBox(_308.domNode,dim);
if(_309){
dojo.mixin(_308,_309);
}else{
dojo.mixin(_308,dojo.marginBox(_308.domNode));
dojo.mixin(_308,dim);
}
};
dijit.layout.layoutChildren=function(_30a,dim,_30b,_30c,_30d){
dim=dojo.mixin({},dim);
dojo.addClass(_30a,"dijitLayoutContainer");
_30b=dojo.filter(_30b,function(item){
return item.region!="center"&&item.layoutAlign!="client";
}).concat(dojo.filter(_30b,function(item){
return item.region=="center"||item.layoutAlign=="client";
}));
dojo.forEach(_30b,function(_30e){
var elm=_30e.domNode,pos=(_30e.region||_30e.layoutAlign);
var _30f=elm.style;
_30f.left=dim.l+"px";
_30f.top=dim.t+"px";
_30f.position="absolute";
dojo.addClass(elm,"dijitAlign"+_307(pos));
var _310={};
if(_30c&&_30c==_30e.id){
_310[_30e.region=="top"||_30e.region=="bottom"?"h":"w"]=_30d;
}
if(pos=="top"||pos=="bottom"){
_310.w=dim.w;
size(_30e,_310);
dim.h-=_30e.h;
if(pos=="top"){
dim.t+=_30e.h;
}else{
_30f.top=dim.t+dim.h+"px";
}
}else{
if(pos=="left"||pos=="right"){
_310.h=dim.h;
size(_30e,_310);
dim.w-=_30e.w;
if(pos=="left"){
dim.l+=_30e.w;
}else{
_30f.left=dim.l+dim.w+"px";
}
}else{
if(pos=="client"||pos=="center"){
size(_30e,dim);
}
}
}
});
};
})();
}
if(!dojo._hasResource["dijit.layout._ContentPaneResizeMixin"]){
dojo._hasResource["dijit.layout._ContentPaneResizeMixin"]=true;
dojo.provide("dijit.layout._ContentPaneResizeMixin");
dojo.declare("dijit.layout._ContentPaneResizeMixin",null,{doLayout:true,isContainer:true,isLayoutContainer:true,_startChildren:function(){
dojo.forEach(this.getChildren(),function(_311){
_311.startup();
_311._started=true;
});
},startup:function(){
if(this._started){
return;
}
var _312=dijit._Contained.prototype.getParent.call(this);
this._childOfLayoutWidget=_312&&_312.isLayoutContainer;
this._needLayout=!this._childOfLayoutWidget;
this.inherited(arguments);
this._startChildren();
if(this._isShown()){
this._onShow();
}
if(!this._childOfLayoutWidget){
this.connect(dojo.isIE?this.domNode:dojo.global,"onresize",function(){
this._needLayout=!this._childOfLayoutWidget;
this.resize();
});
}
},_checkIfSingleChild:function(){
var _313=dojo.query("> *",this.containerNode).filter(function(node){
return node.tagName!=="SCRIPT";
}),_314=_313.filter(function(node){
return dojo.hasAttr(node,"data-dojo-type")||dojo.hasAttr(node,"dojoType")||dojo.hasAttr(node,"widgetId");
}),_315=dojo.filter(_314.map(dijit.byNode),function(_316){
return _316&&_316.domNode&&_316.resize;
});
if(_313.length==_314.length&&_315.length==1){
this._singleChild=_315[0];
}else{
delete this._singleChild;
}
dojo.toggleClass(this.containerNode,this.baseClass+"SingleChild",!!this._singleChild);
},resize:function(_317,_318){
if(!this._wasShown&&this.open!==false){
this._onShow();
}
this._resizeCalled=true;
this._scheduleLayout(_317,_318);
},_scheduleLayout:function(_319,_31a){
if(this._isShown()){
this._layout(_319,_31a);
}else{
this._needLayout=true;
this._changeSize=_319;
this._resultSize=_31a;
}
},_layout:function(_31b,_31c){
if(_31b){
dojo.marginBox(this.domNode,_31b);
}
var cn=this.containerNode;
if(cn===this.domNode){
var mb=_31c||{};
dojo.mixin(mb,_31b||{});
if(!("h" in mb)||!("w" in mb)){
mb=dojo.mixin(dojo.marginBox(cn),mb);
}
this._contentBox=dijit.layout.marginBox2contentBox(cn,mb);
}else{
this._contentBox=dojo.contentBox(cn);
}
this._layoutChildren();
delete this._needLayout;
},_layoutChildren:function(){
if(this.doLayout){
this._checkIfSingleChild();
}
if(this._singleChild&&this._singleChild.resize){
var cb=this._contentBox||dojo.contentBox(this.containerNode);
this._singleChild.resize({w:cb.w,h:cb.h});
}else{
dojo.forEach(this.getChildren(),function(_31d){
if(_31d.resize){
_31d.resize();
}
});
}
},_isShown:function(){
if(this._childOfLayoutWidget){
if(this._resizeCalled&&"open" in this){
return this.open;
}
return this._resizeCalled;
}else{
if("open" in this){
return this.open;
}else{
var node=this.domNode,_31e=this.domNode.parentNode;
return (node.style.display!="none")&&(node.style.visibility!="hidden")&&!dojo.hasClass(node,"dijitHidden")&&_31e&&_31e.style&&(_31e.style.display!="none");
}
}
},_onShow:function(){
if(this._needLayout){
this._layout(this._changeSize,this._resultSize);
}
this.inherited(arguments);
this._wasShown=true;
}});
}
if(!dojo._hasResource["dojo.html"]){
dojo._hasResource["dojo.html"]=true;
dojo.provide("dojo.html");
dojo.getObject("html",true,dojo);
(function(){
var _31f=0,d=dojo;
dojo.html._secureForInnerHtml=function(cont){
return cont.replace(/(?:\s*<!DOCTYPE\s[^>]+>|<title[^>]*>[\s\S]*?<\/title>)/ig,"");
};
dojo.html._emptyNode=dojo.empty;
dojo.html._setNodeContent=function(node,cont){
d.empty(node);
if(cont){
if(typeof cont=="string"){
cont=d._toDom(cont,node.ownerDocument);
}
if(!cont.nodeType&&d.isArrayLike(cont)){
for(var _320=cont.length,i=0;i<cont.length;i=_320==cont.length?i+1:0){
d.place(cont[i],node,"last");
}
}else{
d.place(cont,node,"last");
}
}
return node;
};
dojo.declare("dojo.html._ContentSetter",null,{node:"",content:"",id:"",cleanContent:false,extractContent:false,parseContent:false,parserScope:dojo._scopeName,startup:true,constructor:function(_321,node){
dojo.mixin(this,_321||{});
node=this.node=dojo.byId(this.node||node);
if(!this.id){
this.id=["Setter",(node)?node.id||node.tagName:"",_31f++].join("_");
}
},set:function(cont,_322){
if(undefined!==cont){
this.content=cont;
}
if(_322){
this._mixin(_322);
}
this.onBegin();
this.setContent();
this.onEnd();
return this.node;
},setContent:function(){
var node=this.node;
if(!node){
throw new Error(this.declaredClass+": setContent given no node");
}
try{
node=dojo.html._setNodeContent(node,this.content);
}
catch(e){
var _323=this.onContentError(e);
try{
node.innerHTML=_323;
}
catch(e){
console.error("Fatal "+this.declaredClass+".setContent could not change content due to "+e.message,e);
}
}
this.node=node;
},empty:function(){
if(this.parseResults&&this.parseResults.length){
dojo.forEach(this.parseResults,function(w){
if(w.destroy){
w.destroy();
}
});
delete this.parseResults;
}
dojo.html._emptyNode(this.node);
},onBegin:function(){
var cont=this.content;
if(dojo.isString(cont)){
if(this.cleanContent){
cont=dojo.html._secureForInnerHtml(cont);
}
if(this.extractContent){
var _324=cont.match(/<body[^>]*>\s*([\s\S]+)\s*<\/body>/im);
if(_324){
cont=_324[1];
}
}
}
this.empty();
this.content=cont;
return this.node;
},onEnd:function(){
if(this.parseContent){
this._parse();
}
return this.node;
},tearDown:function(){
delete this.parseResults;
delete this.node;
delete this.content;
},onContentError:function(err){
return "Error occured setting content: "+err;
},_mixin:function(_325){
var _326={},key;
for(key in _325){
if(key in _326){
continue;
}
this[key]=_325[key];
}
},_parse:function(){
var _327=this.node;
try{
var _328={};
dojo.forEach(["dir","lang","textDir"],function(name){
if(this[name]){
_328[name]=this[name];
}
},this);
this.parseResults=dojo.parser.parse({rootNode:_327,noStart:!this.startup,inherited:_328,scope:this.parserScope});
}
catch(e){
this._onError("Content",e,"Error parsing in _ContentSetter#"+this.id);
}
},_onError:function(type,err,_329){
var _32a=this["on"+type+"Error"].call(this,err);
if(_329){
console.error(_329,err);
}else{
if(_32a){
dojo.html._setNodeContent(this.node,_32a,true);
}
}
}});
dojo.html.set=function(node,cont,_32b){
if(undefined==cont){
console.warn("dojo.html.set: no cont argument provided, using empty string");
cont="";
}
if(!_32b){
return dojo.html._setNodeContent(node,cont,true);
}else{
var op=new dojo.html._ContentSetter(dojo.mixin(_32b,{content:cont,node:node}));
return op.set();
}
};
})();
}
if(!dojo._hasResource["dojo.i18n"]){
dojo._hasResource["dojo.i18n"]=true;
dojo.provide("dojo.i18n");
dojo.getObject("i18n",true,dojo);
dojo.i18n.getLocalization=dojo.i18n.getLocalization||function(_32c,_32d,_32e){
_32e=dojo.i18n.normalizeLocale(_32e);
var _32f=_32e.split("-");
var _330=[_32c,"nls",_32d].join(".");
var _331=dojo._loadedModules[_330];
if(_331){
var _332;
for(var i=_32f.length;i>0;i--){
var loc=_32f.slice(0,i).join("_");
if(_331[loc]){
_332=_331[loc];
break;
}
}
if(!_332){
_332=_331.ROOT;
}
if(_332){
var _333=function(){
};
_333.prototype=_332;
return new _333();
}
}
throw new Error("Bundle not found: "+_32d+" in "+_32c+" , locale="+_32e);
};
dojo.i18n.normalizeLocale=function(_334){
var _335=_334?_334.toLowerCase():dojo.locale;
if(_335=="root"){
_335="ROOT";
}
return _335;
};
dojo.i18n._requireLocalization=function(_336,_337,_338,_339){
var _33a=dojo.i18n.normalizeLocale(_338);
var _33b=[_336,"nls",_337].join(".");
var _33c="";
if(_339){
var _33d=_339.split(",");
for(var i=0;i<_33d.length;i++){
if(_33a["indexOf"](_33d[i])==0){
if(_33d[i].length>_33c.length){
_33c=_33d[i];
}
}
}
if(!_33c){
_33c="ROOT";
}
}
var _33e=_339?_33c:_33a;
var _33f=dojo._loadedModules[_33b];
var _340=null;
if(_33f){
if(dojo.config.localizationComplete&&_33f._built){
return;
}
var _341=_33e.replace(/-/g,"_");
var _342=_33b+"."+_341;
_340=dojo._loadedModules[_342];
}
if(!_340){
_33f=dojo["provide"](_33b);
var syms=dojo._getModuleSymbols(_336);
var _343=syms.concat("nls").join("/");
var _344;
dojo.i18n._searchLocalePath(_33e,_339,function(loc){
var _345=loc.replace(/-/g,"_");
var _346=_33b+"."+_345;
var _347=false;
if(!dojo._loadedModules[_346]){
dojo["provide"](_346);
var _348=[_343];
if(loc!="ROOT"){
_348.push(loc);
}
_348.push(_337);
var _349=_348.join("/")+".js";
_347=dojo._loadPath(_349,null,function(hash){
hash=hash.root||hash;
var _34a=function(){
};
_34a.prototype=_344;
_33f[_345]=new _34a();
for(var j in hash){
_33f[_345][j]=hash[j];
}
});
}else{
_347=true;
}
if(_347&&_33f[_345]){
_344=_33f[_345];
}else{
_33f[_345]=_344;
}
if(_339){
return true;
}
});
}
if(_339&&_33a!=_33c){
_33f[_33a.replace(/-/g,"_")]=_33f[_33c.replace(/-/g,"_")];
}
};
(function(){
var _34b=dojo.config.extraLocale;
if(_34b){
if(!_34b instanceof Array){
_34b=[_34b];
}
var req=dojo.i18n._requireLocalization;
dojo.i18n._requireLocalization=function(m,b,_34c,_34d){
req(m,b,_34c,_34d);
if(_34c){
return;
}
for(var i=0;i<_34b.length;i++){
req(m,b,_34b[i],_34d);
}
};
}
})();
dojo.i18n._searchLocalePath=function(_34e,down,_34f){
_34e=dojo.i18n.normalizeLocale(_34e);
var _350=_34e.split("-");
var _351=[];
for(var i=_350.length;i>0;i--){
_351.push(_350.slice(0,i).join("-"));
}
_351.push(false);
if(down){
_351.reverse();
}
for(var j=_351.length-1;j>=0;j--){
var loc=_351[j]||"ROOT";
var stop=_34f(loc);
if(stop){
break;
}
}
};
dojo.i18n._preloadLocalizations=function(_352,_353){
function _354(_355){
_355=dojo.i18n.normalizeLocale(_355);
dojo.i18n._searchLocalePath(_355,true,function(loc){
for(var i=0;i<_353.length;i++){
if(_353[i]==loc){
dojo["require"](_352+"_"+loc);
return true;
}
}
return false;
});
};
_354();
var _356=dojo.config.extraLocale||[];
for(var i=0;i<_356.length;i++){
_354(_356[i]);
}
};
}
if(!dojo._hasResource["dijit.layout.ContentPane"]){
dojo._hasResource["dijit.layout.ContentPane"]=true;
dojo.provide("dijit.layout.ContentPane");
dojo.declare("dijit.layout.ContentPane",[dijit._Widget,dijit.layout._ContentPaneResizeMixin],{href:"",extractContent:false,parseOnLoad:true,parserScope:dojo._scopeName,preventCache:false,preload:false,refreshOnShow:false,loadingMessage:"<span class='dijitContentPaneLoading'>${loadingState}</span>",errorMessage:"<span class='dijitContentPaneError'>${errorState}</span>",isLoaded:false,baseClass:"dijitContentPane",ioArgs:{},onLoadDeferred:null,attributeMap:dojo.delegate(dijit._Widget.prototype.attributeMap,{title:[]}),stopParser:true,template:false,create:function(_357,_358){
if((!_357||!_357.template)&&_358&&!("href" in _357)&&!("content" in _357)){
var df=dojo.doc.createDocumentFragment();
_358=dojo.byId(_358);
while(_358.firstChild){
df.appendChild(_358.firstChild);
}
_357=dojo.delegate(_357,{content:df});
}
this.inherited(arguments,[_357,_358]);
},postMixInProperties:function(){
this.inherited(arguments);
var _359=dojo.i18n.getLocalization("dijit","loading",this.lang);
this.loadingMessage=dojo.string.substitute(this.loadingMessage,_359);
this.errorMessage=dojo.string.substitute(this.errorMessage,_359);
},buildRendering:function(){
this.inherited(arguments);
if(!this.containerNode){
this.containerNode=this.domNode;
}
this.domNode.title="";
if(!dojo.attr(this.domNode,"role")){
dijit.setWaiRole(this.domNode,"group");
}
},_startChildren:function(){
this.inherited(arguments);
if(this._contentSetter){
dojo.forEach(this._contentSetter.parseResults,function(obj){
if(!obj._started&&!obj._destroyed&&dojo.isFunction(obj.startup)){
obj.startup();
obj._started=true;
}
},this);
}
},setHref:function(href){
dojo.deprecated("dijit.layout.ContentPane.setHref() is deprecated. Use set('href', ...) instead.","","2.0");
return this.set("href",href);
},_setHrefAttr:function(href){
this.cancel();
this.onLoadDeferred=new dojo.Deferred(dojo.hitch(this,"cancel"));
this.onLoadDeferred.addCallback(dojo.hitch(this,"onLoad"));
this._set("href",href);
if(this.preload||(this._created&&this._isShown())){
this._load();
}else{
this._hrefChanged=true;
}
return this.onLoadDeferred;
},setContent:function(data){
dojo.deprecated("dijit.layout.ContentPane.setContent() is deprecated.  Use set('content', ...) instead.","","2.0");
this.set("content",data);
},_setContentAttr:function(data){
this._set("href","");
this.cancel();
this.onLoadDeferred=new dojo.Deferred(dojo.hitch(this,"cancel"));
if(this._created){
this.onLoadDeferred.addCallback(dojo.hitch(this,"onLoad"));
}
this._setContent(data||"");
this._isDownloaded=false;
return this.onLoadDeferred;
},_getContentAttr:function(){
return this.containerNode.innerHTML;
},cancel:function(){
if(this._xhrDfd&&(this._xhrDfd.fired==-1)){
this._xhrDfd.cancel();
}
delete this._xhrDfd;
this.onLoadDeferred=null;
},uninitialize:function(){
if(this._beingDestroyed){
this.cancel();
}
this.inherited(arguments);
},destroyRecursive:function(_35a){
if(this._beingDestroyed){
return;
}
this.inherited(arguments);
},_onShow:function(){
this.inherited(arguments);
if(this.href){
if(!this._xhrDfd&&(!this.isLoaded||this._hrefChanged||this.refreshOnShow)){
return this.refresh();
}
}
},refresh:function(){
this.cancel();
this.onLoadDeferred=new dojo.Deferred(dojo.hitch(this,"cancel"));
this.onLoadDeferred.addCallback(dojo.hitch(this,"onLoad"));
this._load();
return this.onLoadDeferred;
},_load:function(){
this._setContent(this.onDownloadStart(),true);
var self=this;
var _35b={preventCache:(this.preventCache||this.refreshOnShow),url:this.href,handleAs:"text"};
if(dojo.isObject(this.ioArgs)){
dojo.mixin(_35b,this.ioArgs);
}
var hand=(this._xhrDfd=(this.ioMethod||dojo.xhrGet)(_35b));
hand.addCallback(function(html){
try{
self._isDownloaded=true;
self._setContent(html,false);
self.onDownloadEnd();
}
catch(err){
self._onError("Content",err);
}
delete self._xhrDfd;
return html;
});
hand.addErrback(function(err){
if(!hand.canceled){
self._onError("Download",err);
}
delete self._xhrDfd;
return err;
});
delete this._hrefChanged;
},_onLoadHandler:function(data){
this._set("isLoaded",true);
try{
this.onLoadDeferred.callback(data);
}
catch(e){
console.error("Error "+this.widgetId+" running custom onLoad code: "+e.message);
}
},_onUnloadHandler:function(){
this._set("isLoaded",false);
try{
this.onUnload();
}
catch(e){
console.error("Error "+this.widgetId+" running custom onUnload code: "+e.message);
}
},destroyDescendants:function(){
if(this.isLoaded){
this._onUnloadHandler();
}
var _35c=this._contentSetter;
dojo.forEach(this.getChildren(),function(_35d){
if(_35d.destroyRecursive){
_35d.destroyRecursive();
}
});
if(_35c){
dojo.forEach(_35c.parseResults,function(_35e){
if(_35e.destroyRecursive&&_35e.domNode&&_35e.domNode.parentNode==dojo.body()){
_35e.destroyRecursive();
}
});
delete _35c.parseResults;
}
dojo.html._emptyNode(this.containerNode);
delete this._singleChild;
},_setContent:function(cont,_35f){
this.destroyDescendants();
var _360=this._contentSetter;
if(!(_360&&_360 instanceof dojo.html._ContentSetter)){
_360=this._contentSetter=new dojo.html._ContentSetter({node:this.containerNode,_onError:dojo.hitch(this,this._onError),onContentError:dojo.hitch(this,function(e){
var _361=this.onContentError(e);
try{
this.containerNode.innerHTML=_361;
}
catch(e){
console.error("Fatal "+this.id+" could not change content due to "+e.message,e);
}
})});
}
var _362=dojo.mixin({cleanContent:this.cleanContent,extractContent:this.extractContent,parseContent:this.parseOnLoad,parserScope:this.parserScope,startup:false,dir:this.dir,lang:this.lang},this._contentSetterParams||{});
_360.set((dojo.isObject(cont)&&cont.domNode)?cont.domNode:cont,_362);
delete this._contentSetterParams;
if(this.doLayout){
this._checkIfSingleChild();
}
if(!_35f){
if(this._started){
this._startChildren();
this._scheduleLayout();
}
this._onLoadHandler(cont);
}
},_onError:function(type,err,_363){
this.onLoadDeferred.errback(err);
var _364=this["on"+type+"Error"].call(this,err);
if(_363){
console.error(_363,err);
}else{
if(_364){
this._setContent(_364,true);
}
}
},onLoad:function(data){
},onUnload:function(){
},onDownloadStart:function(){
return this.loadingMessage;
},onContentError:function(_365){
},onDownloadError:function(_366){
return this.errorMessage;
},onDownloadEnd:function(){
}});
}
if(!dojo._hasResource["dijit.TooltipDialog"]){
dojo._hasResource["dijit.TooltipDialog"]=true;
dojo.provide("dijit.TooltipDialog");
dojo.declare("dijit.TooltipDialog",[dijit.layout.ContentPane,dijit._Templated,dijit.form._FormMixin,dijit._DialogMixin],{title:"",doLayout:false,autofocus:true,baseClass:"dijitTooltipDialog",_firstFocusItem:null,_lastFocusItem:null,templateString:dojo.cache("dijit","templates/TooltipDialog.html","<div role=\"presentation\" tabIndex=\"-1\">\r\n\t<div class=\"dijitTooltipContainer\" role=\"presentation\">\r\n\t\t<div class =\"dijitTooltipContents dijitTooltipFocusNode\" dojoAttachPoint=\"containerNode\" role=\"dialog\"></div>\r\n\t</div>\r\n\t<div class=\"dijitTooltipConnector\" role=\"presentation\"></div>\r\n</div>\r\n"),_setTitleAttr:function(_367){
this.containerNode.title=_367;
this._set("title",_367);
},postCreate:function(){
this.inherited(arguments);
this.connect(this.containerNode,"onkeypress","_onKey");
},orient:function(node,_368,_369){
var newC="dijitTooltipAB"+(_369.charAt(1)=="L"?"Left":"Right")+" dijitTooltip"+(_369.charAt(0)=="T"?"Below":"Above");
dojo.replaceClass(this.domNode,newC,this._currentOrientClass||"");
this._currentOrientClass=newC;
},focus:function(){
this._getFocusItems(this.containerNode);
dijit.focus(this._firstFocusItem);
},onOpen:function(pos){
this.orient(this.domNode,pos.aroundCorner,pos.corner);
this._onShow();
},onClose:function(){
this.onHide();
},_onKey:function(evt){
var node=evt.target;
var dk=dojo.keys;
if(evt.charOrCode===dk.TAB){
this._getFocusItems(this.containerNode);
}
var _36a=(this._firstFocusItem==this._lastFocusItem);
if(evt.charOrCode==dk.ESCAPE){
setTimeout(dojo.hitch(this,"onCancel"),0);
dojo.stopEvent(evt);
}else{
if(node==this._firstFocusItem&&evt.shiftKey&&evt.charOrCode===dk.TAB){
if(!_36a){
dijit.focus(this._lastFocusItem);
}
dojo.stopEvent(evt);
}else{
if(node==this._lastFocusItem&&evt.charOrCode===dk.TAB&&!evt.shiftKey){
if(!_36a){
dijit.focus(this._firstFocusItem);
}
dojo.stopEvent(evt);
}else{
if(evt.charOrCode===dk.TAB){
evt.stopPropagation();
}
}
}
}
}});
}
if(!dojo._hasResource["dijit.Dialog"]){
dojo._hasResource["dijit.Dialog"]=true;
dojo.provide("dijit.Dialog");
dojo.declare("dijit._DialogBase",[dijit._Templated,dijit.form._FormMixin,dijit._DialogMixin,dijit._CssStateMixin],{templateString:dojo.cache("dijit","templates/Dialog.html","<div class=\"dijitDialog\" role=\"dialog\" aria-labelledby=\"${id}_title\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\">\r\n\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\" id=\"${id}_title\"></span>\r\n\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"ondijitclick: onCancel\" title=\"${buttonCancel}\" role=\"button\" tabIndex=\"-1\">\r\n\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\" title=\"${buttonCancel}\">x</span>\r\n\t</span>\r\n\t</div>\r\n\t\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\"></div>\r\n</div>\r\n"),baseClass:"dijitDialog",cssStateNodes:{closeButtonNode:"dijitDialogCloseIcon"},attributeMap:dojo.delegate(dijit._Widget.prototype.attributeMap,{title:[{node:"titleNode",type:"innerHTML"},{node:"titleBar",type:"attribute"}],"aria-describedby":""}),open:false,duration:dijit.defaultDuration,refocus:true,autofocus:true,_firstFocusItem:null,_lastFocusItem:null,doLayout:false,draggable:true,"aria-describedby":"",postMixInProperties:function(){
var _36b=dojo.i18n.getLocalization("dijit","common");
dojo.mixin(this,_36b);
this.inherited(arguments);
},postCreate:function(){
dojo.style(this.domNode,{display:"none",position:"absolute"});
dojo.body().appendChild(this.domNode);
this.inherited(arguments);
this.connect(this,"onExecute","hide");
this.connect(this,"onCancel","hide");
this._modalconnects=[];
},onLoad:function(){
this._position();
if(this.autofocus&&dijit._DialogLevelManager.isTop(this)){
this._getFocusItems(this.domNode);
dijit.focus(this._firstFocusItem);
}
this.inherited(arguments);
},_endDrag:function(e){
if(e&&e.node&&e.node===this.domNode){
this._relativePosition=dojo.position(e.node);
}
},_setup:function(){
var node=this.domNode;
if(this.titleBar&&this.draggable){
this._moveable=(dojo.isIE==6)?new dojo.dnd.TimedMoveable(node,{handle:this.titleBar}):new dojo.dnd.Moveable(node,{handle:this.titleBar,timeout:0});
this._dndListener=dojo.subscribe("/dnd/move/stop",this,"_endDrag");
}else{
dojo.addClass(node,"dijitDialogFixed");
}
this.underlayAttrs={dialogId:this.id,"class":dojo.map(this["class"].split(/\s/),function(s){
return s+"_underlay";
}).join(" ")};
},_size:function(){
this._checkIfSingleChild();
if(this._singleChild){
if(this._singleChildOriginalStyle){
this._singleChild.domNode.style.cssText=this._singleChildOriginalStyle;
}
delete this._singleChildOriginalStyle;
}else{
dojo.style(this.containerNode,{width:"auto",height:"auto"});
}
var mb=dojo._getMarginSize(this.domNode);
var _36c=dojo.window.getBox();
if(mb.w>=_36c.w||mb.h>=_36c.h){
var w=Math.min(mb.w,Math.floor(_36c.w*0.75)),h=Math.min(mb.h,Math.floor(_36c.h*0.75));
if(this._singleChild&&this._singleChild.resize){
this._singleChildOriginalStyle=this._singleChild.domNode.style.cssText;
this._singleChild.resize({w:w,h:h});
}else{
dojo.style(this.containerNode,{width:w+"px",height:h+"px",overflow:"auto",position:"relative"});
}
}else{
if(this._singleChild&&this._singleChild.resize){
this._singleChild.resize();
}
}
},_position:function(){
if(!dojo.hasClass(dojo.body(),"dojoMove")){
var node=this.domNode,_36d=dojo.window.getBox(),p=this._relativePosition,bb=p?null:dojo._getBorderBox(node),l=Math.floor(_36d.l+(p?p.x:(_36d.w-bb.w)/2)),t=Math.floor(_36d.t+(p?p.y:(_36d.h-bb.h)/2));
dojo.style(node,{left:l+"px",top:t+"px"});
}
},_onKey:function(evt){
if(evt.charOrCode){
var dk=dojo.keys;
var node=evt.target;
if(evt.charOrCode===dk.TAB){
this._getFocusItems(this.domNode);
}
var _36e=(this._firstFocusItem==this._lastFocusItem);
if(node==this._firstFocusItem&&evt.shiftKey&&evt.charOrCode===dk.TAB){
if(!_36e){
dijit.focus(this._lastFocusItem);
}
dojo.stopEvent(evt);
}else{
if(node==this._lastFocusItem&&evt.charOrCode===dk.TAB&&!evt.shiftKey){
if(!_36e){
dijit.focus(this._firstFocusItem);
}
dojo.stopEvent(evt);
}else{
while(node){
if(node==this.domNode||dojo.hasClass(node,"dijitPopup")){
if(evt.charOrCode==dk.ESCAPE){
this.onCancel();
}else{
return;
}
}
node=node.parentNode;
}
if(evt.charOrCode!==dk.TAB){
dojo.stopEvent(evt);
}else{
if(!dojo.isOpera){
try{
this._firstFocusItem.focus();
}
catch(e){
}
}
}
}
}
}
},show:function(){
if(this.open){
return;
}
if(!this._started){
this.startup();
}
if(!this._alreadyInitialized){
this._setup();
this._alreadyInitialized=true;
}
if(this._fadeOutDeferred){
this._fadeOutDeferred.cancel();
}
this._modalconnects.push(dojo.connect(window,"onscroll",this,"layout"));
this._modalconnects.push(dojo.connect(window,"onresize",this,function(){
var _36f=dojo.window.getBox();
if(!this._oldViewport||_36f.h!=this._oldViewport.h||_36f.w!=this._oldViewport.w){
this.layout();
this._oldViewport=_36f;
}
}));
this._modalconnects.push(dojo.connect(this.domNode,"onkeypress",this,"_onKey"));
dojo.style(this.domNode,{opacity:0,display:""});
this._set("open",true);
this._onShow();
this._size();
this._position();
var _370;
this._fadeInDeferred=new dojo.Deferred(dojo.hitch(this,function(){
_370.stop();
delete this._fadeInDeferred;
}));
_370=dojo.fadeIn({node:this.domNode,duration:this.duration,beforeBegin:dojo.hitch(this,function(){
dijit._DialogLevelManager.show(this,this.underlayAttrs);
}),onEnd:dojo.hitch(this,function(){
if(this.autofocus&&dijit._DialogLevelManager.isTop(this)){
this._getFocusItems(this.domNode);
dijit.focus(this._firstFocusItem);
}
this._fadeInDeferred.callback(true);
delete this._fadeInDeferred;
})}).play();
return this._fadeInDeferred;
},hide:function(){
if(!this._alreadyInitialized){
return;
}
if(this._fadeInDeferred){
this._fadeInDeferred.cancel();
}
var _371;
this._fadeOutDeferred=new dojo.Deferred(dojo.hitch(this,function(){
_371.stop();
delete this._fadeOutDeferred;
}));
_371=dojo.fadeOut({node:this.domNode,duration:this.duration,onEnd:dojo.hitch(this,function(){
this.domNode.style.display="none";
dijit._DialogLevelManager.hide(this);
this.onHide();
this._fadeOutDeferred.callback(true);
delete this._fadeOutDeferred;
})}).play();
if(this._scrollConnected){
this._scrollConnected=false;
}
dojo.forEach(this._modalconnects,dojo.disconnect);
this._modalconnects=[];
if(this._relativePosition){
delete this._relativePosition;
}
this._set("open",false);
return this._fadeOutDeferred;
},layout:function(){
if(this.domNode.style.display!="none"){
if(dijit._underlay){
dijit._underlay.layout();
}
this._position();
}
},destroy:function(){
if(this._fadeInDeferred){
this._fadeInDeferred.cancel();
}
if(this._fadeOutDeferred){
this._fadeOutDeferred.cancel();
}
if(this._moveable){
this._moveable.destroy();
}
if(this._dndListener){
dojo.unsubscribe(this._dndListener);
}
dojo.forEach(this._modalconnects,dojo.disconnect);
dijit._DialogLevelManager.hide(this);
this.inherited(arguments);
}});
dojo.declare("dijit.Dialog",[dijit.layout.ContentPane,dijit._DialogBase],{});
dijit._DialogLevelManager={show:function(_372,_373){
var ds=dijit._dialogStack;
ds[ds.length-1].focus=dijit.getFocus(_372);
var _374=dijit._underlay;
if(!_374||_374._destroyed){
_374=dijit._underlay=new dijit.DialogUnderlay(_373);
}else{
_374.set(_372.underlayAttrs);
}
var _375=ds[ds.length-1].dialog?ds[ds.length-1].zIndex+2:950;
if(ds.length==1){
_374.show();
}
dojo.style(dijit._underlay.domNode,"zIndex",_375-1);
dojo.style(_372.domNode,"zIndex",_375);
ds.push({dialog:_372,underlayAttrs:_373,zIndex:_375});
},hide:function(_376){
var ds=dijit._dialogStack;
if(ds[ds.length-1].dialog==_376){
ds.pop();
var pd=ds[ds.length-1];
if(ds.length==1){
if(!dijit._underlay._destroyed){
dijit._underlay.hide();
}
}else{
dojo.style(dijit._underlay.domNode,"zIndex",pd.zIndex-1);
dijit._underlay.set(pd.underlayAttrs);
}
if(_376.refocus){
var _377=pd.focus;
if(!_377||(pd.dialog&&!dojo.isDescendant(_377.node,pd.dialog.domNode))){
pd.dialog._getFocusItems(pd.dialog.domNode);
_377=pd.dialog._firstFocusItem;
}
try{
dijit.focus(_377);
}
catch(e){
}
}
}else{
var idx=dojo.indexOf(dojo.map(ds,function(elem){
return elem.dialog;
}),_376);
if(idx!=-1){
ds.splice(idx,1);
}
}
},isTop:function(_378){
var ds=dijit._dialogStack;
return ds[ds.length-1].dialog==_378;
}};
dijit._dialogStack=[{dialog:null,focus:null,underlayAttrs:null}];
}
if(!dojo._hasResource["dojo.regexp"]){
dojo._hasResource["dojo.regexp"]=true;
dojo.provide("dojo.regexp");
dojo.getObject("regexp",true,dojo);
dojo.regexp.escapeString=function(str,_379){
return str.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g,function(ch){
if(_379&&_379.indexOf(ch)!=-1){
return ch;
}
return "\\"+ch;
});
};
dojo.regexp.buildGroupRE=function(arr,re,_37a){
if(!(arr instanceof Array)){
return re(arr);
}
var b=[];
for(var i=0;i<arr.length;i++){
b.push(re(arr[i]));
}
return dojo.regexp.group(b.join("|"),_37a);
};
dojo.regexp.group=function(_37b,_37c){
return "("+(_37c?"?:":"")+_37b+")";
};
}
if(!dojo._hasResource["dijit.form._FormWidget"]){
dojo._hasResource["dijit.form._FormWidget"]=true;
dojo.provide("dijit.form._FormWidget");
dojo.declare("dijit.form._FormWidget",[dijit._Widget,dijit._Templated,dijit._CssStateMixin],{name:"",alt:"",value:"",type:"text",tabIndex:"0",disabled:false,intermediateChanges:false,scrollOnFocus:true,attributeMap:dojo.delegate(dijit._Widget.prototype.attributeMap,{value:"focusNode",id:"focusNode",tabIndex:"focusNode",alt:"focusNode",title:"focusNode"}),postMixInProperties:function(){
this.nameAttrSetting=this.name?("name=\""+this.name.replace(/'/g,"&quot;")+"\""):"";
this.inherited(arguments);
},postCreate:function(){
this.inherited(arguments);
this.connect(this.domNode,"onmousedown","_onMouseDown");
},_setDisabledAttr:function(_37d){
this._set("disabled",_37d);
dojo.attr(this.focusNode,"disabled",_37d);
if(this.valueNode){
dojo.attr(this.valueNode,"disabled",_37d);
}
dijit.setWaiState(this.focusNode,"disabled",_37d);
if(_37d){
this._set("hovering",false);
this._set("active",false);
var _37e="tabIndex" in this.attributeMap?this.attributeMap.tabIndex:"focusNode";
dojo.forEach(dojo.isArray(_37e)?_37e:[_37e],function(_37f){
var node=this[_37f];
if(dojo.isWebKit||dijit.hasDefaultTabStop(node)){
node.setAttribute("tabIndex","-1");
}else{
node.removeAttribute("tabIndex");
}
},this);
}else{
if(this.tabIndex!=""){
this.focusNode.setAttribute("tabIndex",this.tabIndex);
}
}
},setDisabled:function(_380){
dojo.deprecated("setDisabled("+_380+") is deprecated. Use set('disabled',"+_380+") instead.","","2.0");
this.set("disabled",_380);
},_onFocus:function(e){
if(this.scrollOnFocus){
dojo.window.scrollIntoView(this.domNode);
}
this.inherited(arguments);
},isFocusable:function(){
return !this.disabled&&this.focusNode&&(dojo.style(this.domNode,"display")!="none");
},focus:function(){
if(!this.disabled){
dijit.focus(this.focusNode);
}
},compare:function(val1,val2){
if(typeof val1=="number"&&typeof val2=="number"){
return (isNaN(val1)&&isNaN(val2))?0:val1-val2;
}else{
if(val1>val2){
return 1;
}else{
if(val1<val2){
return -1;
}else{
return 0;
}
}
}
},onChange:function(_381){
},_onChangeActive:false,_handleOnChange:function(_382,_383){
if(this._lastValueReported==undefined&&(_383===null||!this._onChangeActive)){
this._resetValue=this._lastValueReported=_382;
}
this._pendingOnChange=this._pendingOnChange||(typeof _382!=typeof this._lastValueReported)||(this.compare(_382,this._lastValueReported)!=0);
if((this.intermediateChanges||_383||_383===undefined)&&this._pendingOnChange){
this._lastValueReported=_382;
this._pendingOnChange=false;
if(this._onChangeActive){
if(this._onChangeHandle){
clearTimeout(this._onChangeHandle);
}
this._onChangeHandle=setTimeout(dojo.hitch(this,function(){
this._onChangeHandle=null;
this.onChange(_382);
}),0);
}
}
},create:function(){
this.inherited(arguments);
this._onChangeActive=true;
},destroy:function(){
if(this._onChangeHandle){
clearTimeout(this._onChangeHandle);
this.onChange(this._lastValueReported);
}
this.inherited(arguments);
},setValue:function(_384){
dojo.deprecated("dijit.form._FormWidget:setValue("+_384+") is deprecated.  Use set('value',"+_384+") instead.","","2.0");
this.set("value",_384);
},getValue:function(){
dojo.deprecated(this.declaredClass+"::getValue() is deprecated. Use get('value') instead.","","2.0");
return this.get("value");
},_onMouseDown:function(e){
if(!e.ctrlKey&&dojo.mouseButtons.isLeft(e)&&this.isFocusable()){
var _385=this.connect(dojo.body(),"onmouseup",function(){
if(this.isFocusable()){
this.focus();
}
this.disconnect(_385);
});
}
}});
dojo.declare("dijit.form._FormValueWidget",dijit.form._FormWidget,{readOnly:false,attributeMap:dojo.delegate(dijit.form._FormWidget.prototype.attributeMap,{value:"",readOnly:"focusNode"}),_setReadOnlyAttr:function(_386){
dojo.attr(this.focusNode,"readOnly",_386);
dijit.setWaiState(this.focusNode,"readonly",_386);
this._set("readOnly",_386);
},postCreate:function(){
this.inherited(arguments);
if(dojo.isIE<9||(dojo.isIE&&dojo.isQuirks)){
this.connect(this.focusNode||this.domNode,"onkeydown",this._onKeyDown);
}
if(this._resetValue===undefined){
this._lastValueReported=this._resetValue=this.value;
}
},_setValueAttr:function(_387,_388){
this._handleOnChange(_387,_388);
},_handleOnChange:function(_389,_38a){
this._set("value",_389);
this.inherited(arguments);
},undo:function(){
this._setValueAttr(this._lastValueReported,false);
},reset:function(){
this._hasBeenBlurred=false;
this._setValueAttr(this._resetValue,true);
},_onKeyDown:function(e){
if(e.keyCode==dojo.keys.ESCAPE&&!(e.ctrlKey||e.altKey||e.metaKey)){
var te;
if(dojo.isIE){
e.preventDefault();
te=document.createEventObject();
te.keyCode=dojo.keys.ESCAPE;
te.shiftKey=e.shiftKey;
e.srcElement.fireEvent("onkeypress",te);
}
}
},_layoutHackIE7:function(){
if(dojo.isIE==7){
var _38b=this.domNode;
var _38c=_38b.parentNode;
var _38d=_38b.firstChild||_38b;
var _38e=_38d.style.filter;
var _38f=this;
while(_38c&&_38c.clientHeight==0){
(function ping(){
var _390=_38f.connect(_38c,"onscroll",function(e){
_38f.disconnect(_390);
_38d.style.filter=(new Date()).getMilliseconds();
setTimeout(function(){
_38d.style.filter=_38e;
},0);
});
})();
_38c=_38c.parentNode;
}
}
}});
}
if(!dojo._hasResource["dijit.form.TextBox"]){
dojo._hasResource["dijit.form.TextBox"]=true;
dojo.provide("dijit.form.TextBox");
dojo.declare("dijit.form.TextBox",dijit.form._FormValueWidget,{trim:false,uppercase:false,lowercase:false,propercase:false,maxLength:"",selectOnClick:false,placeHolder:"",templateString:dojo.cache("dijit.form","templates/TextBox.html","<div class=\"dijit dijitReset dijitInline dijitLeft\" id=\"widget_${id}\" role=\"presentation\"\r\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\r\n\t\t><input class=\"dijitReset dijitInputInner\" dojoAttachPoint='textbox,focusNode' autocomplete=\"off\"\r\n\t\t\t${!nameAttrSetting} type='${type}'\r\n\t/></div\r\n></div>\r\n"),_singleNodeTemplate:"<input class=\"dijit dijitReset dijitLeft dijitInputField\" dojoAttachPoint=\"textbox,focusNode\" autocomplete=\"off\" type=\"${type}\" ${!nameAttrSetting} />",_buttonInputDisabled:dojo.isIE?"disabled":"",baseClass:"dijitTextBox",attributeMap:dojo.delegate(dijit.form._FormValueWidget.prototype.attributeMap,{maxLength:"focusNode"}),postMixInProperties:function(){
var type=this.type.toLowerCase();
if(this.templateString&&this.templateString.toLowerCase()=="input"||((type=="hidden"||type=="file")&&this.templateString==dijit.form.TextBox.prototype.templateString)){
this.templateString=this._singleNodeTemplate;
}
this.inherited(arguments);
},_setPlaceHolderAttr:function(v){
this._set("placeHolder",v);
if(!this._phspan){
this._attachPoints.push("_phspan");
this._phspan=dojo.create("span",{className:"dijitPlaceHolder dijitInputField"},this.textbox,"after");
}
this._phspan.innerHTML="";
this._phspan.appendChild(document.createTextNode(v));
this._updatePlaceHolder();
},_updatePlaceHolder:function(){
if(this._phspan){
this._phspan.style.display=(this.placeHolder&&!this._focused&&!this.textbox.value)?"":"none";
}
},_getValueAttr:function(){
return this.parse(this.get("displayedValue"),this.constraints);
},_setValueAttr:function(_391,_392,_393){
var _394;
if(_391!==undefined){
_394=this.filter(_391);
if(typeof _393!="string"){
if(_394!==null&&((typeof _394!="number")||!isNaN(_394))){
_393=this.filter(this.format(_394,this.constraints));
}else{
_393="";
}
}
}
if(_393!=null&&_393!=undefined&&((typeof _393)!="number"||!isNaN(_393))&&this.textbox.value!=_393){
this.textbox.value=_393;
this._set("displayedValue",this.get("displayedValue"));
}
this._updatePlaceHolder();
this.inherited(arguments,[_394,_392]);
},displayedValue:"",getDisplayedValue:function(){
dojo.deprecated(this.declaredClass+"::getDisplayedValue() is deprecated. Use set('displayedValue') instead.","","2.0");
return this.get("displayedValue");
},_getDisplayedValueAttr:function(){
return this.filter(this.textbox.value);
},setDisplayedValue:function(_395){
dojo.deprecated(this.declaredClass+"::setDisplayedValue() is deprecated. Use set('displayedValue', ...) instead.","","2.0");
this.set("displayedValue",_395);
},_setDisplayedValueAttr:function(_396){
if(_396===null||_396===undefined){
_396="";
}else{
if(typeof _396!="string"){
_396=String(_396);
}
}
this.textbox.value=_396;
this._setValueAttr(this.get("value"),undefined);
this._set("displayedValue",this.get("displayedValue"));
},format:function(_397,_398){
return ((_397==null||_397==undefined)?"":(_397.toString?_397.toString():_397));
},parse:function(_399,_39a){
return _399;
},_refreshState:function(){
},_onInput:function(e){
if(e&&e.type&&/key/i.test(e.type)&&e.keyCode){
switch(e.keyCode){
case dojo.keys.SHIFT:
case dojo.keys.ALT:
case dojo.keys.CTRL:
case dojo.keys.TAB:
return;
}
}
if(this.intermediateChanges){
var _39b=this;
setTimeout(function(){
_39b._handleOnChange(_39b.get("value"),false);
},0);
}
this._refreshState();
this._set("displayedValue",this.get("displayedValue"));
},postCreate:function(){
if(dojo.isIE){
setTimeout(dojo.hitch(this,function(){
var s=dojo.getComputedStyle(this.domNode);
if(s){
var ff=s.fontFamily;
if(ff){
var _39c=this.domNode.getElementsByTagName("INPUT");
if(_39c){
for(var i=0;i<_39c.length;i++){
_39c[i].style.fontFamily=ff;
}
}
}
}
}),0);
}
this.textbox.setAttribute("value",this.textbox.value);
this.inherited(arguments);
if(dojo.isMoz||dojo.isOpera){
this.connect(this.textbox,"oninput","_onInput");
}else{
this.connect(this.textbox,"onkeydown","_onInput");
this.connect(this.textbox,"onkeyup","_onInput");
this.connect(this.textbox,"onpaste","_onInput");
this.connect(this.textbox,"oncut","_onInput");
}
},_blankValue:"",filter:function(val){
if(val===null){
return this._blankValue;
}
if(typeof val!="string"){
return val;
}
if(this.trim){
val=dojo.trim(val);
}
if(this.uppercase){
val=val.toUpperCase();
}
if(this.lowercase){
val=val.toLowerCase();
}
if(this.propercase){
val=val.replace(/[^\s]+/g,function(word){
return word.substring(0,1).toUpperCase()+word.substring(1);
});
}
return val;
},_setBlurValue:function(){
this._setValueAttr(this.get("value"),true);
},_onBlur:function(e){
if(this.disabled){
return;
}
this._setBlurValue();
this.inherited(arguments);
if(this._selectOnClickHandle){
this.disconnect(this._selectOnClickHandle);
}
if(this.selectOnClick&&dojo.isMoz){
this.textbox.selectionStart=this.textbox.selectionEnd=undefined;
}
this._updatePlaceHolder();
},_onFocus:function(by){
if(this.disabled||this.readOnly){
return;
}
if(this.selectOnClick&&by=="mouse"){
this._selectOnClickHandle=this.connect(this.domNode,"onmouseup",function(){
this.disconnect(this._selectOnClickHandle);
var _39d;
if(dojo.isIE){
var _39e=dojo.doc.selection.createRange();
var _39f=_39e.parentElement();
_39d=_39f==this.textbox&&_39e.text.length==0;
}else{
_39d=this.textbox.selectionStart==this.textbox.selectionEnd;
}
if(_39d){
dijit.selectInputText(this.textbox);
}
});
}
this._updatePlaceHolder();
this.inherited(arguments);
this._refreshState();
},reset:function(){
this.textbox.value="";
this.inherited(arguments);
}});
dijit.selectInputText=function(_3a0,_3a1,stop){
var _3a2=dojo.global;
var _3a3=dojo.doc;
_3a0=dojo.byId(_3a0);
if(isNaN(_3a1)){
_3a1=0;
}
if(isNaN(stop)){
stop=_3a0.value?_3a0.value.length:0;
}
dijit.focus(_3a0);
if(_3a3["selection"]&&dojo.body()["createTextRange"]){
if(_3a0.createTextRange){
var r=_3a0.createTextRange();
r.collapse(true);
r.moveStart("character",-99999);
r.moveStart("character",_3a1);
r.moveEnd("character",stop-_3a1);
r.select();
}
}else{
if(_3a2["getSelection"]){
if(_3a0.setSelectionRange){
_3a0.setSelectionRange(_3a1,stop);
}
}
}
};
}
if(!dojo._hasResource["dijit.Tooltip"]){
dojo._hasResource["dijit.Tooltip"]=true;
dojo.provide("dijit.Tooltip");
dojo.declare("dijit._MasterTooltip",[dijit._Widget,dijit._Templated],{duration:dijit.defaultDuration,templateString:dojo.cache("dijit","templates/Tooltip.html","<div class=\"dijitTooltip dijitTooltipLeft\" id=\"dojoTooltip\"\r\n\t><div class=\"dijitTooltipContainer dijitTooltipContents\" dojoAttachPoint=\"containerNode\" role='alert'></div\r\n\t><div class=\"dijitTooltipConnector\" dojoAttachPoint=\"connectorNode\"></div\r\n></div>\r\n"),postCreate:function(){
dojo.body().appendChild(this.domNode);
this.bgIframe=new dijit.BackgroundIframe(this.domNode);
this.fadeIn=dojo.fadeIn({node:this.domNode,duration:this.duration,onEnd:dojo.hitch(this,"_onShow")});
this.fadeOut=dojo.fadeOut({node:this.domNode,duration:this.duration,onEnd:dojo.hitch(this,"_onHide")});
},show:function(_3a4,_3a5,_3a6,rtl){
if(this.aroundNode&&this.aroundNode===_3a5){
return;
}
this.domNode.width="auto";
if(this.fadeOut.status()=="playing"){
this._onDeck=arguments;
return;
}
this.containerNode.innerHTML=_3a4;
var pos=dijit.placeOnScreenAroundElement(this.domNode,_3a5,dijit.getPopupAroundAlignment((_3a6&&_3a6.length)?_3a6:dijit.Tooltip.defaultPosition,!rtl),dojo.hitch(this,"orient"));
dojo.style(this.domNode,"opacity",0);
this.fadeIn.play();
this.isShowingNow=true;
this.aroundNode=_3a5;
},orient:function(node,_3a7,_3a8,_3a9,_3aa){
this.connectorNode.style.top="";
var _3ab=_3a9.w-this.connectorNode.offsetWidth;
node.className="dijitTooltip "+{"BL-TL":"dijitTooltipBelow dijitTooltipABLeft","TL-BL":"dijitTooltipAbove dijitTooltipABLeft","BR-TR":"dijitTooltipBelow dijitTooltipABRight","TR-BR":"dijitTooltipAbove dijitTooltipABRight","BR-BL":"dijitTooltipRight","BL-BR":"dijitTooltipLeft"}[_3a7+"-"+_3a8];
this.domNode.style.width="auto";
var size=dojo.contentBox(this.domNode);
var _3ac=Math.min((Math.max(_3ab,1)),size.w);
var _3ad=_3ac<size.w;
this.domNode.style.width=_3ac+"px";
if(_3ad){
this.containerNode.style.overflow="auto";
var _3ae=this.containerNode.scrollWidth;
this.containerNode.style.overflow="visible";
if(_3ae>_3ac){
_3ae=_3ae+dojo.style(this.domNode,"paddingLeft")+dojo.style(this.domNode,"paddingRight");
this.domNode.style.width=_3ae+"px";
}
}
if(_3a8.charAt(0)=="B"&&_3a7.charAt(0)=="B"){
var mb=dojo.marginBox(node);
var _3af=this.connectorNode.offsetHeight;
if(mb.h>_3a9.h){
var _3b0=_3a9.h-(_3aa.h/2)-(_3af/2);
this.connectorNode.style.top=_3b0+"px";
this.connectorNode.style.bottom="";
}else{
this.connectorNode.style.bottom=Math.min(Math.max(_3aa.h/2-_3af/2,0),mb.h-_3af)+"px";
this.connectorNode.style.top="";
}
}else{
this.connectorNode.style.top="";
this.connectorNode.style.bottom="";
}
return Math.max(0,size.w-_3ab);
},_onShow:function(){
if(dojo.isIE){
this.domNode.style.filter="";
}
},hide:function(_3b1){
if(this._onDeck&&this._onDeck[1]==_3b1){
this._onDeck=null;
}else{
if(this.aroundNode===_3b1){
this.fadeIn.stop();
this.isShowingNow=false;
this.aroundNode=null;
this.fadeOut.play();
}else{
}
}
},_onHide:function(){
this.domNode.style.cssText="";
this.containerNode.innerHTML="";
if(this._onDeck){
this.show.apply(this,this._onDeck);
this._onDeck=null;
}
}});
dijit.showTooltip=function(_3b2,_3b3,_3b4,rtl){
if(!dijit._masterTT){
dijit._masterTT=new dijit._MasterTooltip();
}
return dijit._masterTT.show(_3b2,_3b3,_3b4,rtl);
};
dijit.hideTooltip=function(_3b5){
if(!dijit._masterTT){
dijit._masterTT=new dijit._MasterTooltip();
}
return dijit._masterTT.hide(_3b5);
};
dojo.declare("dijit.Tooltip",dijit._Widget,{label:"",showDelay:400,connectId:[],position:[],_setConnectIdAttr:function(_3b6){
dojo.forEach(this._connections||[],function(_3b7){
dojo.forEach(_3b7,dojo.hitch(this,"disconnect"));
},this);
var ary=dojo.isArrayLike(_3b6)?_3b6:(_3b6?[_3b6]:[]);
this._connections=dojo.map(ary,function(id){
var node=dojo.byId(id);
return node?[this.connect(node,"onmouseenter","_onTargetMouseEnter"),this.connect(node,"onmouseleave","_onTargetMouseLeave"),this.connect(node,"onfocus","_onTargetFocus"),this.connect(node,"onblur","_onTargetBlur")]:[];
},this);
this._set("connectId",_3b6);
this._connectIds=ary;
},addTarget:function(node){
var id=node.id||node;
if(dojo.indexOf(this._connectIds,id)==-1){
this.set("connectId",this._connectIds.concat(id));
}
},removeTarget:function(node){
var id=node.id||node,idx=dojo.indexOf(this._connectIds,id);
if(idx>=0){
this._connectIds.splice(idx,1);
this.set("connectId",this._connectIds);
}
},buildRendering:function(){
this.inherited(arguments);
dojo.addClass(this.domNode,"dijitTooltipData");
},startup:function(){
this.inherited(arguments);
var ids=this.connectId;
dojo.forEach(dojo.isArrayLike(ids)?ids:[ids],this.addTarget,this);
},_onTargetMouseEnter:function(e){
this._onHover(e);
},_onTargetMouseLeave:function(e){
this._onUnHover(e);
},_onTargetFocus:function(e){
this._focus=true;
this._onHover(e);
},_onTargetBlur:function(e){
this._focus=false;
this._onUnHover(e);
},_onHover:function(e){
if(!this._showTimer){
var _3b8=e.target;
this._showTimer=setTimeout(dojo.hitch(this,function(){
this.open(_3b8);
}),this.showDelay);
}
},_onUnHover:function(e){
if(this._focus){
return;
}
if(this._showTimer){
clearTimeout(this._showTimer);
delete this._showTimer;
}
this.close();
},open:function(_3b9){
if(this._showTimer){
clearTimeout(this._showTimer);
delete this._showTimer;
}
dijit.showTooltip(this.label||this.domNode.innerHTML,_3b9,this.position,!this.isLeftToRight());
this._connectNode=_3b9;
this.onShow(_3b9,this.position);
},close:function(){
if(this._connectNode){
dijit.hideTooltip(this._connectNode);
delete this._connectNode;
this.onHide();
}
if(this._showTimer){
clearTimeout(this._showTimer);
delete this._showTimer;
}
},onShow:function(_3ba,_3bb){
},onHide:function(){
},uninitialize:function(){
this.close();
this.inherited(arguments);
}});
dijit.Tooltip.defaultPosition=["after","before"];
}
if(!dojo._hasResource["dijit.form.ValidationTextBox"]){
dojo._hasResource["dijit.form.ValidationTextBox"]=true;
dojo.provide("dijit.form.ValidationTextBox");
dojo.declare("dijit.form.ValidationTextBox",dijit.form.TextBox,{templateString:dojo.cache("dijit.form","templates/ValidationTextBox.html","<div class=\"dijit dijitReset dijitInlineTable dijitLeft\"\r\n\tid=\"widget_${id}\" role=\"presentation\"\r\n\t><div class='dijitReset dijitValidationContainer'\r\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t/></div\r\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\r\n\t\t><input class=\"dijitReset dijitInputInner\" dojoAttachPoint='textbox,focusNode' autocomplete=\"off\"\r\n\t\t\t${!nameAttrSetting} type='${type}'\r\n\t/></div\r\n></div>\r\n"),baseClass:"dijitTextBox dijitValidationTextBox",required:false,promptMessage:"",invalidMessage:"$_unset_$",missingMessage:"$_unset_$",message:"",constraints:{},regExp:".*",regExpGen:function(_3bc){
return this.regExp;
},state:"",tooltipPosition:[],_setValueAttr:function(){
this.inherited(arguments);
this.validate(this._focused);
},validator:function(_3bd,_3be){
return (new RegExp("^(?:"+this.regExpGen(_3be)+")"+(this.required?"":"?")+"$")).test(_3bd)&&(!this.required||!this._isEmpty(_3bd))&&(this._isEmpty(_3bd)||this.parse(_3bd,_3be)!==undefined);
},_isValidSubset:function(){
return this.textbox.value.search(this._partialre)==0;
},isValid:function(_3bf){
return this.validator(this.textbox.value,this.constraints);
},_isEmpty:function(_3c0){
return (this.trim?/^\s*$/:/^$/).test(_3c0);
},getErrorMessage:function(_3c1){
return (this.required&&this._isEmpty(this.textbox.value))?this.missingMessage:this.invalidMessage;
},getPromptMessage:function(_3c2){
return this.promptMessage;
},_maskValidSubsetError:true,validate:function(_3c3){
var _3c4="";
var _3c5=this.disabled||this.isValid(_3c3);
if(_3c5){
this._maskValidSubsetError=true;
}
var _3c6=this._isEmpty(this.textbox.value);
var _3c7=!_3c5&&_3c3&&this._isValidSubset();
this._set("state",_3c5?"":(((((!this._hasBeenBlurred||_3c3)&&_3c6)||_3c7)&&this._maskValidSubsetError)?"Incomplete":"Error"));
dijit.setWaiState(this.focusNode,"invalid",_3c5?"false":"true");
if(this.state=="Error"){
this._maskValidSubsetError=_3c3&&_3c7;
_3c4=this.getErrorMessage(_3c3);
}else{
if(this.state=="Incomplete"){
_3c4=this.getPromptMessage(_3c3);
this._maskValidSubsetError=!this._hasBeenBlurred||_3c3;
}else{
if(_3c6){
_3c4=this.getPromptMessage(_3c3);
}
}
}
this.set("message",_3c4);
return _3c5;
},displayMessage:function(_3c8){
dijit.hideTooltip(this.domNode);
if(_3c8&&this._focused){
dijit.showTooltip(_3c8,this.domNode,this.tooltipPosition,!this.isLeftToRight());
}
},_refreshState:function(){
this.validate(this._focused);
this.inherited(arguments);
},constructor:function(){
this.constraints={};
},_setConstraintsAttr:function(_3c9){
if(!_3c9.locale&&this.lang){
_3c9.locale=this.lang;
}
this._set("constraints",_3c9);
this._computePartialRE();
},_computePartialRE:function(){
var p=this.regExpGen(this.constraints);
this.regExp=p;
var _3ca="";
if(p!=".*"){
this.regExp.replace(/\\.|\[\]|\[.*?[^\\]{1}\]|\{.*?\}|\(\?[=:!]|./g,function(re){
switch(re.charAt(0)){
case "{":
case "+":
case "?":
case "*":
case "^":
case "$":
case "|":
case "(":
_3ca+=re;
break;
case ")":
_3ca+="|$)";
break;
default:
_3ca+="(?:"+re+"|$)";
break;
}
});
}
try{
"".search(_3ca);
}
catch(e){
_3ca=this.regExp;
console.warn("RegExp error in "+this.declaredClass+": "+this.regExp);
}
this._partialre="^(?:"+_3ca+")$";
},postMixInProperties:function(){
this.inherited(arguments);
this.messages=dojo.i18n.getLocalization("dijit.form","validate",this.lang);
if(this.invalidMessage=="$_unset_$"){
this.invalidMessage=this.messages.invalidMessage;
}
if(!this.invalidMessage){
this.invalidMessage=this.promptMessage;
}
if(this.missingMessage=="$_unset_$"){
this.missingMessage=this.messages.missingMessage;
}
if(!this.missingMessage){
this.missingMessage=this.invalidMessage;
}
this._setConstraintsAttr(this.constraints);
},_setDisabledAttr:function(_3cb){
this.inherited(arguments);
this._refreshState();
},_setRequiredAttr:function(_3cc){
this._set("required",_3cc);
dijit.setWaiState(this.focusNode,"required",_3cc);
this._refreshState();
},_setMessageAttr:function(_3cd){
this._set("message",_3cd);
this.displayMessage(_3cd);
},reset:function(){
this._maskValidSubsetError=true;
this.inherited(arguments);
},_onBlur:function(){
this.displayMessage("");
this.inherited(arguments);
}});
dojo.declare("dijit.form.MappedTextBox",dijit.form.ValidationTextBox,{postMixInProperties:function(){
this.inherited(arguments);
this.nameAttrSetting="";
},serialize:function(val,_3ce){
return val.toString?val.toString():"";
},toString:function(){
var val=this.filter(this.get("value"));
return val!=null?(typeof val=="string"?val:this.serialize(val,this.constraints)):"";
},validate:function(){
this.valueNode.value=this.toString();
return this.inherited(arguments);
},buildRendering:function(){
this.inherited(arguments);
this.valueNode=dojo.place("<input type='hidden'"+(this.name?" name='"+this.name.replace(/'/g,"&quot;")+"'":"")+"/>",this.textbox,"after");
},reset:function(){
this.valueNode.value="";
this.inherited(arguments);
}});
dojo.declare("dijit.form.RangeBoundTextBox",dijit.form.MappedTextBox,{rangeMessage:"",rangeCheck:function(_3cf,_3d0){
return ("min" in _3d0?(this.compare(_3cf,_3d0.min)>=0):true)&&("max" in _3d0?(this.compare(_3cf,_3d0.max)<=0):true);
},isInRange:function(_3d1){
return this.rangeCheck(this.get("value"),this.constraints);
},_isDefinitelyOutOfRange:function(){
var val=this.get("value");
var _3d2=false;
var _3d3=false;
if("min" in this.constraints){
var min=this.constraints.min;
min=this.compare(val,((typeof min=="number")&&min>=0&&val!=0)?0:min);
_3d2=(typeof min=="number")&&min<0;
}
if("max" in this.constraints){
var max=this.constraints.max;
max=this.compare(val,((typeof max!="number")||max>0)?max:0);
_3d3=(typeof max=="number")&&max>0;
}
return _3d2||_3d3;
},_isValidSubset:function(){
return this.inherited(arguments)&&!this._isDefinitelyOutOfRange();
},isValid:function(_3d4){
return this.inherited(arguments)&&((this._isEmpty(this.textbox.value)&&!this.required)||this.isInRange(_3d4));
},getErrorMessage:function(_3d5){
var v=this.get("value");
if(v!==null&&v!==""&&v!==undefined&&(typeof v!="number"||!isNaN(v))&&!this.isInRange(_3d5)){
return this.rangeMessage;
}
return this.inherited(arguments);
},postMixInProperties:function(){
this.inherited(arguments);
if(!this.rangeMessage){
this.messages=dojo.i18n.getLocalization("dijit.form","validate",this.lang);
this.rangeMessage=this.messages.rangeMessage;
}
},_setConstraintsAttr:function(_3d6){
this.inherited(arguments);
if(this.focusNode){
if(this.constraints.min!==undefined){
dijit.setWaiState(this.focusNode,"valuemin",this.constraints.min);
}else{
dijit.removeWaiState(this.focusNode,"valuemin");
}
if(this.constraints.max!==undefined){
dijit.setWaiState(this.focusNode,"valuemax",this.constraints.max);
}else{
dijit.removeWaiState(this.focusNode,"valuemax");
}
}
},_setValueAttr:function(_3d7,_3d8){
dijit.setWaiState(this.focusNode,"valuenow",_3d7);
this.inherited(arguments);
}});
}
if(!dojo._hasResource["dijit._HasDropDown"]){
dojo._hasResource["dijit._HasDropDown"]=true;
dojo.provide("dijit._HasDropDown");
dojo.declare("dijit._HasDropDown",null,{_buttonNode:null,_arrowWrapperNode:null,_popupStateNode:null,_aroundNode:null,dropDown:null,autoWidth:true,forceWidth:false,maxHeight:0,dropDownPosition:["below","above"],_stopClickEvents:true,_onDropDownMouseDown:function(e){
if(this.disabled||this.readOnly){
return;
}
dojo.stopEvent(e);
this._docHandler=this.connect(dojo.doc,"onmouseup","_onDropDownMouseUp");
this.toggleDropDown();
},_onDropDownMouseUp:function(e){
if(e&&this._docHandler){
this.disconnect(this._docHandler);
}
var _3d9=this.dropDown,_3da=false;
if(e&&this._opened){
var c=dojo.position(this._buttonNode,true);
if(!(e.pageX>=c.x&&e.pageX<=c.x+c.w)||!(e.pageY>=c.y&&e.pageY<=c.y+c.h)){
var t=e.target;
while(t&&!_3da){
if(dojo.hasClass(t,"dijitPopup")){
_3da=true;
}else{
t=t.parentNode;
}
}
if(_3da){
t=e.target;
if(_3d9.onItemClick){
var _3db;
while(t&&!(_3db=dijit.byNode(t))){
t=t.parentNode;
}
if(_3db&&_3db.onClick&&_3db.getParent){
_3db.getParent().onItemClick(_3db,e);
}
}
return;
}
}
}
if(this._opened&&_3d9.focus&&_3d9.autoFocus!==false){
window.setTimeout(dojo.hitch(_3d9,"focus"),1);
}
},_onDropDownClick:function(e){
if(this._stopClickEvents){
dojo.stopEvent(e);
}
},buildRendering:function(){
this.inherited(arguments);
this._buttonNode=this._buttonNode||this.focusNode||this.domNode;
this._popupStateNode=this._popupStateNode||this.focusNode||this._buttonNode;
var _3dc={"after":this.isLeftToRight()?"Right":"Left","before":this.isLeftToRight()?"Left":"Right","above":"Up","below":"Down","left":"Left","right":"Right"}[this.dropDownPosition[0]]||this.dropDownPosition[0]||"Down";
dojo.addClass(this._arrowWrapperNode||this._buttonNode,"dijit"+_3dc+"ArrowButton");
},postCreate:function(){
this.inherited(arguments);
this.connect(this._buttonNode,"onmousedown","_onDropDownMouseDown");
this.connect(this._buttonNode,"onclick","_onDropDownClick");
this.connect(this.focusNode,"onkeypress","_onKey");
this.connect(this.focusNode,"onkeyup","_onKeyUp");
},destroy:function(){
if(this.dropDown){
if(!this.dropDown._destroyed){
this.dropDown.destroyRecursive();
}
delete this.dropDown;
}
this.inherited(arguments);
},_onKey:function(e){
if(this.disabled||this.readOnly){
return;
}
var d=this.dropDown,_3dd=e.target;
if(d&&this._opened&&d.handleKey){
if(d.handleKey(e)===false){
dojo.stopEvent(e);
return;
}
}
if(d&&this._opened&&e.charOrCode==dojo.keys.ESCAPE){
this.closeDropDown();
dojo.stopEvent(e);
}else{
if(!this._opened&&(e.charOrCode==dojo.keys.DOWN_ARROW||((e.charOrCode==dojo.keys.ENTER||e.charOrCode==" ")&&((_3dd.tagName||"").toLowerCase()!=="input"||(_3dd.type&&_3dd.type.toLowerCase()!=="text"))))){
this._toggleOnKeyUp=true;
dojo.stopEvent(e);
}
}
},_onKeyUp:function(){
if(this._toggleOnKeyUp){
delete this._toggleOnKeyUp;
this.toggleDropDown();
var d=this.dropDown;
if(d&&d.focus){
setTimeout(dojo.hitch(d,"focus"),1);
}
}
},_onBlur:function(){
var _3de=dijit._curFocus&&this.dropDown&&dojo.isDescendant(dijit._curFocus,this.dropDown.domNode);
this.closeDropDown(_3de);
this.inherited(arguments);
},isLoaded:function(){
return true;
},loadDropDown:function(_3df){
_3df();
},toggleDropDown:function(){
if(this.disabled||this.readOnly){
return;
}
if(!this._opened){
if(!this.isLoaded()){
this.loadDropDown(dojo.hitch(this,"openDropDown"));
return;
}else{
this.openDropDown();
}
}else{
this.closeDropDown();
}
},openDropDown:function(){
var _3e0=this.dropDown,_3e1=_3e0.domNode,_3e2=this._aroundNode||this.domNode,self=this;
if(!this._preparedNode){
this._preparedNode=true;
if(_3e1.style.width){
this._explicitDDWidth=true;
}
if(_3e1.style.height){
this._explicitDDHeight=true;
}
}
if(this.maxHeight||this.forceWidth||this.autoWidth){
var _3e3={display:"",visibility:"hidden"};
if(!this._explicitDDWidth){
_3e3.width="";
}
if(!this._explicitDDHeight){
_3e3.height="";
}
dojo.style(_3e1,_3e3);
var _3e4=this.maxHeight;
if(_3e4==-1){
var _3e5=dojo.window.getBox(),_3e6=dojo.position(_3e2,false);
_3e4=Math.floor(Math.max(_3e6.y,_3e5.h-(_3e6.y+_3e6.h)));
}
if(_3e0.startup&&!_3e0._started){
_3e0.startup();
}
dijit.popup.moveOffScreen(_3e0);
var mb=dojo._getMarginSize(_3e1);
var _3e7=(_3e4&&mb.h>_3e4);
dojo.style(_3e1,{overflowX:"hidden",overflowY:_3e7?"auto":"hidden"});
if(_3e7){
mb.h=_3e4;
if("w" in mb){
mb.w+=16;
}
}else{
delete mb.h;
}
if(this.forceWidth){
mb.w=_3e2.offsetWidth;
}else{
if(this.autoWidth){
mb.w=Math.max(mb.w,_3e2.offsetWidth);
}else{
delete mb.w;
}
}
if(dojo.isFunction(_3e0.resize)){
_3e0.resize(mb);
}else{
dojo.marginBox(_3e1,mb);
}
}
var _3e8=dijit.popup.open({parent:this,popup:_3e0,around:_3e2,orient:dijit.getPopupAroundAlignment((this.dropDownPosition&&this.dropDownPosition.length)?this.dropDownPosition:["below"],this.isLeftToRight()),onExecute:function(){
self.closeDropDown(true);
},onCancel:function(){
self.closeDropDown(true);
},onClose:function(){
dojo.attr(self._popupStateNode,"popupActive",false);
dojo.removeClass(self._popupStateNode,"dijitHasDropDownOpen");
self._opened=false;
}});
dojo.attr(this._popupStateNode,"popupActive","true");
dojo.addClass(self._popupStateNode,"dijitHasDropDownOpen");
this._opened=true;
return _3e8;
},closeDropDown:function(_3e9){
if(this._opened){
if(_3e9){
this.focus();
}
dijit.popup.close(this.dropDown);
this._opened=false;
}
}});
}
if(!dojo._hasResource["dijit.form.ComboBox"]){
dojo._hasResource["dijit.form.ComboBox"]=true;
dojo.provide("dijit.form.ComboBox");
dojo.declare("dijit.form.ComboBoxMixin",dijit._HasDropDown,{item:null,pageSize:Infinity,store:null,fetchProperties:{},query:{},autoComplete:true,highlightMatch:"first",searchDelay:100,searchAttr:"name",labelAttr:"",labelType:"text",queryExpr:"${0}*",ignoreCase:true,hasDownArrow:true,templateString:dojo.cache("dijit.form","templates/DropDownBox.html","<div class=\"dijit dijitReset dijitInlineTable dijitLeft\"\r\n\tid=\"widget_${id}\"\r\n\trole=\"combobox\"\r\n\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\r\n\t\tdojoAttachPoint=\"_buttonNode, _popupStateNode\" role=\"presentation\"\r\n\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t\t\t${_buttonInputDisabled}\r\n\t/></div\r\n\t><div class='dijitReset dijitValidationContainer'\r\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t/></div\r\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\r\n\t\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\r\n\t\t\tdojoAttachPoint=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\r\n\t/></div\r\n></div>\r\n"),baseClass:"dijitTextBox dijitComboBox",dropDownClass:"dijit.form._ComboBoxMenu",cssStateNodes:{"_buttonNode":"dijitDownArrowButton"},maxHeight:-1,_stopClickEvents:false,_getCaretPos:function(_3ea){
var pos=0;
if(typeof (_3ea.selectionStart)=="number"){
pos=_3ea.selectionStart;
}else{
if(dojo.isIE){
var tr=dojo.doc.selection.createRange().duplicate();
var ntr=_3ea.createTextRange();
tr.move("character",0);
ntr.move("character",0);
try{
ntr.setEndPoint("EndToEnd",tr);
pos=String(ntr.text).replace(/\r/g,"").length;
}
catch(e){
}
}
}
return pos;
},_setCaretPos:function(_3eb,_3ec){
_3ec=parseInt(_3ec);
dijit.selectInputText(_3eb,_3ec,_3ec);
},_setDisabledAttr:function(_3ed){
this.inherited(arguments);
dijit.setWaiState(this.domNode,"disabled",_3ed);
},_abortQuery:function(){
if(this.searchTimer){
clearTimeout(this.searchTimer);
this.searchTimer=null;
}
if(this._fetchHandle){
if(this._fetchHandle.abort){
this._fetchHandle.abort();
}
this._fetchHandle=null;
}
},_onInput:function(evt){
if(!this.searchTimer&&(evt.type=="paste"||evt.type=="input")&&this._lastInput!=this.textbox.value){
this.searchTimer=setTimeout(dojo.hitch(this,function(){
this._onKey({charOrCode:229});
}),100);
}
this.inherited(arguments);
},_onKey:function(evt){
var key=evt.charOrCode;
if(evt.altKey||((evt.ctrlKey||evt.metaKey)&&(key!="x"&&key!="v"))||key==dojo.keys.SHIFT){
return;
}
var _3ee=false;
var pw=this.dropDown;
var dk=dojo.keys;
var _3ef=null;
this._prev_key_backspace=false;
this._abortQuery();
this.inherited(arguments);
if(this._opened){
_3ef=pw.getHighlightedOption();
}
switch(key){
case dk.PAGE_DOWN:
case dk.DOWN_ARROW:
case dk.PAGE_UP:
case dk.UP_ARROW:
if(this._opened){
this._announceOption(_3ef);
}
dojo.stopEvent(evt);
break;
case dk.ENTER:
if(_3ef){
if(_3ef==pw.nextButton){
this._nextSearch(1);
dojo.stopEvent(evt);
break;
}else{
if(_3ef==pw.previousButton){
this._nextSearch(-1);
dojo.stopEvent(evt);
break;
}
}
}else{
this._setBlurValue();
this._setCaretPos(this.focusNode,this.focusNode.value.length);
}
if(this._opened||this._fetchHandle){
evt.preventDefault();
}
case dk.TAB:
var _3f0=this.get("displayedValue");
if(pw&&(_3f0==pw._messages["previousMessage"]||_3f0==pw._messages["nextMessage"])){
break;
}
if(_3ef){
this._selectOption();
}
if(this._opened){
this._lastQuery=null;
this.closeDropDown();
}
break;
case " ":
if(_3ef){
dojo.stopEvent(evt);
this._selectOption();
this.closeDropDown();
}else{
_3ee=true;
}
break;
case dk.DELETE:
case dk.BACKSPACE:
this._prev_key_backspace=true;
_3ee=true;
break;
default:
_3ee=typeof key=="string"||key==229;
}
if(_3ee){
this.item=undefined;
this.searchTimer=setTimeout(dojo.hitch(this,"_startSearchFromInput"),1);
}
},_autoCompleteText:function(text){
var fn=this.focusNode;
dijit.selectInputText(fn,fn.value.length);
var _3f1=this.ignoreCase?"toLowerCase":"substr";
if(text[_3f1](0).indexOf(this.focusNode.value[_3f1](0))==0){
var cpos=this._getCaretPos(fn);
if((cpos+1)>fn.value.length){
fn.value=text;
dijit.selectInputText(fn,cpos);
}
}else{
fn.value=text;
dijit.selectInputText(fn);
}
},_openResultList:function(_3f2,_3f3){
this._fetchHandle=null;
if(this.disabled||this.readOnly||(_3f3.query[this.searchAttr]!=this._lastQuery)){
return;
}
var _3f4=this.dropDown._highlighted_option&&dojo.hasClass(this.dropDown._highlighted_option,"dijitMenuItemSelected");
this.dropDown.clearResultList();
if(!_3f2.length&&!this._maxOptions){
this.closeDropDown();
return;
}
_3f3._maxOptions=this._maxOptions;
var _3f5=this.dropDown.createOptions(_3f2,_3f3,dojo.hitch(this,"_getMenuLabelFromItem"));
this._showResultList();
if(_3f3.direction){
if(1==_3f3.direction){
this.dropDown.highlightFirstOption();
}else{
if(-1==_3f3.direction){
this.dropDown.highlightLastOption();
}
}
if(_3f4){
this._announceOption(this.dropDown.getHighlightedOption());
}
}else{
if(this.autoComplete&&!this._prev_key_backspace&&!/^[*]+$/.test(_3f3.query[this.searchAttr])){
this._announceOption(_3f5[1]);
}
}
},_showResultList:function(){
this.closeDropDown(true);
this.displayMessage("");
this.openDropDown();
dijit.setWaiState(this.domNode,"expanded","true");
},loadDropDown:function(_3f6){
this._startSearchAll();
},isLoaded:function(){
return false;
},closeDropDown:function(){
this._abortQuery();
if(this._opened){
this.inherited(arguments);
dijit.setWaiState(this.domNode,"expanded","false");
dijit.removeWaiState(this.focusNode,"activedescendant");
}
},_setBlurValue:function(){
var _3f7=this.get("displayedValue");
var pw=this.dropDown;
if(pw&&(_3f7==pw._messages["previousMessage"]||_3f7==pw._messages["nextMessage"])){
this._setValueAttr(this._lastValueReported,true);
}else{
if(typeof this.item=="undefined"){
this.item=null;
this.set("displayedValue",_3f7);
}else{
if(this.value!=this._lastValueReported){
dijit.form._FormValueWidget.prototype._setValueAttr.call(this,this.value,true);
}
this._refreshState();
}
}
},_onBlur:function(){
this.closeDropDown();
this.inherited(arguments);
},_setItemAttr:function(item,_3f8,_3f9){
if(!_3f9){
_3f9=this.store.getValue(item,this.searchAttr);
}
var _3fa=this._getValueField()!=this.searchAttr?this.store.getIdentity(item):_3f9;
this._set("item",item);
dijit.form.ComboBox.superclass._setValueAttr.call(this,_3fa,_3f8,_3f9);
},_announceOption:function(node){
if(!node){
return;
}
var _3fb;
if(node==this.dropDown.nextButton||node==this.dropDown.previousButton){
_3fb=node.innerHTML;
this.item=undefined;
this.value="";
}else{
_3fb=this.store.getValue(node.item,this.searchAttr).toString();
this.set("item",node.item,false,_3fb);
}
this.focusNode.value=this.focusNode.value.substring(0,this._lastInput.length);
dijit.setWaiState(this.focusNode,"activedescendant",dojo.attr(node,"id"));
this._autoCompleteText(_3fb);
},_selectOption:function(evt){
if(evt){
this._announceOption(evt.target);
}
this.closeDropDown();
this._setCaretPos(this.focusNode,this.focusNode.value.length);
dijit.form._FormValueWidget.prototype._setValueAttr.call(this,this.value,true);
},_startSearchAll:function(){
this._startSearch("");
},_startSearchFromInput:function(){
this._startSearch(this.focusNode.value.replace(/([\\\*\?])/g,"\\$1"));
},_getQueryString:function(text){
return dojo.string.substitute(this.queryExpr,[text]);
},_startSearch:function(key){
if(!this.dropDown){
var _3fc=this.id+"_popup",_3fd=dojo.getObject(this.dropDownClass,false);
this.dropDown=new _3fd({onChange:dojo.hitch(this,this._selectOption),id:_3fc,dir:this.dir});
dijit.removeWaiState(this.focusNode,"activedescendant");
dijit.setWaiState(this.textbox,"owns",_3fc);
}
var _3fe=dojo.clone(this.query);
this._lastInput=key;
this._lastQuery=_3fe[this.searchAttr]=this._getQueryString(key);
this.searchTimer=setTimeout(dojo.hitch(this,function(_3ff,_400){
this.searchTimer=null;
var _401={queryOptions:{ignoreCase:this.ignoreCase,deep:true},query:_3ff,onBegin:dojo.hitch(this,"_setMaxOptions"),onComplete:dojo.hitch(this,"_openResultList"),onError:function(_402){
_400._fetchHandle=null;
console.error("dijit.form.ComboBox: "+_402);
_400.closeDropDown();
},start:0,count:this.pageSize};
dojo.mixin(_401,_400.fetchProperties);
this._fetchHandle=_400.store.fetch(_401);
var _403=function(_404,_405){
_404.start+=_404.count*_405;
_404.direction=_405;
this._fetchHandle=this.store.fetch(_404);
this.focus();
};
this._nextSearch=this.dropDown.onPage=dojo.hitch(this,_403,this._fetchHandle);
},_3fe,this),this.searchDelay);
},_setMaxOptions:function(size,_406){
this._maxOptions=size;
},_getValueField:function(){
return this.searchAttr;
},constructor:function(){
this.query={};
this.fetchProperties={};
},postMixInProperties:function(){
if(!this.store){
var _407=this.srcNodeRef;
this.store=new dijit.form._ComboBoxDataStore(_407);
if(!("value" in this.params)){
var item=(this.item=this.store.fetchSelectedItem());
if(item){
var _408=this._getValueField();
this.value=this.store.getValue(item,_408);
}
}
}
this.inherited(arguments);
},postCreate:function(){
var _409=dojo.query("label[for=\""+this.id+"\"]");
if(_409.length){
_409[0].id=(this.id+"_label");
dijit.setWaiState(this.domNode,"labelledby",_409[0].id);
}
this.inherited(arguments);
},_setHasDownArrowAttr:function(val){
this.hasDownArrow=val;
this._buttonNode.style.display=val?"":"none";
},_getMenuLabelFromItem:function(item){
var _40a=this.labelFunc(item,this.store),_40b=this.labelType;
if(this.highlightMatch!="none"&&this.labelType=="text"&&this._lastInput){
_40a=this.doHighlight(_40a,this._escapeHtml(this._lastInput));
_40b="html";
}
return {html:_40b=="html",label:_40a};
},doHighlight:function(_40c,find){
var _40d=(this.ignoreCase?"i":"")+(this.highlightMatch=="all"?"g":""),i=this.queryExpr.indexOf("${0}");
find=dojo.regexp.escapeString(find);
return this._escapeHtml(_40c).replace(new RegExp((i==0?"^":"")+"("+find+")"+(i==(this.queryExpr.length-4)?"$":""),_40d),"<span class=\"dijitComboBoxHighlightMatch\">$1</span>");
},_escapeHtml:function(str){
str=String(str).replace(/&/gm,"&amp;").replace(/</gm,"&lt;").replace(/>/gm,"&gt;").replace(/"/gm,"&quot;");
return str;
},reset:function(){
this.item=null;
this.inherited(arguments);
},labelFunc:function(item,_40e){
return _40e.getValue(item,this.labelAttr||this.searchAttr).toString();
}});
dojo.declare("dijit.form._ComboBoxMenu",[dijit._Widget,dijit._Templated,dijit._CssStateMixin],{templateString:"<ul class='dijitReset dijitMenu' dojoAttachEvent='onmousedown:_onMouseDown,onmouseup:_onMouseUp,onmouseover:_onMouseOver,onmouseout:_onMouseOut' style='overflow: \"auto\"; overflow-x: \"hidden\";'>"+"<li class='dijitMenuItem dijitMenuPreviousButton' dojoAttachPoint='previousButton' role='option'></li>"+"<li class='dijitMenuItem dijitMenuNextButton' dojoAttachPoint='nextButton' role='option'></li>"+"</ul>",_messages:null,baseClass:"dijitComboBoxMenu",postMixInProperties:function(){
this.inherited(arguments);
this._messages=dojo.i18n.getLocalization("dijit.form","ComboBox",this.lang);
},buildRendering:function(){
this.inherited(arguments);
this.previousButton.innerHTML=this._messages["previousMessage"];
this.nextButton.innerHTML=this._messages["nextMessage"];
},_setValueAttr:function(_40f){
this.value=_40f;
this.onChange(_40f);
},onChange:function(_410){
},onPage:function(_411){
},onClose:function(){
this._blurOptionNode();
},_createOption:function(item,_412){
var _413=dojo.create("li",{"class":"dijitReset dijitMenuItem"+(this.isLeftToRight()?"":" dijitMenuItemRtl"),role:"option"});
var _414=_412(item);
if(_414.html){
_413.innerHTML=_414.label;
}else{
_413.appendChild(dojo.doc.createTextNode(_414.label));
}
if(_413.innerHTML==""){
_413.innerHTML="&nbsp;";
}
_413.item=item;
return _413;
},createOptions:function(_415,_416,_417){
this.previousButton.style.display=(_416.start==0)?"none":"";
dojo.attr(this.previousButton,"id",this.id+"_prev");
dojo.forEach(_415,function(item,i){
var _418=this._createOption(item,_417);
dojo.attr(_418,"id",this.id+i);
this.domNode.insertBefore(_418,this.nextButton);
},this);
var _419=false;
if(_416._maxOptions&&_416._maxOptions!=-1){
if((_416.start+_416.count)<_416._maxOptions){
_419=true;
}else{
if((_416.start+_416.count)>_416._maxOptions&&_416.count==_415.length){
_419=true;
}
}
}else{
if(_416.count==_415.length){
_419=true;
}
}
this.nextButton.style.display=_419?"":"none";
dojo.attr(this.nextButton,"id",this.id+"_next");
return this.domNode.childNodes;
},clearResultList:function(){
while(this.domNode.childNodes.length>2){
this.domNode.removeChild(this.domNode.childNodes[this.domNode.childNodes.length-2]);
}
this._blurOptionNode();
},_onMouseDown:function(evt){
dojo.stopEvent(evt);
},_onMouseUp:function(evt){
if(evt.target===this.domNode||!this._highlighted_option){
return;
}else{
if(evt.target==this.previousButton){
this._blurOptionNode();
this.onPage(-1);
}else{
if(evt.target==this.nextButton){
this._blurOptionNode();
this.onPage(1);
}else{
var tgt=evt.target;
while(!tgt.item){
tgt=tgt.parentNode;
}
this._setValueAttr({target:tgt},true);
}
}
}
},_onMouseOver:function(evt){
if(evt.target===this.domNode){
return;
}
var tgt=evt.target;
if(!(tgt==this.previousButton||tgt==this.nextButton)){
while(!tgt.item){
tgt=tgt.parentNode;
}
}
this._focusOptionNode(tgt);
},_onMouseOut:function(evt){
if(evt.target===this.domNode){
return;
}
this._blurOptionNode();
},_focusOptionNode:function(node){
if(this._highlighted_option!=node){
this._blurOptionNode();
this._highlighted_option=node;
dojo.addClass(this._highlighted_option,"dijitMenuItemSelected");
}
},_blurOptionNode:function(){
if(this._highlighted_option){
dojo.removeClass(this._highlighted_option,"dijitMenuItemSelected");
this._highlighted_option=null;
}
},_highlightNextOption:function(){
if(!this.getHighlightedOption()){
var fc=this.domNode.firstChild;
this._focusOptionNode(fc.style.display=="none"?fc.nextSibling:fc);
}else{
var ns=this._highlighted_option.nextSibling;
if(ns&&ns.style.display!="none"){
this._focusOptionNode(ns);
}else{
this.highlightFirstOption();
}
}
dojo.window.scrollIntoView(this._highlighted_option);
},highlightFirstOption:function(){
var _41a=this.domNode.firstChild;
var _41b=_41a.nextSibling;
this._focusOptionNode(_41b.style.display=="none"?_41a:_41b);
dojo.window.scrollIntoView(this._highlighted_option);
},highlightLastOption:function(){
this._focusOptionNode(this.domNode.lastChild.previousSibling);
dojo.window.scrollIntoView(this._highlighted_option);
},_highlightPrevOption:function(){
if(!this.getHighlightedOption()){
var lc=this.domNode.lastChild;
this._focusOptionNode(lc.style.display=="none"?lc.previousSibling:lc);
}else{
var ps=this._highlighted_option.previousSibling;
if(ps&&ps.style.display!="none"){
this._focusOptionNode(ps);
}else{
this.highlightLastOption();
}
}
dojo.window.scrollIntoView(this._highlighted_option);
},_page:function(up){
var _41c=0;
var _41d=this.domNode.scrollTop;
var _41e=dojo.style(this.domNode,"height");
if(!this.getHighlightedOption()){
this._highlightNextOption();
}
while(_41c<_41e){
if(up){
if(!this.getHighlightedOption().previousSibling||this._highlighted_option.previousSibling.style.display=="none"){
break;
}
this._highlightPrevOption();
}else{
if(!this.getHighlightedOption().nextSibling||this._highlighted_option.nextSibling.style.display=="none"){
break;
}
this._highlightNextOption();
}
var _41f=this.domNode.scrollTop;
_41c+=(_41f-_41d)*(up?-1:1);
_41d=_41f;
}
},pageUp:function(){
this._page(true);
},pageDown:function(){
this._page(false);
},getHighlightedOption:function(){
var ho=this._highlighted_option;
return (ho&&ho.parentNode)?ho:null;
},handleKey:function(evt){
switch(evt.charOrCode){
case dojo.keys.DOWN_ARROW:
this._highlightNextOption();
return false;
case dojo.keys.PAGE_DOWN:
this.pageDown();
return false;
case dojo.keys.UP_ARROW:
this._highlightPrevOption();
return false;
case dojo.keys.PAGE_UP:
this.pageUp();
return false;
default:
return true;
}
}});
dojo.declare("dijit.form.ComboBox",[dijit.form.ValidationTextBox,dijit.form.ComboBoxMixin],{_setValueAttr:function(_420,_421,_422){
this._set("item",null);
if(!_420){
_420="";
}
dijit.form.ValidationTextBox.prototype._setValueAttr.call(this,_420,_421,_422);
}});
dojo.declare("dijit.form._ComboBoxDataStore",null,{constructor:function(root){
this.root=root;
if(root.tagName!="SELECT"&&root.firstChild){
root=dojo.query("select",root);
if(root.length>0){
root=root[0];
}else{
this.root.innerHTML="<SELECT>"+this.root.innerHTML+"</SELECT>";
root=this.root.firstChild;
}
this.root=root;
}
dojo.query("> option",root).forEach(function(node){
node.innerHTML=dojo.trim(node.innerHTML);
});
},getValue:function(item,_423,_424){
return (_423=="value")?item.value:(item.innerText||item.textContent||"");
},isItemLoaded:function(_425){
return true;
},getFeatures:function(){
return {"dojo.data.api.Read":true,"dojo.data.api.Identity":true};
},_fetchItems:function(args,_426,_427){
if(!args.query){
args.query={};
}
if(!args.query.name){
args.query.name="";
}
if(!args.queryOptions){
args.queryOptions={};
}
var _428=dojo.data.util.filter.patternToRegExp(args.query.name,args.queryOptions.ignoreCase),_429=dojo.query("> option",this.root).filter(function(_42a){
return (_42a.innerText||_42a.textContent||"").match(_428);
});
if(args.sort){
_429.sort(dojo.data.util.sorter.createSortFunction(args.sort,this));
}
_426(_429,args);
},close:function(_42b){
return;
},getLabel:function(item){
return item.innerHTML;
},getIdentity:function(item){
return dojo.attr(item,"value");
},fetchItemByIdentity:function(args){
var item=dojo.query("> option[value='"+args.identity+"']",this.root)[0];
args.onItem(item);
},fetchSelectedItem:function(){
var root=this.root,si=root.selectedIndex;
return typeof si=="number"?dojo.query("> option:nth-child("+(si!=-1?si+1:1)+")",root)[0]:null;
}});
dojo.extend(dijit.form._ComboBoxDataStore,dojo.data.util.simpleFetch);
}
if(!dojo._hasResource["dijit.form.FilteringSelect"]){
dojo._hasResource["dijit.form.FilteringSelect"]=true;
dojo.provide("dijit.form.FilteringSelect");
dojo.declare("dijit.form.FilteringSelect",[dijit.form.MappedTextBox,dijit.form.ComboBoxMixin],{required:true,_lastDisplayedValue:"",_isValidSubset:function(){
return this._opened;
},isValid:function(){
return this.item||(!this.required&&this.get("displayedValue")=="");
},_refreshState:function(){
if(!this.searchTimer){
this.inherited(arguments);
}
},_callbackSetLabel:function(_42c,_42d,_42e){
if((_42d&&_42d.query[this.searchAttr]!=this._lastQuery)||(!_42d&&_42c.length&&this.store.getIdentity(_42c[0])!=this._lastQuery)){
return;
}
if(!_42c.length){
this.valueNode.value="";
dijit.form.TextBox.superclass._setValueAttr.call(this,"",_42e||(_42e===undefined&&!this._focused));
this._set("item",null);
this.validate(this._focused);
}else{
this.set("item",_42c[0],_42e);
}
},_openResultList:function(_42f,_430){
if(_430.query[this.searchAttr]!=this._lastQuery){
return;
}
dijit.form.ComboBoxMixin.prototype._openResultList.apply(this,arguments);
if(this.item===undefined){
this.validate(true);
}
},_getValueAttr:function(){
return this.valueNode.value;
},_getValueField:function(){
return "value";
},_setValueAttr:function(_431,_432){
if(!this._onChangeActive){
_432=null;
}
this._lastQuery=_431;
if(_431===null||_431===""){
this._setDisplayedValueAttr("",_432);
return;
}
var self=this;
this.store.fetchItemByIdentity({identity:_431,onItem:function(item){
self._callbackSetLabel(item?[item]:[],undefined,_432);
}});
},_setItemAttr:function(item,_433,_434){
this.inherited(arguments);
this.valueNode.value=this.value;
this._lastDisplayedValue=this.textbox.value;
},_getDisplayQueryString:function(text){
return text.replace(/([\\\*\?])/g,"\\$1");
},_setDisplayedValueAttr:function(_435,_436){
if(_435==null){
_435="";
}
if(!this._created){
if(!("displayedValue" in this.params)){
return;
}
_436=false;
}
if(this.store){
this.closeDropDown();
var _437=dojo.clone(this.query);
this._lastQuery=_437[this.searchAttr]=this._getDisplayQueryString(_435);
this.textbox.value=_435;
this._lastDisplayedValue=_435;
this._set("displayedValue",_435);
var _438=this;
var _439={query:_437,queryOptions:{ignoreCase:this.ignoreCase,deep:true},onComplete:function(_43a,_43b){
_438._fetchHandle=null;
dojo.hitch(_438,"_callbackSetLabel")(_43a,_43b,_436);
},onError:function(_43c){
_438._fetchHandle=null;
console.error("dijit.form.FilteringSelect: "+_43c);
dojo.hitch(_438,"_callbackSetLabel")([],undefined,false);
}};
dojo.mixin(_439,this.fetchProperties);
this._fetchHandle=this.store.fetch(_439);
}
},undo:function(){
this.set("displayedValue",this._lastDisplayedValue);
}});
}
if(!dojo._hasResource["dijit.form.Form"]){
dojo._hasResource["dijit.form.Form"]=true;
dojo.provide("dijit.form.Form");
dojo.declare("dijit.form.Form",[dijit._Widget,dijit._Templated,dijit.form._FormMixin,dijit.layout._ContentPaneResizeMixin],{name:"",action:"",method:"",encType:"","accept-charset":"",accept:"",target:"",templateString:"<form dojoAttachPoint='containerNode' dojoAttachEvent='onreset:_onReset,onsubmit:_onSubmit' ${!nameAttrSetting}></form>",attributeMap:dojo.delegate(dijit._Widget.prototype.attributeMap,{action:"",method:"",encType:"","accept-charset":"",accept:"",target:""}),postMixInProperties:function(){
this.nameAttrSetting=this.name?("name='"+this.name+"'"):"";
this.inherited(arguments);
},execute:function(_43d){
},onExecute:function(){
},_setEncTypeAttr:function(_43e){
this.encType=_43e;
dojo.attr(this.domNode,"encType",_43e);
if(dojo.isIE){
this.domNode.encoding=_43e;
}
},postCreate:function(){
if(dojo.isIE&&this.srcNodeRef&&this.srcNodeRef.attributes){
var item=this.srcNodeRef.attributes.getNamedItem("encType");
if(item&&!item.specified&&(typeof item.value=="string")){
this.set("encType",item.value);
}
}
this.inherited(arguments);
},reset:function(e){
var faux={returnValue:true,preventDefault:function(){
this.returnValue=false;
},stopPropagation:function(){
},currentTarget:e?e.target:this.domNode,target:e?e.target:this.domNode};
if(!(this.onReset(faux)===false)&&faux.returnValue){
this.inherited(arguments,[]);
}
},onReset:function(e){
return true;
},_onReset:function(e){
this.reset(e);
dojo.stopEvent(e);
return false;
},_onSubmit:function(e){
var fp=dijit.form.Form.prototype;
if(this.execute!=fp.execute||this.onExecute!=fp.onExecute){
dojo.deprecated("dijit.form.Form:execute()/onExecute() are deprecated. Use onSubmit() instead.","","2.0");
this.onExecute();
this.execute(this.getValues());
}
if(this.onSubmit(e)===false){
dojo.stopEvent(e);
}
},onSubmit:function(e){
return this.isValid();
},submit:function(){
if(!(this.onSubmit()===false)){
this.containerNode.submit();
}
}});
}
if(!dojo._hasResource["dijit.form.SimpleTextarea"]){
dojo._hasResource["dijit.form.SimpleTextarea"]=true;
dojo.provide("dijit.form.SimpleTextarea");
dojo.declare("dijit.form.SimpleTextarea",dijit.form.TextBox,{baseClass:"dijitTextBox dijitTextArea",attributeMap:dojo.delegate(dijit.form._FormValueWidget.prototype.attributeMap,{rows:"textbox",cols:"textbox"}),rows:"3",cols:"20",templateString:"<textarea ${!nameAttrSetting} dojoAttachPoint='focusNode,containerNode,textbox' autocomplete='off'></textarea>",postMixInProperties:function(){
if(!this.value&&this.srcNodeRef){
this.value=this.srcNodeRef.value;
}
this.inherited(arguments);
},buildRendering:function(){
this.inherited(arguments);
if(dojo.isIE&&this.cols){
dojo.addClass(this.textbox,"dijitTextAreaCols");
}
},filter:function(_43f){
if(_43f){
_43f=_43f.replace(/\r/g,"");
}
return this.inherited(arguments);
},_previousValue:"",_onInput:function(e){
if(this.maxLength){
var _440=parseInt(this.maxLength);
var _441=this.textbox.value.replace(/\r/g,"");
var _442=_441.length-_440;
if(_442>0){
if(e){
dojo.stopEvent(e);
}
var _443=this.textbox;
if(_443.selectionStart){
var pos=_443.selectionStart;
var cr=0;
if(dojo.isOpera){
cr=(this.textbox.value.substring(0,pos).match(/\r/g)||[]).length;
}
this.textbox.value=_441.substring(0,pos-_442-cr)+_441.substring(pos-cr);
_443.setSelectionRange(pos-_442,pos-_442);
}else{
if(dojo.doc.selection){
_443.focus();
var _444=dojo.doc.selection.createRange();
_444.moveStart("character",-_442);
_444.text="";
_444.select();
}
}
}
this._previousValue=this.textbox.value;
}
this.inherited(arguments);
}});
}
if(!dojo._hasResource["dijit.form.Textarea"]){
dojo._hasResource["dijit.form.Textarea"]=true;
dojo.provide("dijit.form.Textarea");
dojo.declare("dijit.form.Textarea",dijit.form.SimpleTextarea,{baseClass:"dijitTextBox dijitTextArea dijitExpandingTextArea",cols:"",_previousNewlines:0,_strictMode:(dojo.doc.compatMode!="BackCompat"),_getHeight:function(_445){
var newH=_445.scrollHeight;
if(dojo.isIE){
newH+=_445.offsetHeight-_445.clientHeight-((dojo.isIE<8&&this._strictMode)?dojo._getPadBorderExtents(_445).h:0);
}else{
if(dojo.isMoz){
newH+=_445.offsetHeight-_445.clientHeight;
}else{
if(dojo.isWebKit){
newH+=dojo._getBorderExtents(_445).h;
}else{
newH+=dojo._getPadBorderExtents(_445).h;
}
}
}
return newH;
},_estimateHeight:function(_446){
_446.style.maxHeight="";
_446.style.height="auto";
_446.rows=(_446.value.match(/\n/g)||[]).length+1;
},_needsHelpShrinking:dojo.isMoz||dojo.isWebKit,_onInput:function(){
this.inherited(arguments);
if(this._busyResizing){
return;
}
this._busyResizing=true;
var _447=this.textbox;
if(_447.scrollHeight&&_447.offsetHeight&&_447.clientHeight){
var newH=this._getHeight(_447)+"px";
if(_447.style.height!=newH){
_447.style.maxHeight=_447.style.height=newH;
}
if(this._needsHelpShrinking){
if(this._setTimeoutHandle){
clearTimeout(this._setTimeoutHandle);
}
this._setTimeoutHandle=setTimeout(dojo.hitch(this,"_shrink"),0);
}
}else{
this._estimateHeight(_447);
}
this._busyResizing=false;
},_busyResizing:false,_shrink:function(){
this._setTimeoutHandle=null;
if(this._needsHelpShrinking&&!this._busyResizing){
this._busyResizing=true;
var _448=this.textbox;
var _449=false;
if(_448.value==""){
_448.value=" ";
_449=true;
}
var _44a=_448.scrollHeight;
if(!_44a){
this._estimateHeight(_448);
}else{
var _44b=_448.style.paddingBottom;
var _44c=dojo._getPadExtents(_448);
_44c=_44c.h-_44c.t;
_448.style.paddingBottom=_44c+1+"px";
var newH=this._getHeight(_448)-1+"px";
if(_448.style.maxHeight!=newH){
_448.style.paddingBottom=_44c+_44a+"px";
_448.scrollTop=0;
_448.style.maxHeight=this._getHeight(_448)-_44a+"px";
}
_448.style.paddingBottom=_44b;
}
if(_449){
_448.value="";
}
this._busyResizing=false;
}
},resize:function(){
this._onInput();
},_setValueAttr:function(){
this.inherited(arguments);
this.resize();
},buildRendering:function(){
this.inherited(arguments);
dojo.style(this.textbox,{overflowY:"hidden",overflowX:"auto",boxSizing:"border-box",MsBoxSizing:"border-box",WebkitBoxSizing:"border-box",MozBoxSizing:"border-box"});
},postCreate:function(){
this.inherited(arguments);
this.connect(this.textbox,"onscroll","_onInput");
this.connect(this.textbox,"onresize","_onInput");
this.connect(this.textbox,"onfocus","_onInput");
this._setTimeoutHandle=setTimeout(dojo.hitch(this,"resize"),0);
},uninitialize:function(){
if(this._setTimeoutHandle){
clearTimeout(this._setTimeoutHandle);
}
this.inherited(arguments);
}});
}
if(!dojo._hasResource["dijit.form.Button"]){
dojo._hasResource["dijit.form.Button"]=true;
dojo.provide("dijit.form.Button");
dojo.declare("dijit.form.Button",dijit.form._FormWidget,{label:"",showLabel:true,iconClass:"",type:"button",baseClass:"dijitButton",templateString:dojo.cache("dijit.form","templates/Button.html","<span class=\"dijit dijitReset dijitInline\"\r\n\t><span class=\"dijitReset dijitInline dijitButtonNode\"\r\n\t\tdojoAttachEvent=\"ondijitclick:_onButtonClick\"\r\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\r\n\t\t\tdojoAttachPoint=\"titleNode,focusNode\"\r\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\r\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\" dojoAttachPoint=\"iconNode\"></span\r\n\t\t\t><span class=\"dijitReset dijitToggleButtonIconChar\">&#x25CF;</span\r\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\r\n\t\t\t\tid=\"${id}_label\"\r\n\t\t\t\tdojoAttachPoint=\"containerNode\"\r\n\t\t\t></span\r\n\t\t></span\r\n\t></span\r\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\r\n\t\tdojoAttachPoint=\"valueNode\"\r\n/></span>\r\n"),attributeMap:dojo.delegate(dijit.form._FormWidget.prototype.attributeMap,{value:"valueNode"}),_onClick:function(e){
if(this.disabled){
return false;
}
this._clicked();
return this.onClick(e);
},_onButtonClick:function(e){
if(this._onClick(e)===false){
e.preventDefault();
}else{
if(this.type=="submit"&&!(this.valueNode||this.focusNode).form){
for(var node=this.domNode;node.parentNode;node=node.parentNode){
var _44d=dijit.byNode(node);
if(_44d&&typeof _44d._onSubmit=="function"){
_44d._onSubmit(e);
break;
}
}
}else{
if(this.valueNode){
this.valueNode.click();
e.preventDefault();
}
}
}
},buildRendering:function(){
this.inherited(arguments);
dojo.setSelectable(this.focusNode,false);
},_fillContent:function(_44e){
if(_44e&&(!this.params||!("label" in this.params))){
this.set("label",_44e.innerHTML);
}
},_setShowLabelAttr:function(val){
if(this.containerNode){
dojo.toggleClass(this.containerNode,"dijitDisplayNone",!val);
}
this._set("showLabel",val);
},onClick:function(e){
return true;
},_clicked:function(e){
},setLabel:function(_44f){
dojo.deprecated("dijit.form.Button.setLabel() is deprecated.  Use set('label', ...) instead.","","2.0");
this.set("label",_44f);
},_setLabelAttr:function(_450){
this._set("label",_450);
this.containerNode.innerHTML=_450;
if(this.showLabel==false&&!this.params.title){
this.titleNode.title=dojo.trim(this.containerNode.innerText||this.containerNode.textContent||"");
}
},_setIconClassAttr:function(val){
var _451=this.iconClass||"dijitNoIcon",_452=val||"dijitNoIcon";
dojo.replaceClass(this.iconNode,_452,_451);
this._set("iconClass",val);
}});
dojo.declare("dijit.form.DropDownButton",[dijit.form.Button,dijit._Container,dijit._HasDropDown],{baseClass:"dijitDropDownButton",templateString:dojo.cache("dijit.form","templates/DropDownButton.html","<span class=\"dijit dijitReset dijitInline\"\r\n\t><span class='dijitReset dijitInline dijitButtonNode'\r\n\t\tdojoAttachEvent=\"ondijitclick:_onButtonClick\" dojoAttachPoint=\"_buttonNode\"\r\n\t\t><span class=\"dijitReset dijitStretch dijitButtonContents\"\r\n\t\t\tdojoAttachPoint=\"focusNode,titleNode,_arrowWrapperNode\"\r\n\t\t\trole=\"button\" aria-haspopup=\"true\" aria-labelledby=\"${id}_label\"\r\n\t\t\t><span class=\"dijitReset dijitInline dijitIcon\"\r\n\t\t\t\tdojoAttachPoint=\"iconNode\"\r\n\t\t\t></span\r\n\t\t\t><span class=\"dijitReset dijitInline dijitButtonText\"\r\n\t\t\t\tdojoAttachPoint=\"containerNode,_popupStateNode\"\r\n\t\t\t\tid=\"${id}_label\"\r\n\t\t\t></span\r\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonInner\"></span\r\n\t\t\t><span class=\"dijitReset dijitInline dijitArrowButtonChar\">&#9660;</span\r\n\t\t></span\r\n\t></span\r\n\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" class=\"dijitOffScreen\" tabIndex=\"-1\"\r\n\t\tdojoAttachPoint=\"valueNode\"\r\n/></span>\r\n"),_fillContent:function(){
if(this.srcNodeRef){
var _453=dojo.query("*",this.srcNodeRef);
dijit.form.DropDownButton.superclass._fillContent.call(this,_453[0]);
this.dropDownContainer=this.srcNodeRef;
}
},startup:function(){
if(this._started){
return;
}
if(!this.dropDown&&this.dropDownContainer){
var _454=dojo.query("[widgetId]",this.dropDownContainer)[0];
this.dropDown=dijit.byNode(_454);
delete this.dropDownContainer;
}
if(this.dropDown){
dijit.popup.hide(this.dropDown);
}
this.inherited(arguments);
},isLoaded:function(){
var _455=this.dropDown;
return (!!_455&&(!_455.href||_455.isLoaded));
},loadDropDown:function(){
var _456=this.dropDown;
if(!_456){
return;
}
if(!this.isLoaded()){
var _457=dojo.connect(_456,"onLoad",this,function(){
dojo.disconnect(_457);
this.openDropDown();
});
_456.refresh();
}else{
this.openDropDown();
}
},isFocusable:function(){
return this.inherited(arguments)&&!this._mouseDown;
}});
dojo.declare("dijit.form.ComboButton",dijit.form.DropDownButton,{templateString:dojo.cache("dijit.form","templates/ComboButton.html","<table class=\"dijit dijitReset dijitInline dijitLeft\"\r\n\tcellspacing='0' cellpadding='0' role=\"presentation\"\r\n\t><tbody role=\"presentation\"><tr role=\"presentation\"\r\n\t\t><td class=\"dijitReset dijitStretch dijitButtonNode\" dojoAttachPoint=\"buttonNode\" dojoAttachEvent=\"ondijitclick:_onButtonClick,onkeypress:_onButtonKeyPress\"\r\n\t\t><div id=\"${id}_button\" class=\"dijitReset dijitButtonContents\"\r\n\t\t\tdojoAttachPoint=\"titleNode\"\r\n\t\t\trole=\"button\" aria-labelledby=\"${id}_label\"\r\n\t\t\t><div class=\"dijitReset dijitInline dijitIcon\" dojoAttachPoint=\"iconNode\" role=\"presentation\"></div\r\n\t\t\t><div class=\"dijitReset dijitInline dijitButtonText\" id=\"${id}_label\" dojoAttachPoint=\"containerNode\" role=\"presentation\"></div\r\n\t\t></div\r\n\t\t></td\r\n\t\t><td id=\"${id}_arrow\" class='dijitReset dijitRight dijitButtonNode dijitArrowButton'\r\n\t\t\tdojoAttachPoint=\"_popupStateNode,focusNode,_buttonNode\"\r\n\t\t\tdojoAttachEvent=\"onkeypress:_onArrowKeyPress\"\r\n\t\t\ttitle=\"${optionsTitle}\"\r\n\t\t\trole=\"button\" aria-haspopup=\"true\"\r\n\t\t\t><div class=\"dijitReset dijitArrowButtonInner\" role=\"presentation\"></div\r\n\t\t\t><div class=\"dijitReset dijitArrowButtonChar\" role=\"presentation\">&#9660;</div\r\n\t\t></td\r\n\t\t><td style=\"display:none !important;\"\r\n\t\t\t><input ${!nameAttrSetting} type=\"${type}\" value=\"${value}\" dojoAttachPoint=\"valueNode\"\r\n\t\t/></td></tr></tbody\r\n></table>\r\n"),attributeMap:dojo.mixin(dojo.clone(dijit.form.Button.prototype.attributeMap),{id:"",tabIndex:["focusNode","titleNode"],title:"titleNode"}),optionsTitle:"",baseClass:"dijitComboButton",cssStateNodes:{"buttonNode":"dijitButtonNode","titleNode":"dijitButtonContents","_popupStateNode":"dijitDownArrowButton"},_focusedNode:null,_onButtonKeyPress:function(evt){
if(evt.charOrCode==dojo.keys[this.isLeftToRight()?"RIGHT_ARROW":"LEFT_ARROW"]){
dijit.focus(this._popupStateNode);
dojo.stopEvent(evt);
}
},_onArrowKeyPress:function(evt){
if(evt.charOrCode==dojo.keys[this.isLeftToRight()?"LEFT_ARROW":"RIGHT_ARROW"]){
dijit.focus(this.titleNode);
dojo.stopEvent(evt);
}
},focus:function(_458){
if(!this.disabled){
dijit.focus(_458=="start"?this.titleNode:this._popupStateNode);
}
}});
dojo.declare("dijit.form.ToggleButton",dijit.form.Button,{baseClass:"dijitToggleButton",checked:false,attributeMap:dojo.mixin(dojo.clone(dijit.form.Button.prototype.attributeMap),{checked:"focusNode"}),_clicked:function(evt){
this.set("checked",!this.checked);
},_setCheckedAttr:function(_459,_45a){
this._set("checked",_459);
dojo.attr(this.focusNode||this.domNode,"checked",_459);
dijit.setWaiState(this.focusNode||this.domNode,"pressed",_459);
this._handleOnChange(_459,_45a);
},setChecked:function(_45b){
dojo.deprecated("setChecked("+_45b+") is deprecated. Use set('checked',"+_45b+") instead.","","2.0");
this.set("checked",_45b);
},reset:function(){
this._hasBeenBlurred=false;
this.set("checked",this.params.checked||false);
}});
}
if(!dojo._hasResource["dijit.form.ToggleButton"]){
dojo._hasResource["dijit.form.ToggleButton"]=true;
dojo.provide("dijit.form.ToggleButton");
}
if(!dojo._hasResource["dijit.form.CheckBox"]){
dojo._hasResource["dijit.form.CheckBox"]=true;
dojo.provide("dijit.form.CheckBox");
dojo.declare("dijit.form.CheckBox",dijit.form.ToggleButton,{templateString:dojo.cache("dijit.form","templates/CheckBox.html","<div class=\"dijit dijitReset dijitInline\" role=\"presentation\"\r\n\t><input\r\n\t \t${!nameAttrSetting} type=\"${type}\" ${checkedAttrSetting}\r\n\t\tclass=\"dijitReset dijitCheckBoxInput\"\r\n\t\tdojoAttachPoint=\"focusNode\"\r\n\t \tdojoAttachEvent=\"onclick:_onClick\"\r\n/></div>\r\n"),baseClass:"dijitCheckBox",type:"checkbox",value:"on",readOnly:false,attributeMap:dojo.delegate(dijit.form._FormWidget.prototype.attributeMap,{readOnly:"focusNode"}),_setReadOnlyAttr:function(_45c){
this._set("readOnly",_45c);
dojo.attr(this.focusNode,"readOnly",_45c);
dijit.setWaiState(this.focusNode,"readonly",_45c);
},_setValueAttr:function(_45d,_45e){
if(typeof _45d=="string"){
this._set("value",_45d);
dojo.attr(this.focusNode,"value",_45d);
_45d=true;
}
if(this._created){
this.set("checked",_45d,_45e);
}
},_getValueAttr:function(){
return (this.checked?this.value:false);
},_setLabelAttr:undefined,postMixInProperties:function(){
if(this.value==""){
this.value="on";
}
this.checkedAttrSetting=this.checked?"checked":"";
this.inherited(arguments);
},_fillContent:function(_45f){
},reset:function(){
this._hasBeenBlurred=false;
this.set("checked",this.params.checked||false);
this._set("value",this.params.value||"on");
dojo.attr(this.focusNode,"value",this.value);
},_onFocus:function(){
if(this.id){
dojo.query("label[for='"+this.id+"']").addClass("dijitFocusedLabel");
}
this.inherited(arguments);
},_onBlur:function(){
if(this.id){
dojo.query("label[for='"+this.id+"']").removeClass("dijitFocusedLabel");
}
this.inherited(arguments);
},_onClick:function(e){
if(this.readOnly){
dojo.stopEvent(e);
return false;
}
return this.inherited(arguments);
}});
dojo.declare("dijit.form.RadioButton",dijit.form.CheckBox,{type:"radio",baseClass:"dijitRadio",_setCheckedAttr:function(_460){
this.inherited(arguments);
if(!this._created){
return;
}
if(_460){
var _461=this;
dojo.query("INPUT[type=radio]",this.focusNode.form||dojo.doc).forEach(function(_462){
if(_462.name==_461.name&&_462!=_461.focusNode&&_462.form==_461.focusNode.form){
var _463=dijit.getEnclosingWidget(_462);
if(_463&&_463.checked){
_463.set("checked",false);
}
}
});
}
},_clicked:function(e){
if(!this.checked){
this.set("checked",true);
}
}});
}
if(!dojo._hasResource["dojo.date"]){
dojo._hasResource["dojo.date"]=true;
dojo.provide("dojo.date");
dojo.getObject("date",true,dojo);
dojo.date.getDaysInMonth=function(_464){
var _465=_464.getMonth();
var days=[31,28,31,30,31,30,31,31,30,31,30,31];
if(_465==1&&dojo.date.isLeapYear(_464)){
return 29;
}
return days[_465];
};
dojo.date.isLeapYear=function(_466){
var year=_466.getFullYear();
return !(year%400)||(!(year%4)&&!!(year%100));
};
dojo.date.getTimezoneName=function(_467){
var str=_467.toString();
var tz="";
var _468;
var pos=str.indexOf("(");
if(pos>-1){
tz=str.substring(++pos,str.indexOf(")"));
}else{
var pat=/([A-Z\/]+) \d{4}$/;
if((_468=str.match(pat))){
tz=_468[1];
}else{
str=_467.toLocaleString();
pat=/ ([A-Z\/]+)$/;
if((_468=str.match(pat))){
tz=_468[1];
}
}
}
return (tz=="AM"||tz=="PM")?"":tz;
};
dojo.date.compare=function(_469,_46a,_46b){
_469=new Date(+_469);
_46a=new Date(+(_46a||new Date()));
if(_46b=="date"){
_469.setHours(0,0,0,0);
_46a.setHours(0,0,0,0);
}else{
if(_46b=="time"){
_469.setFullYear(0,0,0);
_46a.setFullYear(0,0,0);
}
}
if(_469>_46a){
return 1;
}
if(_469<_46a){
return -1;
}
return 0;
};
dojo.date.add=function(date,_46c,_46d){
var sum=new Date(+date);
var _46e=false;
var _46f="Date";
switch(_46c){
case "day":
break;
case "weekday":
var days,_470;
var mod=_46d%5;
if(!mod){
days=(_46d>0)?5:-5;
_470=(_46d>0)?((_46d-5)/5):((_46d+5)/5);
}else{
days=mod;
_470=parseInt(_46d/5);
}
var strt=date.getDay();
var adj=0;
if(strt==6&&_46d>0){
adj=1;
}else{
if(strt==0&&_46d<0){
adj=-1;
}
}
var trgt=strt+days;
if(trgt==0||trgt==6){
adj=(_46d>0)?2:-2;
}
_46d=(7*_470)+days+adj;
break;
case "year":
_46f="FullYear";
_46e=true;
break;
case "week":
_46d*=7;
break;
case "quarter":
_46d*=3;
case "month":
_46e=true;
_46f="Month";
break;
default:
_46f="UTC"+_46c.charAt(0).toUpperCase()+_46c.substring(1)+"s";
}
if(_46f){
sum["set"+_46f](sum["get"+_46f]()+_46d);
}
if(_46e&&(sum.getDate()<date.getDate())){
sum.setDate(0);
}
return sum;
};
dojo.date.difference=function(_471,_472,_473){
_472=_472||new Date();
_473=_473||"day";
var _474=_472.getFullYear()-_471.getFullYear();
var _475=1;
switch(_473){
case "quarter":
var m1=_471.getMonth();
var m2=_472.getMonth();
var q1=Math.floor(m1/3)+1;
var q2=Math.floor(m2/3)+1;
q2+=(_474*4);
_475=q2-q1;
break;
case "weekday":
var days=Math.round(dojo.date.difference(_471,_472,"day"));
var _476=parseInt(dojo.date.difference(_471,_472,"week"));
var mod=days%7;
if(mod==0){
days=_476*5;
}else{
var adj=0;
var aDay=_471.getDay();
var bDay=_472.getDay();
_476=parseInt(days/7);
mod=days%7;
var _477=new Date(_471);
_477.setDate(_477.getDate()+(_476*7));
var _478=_477.getDay();
if(days>0){
switch(true){
case aDay==6:
adj=-1;
break;
case aDay==0:
adj=0;
break;
case bDay==6:
adj=-1;
break;
case bDay==0:
adj=-2;
break;
case (_478+mod)>5:
adj=-2;
}
}else{
if(days<0){
switch(true){
case aDay==6:
adj=0;
break;
case aDay==0:
adj=1;
break;
case bDay==6:
adj=2;
break;
case bDay==0:
adj=1;
break;
case (_478+mod)<0:
adj=2;
}
}
}
days+=adj;
days-=(_476*2);
}
_475=days;
break;
case "year":
_475=_474;
break;
case "month":
_475=(_472.getMonth()-_471.getMonth())+(_474*12);
break;
case "week":
_475=parseInt(dojo.date.difference(_471,_472,"day")/7);
break;
case "day":
_475/=24;
case "hour":
_475/=60;
case "minute":
_475/=60;
case "second":
_475/=1000;
case "millisecond":
_475*=_472.getTime()-_471.getTime();
}
return Math.round(_475);
};
}
if(!dojo._hasResource["dojo.cldr.supplemental"]){
dojo._hasResource["dojo.cldr.supplemental"]=true;
dojo.provide("dojo.cldr.supplemental");
dojo.getObject("cldr.supplemental",true,dojo);
dojo.cldr.supplemental.getFirstDayOfWeek=function(_479){
var _47a={mv:5,ae:6,af:6,bh:6,dj:6,dz:6,eg:6,er:6,et:6,iq:6,ir:6,jo:6,ke:6,kw:6,ly:6,ma:6,om:6,qa:6,sa:6,sd:6,so:6,sy:6,tn:6,ye:6,ar:0,as:0,az:0,bw:0,ca:0,cn:0,fo:0,ge:0,gl:0,gu:0,hk:0,il:0,"in":0,jm:0,jp:0,kg:0,kr:0,la:0,mh:0,mn:0,mo:0,mp:0,mt:0,nz:0,ph:0,pk:0,sg:0,th:0,tt:0,tw:0,um:0,us:0,uz:0,vi:0,zw:0};
var _47b=dojo.cldr.supplemental._region(_479);
var dow=_47a[_47b];
return (dow===undefined)?1:dow;
};
dojo.cldr.supplemental._region=function(_47c){
_47c=dojo.i18n.normalizeLocale(_47c);
var tags=_47c.split("-");
var _47d=tags[1];
if(!_47d){
_47d={de:"de",en:"us",es:"es",fi:"fi",fr:"fr",he:"il",hu:"hu",it:"it",ja:"jp",ko:"kr",nl:"nl",pt:"br",sv:"se",zh:"cn"}[tags[0]];
}else{
if(_47d.length==4){
_47d=tags[2];
}
}
return _47d;
};
dojo.cldr.supplemental.getWeekend=function(_47e){
var _47f={"in":0,af:4,dz:4,ir:4,om:4,sa:4,ye:4,ae:5,bh:5,eg:5,il:5,iq:5,jo:5,kw:5,ly:5,ma:5,qa:5,sd:5,sy:5,tn:5};
var _480={af:5,dz:5,ir:5,om:5,sa:5,ye:5,ae:6,bh:5,eg:6,il:6,iq:6,jo:6,kw:6,ly:6,ma:6,qa:6,sd:6,sy:6,tn:6};
var _481=dojo.cldr.supplemental._region(_47e);
var _482=_47f[_481];
var end=_480[_481];
if(_482===undefined){
_482=6;
}
if(end===undefined){
end=0;
}
return {start:_482,end:end};
};
}
if(!dojo._hasResource["dojo.date.locale"]){
dojo._hasResource["dojo.date.locale"]=true;
dojo.provide("dojo.date.locale");
dojo.getObject("date.locale",true,dojo);
(function(){
function _483(_484,_485,_486,_487){
return _487.replace(/([a-z])\1*/ig,function(_488){
var s,pad,c=_488.charAt(0),l=_488.length,_489=["abbr","wide","narrow"];
switch(c){
case "G":
s=_485[(l<4)?"eraAbbr":"eraNames"][_484.getFullYear()<0?0:1];
break;
case "y":
s=_484.getFullYear();
switch(l){
case 1:
break;
case 2:
if(!_486.fullYear){
s=String(s);
s=s.substr(s.length-2);
break;
}
default:
pad=true;
}
break;
case "Q":
case "q":
s=Math.ceil((_484.getMonth()+1)/3);
pad=true;
break;
case "M":
var m=_484.getMonth();
if(l<3){
s=m+1;
pad=true;
}else{
var _48a=["months","format",_489[l-3]].join("-");
s=_485[_48a][m];
}
break;
case "w":
var _48b=0;
s=dojo.date.locale._getWeekOfYear(_484,_48b);
pad=true;
break;
case "d":
s=_484.getDate();
pad=true;
break;
case "D":
s=dojo.date.locale._getDayOfYear(_484);
pad=true;
break;
case "E":
var d=_484.getDay();
if(l<3){
s=d+1;
pad=true;
}else{
var _48c=["days","format",_489[l-3]].join("-");
s=_485[_48c][d];
}
break;
case "a":
var _48d=(_484.getHours()<12)?"am":"pm";
s=_486[_48d]||_485["dayPeriods-format-wide-"+_48d];
break;
case "h":
case "H":
case "K":
case "k":
var h=_484.getHours();
switch(c){
case "h":
s=(h%12)||12;
break;
case "H":
s=h;
break;
case "K":
s=(h%12);
break;
case "k":
s=h||24;
break;
}
pad=true;
break;
case "m":
s=_484.getMinutes();
pad=true;
break;
case "s":
s=_484.getSeconds();
pad=true;
break;
case "S":
s=Math.round(_484.getMilliseconds()*Math.pow(10,l-3));
pad=true;
break;
case "v":
case "z":
s=dojo.date.locale._getZone(_484,true,_486);
if(s){
break;
}
l=4;
case "Z":
var _48e=dojo.date.locale._getZone(_484,false,_486);
var tz=[(_48e<=0?"+":"-"),dojo.string.pad(Math.floor(Math.abs(_48e)/60),2),dojo.string.pad(Math.abs(_48e)%60,2)];
if(l==4){
tz.splice(0,0,"GMT");
tz.splice(3,0,":");
}
s=tz.join("");
break;
default:
throw new Error("dojo.date.locale.format: invalid pattern char: "+_487);
}
if(pad){
s=dojo.string.pad(s,l);
}
return s;
});
};
dojo.date.locale._getZone=function(_48f,_490,_491){
if(_490){
return dojo.date.getTimezoneName(_48f);
}else{
return _48f.getTimezoneOffset();
}
};
dojo.date.locale.format=function(_492,_493){
_493=_493||{};
var _494=dojo.i18n.normalizeLocale(_493.locale),_495=_493.formatLength||"short",_496=dojo.date.locale._getGregorianBundle(_494),str=[],_497=dojo.hitch(this,_483,_492,_496,_493);
if(_493.selector=="year"){
return _498(_496["dateFormatItem-yyyy"]||"yyyy",_497);
}
var _499;
if(_493.selector!="date"){
_499=_493.timePattern||_496["timeFormat-"+_495];
if(_499){
str.push(_498(_499,_497));
}
}
if(_493.selector!="time"){
_499=_493.datePattern||_496["dateFormat-"+_495];
if(_499){
str.push(_498(_499,_497));
}
}
return str.length==1?str[0]:_496["dateTimeFormat-"+_495].replace(/\{(\d+)\}/g,function(_49a,key){
return str[key];
});
};
dojo.date.locale.regexp=function(_49b){
return dojo.date.locale._parseInfo(_49b).regexp;
};
dojo.date.locale._parseInfo=function(_49c){
_49c=_49c||{};
var _49d=dojo.i18n.normalizeLocale(_49c.locale),_49e=dojo.date.locale._getGregorianBundle(_49d),_49f=_49c.formatLength||"short",_4a0=_49c.datePattern||_49e["dateFormat-"+_49f],_4a1=_49c.timePattern||_49e["timeFormat-"+_49f],_4a2;
if(_49c.selector=="date"){
_4a2=_4a0;
}else{
if(_49c.selector=="time"){
_4a2=_4a1;
}else{
_4a2=_49e["dateTimeFormat-"+_49f].replace(/\{(\d+)\}/g,function(_4a3,key){
return [_4a1,_4a0][key];
});
}
}
var _4a4=[],re=_498(_4a2,dojo.hitch(this,_4a5,_4a4,_49e,_49c));
return {regexp:re,tokens:_4a4,bundle:_49e};
};
dojo.date.locale.parse=function(_4a6,_4a7){
var _4a8=/[\u200E\u200F\u202A\u202E]/g,info=dojo.date.locale._parseInfo(_4a7),_4a9=info.tokens,_4aa=info.bundle,re=new RegExp("^"+info.regexp.replace(_4a8,"")+"$",info.strict?"":"i"),_4ab=re.exec(_4a6&&_4a6.replace(_4a8,""));
if(!_4ab){
return null;
}
var _4ac=["abbr","wide","narrow"],_4ad=[1970,0,1,0,0,0,0],amPm="",_4ae=dojo.every(_4ab,function(v,i){
if(!i){
return true;
}
var _4af=_4a9[i-1];
var l=_4af.length;
switch(_4af.charAt(0)){
case "y":
if(l!=2&&_4a7.strict){
_4ad[0]=v;
}else{
if(v<100){
v=Number(v);
var year=""+new Date().getFullYear(),_4b0=year.substring(0,2)*100,_4b1=Math.min(Number(year.substring(2,4))+20,99),num=(v<_4b1)?_4b0+v:_4b0-100+v;
_4ad[0]=num;
}else{
if(_4a7.strict){
return false;
}
_4ad[0]=v;
}
}
break;
case "M":
if(l>2){
var _4b2=_4aa["months-format-"+_4ac[l-3]].concat();
if(!_4a7.strict){
v=v.replace(".","").toLowerCase();
_4b2=dojo.map(_4b2,function(s){
return s.replace(".","").toLowerCase();
});
}
v=dojo.indexOf(_4b2,v);
if(v==-1){
return false;
}
}else{
v--;
}
_4ad[1]=v;
break;
case "E":
case "e":
var days=_4aa["days-format-"+_4ac[l-3]].concat();
if(!_4a7.strict){
v=v.toLowerCase();
days=dojo.map(days,function(d){
return d.toLowerCase();
});
}
v=dojo.indexOf(days,v);
if(v==-1){
return false;
}
break;
case "D":
_4ad[1]=0;
case "d":
_4ad[2]=v;
break;
case "a":
var am=_4a7.am||_4aa["dayPeriods-format-wide-am"],pm=_4a7.pm||_4aa["dayPeriods-format-wide-pm"];
if(!_4a7.strict){
var _4b3=/\./g;
v=v.replace(_4b3,"").toLowerCase();
am=am.replace(_4b3,"").toLowerCase();
pm=pm.replace(_4b3,"").toLowerCase();
}
if(_4a7.strict&&v!=am&&v!=pm){
return false;
}
amPm=(v==pm)?"p":(v==am)?"a":"";
break;
case "K":
if(v==24){
v=0;
}
case "h":
case "H":
case "k":
if(v>23){
return false;
}
_4ad[3]=v;
break;
case "m":
_4ad[4]=v;
break;
case "s":
_4ad[5]=v;
break;
case "S":
_4ad[6]=v;
}
return true;
});
var _4b4=+_4ad[3];
if(amPm==="p"&&_4b4<12){
_4ad[3]=_4b4+12;
}else{
if(amPm==="a"&&_4b4==12){
_4ad[3]=0;
}
}
var _4b5=new Date(_4ad[0],_4ad[1],_4ad[2],_4ad[3],_4ad[4],_4ad[5],_4ad[6]);
if(_4a7.strict){
_4b5.setFullYear(_4ad[0]);
}
var _4b6=_4a9.join(""),_4b7=_4b6.indexOf("d")!=-1,_4b8=_4b6.indexOf("M")!=-1;
if(!_4ae||(_4b8&&_4b5.getMonth()>_4ad[1])||(_4b7&&_4b5.getDate()>_4ad[2])){
return null;
}
if((_4b8&&_4b5.getMonth()<_4ad[1])||(_4b7&&_4b5.getDate()<_4ad[2])){
_4b5=dojo.date.add(_4b5,"hour",1);
}
return _4b5;
};
function _498(_4b9,_4ba,_4bb,_4bc){
var _4bd=function(x){
return x;
};
_4ba=_4ba||_4bd;
_4bb=_4bb||_4bd;
_4bc=_4bc||_4bd;
var _4be=_4b9.match(/(''|[^'])+/g),_4bf=_4b9.charAt(0)=="'";
dojo.forEach(_4be,function(_4c0,i){
if(!_4c0){
_4be[i]="";
}else{
_4be[i]=(_4bf?_4bb:_4ba)(_4c0.replace(/''/g,"'"));
_4bf=!_4bf;
}
});
return _4bc(_4be.join(""));
};
function _4a5(_4c1,_4c2,_4c3,_4c4){
_4c4=dojo.regexp.escapeString(_4c4);
if(!_4c3.strict){
_4c4=_4c4.replace(" a"," ?a");
}
return _4c4.replace(/([a-z])\1*/ig,function(_4c5){
var s,c=_4c5.charAt(0),l=_4c5.length,p2="",p3="";
if(_4c3.strict){
if(l>1){
p2="0"+"{"+(l-1)+"}";
}
if(l>2){
p3="0"+"{"+(l-2)+"}";
}
}else{
p2="0?";
p3="0{0,2}";
}
switch(c){
case "y":
s="\\d{2,4}";
break;
case "M":
s=(l>2)?"\\S+?":"1[0-2]|"+p2+"[1-9]";
break;
case "D":
s="[12][0-9][0-9]|3[0-5][0-9]|36[0-6]|"+p3+"[1-9][0-9]|"+p2+"[1-9]";
break;
case "d":
s="3[01]|[12]\\d|"+p2+"[1-9]";
break;
case "w":
s="[1-4][0-9]|5[0-3]|"+p2+"[1-9]";
break;
case "E":
s="\\S+";
break;
case "h":
s="1[0-2]|"+p2+"[1-9]";
break;
case "k":
s="1[01]|"+p2+"\\d";
break;
case "H":
s="1\\d|2[0-3]|"+p2+"\\d";
break;
case "K":
s="1\\d|2[0-4]|"+p2+"[1-9]";
break;
case "m":
case "s":
s="[0-5]\\d";
break;
case "S":
s="\\d{"+l+"}";
break;
case "a":
var am=_4c3.am||_4c2["dayPeriods-format-wide-am"],pm=_4c3.pm||_4c2["dayPeriods-format-wide-pm"];
s=am+"|"+pm;
if(!_4c3.strict){
if(am!=am.toLowerCase()){
s+="|"+am.toLowerCase();
}
if(pm!=pm.toLowerCase()){
s+="|"+pm.toLowerCase();
}
if(s.indexOf(".")!=-1){
s+="|"+s.replace(/\./g,"");
}
}
s=s.replace(/\./g,"\\.");
break;
default:
s=".*";
}
if(_4c1){
_4c1.push(_4c5);
}
return "("+s+")";
}).replace(/[\xa0 ]/g,"[\\s\\xa0]");
};
})();
(function(){
var _4c6=[];
dojo.date.locale.addCustomFormats=function(_4c7,_4c8){
_4c6.push({pkg:_4c7,name:_4c8});
};
dojo.date.locale._getGregorianBundle=function(_4c9){
var _4ca={};
dojo.forEach(_4c6,function(desc){
var _4cb=dojo.i18n.getLocalization(desc.pkg,desc.name,_4c9);
_4ca=dojo.mixin(_4ca,_4cb);
},this);
return _4ca;
};
})();
dojo.date.locale.addCustomFormats("dojo.cldr","gregorian");
dojo.date.locale.getNames=function(item,type,_4cc,_4cd){
var _4ce,_4cf=dojo.date.locale._getGregorianBundle(_4cd),_4d0=[item,_4cc,type];
if(_4cc=="standAlone"){
var key=_4d0.join("-");
_4ce=_4cf[key];
if(_4ce[0]==1){
_4ce=undefined;
}
}
_4d0[1]="format";
return (_4ce||_4cf[_4d0.join("-")]).concat();
};
dojo.date.locale.isWeekend=function(_4d1,_4d2){
var _4d3=dojo.cldr.supplemental.getWeekend(_4d2),day=(_4d1||new Date()).getDay();
if(_4d3.end<_4d3.start){
_4d3.end+=7;
if(day<_4d3.start){
day+=7;
}
}
return day>=_4d3.start&&day<=_4d3.end;
};
dojo.date.locale._getDayOfYear=function(_4d4){
return dojo.date.difference(new Date(_4d4.getFullYear(),0,1,_4d4.getHours()),_4d4)+1;
};
dojo.date.locale._getWeekOfYear=function(_4d5,_4d6){
if(arguments.length==1){
_4d6=0;
}
var _4d7=new Date(_4d5.getFullYear(),0,1).getDay(),adj=(_4d7-_4d6+7)%7,week=Math.floor((dojo.date.locale._getDayOfYear(_4d5)+adj-1)/7);
if(_4d7==_4d6){
week++;
}
return week;
};
}
if(!dojo._hasResource["dijit._TimePicker"]){
dojo._hasResource["dijit._TimePicker"]=true;
dojo.provide("dijit._TimePicker");
dojo.declare("dijit._TimePicker",[dijit._Widget,dijit._Templated],{templateString:dojo.cache("dijit","templates/TimePicker.html","<div id=\"widget_${id}\" class=\"dijitMenu\"\r\n    ><div dojoAttachPoint=\"upArrow\" class=\"dijitButtonNode dijitUpArrowButton\" dojoAttachEvent=\"onmouseenter:_buttonMouse,onmouseleave:_buttonMouse\"\r\n\t\t><div class=\"dijitReset dijitInline dijitArrowButtonInner\" role=\"presentation\">&nbsp;</div\r\n\t\t><div class=\"dijitArrowButtonChar\">&#9650;</div></div\r\n    ><div dojoAttachPoint=\"timeMenu,focusNode\" dojoAttachEvent=\"onclick:_onOptionSelected,onmouseover,onmouseout\"></div\r\n    ><div dojoAttachPoint=\"downArrow\" class=\"dijitButtonNode dijitDownArrowButton\" dojoAttachEvent=\"onmouseenter:_buttonMouse,onmouseleave:_buttonMouse\"\r\n\t\t><div class=\"dijitReset dijitInline dijitArrowButtonInner\" role=\"presentation\">&nbsp;</div\r\n\t\t><div class=\"dijitArrowButtonChar\">&#9660;</div></div\r\n></div>\r\n"),baseClass:"dijitTimePicker",clickableIncrement:"T00:15:00",visibleIncrement:"T01:00:00",visibleRange:"T05:00:00",value:new Date(),_visibleIncrement:2,_clickableIncrement:1,_totalIncrements:10,constraints:{},serialize:dojo.date.stamp.toISOString,setValue:function(_4d8){
dojo.deprecated("dijit._TimePicker:setValue() is deprecated.  Use set('value', ...) instead.","","2.0");
this.set("value",_4d8);
},_setValueAttr:function(date){
this._set("value",date);
this._showText();
},_setFilterStringAttr:function(val){
this._set("filterString",val);
this._showText();
},isDisabledDate:function(_4d9,_4da){
return false;
},_getFilteredNodes:function(_4db,_4dc,_4dd,_4de){
var _4df=[],_4e0=_4de?_4de.date:this._refDate,n,i=_4db,max=this._maxIncrement+Math.abs(i),chk=_4dd?-1:1,dec=_4dd?1:0,inc=1-dec;
do{
i=i-dec;
n=this._createOption(i);
if(n){
if((_4dd&&n.date>_4e0)||(!_4dd&&n.date<_4e0)){
break;
}
_4df[_4dd?"unshift":"push"](n);
_4e0=n.date;
}
i=i+inc;
}while(_4df.length<_4dc&&(i*chk)<max);
return _4df;
},_showText:function(){
var _4e1=dojo.date.stamp.fromISOString;
this.timeMenu.innerHTML="";
this._clickableIncrementDate=_4e1(this.clickableIncrement);
this._visibleIncrementDate=_4e1(this.visibleIncrement);
this._visibleRangeDate=_4e1(this.visibleRange);
var _4e2=function(date){
return date.getHours()*60*60+date.getMinutes()*60+date.getSeconds();
},_4e3=_4e2(this._clickableIncrementDate),_4e4=_4e2(this._visibleIncrementDate),_4e5=_4e2(this._visibleRangeDate),time=(this.value||this.currentFocus).getTime();
this._refDate=new Date(time-time%(_4e4*1000));
this._refDate.setFullYear(1970,0,1);
this._clickableIncrement=1;
this._totalIncrements=_4e5/_4e3;
this._visibleIncrement=_4e4/_4e3;
this._maxIncrement=(60*60*24)/_4e3;
var _4e6=this._getFilteredNodes(0,Math.min(this._totalIncrements>>1,10)-1),_4e7=this._getFilteredNodes(0,Math.min(this._totalIncrements,10)-_4e6.length,true,_4e6[0]);
dojo.forEach(_4e7.concat(_4e6),function(n){
this.timeMenu.appendChild(n);
},this);
},constructor:function(){
this.constraints={};
},postMixInProperties:function(){
this.inherited(arguments);
this._setConstraintsAttr(this.constraints);
},_setConstraintsAttr:function(_4e8){
dojo.mixin(this,_4e8);
if(!_4e8.locale){
_4e8.locale=this.lang;
}
},postCreate:function(){
this.connect(this.timeMenu,dojo.isIE?"onmousewheel":"DOMMouseScroll","_mouseWheeled");
this._connects.push(dijit.typematic.addMouseListener(this.upArrow,this,"_onArrowUp",33,250));
this._connects.push(dijit.typematic.addMouseListener(this.downArrow,this,"_onArrowDown",33,250));
this.inherited(arguments);
},_buttonMouse:function(e){
dojo.toggleClass(e.currentTarget,e.currentTarget==this.upArrow?"dijitUpArrowHover":"dijitDownArrowHover",e.type=="mouseenter"||e.type=="mouseover");
},_createOption:function(_4e9){
var date=new Date(this._refDate);
var _4ea=this._clickableIncrementDate;
date.setHours(date.getHours()+_4ea.getHours()*_4e9,date.getMinutes()+_4ea.getMinutes()*_4e9,date.getSeconds()+_4ea.getSeconds()*_4e9);
if(this.constraints.selector=="time"){
date.setFullYear(1970,0,1);
}
var _4eb=dojo.date.locale.format(date,this.constraints);
if(this.filterString&&_4eb.toLowerCase().indexOf(this.filterString)!==0){
return null;
}
var div=dojo.create("div",{"class":this.baseClass+"Item"});
div.date=date;
div.index=_4e9;
dojo.create("div",{"class":this.baseClass+"ItemInner",innerHTML:_4eb},div);
if(_4e9%this._visibleIncrement<1&&_4e9%this._visibleIncrement>-1){
dojo.addClass(div,this.baseClass+"Marker");
}else{
if(!(_4e9%this._clickableIncrement)){
dojo.addClass(div,this.baseClass+"Tick");
}
}
if(this.isDisabledDate(date)){
dojo.addClass(div,this.baseClass+"ItemDisabled");
}
if(this.value&&!dojo.date.compare(this.value,date,this.constraints.selector)){
div.selected=true;
dojo.addClass(div,this.baseClass+"ItemSelected");
if(dojo.hasClass(div,this.baseClass+"Marker")){
dojo.addClass(div,this.baseClass+"MarkerSelected");
}else{
dojo.addClass(div,this.baseClass+"TickSelected");
}
this._highlightOption(div,true);
}
return div;
},_onOptionSelected:function(tgt){
var _4ec=tgt.target.date||tgt.target.parentNode.date;
if(!_4ec||this.isDisabledDate(_4ec)){
return;
}
this._highlighted_option=null;
this.set("value",_4ec);
this.onChange(_4ec);
},onChange:function(time){
},_highlightOption:function(node,_4ed){
if(!node){
return;
}
if(_4ed){
if(this._highlighted_option){
this._highlightOption(this._highlighted_option,false);
}
this._highlighted_option=node;
}else{
if(this._highlighted_option!==node){
return;
}else{
this._highlighted_option=null;
}
}
dojo.toggleClass(node,this.baseClass+"ItemHover",_4ed);
if(dojo.hasClass(node,this.baseClass+"Marker")){
dojo.toggleClass(node,this.baseClass+"MarkerHover",_4ed);
}else{
dojo.toggleClass(node,this.baseClass+"TickHover",_4ed);
}
},onmouseover:function(e){
this._keyboardSelected=null;
var tgr=(e.target.parentNode===this.timeMenu)?e.target:e.target.parentNode;
if(!dojo.hasClass(tgr,this.baseClass+"Item")){
return;
}
this._highlightOption(tgr,true);
},onmouseout:function(e){
this._keyboardSelected=null;
var tgr=(e.target.parentNode===this.timeMenu)?e.target:e.target.parentNode;
this._highlightOption(tgr,false);
},_mouseWheeled:function(e){
this._keyboardSelected=null;
dojo.stopEvent(e);
var _4ee=(dojo.isIE?e.wheelDelta:-e.detail);
this[(_4ee>0?"_onArrowUp":"_onArrowDown")]();
},_onArrowUp:function(_4ef){
if(typeof _4ef=="number"&&_4ef==-1){
return;
}
if(!this.timeMenu.childNodes.length){
return;
}
var _4f0=this.timeMenu.childNodes[0].index;
var divs=this._getFilteredNodes(_4f0,1,true,this.timeMenu.childNodes[0]);
if(divs.length){
this.timeMenu.removeChild(this.timeMenu.childNodes[this.timeMenu.childNodes.length-1]);
this.timeMenu.insertBefore(divs[0],this.timeMenu.childNodes[0]);
}
},_onArrowDown:function(_4f1){
if(typeof _4f1=="number"&&_4f1==-1){
return;
}
if(!this.timeMenu.childNodes.length){
return;
}
var _4f2=this.timeMenu.childNodes[this.timeMenu.childNodes.length-1].index+1;
var divs=this._getFilteredNodes(_4f2,1,false,this.timeMenu.childNodes[this.timeMenu.childNodes.length-1]);
if(divs.length){
this.timeMenu.removeChild(this.timeMenu.childNodes[0]);
this.timeMenu.appendChild(divs[0]);
}
},handleKey:function(e){
var dk=dojo.keys;
if(e.charOrCode==dk.DOWN_ARROW||e.charOrCode==dk.UP_ARROW){
dojo.stopEvent(e);
if(this._highlighted_option&&!this._highlighted_option.parentNode){
this._highlighted_option=null;
}
var _4f3=this.timeMenu,tgt=this._highlighted_option||dojo.query("."+this.baseClass+"ItemSelected",_4f3)[0];
if(!tgt){
tgt=_4f3.childNodes[0];
}else{
if(_4f3.childNodes.length){
if(e.charOrCode==dk.DOWN_ARROW&&!tgt.nextSibling){
this._onArrowDown();
}else{
if(e.charOrCode==dk.UP_ARROW&&!tgt.previousSibling){
this._onArrowUp();
}
}
if(e.charOrCode==dk.DOWN_ARROW){
tgt=tgt.nextSibling;
}else{
tgt=tgt.previousSibling;
}
}
}
this._highlightOption(tgt,true);
this._keyboardSelected=tgt;
return false;
}else{
if(e.charOrCode==dk.ENTER||e.charOrCode===dk.TAB){
if(!this._keyboardSelected&&e.charOrCode===dk.TAB){
return true;
}
if(this._highlighted_option){
this._onOptionSelected({target:this._highlighted_option});
}
return e.charOrCode===dk.TAB;
}
}
}});
}
if(!dojo._hasResource["dijit.form._DateTimeTextBox"]){
dojo._hasResource["dijit.form._DateTimeTextBox"]=true;
dojo.provide("dijit.form._DateTimeTextBox");
new Date("X");
dojo.declare("dijit.form._DateTimeTextBox",[dijit.form.RangeBoundTextBox,dijit._HasDropDown],{templateString:dojo.cache("dijit.form","templates/DropDownBox.html","<div class=\"dijit dijitReset dijitInlineTable dijitLeft\"\r\n\tid=\"widget_${id}\"\r\n\trole=\"combobox\"\r\n\t><div class='dijitReset dijitRight dijitButtonNode dijitArrowButton dijitDownArrowButton dijitArrowButtonContainer'\r\n\t\tdojoAttachPoint=\"_buttonNode, _popupStateNode\" role=\"presentation\"\r\n\t\t><input class=\"dijitReset dijitInputField dijitArrowButtonInner\" value=\"&#9660; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t\t\t${_buttonInputDisabled}\r\n\t/></div\r\n\t><div class='dijitReset dijitValidationContainer'\r\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935; \" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t/></div\r\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\r\n\t\t><input class='dijitReset dijitInputInner' ${!nameAttrSetting} type=\"text\" autocomplete=\"off\"\r\n\t\t\tdojoAttachPoint=\"textbox,focusNode\" role=\"textbox\" aria-haspopup=\"true\"\r\n\t/></div\r\n></div>\r\n"),hasDownArrow:true,openOnClick:true,regExpGen:dojo.date.locale.regexp,datePackage:"dojo.date",compare:function(val1,val2){
var _4f4=this._isInvalidDate(val1);
var _4f5=this._isInvalidDate(val2);
return _4f4?(_4f5?0:-1):(_4f5?1:dojo.date.compare(val1,val2,this._selector));
},forceWidth:true,format:function(_4f6,_4f7){
if(!_4f6){
return "";
}
return this.dateLocaleModule.format(_4f6,_4f7);
},"parse":function(_4f8,_4f9){
return this.dateLocaleModule.parse(_4f8,_4f9)||(this._isEmpty(_4f8)?null:undefined);
},serialize:function(val,_4fa){
if(val.toGregorian){
val=val.toGregorian();
}
return dojo.date.stamp.toISOString(val,_4fa);
},dropDownDefaultValue:new Date(),value:new Date(""),_blankValue:null,popupClass:"",_selector:"",constructor:function(args){
var _4fb=args.datePackage?args.datePackage+".Date":"Date";
this.dateClassObj=dojo.getObject(_4fb,false);
this.value=new this.dateClassObj("");
this.datePackage=args.datePackage||this.datePackage;
this.dateLocaleModule=dojo.getObject(this.datePackage+".locale",false);
this.regExpGen=this.dateLocaleModule.regexp;
this._invalidDate=dijit.form._DateTimeTextBox.prototype.value.toString();
},buildRendering:function(){
this.inherited(arguments);
if(!this.hasDownArrow){
this._buttonNode.style.display="none";
}
if(this.openOnClick||!this.hasDownArrow){
this._buttonNode=this.domNode;
this.baseClass+=" dijitComboBoxOpenOnClick";
}
},_setConstraintsAttr:function(_4fc){
_4fc.selector=this._selector;
_4fc.fullYear=true;
var _4fd=dojo.date.stamp.fromISOString;
if(typeof _4fc.min=="string"){
_4fc.min=_4fd(_4fc.min);
}
if(typeof _4fc.max=="string"){
_4fc.max=_4fd(_4fc.max);
}
this.inherited(arguments);
},_isInvalidDate:function(_4fe){
return !_4fe||isNaN(_4fe)||typeof _4fe!="object"||_4fe.toString()==this._invalidDate;
},_setValueAttr:function(_4ff,_500,_501){
if(_4ff!==undefined){
if(typeof _4ff=="string"){
_4ff=dojo.date.stamp.fromISOString(_4ff);
}
if(this._isInvalidDate(_4ff)){
_4ff=null;
}
if(_4ff instanceof Date&&!(this.dateClassObj instanceof Date)){
_4ff=new this.dateClassObj(_4ff);
}
}
this.inherited(arguments);
if(this.dropDown){
this.dropDown.set("value",_4ff,false);
}
},_set:function(attr,_502){
if(attr=="value"&&this.value instanceof Date&&this.compare(_502,this.value)==0){
return;
}
this.inherited(arguments);
},_setDropDownDefaultValueAttr:function(val){
if(this._isInvalidDate(val)){
val=new this.dateClassObj();
}
this.dropDownDefaultValue=val;
},openDropDown:function(_503){
if(this.dropDown){
this.dropDown.destroy();
}
var _504=dojo.getObject(this.popupClass,false),_505=this,_506=this.get("value");
this.dropDown=new _504({onChange:function(_507){
dijit.form._DateTimeTextBox.superclass._setValueAttr.call(_505,_507,true);
},id:this.id+"_popup",dir:_505.dir,lang:_505.lang,value:_506,currentFocus:!this._isInvalidDate(_506)?_506:this.dropDownDefaultValue,constraints:_505.constraints,filterString:_505.filterString,datePackage:_505.datePackage,isDisabledDate:function(date){
return !_505.rangeCheck(date,_505.constraints);
}});
this.inherited(arguments);
},_getDisplayedValueAttr:function(){
return this.textbox.value;
},_setDisplayedValueAttr:function(_508,_509){
this._setValueAttr(this.parse(_508,this.constraints),_509,_508);
}});
}
if(!dojo._hasResource["dijit.form.TimeTextBox"]){
dojo._hasResource["dijit.form.TimeTextBox"]=true;
dojo.provide("dijit.form.TimeTextBox");
dojo.declare("dijit.form.TimeTextBox",dijit.form._DateTimeTextBox,{baseClass:"dijitTextBox dijitComboBox dijitTimeTextBox",popupClass:"dijit._TimePicker",_selector:"time",value:new Date(""),_onKey:function(evt){
this.inherited(arguments);
switch(evt.keyCode){
case dojo.keys.ENTER:
case dojo.keys.TAB:
case dojo.keys.ESCAPE:
case dojo.keys.DOWN_ARROW:
case dojo.keys.UP_ARROW:
break;
default:
setTimeout(dojo.hitch(this,function(){
var val=this.get("displayedValue");
this.filterString=(val&&!this.parse(val,this.constraints))?val.toLowerCase():"";
if(this._opened){
this.closeDropDown();
}
this.openDropDown();
}),0);
}
}});
}
if(!dojo._hasResource["dijit.form.DropDownButton"]){
dojo._hasResource["dijit.form.DropDownButton"]=true;
dojo.provide("dijit.form.DropDownButton");
}
if(!dojo._hasResource["dijit.Calendar"]){
dojo._hasResource["dijit.Calendar"]=true;
dojo.provide("dijit.Calendar");
dojo.declare("dijit.Calendar",[dijit._Widget,dijit._Templated,dijit._CssStateMixin],{templateString:dojo.cache("dijit","templates/Calendar.html","<table cellspacing=\"0\" cellpadding=\"0\" class=\"dijitCalendarContainer\" role=\"grid\" dojoAttachEvent=\"onkeypress: _onKeyPress\" aria-labelledby=\"${id}_year\">\r\n\t<thead>\r\n\t\t<tr class=\"dijitReset dijitCalendarMonthContainer\" valign=\"top\">\r\n\t\t\t<th class='dijitReset dijitCalendarArrow' dojoAttachPoint=\"decrementMonth\">\r\n\t\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitCalendarIncrementControl dijitCalendarDecrease\" role=\"presentation\"/>\r\n\t\t\t\t<span dojoAttachPoint=\"decreaseArrowNode\" class=\"dijitA11ySideArrow\">-</span>\r\n\t\t\t</th>\r\n\t\t\t<th class='dijitReset' colspan=\"5\">\r\n\t\t\t\t<div dojoType=\"dijit.form.DropDownButton\" dojoAttachPoint=\"monthDropDownButton\"\r\n\t\t\t\t\tid=\"${id}_mddb\" tabIndex=\"-1\">\r\n\t\t\t\t</div>\r\n\t\t\t</th>\r\n\t\t\t<th class='dijitReset dijitCalendarArrow' dojoAttachPoint=\"incrementMonth\">\r\n\t\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitCalendarIncrementControl dijitCalendarIncrease\" role=\"presentation\"/>\r\n\t\t\t\t<span dojoAttachPoint=\"increaseArrowNode\" class=\"dijitA11ySideArrow\">+</span>\r\n\t\t\t</th>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<th class=\"dijitReset dijitCalendarDayLabelTemplate\" role=\"columnheader\"><span class=\"dijitCalendarDayLabel\"></span></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody dojoAttachEvent=\"onclick: _onDayClick, onmouseover: _onDayMouseOver, onmouseout: _onDayMouseOut, onmousedown: _onDayMouseDown, onmouseup: _onDayMouseUp\" class=\"dijitReset dijitCalendarBodyContainer\">\r\n\t\t<tr class=\"dijitReset dijitCalendarWeekTemplate\" role=\"row\">\r\n\t\t\t<td class=\"dijitReset dijitCalendarDateTemplate\" role=\"gridcell\"><span class=\"dijitCalendarDateLabel\"></span></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n\t<tfoot class=\"dijitReset dijitCalendarYearContainer\">\r\n\t\t<tr>\r\n\t\t\t<td class='dijitReset' valign=\"top\" colspan=\"7\">\r\n\t\t\t\t<h3 class=\"dijitCalendarYearLabel\">\r\n\t\t\t\t\t<span dojoAttachPoint=\"previousYearLabelNode\" class=\"dijitInline dijitCalendarPreviousYear\"></span>\r\n\t\t\t\t\t<span dojoAttachPoint=\"currentYearLabelNode\" class=\"dijitInline dijitCalendarSelectedYear\" id=\"${id}_year\"></span>\r\n\t\t\t\t\t<span dojoAttachPoint=\"nextYearLabelNode\" class=\"dijitInline dijitCalendarNextYear\"></span>\r\n\t\t\t\t</h3>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tfoot>\r\n</table>\r\n"),widgetsInTemplate:true,value:new Date(""),datePackage:"dojo.date",dayWidth:"narrow",tabIndex:"0",currentFocus:new Date(),baseClass:"dijitCalendar",cssStateNodes:{"decrementMonth":"dijitCalendarArrow","incrementMonth":"dijitCalendarArrow","previousYearLabelNode":"dijitCalendarPreviousYear","nextYearLabelNode":"dijitCalendarNextYear"},_isValidDate:function(_50a){
return _50a&&!isNaN(_50a)&&typeof _50a=="object"&&_50a.toString()!=this.constructor.prototype.value.toString();
},setValue:function(_50b){
dojo.deprecated("dijit.Calendar:setValue() is deprecated.  Use set('value', ...) instead.","","2.0");
this.set("value",_50b);
},_getValueAttr:function(){
var _50c=new this.dateClassObj(this.value);
_50c.setHours(0,0,0,0);
if(_50c.getDate()<this.value.getDate()){
_50c=this.dateFuncObj.add(_50c,"hour",1);
}
return _50c;
},_setValueAttr:function(_50d,_50e){
if(_50d){
_50d=new this.dateClassObj(_50d);
}
if(this._isValidDate(_50d)){
if(!this._isValidDate(this.value)||this.dateFuncObj.compare(_50d,this.value)){
_50d.setHours(1,0,0,0);
if(!this.isDisabledDate(_50d,this.lang)){
this._set("value",_50d);
this.set("currentFocus",_50d);
if(_50e||typeof _50e=="undefined"){
this.onChange(this.get("value"));
this.onValueSelected(this.get("value"));
}
}
}
}else{
this._set("value",null);
this.set("currentFocus",this.currentFocus);
}
},_setText:function(node,text){
while(node.firstChild){
node.removeChild(node.firstChild);
}
node.appendChild(dojo.doc.createTextNode(text));
},_populateGrid:function(){
var _50f=new this.dateClassObj(this.currentFocus);
_50f.setDate(1);
var _510=_50f.getDay(),_511=this.dateFuncObj.getDaysInMonth(_50f),_512=this.dateFuncObj.getDaysInMonth(this.dateFuncObj.add(_50f,"month",-1)),_513=new this.dateClassObj(),_514=dojo.cldr.supplemental.getFirstDayOfWeek(this.lang);
if(_514>_510){
_514-=7;
}
dojo.query(".dijitCalendarDateTemplate",this.domNode).forEach(function(_515,i){
i+=_514;
var date=new this.dateClassObj(_50f),_516,_517="dijitCalendar",adj=0;
if(i<_510){
_516=_512-_510+i+1;
adj=-1;
_517+="Previous";
}else{
if(i>=(_510+_511)){
_516=i-_510-_511+1;
adj=1;
_517+="Next";
}else{
_516=i-_510+1;
_517+="Current";
}
}
if(adj){
date=this.dateFuncObj.add(date,"month",adj);
}
date.setDate(_516);
if(!this.dateFuncObj.compare(date,_513,"date")){
_517="dijitCalendarCurrentDate "+_517;
}
if(this._isSelectedDate(date,this.lang)){
_517="dijitCalendarSelectedDate "+_517;
}
if(this.isDisabledDate(date,this.lang)){
_517="dijitCalendarDisabledDate "+_517;
}
var _518=this.getClassForDate(date,this.lang);
if(_518){
_517=_518+" "+_517;
}
_515.className=_517+"Month dijitCalendarDateTemplate";
_515.dijitDateValue=date.valueOf();
dojo.attr(_515,"dijitDateValue",date.valueOf());
var _519=dojo.query(".dijitCalendarDateLabel",_515)[0],text=date.getDateLocalized?date.getDateLocalized(this.lang):date.getDate();
this._setText(_519,text);
},this);
var _51a=this.dateLocaleModule.getNames("months","wide","standAlone",this.lang,_50f);
this.monthDropDownButton.dropDown.set("months",_51a);
this.monthDropDownButton.containerNode.innerHTML=(dojo.isIE==6?"":"<div class='dijitSpacer'>"+this.monthDropDownButton.dropDown.domNode.innerHTML+"</div>")+"<div class='dijitCalendarMonthLabel dijitCalendarCurrentMonthLabel'>"+_51a[_50f.getMonth()]+"</div>";
var y=_50f.getFullYear()-1;
var d=new this.dateClassObj();
dojo.forEach(["previous","current","next"],function(name){
d.setFullYear(y++);
this._setText(this[name+"YearLabelNode"],this.dateLocaleModule.format(d,{selector:"year",locale:this.lang}));
},this);
},goToToday:function(){
this.set("value",new this.dateClassObj());
},constructor:function(args){
var _51b=(args.datePackage&&(args.datePackage!="dojo.date"))?args.datePackage+".Date":"Date";
this.dateClassObj=dojo.getObject(_51b,false);
this.datePackage=args.datePackage||this.datePackage;
this.dateFuncObj=dojo.getObject(this.datePackage,false);
this.dateLocaleModule=dojo.getObject(this.datePackage+".locale",false);
},postMixInProperties:function(){
if(isNaN(this.value)){
delete this.value;
}
this.inherited(arguments);
},buildRendering:function(){
this.inherited(arguments);
dojo.setSelectable(this.domNode,false);
var _51c=dojo.hitch(this,function(_51d,n){
var _51e=dojo.query(_51d,this.domNode)[0];
for(var i=0;i<n;i++){
_51e.parentNode.appendChild(_51e.cloneNode(true));
}
});
_51c(".dijitCalendarDayLabelTemplate",6);
_51c(".dijitCalendarDateTemplate",6);
_51c(".dijitCalendarWeekTemplate",5);
var _51f=this.dateLocaleModule.getNames("days",this.dayWidth,"standAlone",this.lang);
var _520=dojo.cldr.supplemental.getFirstDayOfWeek(this.lang);
dojo.query(".dijitCalendarDayLabel",this.domNode).forEach(function(_521,i){
this._setText(_521,_51f[(i+_520)%7]);
},this);
var _522=new this.dateClassObj(this.currentFocus);
this.monthDropDownButton.dropDown=new dijit.Calendar._MonthDropDown({id:this.id+"_mdd",onChange:dojo.hitch(this,"_onMonthSelect")});
this.set("currentFocus",_522,false);
var _523=this;
var _524=function(_525,_526,adj){
_523._connects.push(dijit.typematic.addMouseListener(_523[_525],_523,function(_527){
if(_527>=0){
_523._adjustDisplay(_526,adj);
}
},0.8,500));
};
_524("incrementMonth","month",1);
_524("decrementMonth","month",-1);
_524("nextYearLabelNode","year",1);
_524("previousYearLabelNode","year",-1);
},_adjustDisplay:function(part,_528){
this._setCurrentFocusAttr(this.dateFuncObj.add(this.currentFocus,part,_528));
},_setCurrentFocusAttr:function(date,_529){
var _52a=this.currentFocus,_52b=_52a?dojo.query("[dijitDateValue="+_52a.valueOf()+"]",this.domNode)[0]:null;
date=new this.dateClassObj(date);
date.setHours(1,0,0,0);
this._set("currentFocus",date);
this._populateGrid();
var _52c=dojo.query("[dijitDateValue="+date.valueOf()+"]",this.domNode)[0];
_52c.setAttribute("tabIndex",this.tabIndex);
if(this._focused||_529){
_52c.focus();
}
if(_52b&&_52b!=_52c){
if(dojo.isWebKit){
_52b.setAttribute("tabIndex","-1");
}else{
_52b.removeAttribute("tabIndex");
}
}
},focus:function(){
this._setCurrentFocusAttr(this.currentFocus,true);
},_onMonthSelect:function(_52d){
this.currentFocus=this.dateFuncObj.add(this.currentFocus,"month",_52d-this.currentFocus.getMonth());
this._populateGrid();
},_onDayClick:function(evt){
dojo.stopEvent(evt);
for(var node=evt.target;node&&!node.dijitDateValue;node=node.parentNode){
}
if(node&&!dojo.hasClass(node,"dijitCalendarDisabledDate")){
this.set("value",node.dijitDateValue);
}
},_onDayMouseOver:function(evt){
var node=dojo.hasClass(evt.target,"dijitCalendarDateLabel")?evt.target.parentNode:evt.target;
if(node&&(node.dijitDateValue||node==this.previousYearLabelNode||node==this.nextYearLabelNode)){
dojo.addClass(node,"dijitCalendarHoveredDate");
this._currentNode=node;
}
},_onDayMouseOut:function(evt){
if(!this._currentNode){
return;
}
if(evt.relatedTarget&&evt.relatedTarget.parentNode==this._currentNode){
return;
}
var cls="dijitCalendarHoveredDate";
if(dojo.hasClass(this._currentNode,"dijitCalendarActiveDate")){
cls+=" dijitCalendarActiveDate";
}
dojo.removeClass(this._currentNode,cls);
this._currentNode=null;
},_onDayMouseDown:function(evt){
var node=evt.target.parentNode;
if(node&&node.dijitDateValue){
dojo.addClass(node,"dijitCalendarActiveDate");
this._currentNode=node;
}
},_onDayMouseUp:function(evt){
var node=evt.target.parentNode;
if(node&&node.dijitDateValue){
dojo.removeClass(node,"dijitCalendarActiveDate");
}
},handleKey:function(evt){
var dk=dojo.keys,_52e=-1,_52f,_530=this.currentFocus;
switch(evt.keyCode){
case dk.RIGHT_ARROW:
_52e=1;
case dk.LEFT_ARROW:
_52f="day";
if(!this.isLeftToRight()){
_52e*=-1;
}
break;
case dk.DOWN_ARROW:
_52e=1;
case dk.UP_ARROW:
_52f="week";
break;
case dk.PAGE_DOWN:
_52e=1;
case dk.PAGE_UP:
_52f=evt.ctrlKey||evt.altKey?"year":"month";
break;
case dk.END:
_530=this.dateFuncObj.add(_530,"month",1);
_52f="day";
case dk.HOME:
_530=new this.dateClassObj(_530);
_530.setDate(1);
break;
case dk.ENTER:
case dk.SPACE:
this.set("value",this.currentFocus);
break;
default:
return true;
}
if(_52f){
_530=this.dateFuncObj.add(_530,_52f,_52e);
}
this._setCurrentFocusAttr(_530);
return false;
},_onKeyPress:function(evt){
if(!this.handleKey(evt)){
dojo.stopEvent(evt);
}
},onValueSelected:function(date){
},onChange:function(date){
},_isSelectedDate:function(_531,_532){
return this._isValidDate(this.value)&&!this.dateFuncObj.compare(_531,this.value,"date");
},isDisabledDate:function(_533,_534){
},getClassForDate:function(_535,_536){
}});
dojo.declare("dijit.Calendar._MonthDropDown",[dijit._Widget,dijit._Templated],{months:[],templateString:"<div class='dijitCalendarMonthMenu dijitMenu' "+"dojoAttachEvent='onclick:_onClick,onmouseover:_onMenuHover,onmouseout:_onMenuHover'></div>",_setMonthsAttr:function(_537){
this.domNode.innerHTML=dojo.map(_537,function(_538,idx){
return _538?"<div class='dijitCalendarMonthLabel' month='"+idx+"'>"+_538+"</div>":"";
}).join("");
},_onClick:function(evt){
this.onChange(dojo.attr(evt.target,"month"));
},onChange:function(_539){
},_onMenuHover:function(evt){
dojo.toggleClass(evt.target,"dijitCalendarMonthLabelHover",evt.type=="mouseover");
}});
}
if(!dojo._hasResource["dijit.form.DateTextBox"]){
dojo._hasResource["dijit.form.DateTextBox"]=true;
dojo.provide("dijit.form.DateTextBox");
dojo.declare("dijit.form.DateTextBox",dijit.form._DateTimeTextBox,{baseClass:"dijitTextBox dijitComboBox dijitDateTextBox",popupClass:"dijit.Calendar",_selector:"date",value:new Date("")});
}
if(!dojo._hasResource["dojo.number"]){
dojo._hasResource["dojo.number"]=true;
dojo.provide("dojo.number");
dojo.getObject("number",true,dojo);
dojo.number.format=function(_53a,_53b){
_53b=dojo.mixin({},_53b||{});
var _53c=dojo.i18n.normalizeLocale(_53b.locale),_53d=dojo.i18n.getLocalization("dojo.cldr","number",_53c);
_53b.customs=_53d;
var _53e=_53b.pattern||_53d[(_53b.type||"decimal")+"Format"];
if(isNaN(_53a)||Math.abs(_53a)==Infinity){
return null;
}
return dojo.number._applyPattern(_53a,_53e,_53b);
};
dojo.number._numberPatternRE=/[#0,]*[#0](?:\.0*#*)?/;
dojo.number._applyPattern=function(_53f,_540,_541){
_541=_541||{};
var _542=_541.customs.group,_543=_541.customs.decimal,_544=_540.split(";"),_545=_544[0];
_540=_544[(_53f<0)?1:0]||("-"+_545);
if(_540.indexOf("%")!=-1){
_53f*=100;
}else{
if(_540.indexOf("‰")!=-1){
_53f*=1000;
}else{
if(_540.indexOf("¤")!=-1){
_542=_541.customs.currencyGroup||_542;
_543=_541.customs.currencyDecimal||_543;
_540=_540.replace(/\u00a4{1,3}/,function(_546){
var prop=["symbol","currency","displayName"][_546.length-1];
return _541[prop]||_541.currency||"";
});
}else{
if(_540.indexOf("E")!=-1){
throw new Error("exponential notation not supported");
}
}
}
}
var _547=dojo.number._numberPatternRE;
var _548=_545.match(_547);
if(!_548){
throw new Error("unable to find a number expression in pattern: "+_540);
}
if(_541.fractional===false){
_541.places=0;
}
return _540.replace(_547,dojo.number._formatAbsolute(_53f,_548[0],{decimal:_543,group:_542,places:_541.places,round:_541.round}));
};
dojo.number.round=function(_549,_54a,_54b){
var _54c=10/(_54b||10);
return (_54c*+_549).toFixed(_54a)/_54c;
};
if((0.9).toFixed()==0){
(function(){
var _54d=dojo.number.round;
dojo.number.round=function(v,p,m){
var d=Math.pow(10,-p||0),a=Math.abs(v);
if(!v||a>=d||a*Math.pow(10,p+1)<5){
d=0;
}
return _54d(v,p,m)+(v>0?d:-d);
};
})();
}
dojo.number._formatAbsolute=function(_54e,_54f,_550){
_550=_550||{};
if(_550.places===true){
_550.places=0;
}
if(_550.places===Infinity){
_550.places=6;
}
var _551=_54f.split("."),_552=typeof _550.places=="string"&&_550.places.indexOf(","),_553=_550.places;
if(_552){
_553=_550.places.substring(_552+1);
}else{
if(!(_553>=0)){
_553=(_551[1]||[]).length;
}
}
if(!(_550.round<0)){
_54e=dojo.number.round(_54e,_553,_550.round);
}
var _554=String(Math.abs(_54e)).split("."),_555=_554[1]||"";
if(_551[1]||_550.places){
if(_552){
_550.places=_550.places.substring(0,_552);
}
var pad=_550.places!==undefined?_550.places:(_551[1]&&_551[1].lastIndexOf("0")+1);
if(pad>_555.length){
_554[1]=dojo.string.pad(_555,pad,"0",true);
}
if(_553<_555.length){
_554[1]=_555.substr(0,_553);
}
}else{
if(_554[1]){
_554.pop();
}
}
var _556=_551[0].replace(",","");
pad=_556.indexOf("0");
if(pad!=-1){
pad=_556.length-pad;
if(pad>_554[0].length){
_554[0]=dojo.string.pad(_554[0],pad);
}
if(_556.indexOf("#")==-1){
_554[0]=_554[0].substr(_554[0].length-pad);
}
}
var _557=_551[0].lastIndexOf(","),_558,_559;
if(_557!=-1){
_558=_551[0].length-_557-1;
var _55a=_551[0].substr(0,_557);
_557=_55a.lastIndexOf(",");
if(_557!=-1){
_559=_55a.length-_557-1;
}
}
var _55b=[];
for(var _55c=_554[0];_55c;){
var off=_55c.length-_558;
_55b.push((off>0)?_55c.substr(off):_55c);
_55c=(off>0)?_55c.slice(0,off):"";
if(_559){
_558=_559;
delete _559;
}
}
_554[0]=_55b.reverse().join(_550.group||",");
return _554.join(_550.decimal||".");
};
dojo.number.regexp=function(_55d){
return dojo.number._parseInfo(_55d).regexp;
};
dojo.number._parseInfo=function(_55e){
_55e=_55e||{};
var _55f=dojo.i18n.normalizeLocale(_55e.locale),_560=dojo.i18n.getLocalization("dojo.cldr","number",_55f),_561=_55e.pattern||_560[(_55e.type||"decimal")+"Format"],_562=_560.group,_563=_560.decimal,_564=1;
if(_561.indexOf("%")!=-1){
_564/=100;
}else{
if(_561.indexOf("‰")!=-1){
_564/=1000;
}else{
var _565=_561.indexOf("¤")!=-1;
if(_565){
_562=_560.currencyGroup||_562;
_563=_560.currencyDecimal||_563;
}
}
}
var _566=_561.split(";");
if(_566.length==1){
_566.push("-"+_566[0]);
}
var re=dojo.regexp.buildGroupRE(_566,function(_567){
_567="(?:"+dojo.regexp.escapeString(_567,".")+")";
return _567.replace(dojo.number._numberPatternRE,function(_568){
var _569={signed:false,separator:_55e.strict?_562:[_562,""],fractional:_55e.fractional,decimal:_563,exponent:false},_56a=_568.split("."),_56b=_55e.places;
if(_56a.length==1&&_564!=1){
_56a[1]="###";
}
if(_56a.length==1||_56b===0){
_569.fractional=false;
}else{
if(_56b===undefined){
_56b=_55e.pattern?_56a[1].lastIndexOf("0")+1:Infinity;
}
if(_56b&&_55e.fractional==undefined){
_569.fractional=true;
}
if(!_55e.places&&(_56b<_56a[1].length)){
_56b+=","+_56a[1].length;
}
_569.places=_56b;
}
var _56c=_56a[0].split(",");
if(_56c.length>1){
_569.groupSize=_56c.pop().length;
if(_56c.length>1){
_569.groupSize2=_56c.pop().length;
}
}
return "("+dojo.number._realNumberRegexp(_569)+")";
});
},true);
if(_565){
re=re.replace(/([\s\xa0]*)(\u00a4{1,3})([\s\xa0]*)/g,function(_56d,_56e,_56f,_570){
var prop=["symbol","currency","displayName"][_56f.length-1],_571=dojo.regexp.escapeString(_55e[prop]||_55e.currency||"");
_56e=_56e?"[\\s\\xa0]":"";
_570=_570?"[\\s\\xa0]":"";
if(!_55e.strict){
if(_56e){
_56e+="*";
}
if(_570){
_570+="*";
}
return "(?:"+_56e+_571+_570+")?";
}
return _56e+_571+_570;
});
}
return {regexp:re.replace(/[\xa0 ]/g,"[\\s\\xa0]"),group:_562,decimal:_563,factor:_564};
};
dojo.number.parse=function(_572,_573){
var info=dojo.number._parseInfo(_573),_574=(new RegExp("^"+info.regexp+"$")).exec(_572);
if(!_574){
return NaN;
}
var _575=_574[1];
if(!_574[1]){
if(!_574[2]){
return NaN;
}
_575=_574[2];
info.factor*=-1;
}
_575=_575.replace(new RegExp("["+info.group+"\\s\\xa0"+"]","g"),"").replace(info.decimal,".");
return _575*info.factor;
};
dojo.number._realNumberRegexp=function(_576){
_576=_576||{};
if(!("places" in _576)){
_576.places=Infinity;
}
if(typeof _576.decimal!="string"){
_576.decimal=".";
}
if(!("fractional" in _576)||/^0/.test(_576.places)){
_576.fractional=[true,false];
}
if(!("exponent" in _576)){
_576.exponent=[true,false];
}
if(!("eSigned" in _576)){
_576.eSigned=[true,false];
}
var _577=dojo.number._integerRegexp(_576),_578=dojo.regexp.buildGroupRE(_576.fractional,function(q){
var re="";
if(q&&(_576.places!==0)){
re="\\"+_576.decimal;
if(_576.places==Infinity){
re="(?:"+re+"\\d+)?";
}else{
re+="\\d{"+_576.places+"}";
}
}
return re;
},true);
var _579=dojo.regexp.buildGroupRE(_576.exponent,function(q){
if(q){
return "([eE]"+dojo.number._integerRegexp({signed:_576.eSigned})+")";
}
return "";
});
var _57a=_577+_578;
if(_578){
_57a="(?:(?:"+_57a+")|(?:"+_578+"))";
}
return _57a+_579;
};
dojo.number._integerRegexp=function(_57b){
_57b=_57b||{};
if(!("signed" in _57b)){
_57b.signed=[true,false];
}
if(!("separator" in _57b)){
_57b.separator="";
}else{
if(!("groupSize" in _57b)){
_57b.groupSize=3;
}
}
var _57c=dojo.regexp.buildGroupRE(_57b.signed,function(q){
return q?"[-+]":"";
},true);
var _57d=dojo.regexp.buildGroupRE(_57b.separator,function(sep){
if(!sep){
return "(?:\\d+)";
}
sep=dojo.regexp.escapeString(sep);
if(sep==" "){
sep="\\s";
}else{
if(sep==" "){
sep="\\s\\xa0";
}
}
var grp=_57b.groupSize,grp2=_57b.groupSize2;
if(grp2){
var _57e="(?:0|[1-9]\\d{0,"+(grp2-1)+"}(?:["+sep+"]\\d{"+grp2+"})*["+sep+"]\\d{"+grp+"})";
return ((grp-grp2)>0)?"(?:"+_57e+"|(?:0|[1-9]\\d{0,"+(grp-1)+"}))":_57e;
}
return "(?:0|[1-9]\\d{0,"+(grp-1)+"}(?:["+sep+"]\\d{"+grp+"})*)";
},true);
return _57c+_57d;
};
}
if(!dojo._hasResource["dijit.ProgressBar"]){
dojo._hasResource["dijit.ProgressBar"]=true;
dojo.provide("dijit.ProgressBar");
dojo.declare("dijit.ProgressBar",[dijit._Widget,dijit._Templated],{progress:"0",value:"",maximum:100,places:0,indeterminate:false,label:"",name:"",templateString:dojo.cache("dijit","templates/ProgressBar.html","<div class=\"dijitProgressBar dijitProgressBarEmpty\" role=\"progressbar\"\r\n\t><div  dojoAttachPoint=\"internalProgress\" class=\"dijitProgressBarFull\"\r\n\t\t><div class=\"dijitProgressBarTile\" role=\"presentation\"></div\r\n\t\t><span style=\"visibility:hidden\">&nbsp;</span\r\n\t></div\r\n\t><div dojoAttachPoint=\"labelNode\" class=\"dijitProgressBarLabel\" id=\"${id}_label\"></div\r\n\t><img dojoAttachPoint=\"indeterminateHighContrastImage\" class=\"dijitProgressBarIndeterminateHighContrastImage\" alt=\"\"\r\n/></div>\r\n"),_indeterminateHighContrastImagePath:dojo.moduleUrl("dijit","themes/a11y/indeterminate_progress.gif"),postMixInProperties:function(){
this.inherited(arguments);
if(!("value" in this.params)){
this.value=this.indeterminate?Infinity:this.progress;
}
},buildRendering:function(){
this.inherited(arguments);
this.indeterminateHighContrastImage.setAttribute("src",this._indeterminateHighContrastImagePath.toString());
this.update();
},update:function(_57f){
dojo.mixin(this,_57f||{});
var tip=this.internalProgress,ap=this.domNode;
var _580=1;
if(this.indeterminate){
dijit.removeWaiState(ap,"valuenow");
dijit.removeWaiState(ap,"valuemin");
dijit.removeWaiState(ap,"valuemax");
}else{
if(String(this.progress).indexOf("%")!=-1){
_580=Math.min(parseFloat(this.progress)/100,1);
this.progress=_580*this.maximum;
}else{
this.progress=Math.min(this.progress,this.maximum);
_580=this.progress/this.maximum;
}
dijit.setWaiState(ap,"describedby",this.labelNode.id);
dijit.setWaiState(ap,"valuenow",this.progress);
dijit.setWaiState(ap,"valuemin",0);
dijit.setWaiState(ap,"valuemax",this.maximum);
}
this.labelNode.innerHTML=this.report(_580);
dojo.toggleClass(this.domNode,"dijitProgressBarIndeterminate",this.indeterminate);
tip.style.width=(_580*100)+"%";
this.onChange();
},_setValueAttr:function(v){
this._set("value",v);
if(v==Infinity){
this.update({indeterminate:true});
}else{
this.update({indeterminate:false,progress:v});
}
},_setLabelAttr:function(_581){
this._set("label",_581);
this.update();
},_setIndeterminateAttr:function(_582){
this.indeterminate=_582;
this.update();
},report:function(_583){
return this.label?this.label:(this.indeterminate?"&nbsp;":dojo.number.format(_583,{type:"percent",places:this.places,locale:this.lang}));
},onChange:function(){
}});
}
if(!dojo._hasResource["dojo.cookie"]){
dojo._hasResource["dojo.cookie"]=true;
dojo.provide("dojo.cookie");
dojo.cookie=function(name,_584,_585){
var c=document.cookie;
if(arguments.length==1){
var _586=c.match(new RegExp("(?:^|; )"+dojo.regexp.escapeString(name)+"=([^;]*)"));
return _586?decodeURIComponent(_586[1]):undefined;
}else{
_585=_585||{};
var exp=_585.expires;
if(typeof exp=="number"){
var d=new Date();
d.setTime(d.getTime()+exp*24*60*60*1000);
exp=_585.expires=d;
}
if(exp&&exp.toUTCString){
_585.expires=exp.toUTCString();
}
_584=encodeURIComponent(_584);
var _587=name+"="+_584,_588;
for(_588 in _585){
_587+="; "+_588;
var _589=_585[_588];
if(_589!==true){
_587+="="+_589;
}
}
document.cookie=_587;
}
};
dojo.cookie.isSupported=function(){
if(!("cookieEnabled" in navigator)){
this("__djCookieTest__","CookiesAllowed");
navigator.cookieEnabled=this("__djCookieTest__")=="CookiesAllowed";
if(navigator.cookieEnabled){
this("__djCookieTest__","",{expires:-1});
}
}
return navigator.cookieEnabled;
};
}
if(!dojo._hasResource["dijit.layout.BorderContainer"]){
dojo._hasResource["dijit.layout.BorderContainer"]=true;
dojo.provide("dijit.layout.BorderContainer");
dojo.declare("dijit.layout.BorderContainer",dijit.layout._LayoutWidget,{design:"headline",gutters:true,liveSplitters:true,persist:false,baseClass:"dijitBorderContainer",_splitterClass:"dijit.layout._Splitter",postMixInProperties:function(){
if(!this.gutters){
this.baseClass+="NoGutter";
}
this.inherited(arguments);
},startup:function(){
if(this._started){
return;
}
dojo.forEach(this.getChildren(),this._setupChild,this);
this.inherited(arguments);
},_setupChild:function(_58a){
var _58b=_58a.region;
if(_58b){
this.inherited(arguments);
dojo.addClass(_58a.domNode,this.baseClass+"Pane");
var ltr=this.isLeftToRight();
if(_58b=="leading"){
_58b=ltr?"left":"right";
}
if(_58b=="trailing"){
_58b=ltr?"right":"left";
}
if(_58b!="center"&&(_58a.splitter||this.gutters)&&!_58a._splitterWidget){
var _58c=dojo.getObject(_58a.splitter?this._splitterClass:"dijit.layout._Gutter");
var _58d=new _58c({id:_58a.id+"_splitter",container:this,child:_58a,region:_58b,live:this.liveSplitters});
_58d.isSplitter=true;
_58a._splitterWidget=_58d;
dojo.place(_58d.domNode,_58a.domNode,"after");
_58d.startup();
}
_58a.region=_58b;
}
},layout:function(){
this._layoutChildren();
},addChild:function(_58e,_58f){
this.inherited(arguments);
if(this._started){
this.layout();
}
},removeChild:function(_590){
var _591=_590.region;
var _592=_590._splitterWidget;
if(_592){
_592.destroy();
delete _590._splitterWidget;
}
this.inherited(arguments);
if(this._started){
this._layoutChildren();
}
dojo.removeClass(_590.domNode,this.baseClass+"Pane");
dojo.style(_590.domNode,{top:"auto",bottom:"auto",left:"auto",right:"auto",position:"static"});
dojo.style(_590.domNode,_591=="top"||_591=="bottom"?"width":"height","auto");
},getChildren:function(){
return dojo.filter(this.inherited(arguments),function(_593){
return !_593.isSplitter;
});
},getSplitter:function(_594){
return dojo.filter(this.getChildren(),function(_595){
return _595.region==_594;
})[0]._splitterWidget;
},resize:function(_596,_597){
if(!this.cs||!this.pe){
var node=this.domNode;
this.cs=dojo.getComputedStyle(node);
this.pe=dojo._getPadExtents(node,this.cs);
this.pe.r=dojo._toPixelValue(node,this.cs.paddingRight);
this.pe.b=dojo._toPixelValue(node,this.cs.paddingBottom);
dojo.style(node,"padding","0px");
}
this.inherited(arguments);
},_layoutChildren:function(_598,_599){
if(!this._borderBox||!this._borderBox.h){
return;
}
var _59a=dojo.map(this.getChildren(),function(_59b,idx){
return {pane:_59b,weight:[_59b.region=="center"?Infinity:0,_59b.layoutPriority,(this.design=="sidebar"?1:-1)*(/top|bottom/.test(_59b.region)?1:-1),idx]};
},this);
_59a.sort(function(a,b){
var aw=a.weight,bw=b.weight;
for(var i=0;i<aw.length;i++){
if(aw[i]!=bw[i]){
return aw[i]-bw[i];
}
}
return 0;
});
var _59c=[];
dojo.forEach(_59a,function(_59d){
var pane=_59d.pane;
_59c.push(pane);
if(pane._splitterWidget){
_59c.push(pane._splitterWidget);
}
});
var dim={l:this.pe.l,t:this.pe.t,w:this._borderBox.w-this.pe.w,h:this._borderBox.h-this.pe.h};
dijit.layout.layoutChildren(this.domNode,dim,_59c,_598,_599);
},destroyRecursive:function(){
dojo.forEach(this.getChildren(),function(_59e){
var _59f=_59e._splitterWidget;
if(_59f){
_59f.destroy();
}
delete _59e._splitterWidget;
});
this.inherited(arguments);
}});
dojo.extend(dijit._Widget,{region:"",layoutPriority:0,splitter:false,minSize:0,maxSize:Infinity});
dojo.declare("dijit.layout._Splitter",[dijit._Widget,dijit._Templated],{live:true,templateString:"<div class=\"dijitSplitter\" dojoAttachEvent=\"onkeypress:_onKeyPress,onmousedown:_startDrag,onmouseenter:_onMouse,onmouseleave:_onMouse\" tabIndex=\"0\" role=\"separator\"><div class=\"dijitSplitterThumb\"></div></div>",postMixInProperties:function(){
this.inherited(arguments);
this.horizontal=/top|bottom/.test(this.region);
this._factor=/top|left/.test(this.region)?1:-1;
this._cookieName=this.container.id+"_"+this.region;
},buildRendering:function(){
this.inherited(arguments);
dojo.addClass(this.domNode,"dijitSplitter"+(this.horizontal?"H":"V"));
if(this.container.persist){
var _5a0=dojo.cookie(this._cookieName);
if(_5a0){
this.child.domNode.style[this.horizontal?"height":"width"]=_5a0;
}
}
},_computeMaxSize:function(){
var dim=this.horizontal?"h":"w",_5a1=dojo.marginBox(this.child.domNode)[dim],_5a2=dojo.filter(this.container.getChildren(),function(_5a3){
return _5a3.region=="center";
})[0],_5a4=dojo.marginBox(_5a2.domNode)[dim];
return Math.min(this.child.maxSize,_5a1+_5a4);
},_startDrag:function(e){
if(!this.cover){
this.cover=dojo.doc.createElement("div");
dojo.addClass(this.cover,"dijitSplitterCover");
dojo.place(this.cover,this.child.domNode,"after");
}
dojo.addClass(this.cover,"dijitSplitterCoverActive");
if(this.fake){
dojo.destroy(this.fake);
}
if(!(this._resize=this.live)){
(this.fake=this.domNode.cloneNode(true)).removeAttribute("id");
dojo.addClass(this.domNode,"dijitSplitterShadow");
dojo.place(this.fake,this.domNode,"after");
}
dojo.addClass(this.domNode,"dijitSplitterActive dijitSplitter"+(this.horizontal?"H":"V")+"Active");
if(this.fake){
dojo.removeClass(this.fake,"dijitSplitterHover dijitSplitter"+(this.horizontal?"H":"V")+"Hover");
}
var _5a5=this._factor,_5a6=this.horizontal,axis=_5a6?"pageY":"pageX",_5a7=e[axis],_5a8=this.domNode.style,dim=_5a6?"h":"w",_5a9=dojo.marginBox(this.child.domNode)[dim],max=this._computeMaxSize(),min=this.child.minSize||20,_5aa=this.region,_5ab=_5aa=="top"||_5aa=="bottom"?"top":"left",_5ac=parseInt(_5a8[_5ab],10),_5ad=this._resize,_5ae=dojo.hitch(this.container,"_layoutChildren",this.child.id),de=dojo.doc;
this._handlers=(this._handlers||[]).concat([dojo.connect(de,"onmousemove",this._drag=function(e,_5af){
var _5b0=e[axis]-_5a7,_5b1=_5a5*_5b0+_5a9,_5b2=Math.max(Math.min(_5b1,max),min);
if(_5ad||_5af){
_5ae(_5b2);
}
_5a8[_5ab]=_5b0+_5ac+_5a5*(_5b2-_5b1)+"px";
}),dojo.connect(de,"ondragstart",dojo.stopEvent),dojo.connect(dojo.body(),"onselectstart",dojo.stopEvent),dojo.connect(de,"onmouseup",this,"_stopDrag")]);
dojo.stopEvent(e);
},_onMouse:function(e){
var o=(e.type=="mouseover"||e.type=="mouseenter");
dojo.toggleClass(this.domNode,"dijitSplitterHover",o);
dojo.toggleClass(this.domNode,"dijitSplitter"+(this.horizontal?"H":"V")+"Hover",o);
},_stopDrag:function(e){
try{
if(this.cover){
dojo.removeClass(this.cover,"dijitSplitterCoverActive");
}
if(this.fake){
dojo.destroy(this.fake);
}
dojo.removeClass(this.domNode,"dijitSplitterActive dijitSplitter"+(this.horizontal?"H":"V")+"Active dijitSplitterShadow");
this._drag(e);
this._drag(e,true);
}
finally{
this._cleanupHandlers();
delete this._drag;
}
if(this.container.persist){
dojo.cookie(this._cookieName,this.child.domNode.style[this.horizontal?"height":"width"],{expires:365});
}
},_cleanupHandlers:function(){
dojo.forEach(this._handlers,dojo.disconnect);
delete this._handlers;
},_onKeyPress:function(e){
this._resize=true;
var _5b3=this.horizontal;
var tick=1;
var dk=dojo.keys;
switch(e.charOrCode){
case _5b3?dk.UP_ARROW:dk.LEFT_ARROW:
tick*=-1;
case _5b3?dk.DOWN_ARROW:dk.RIGHT_ARROW:
break;
default:
return;
}
var _5b4=dojo._getMarginSize(this.child.domNode)[_5b3?"h":"w"]+this._factor*tick;
this.container._layoutChildren(this.child.id,Math.max(Math.min(_5b4,this._computeMaxSize()),this.child.minSize));
dojo.stopEvent(e);
},destroy:function(){
this._cleanupHandlers();
delete this.child;
delete this.container;
delete this.cover;
delete this.fake;
this.inherited(arguments);
}});
dojo.declare("dijit.layout._Gutter",[dijit._Widget,dijit._Templated],{templateString:"<div class=\"dijitGutter\" role=\"presentation\"></div>",postMixInProperties:function(){
this.inherited(arguments);
this.horizontal=/top|bottom/.test(this.region);
},buildRendering:function(){
this.inherited(arguments);
dojo.addClass(this.domNode,"dijitGutter"+(this.horizontal?"H":"V"));
}});
}
if(!dojo._hasResource["dijit.layout.StackController"]){
dojo._hasResource["dijit.layout.StackController"]=true;
dojo.provide("dijit.layout.StackController");
dojo.declare("dijit.layout.StackController",[dijit._Widget,dijit._Templated,dijit._Container],{templateString:"<span role='tablist' dojoAttachEvent='onkeypress' class='dijitStackController'></span>",containerId:"",buttonWidget:"dijit.layout._StackButton",constructor:function(){
this.pane2button={};
this.pane2connects={};
this.pane2watches={};
},buildRendering:function(){
this.inherited(arguments);
dijit.setWaiRole(this.domNode,"tablist");
},postCreate:function(){
this.inherited(arguments);
this.subscribe(this.containerId+"-startup","onStartup");
this.subscribe(this.containerId+"-addChild","onAddChild");
this.subscribe(this.containerId+"-removeChild","onRemoveChild");
this.subscribe(this.containerId+"-selectChild","onSelectChild");
this.subscribe(this.containerId+"-containerKeyPress","onContainerKeyPress");
},onStartup:function(info){
dojo.forEach(info.children,this.onAddChild,this);
if(info.selected){
this.onSelectChild(info.selected);
}
},destroy:function(){
for(var pane in this.pane2button){
this.onRemoveChild(dijit.byId(pane));
}
this.inherited(arguments);
},onAddChild:function(page,_5b5){
var cls=dojo.getObject(this.buttonWidget);
var _5b6=new cls({id:this.id+"_"+page.id,label:page.title,dir:page.dir,lang:page.lang,showLabel:page.showTitle,iconClass:page.iconClass,closeButton:page.closable,title:page.tooltip});
dijit.setWaiState(_5b6.focusNode,"selected","false");
var _5b7=["title","showTitle","iconClass","closable","tooltip"],_5b8=["label","showLabel","iconClass","closeButton","title"];
this.pane2watches[page.id]=dojo.map(_5b7,function(_5b9,idx){
return page.watch(_5b9,function(name,_5ba,_5bb){
_5b6.set(_5b8[idx],_5bb);
});
});
this.pane2connects[page.id]=[this.connect(_5b6,"onClick",dojo.hitch(this,"onButtonClick",page)),this.connect(_5b6,"onClickCloseButton",dojo.hitch(this,"onCloseButtonClick",page))];
this.addChild(_5b6,_5b5);
this.pane2button[page.id]=_5b6;
page.controlButton=_5b6;
if(!this._currentChild){
_5b6.focusNode.setAttribute("tabIndex","0");
dijit.setWaiState(_5b6.focusNode,"selected","true");
this._currentChild=page;
}
if(!this.isLeftToRight()&&dojo.isIE&&this._rectifyRtlTabList){
this._rectifyRtlTabList();
}
},onRemoveChild:function(page){
if(this._currentChild===page){
this._currentChild=null;
}
dojo.forEach(this.pane2connects[page.id],dojo.hitch(this,"disconnect"));
delete this.pane2connects[page.id];
dojo.forEach(this.pane2watches[page.id],function(w){
w.unwatch();
});
delete this.pane2watches[page.id];
var _5bc=this.pane2button[page.id];
if(_5bc){
this.removeChild(_5bc);
delete this.pane2button[page.id];
_5bc.destroy();
}
delete page.controlButton;
},onSelectChild:function(page){
if(!page){
return;
}
if(this._currentChild){
var _5bd=this.pane2button[this._currentChild.id];
_5bd.set("checked",false);
dijit.setWaiState(_5bd.focusNode,"selected","false");
_5bd.focusNode.setAttribute("tabIndex","-1");
}
var _5be=this.pane2button[page.id];
_5be.set("checked",true);
dijit.setWaiState(_5be.focusNode,"selected","true");
this._currentChild=page;
_5be.focusNode.setAttribute("tabIndex","0");
var _5bf=dijit.byId(this.containerId);
dijit.setWaiState(_5bf.containerNode,"labelledby",_5be.id);
},onButtonClick:function(page){
var _5c0=dijit.byId(this.containerId);
_5c0.selectChild(page);
},onCloseButtonClick:function(page){
var _5c1=dijit.byId(this.containerId);
_5c1.closeChild(page);
if(this._currentChild){
var b=this.pane2button[this._currentChild.id];
if(b){
dijit.focus(b.focusNode||b.domNode);
}
}
},adjacent:function(_5c2){
if(!this.isLeftToRight()&&(!this.tabPosition||/top|bottom/.test(this.tabPosition))){
_5c2=!_5c2;
}
var _5c3=this.getChildren();
var _5c4=dojo.indexOf(_5c3,this.pane2button[this._currentChild.id]);
var _5c5=_5c2?1:_5c3.length-1;
return _5c3[(_5c4+_5c5)%_5c3.length];
},onkeypress:function(e){
if(this.disabled||e.altKey){
return;
}
var _5c6=null;
if(e.ctrlKey||!e._djpage){
var k=dojo.keys;
switch(e.charOrCode){
case k.LEFT_ARROW:
case k.UP_ARROW:
if(!e._djpage){
_5c6=false;
}
break;
case k.PAGE_UP:
if(e.ctrlKey){
_5c6=false;
}
break;
case k.RIGHT_ARROW:
case k.DOWN_ARROW:
if(!e._djpage){
_5c6=true;
}
break;
case k.PAGE_DOWN:
if(e.ctrlKey){
_5c6=true;
}
break;
case k.HOME:
case k.END:
var _5c7=this.getChildren();
if(_5c7&&_5c7.length){
_5c7[e.charOrCode==k.HOME?0:_5c7.length-1].onClick();
}
dojo.stopEvent(e);
break;
case k.DELETE:
if(this._currentChild.closable){
this.onCloseButtonClick(this._currentChild);
}
dojo.stopEvent(e);
break;
default:
if(e.ctrlKey){
if(e.charOrCode===k.TAB){
this.adjacent(!e.shiftKey).onClick();
dojo.stopEvent(e);
}else{
if(e.charOrCode=="w"){
if(this._currentChild.closable){
this.onCloseButtonClick(this._currentChild);
}
dojo.stopEvent(e);
}
}
}
}
if(_5c6!==null){
this.adjacent(_5c6).onClick();
dojo.stopEvent(e);
}
}
},onContainerKeyPress:function(info){
info.e._djpage=info.page;
this.onkeypress(info.e);
}});
dojo.declare("dijit.layout._StackButton",dijit.form.ToggleButton,{tabIndex:"-1",buildRendering:function(evt){
this.inherited(arguments);
dijit.setWaiRole((this.focusNode||this.domNode),"tab");
},onClick:function(evt){
dijit.focus(this.focusNode);
},onClickCloseButton:function(evt){
evt.stopPropagation();
}});
}
if(!dojo._hasResource["dijit.layout.StackContainer"]){
dojo._hasResource["dijit.layout.StackContainer"]=true;
dojo.provide("dijit.layout.StackContainer");
dojo.declare("dijit.layout.StackContainer",dijit.layout._LayoutWidget,{doLayout:true,persist:false,baseClass:"dijitStackContainer",buildRendering:function(){
this.inherited(arguments);
dojo.addClass(this.domNode,"dijitLayoutContainer");
dijit.setWaiRole(this.containerNode,"tabpanel");
},postCreate:function(){
this.inherited(arguments);
this.connect(this.domNode,"onkeypress",this._onKeyPress);
},startup:function(){
if(this._started){
return;
}
var _5c8=this.getChildren();
dojo.forEach(_5c8,this._setupChild,this);
if(this.persist){
this.selectedChildWidget=dijit.byId(dojo.cookie(this.id+"_selectedChild"));
}else{
dojo.some(_5c8,function(_5c9){
if(_5c9.selected){
this.selectedChildWidget=_5c9;
}
return _5c9.selected;
},this);
}
var _5ca=this.selectedChildWidget;
if(!_5ca&&_5c8[0]){
_5ca=this.selectedChildWidget=_5c8[0];
_5ca.selected=true;
}
dojo.publish(this.id+"-startup",[{children:_5c8,selected:_5ca}]);
this.inherited(arguments);
},resize:function(){
var _5cb=this.selectedChildWidget;
if(_5cb&&!this._hasBeenShown){
this._hasBeenShown=true;
this._showChild(_5cb);
}
this.inherited(arguments);
},_setupChild:function(_5cc){
this.inherited(arguments);
dojo.replaceClass(_5cc.domNode,"dijitHidden","dijitVisible");
_5cc.domNode.title="";
},addChild:function(_5cd,_5ce){
this.inherited(arguments);
if(this._started){
dojo.publish(this.id+"-addChild",[_5cd,_5ce]);
this.layout();
if(!this.selectedChildWidget){
this.selectChild(_5cd);
}
}
},removeChild:function(page){
this.inherited(arguments);
if(this._started){
dojo.publish(this.id+"-removeChild",[page]);
}
if(this._beingDestroyed){
return;
}
if(this.selectedChildWidget===page){
this.selectedChildWidget=undefined;
if(this._started){
var _5cf=this.getChildren();
if(_5cf.length){
this.selectChild(_5cf[0]);
}
}
}
if(this._started){
this.layout();
}
},selectChild:function(page,_5d0){
page=dijit.byId(page);
if(this.selectedChildWidget!=page){
var d=this._transition(page,this.selectedChildWidget,_5d0);
this._set("selectedChildWidget",page);
dojo.publish(this.id+"-selectChild",[page]);
if(this.persist){
dojo.cookie(this.id+"_selectedChild",this.selectedChildWidget.id);
}
}
return d;
},_transition:function(_5d1,_5d2,_5d3){
if(_5d2){
this._hideChild(_5d2);
}
var d=this._showChild(_5d1);
if(_5d1.resize){
if(this.doLayout){
_5d1.resize(this._containerContentBox||this._contentBox);
}else{
_5d1.resize();
}
}
return d;
},_adjacent:function(_5d4){
var _5d5=this.getChildren();
var _5d6=dojo.indexOf(_5d5,this.selectedChildWidget);
_5d6+=_5d4?1:_5d5.length-1;
return _5d5[_5d6%_5d5.length];
},forward:function(){
return this.selectChild(this._adjacent(true),true);
},back:function(){
return this.selectChild(this._adjacent(false),true);
},_onKeyPress:function(e){
dojo.publish(this.id+"-containerKeyPress",[{e:e,page:this}]);
},layout:function(){
if(this.doLayout&&this.selectedChildWidget&&this.selectedChildWidget.resize){
this.selectedChildWidget.resize(this._containerContentBox||this._contentBox);
}
},_showChild:function(page){
var _5d7=this.getChildren();
page.isFirstChild=(page==_5d7[0]);
page.isLastChild=(page==_5d7[_5d7.length-1]);
page._set("selected",true);
dojo.replaceClass(page.domNode,"dijitVisible","dijitHidden");
return page._onShow()||true;
},_hideChild:function(page){
page._set("selected",false);
dojo.replaceClass(page.domNode,"dijitHidden","dijitVisible");
page.onHide();
},closeChild:function(page){
var _5d8=page.onClose(this,page);
if(_5d8){
this.removeChild(page);
page.destroyRecursive();
}
},destroyDescendants:function(_5d9){
dojo.forEach(this.getChildren(),function(_5da){
this.removeChild(_5da);
_5da.destroyRecursive(_5d9);
},this);
}});
dojo.extend(dijit._Widget,{selected:false,closable:false,iconClass:"",showTitle:true});
}
if(!dojo._hasResource["dijit.layout.AccordionPane"]){
dojo._hasResource["dijit.layout.AccordionPane"]=true;
dojo.provide("dijit.layout.AccordionPane");
dojo.declare("dijit.layout.AccordionPane",dijit.layout.ContentPane,{constructor:function(){
dojo.deprecated("dijit.layout.AccordionPane deprecated, use ContentPane instead","","2.0");
},onSelected:function(){
}});
}
if(!dojo._hasResource["dijit.layout.AccordionContainer"]){
dojo._hasResource["dijit.layout.AccordionContainer"]=true;
dojo.provide("dijit.layout.AccordionContainer");
dojo.declare("dijit.layout.AccordionContainer",dijit.layout.StackContainer,{duration:dijit.defaultDuration,buttonWidget:"dijit.layout._AccordionButton",baseClass:"dijitAccordionContainer",buildRendering:function(){
this.inherited(arguments);
this.domNode.style.overflow="hidden";
dijit.setWaiRole(this.domNode,"tablist");
},startup:function(){
if(this._started){
return;
}
this.inherited(arguments);
if(this.selectedChildWidget){
var _5db=this.selectedChildWidget.containerNode.style;
_5db.display="";
_5db.overflow="auto";
this.selectedChildWidget._wrapperWidget.set("selected",true);
}
},layout:function(){
var _5dc=this.selectedChildWidget;
if(!_5dc){
return;
}
var _5dd=_5dc._wrapperWidget.domNode,_5de=dojo._getMarginExtents(_5dd),_5df=dojo._getPadBorderExtents(_5dd),_5e0=_5dc._wrapperWidget.containerNode,_5e1=dojo._getMarginExtents(_5e0),_5e2=dojo._getPadBorderExtents(_5e0),_5e3=this._contentBox;
var _5e4=0;
dojo.forEach(this.getChildren(),function(_5e5){
if(_5e5!=_5dc){
_5e4+=dojo._getMarginSize(_5e5._wrapperWidget.domNode).h;
}
});
this._verticalSpace=_5e3.h-_5e4-_5de.h-_5df.h-_5e1.h-_5e2.h-_5dc._buttonWidget.getTitleHeight();
this._containerContentBox={h:this._verticalSpace,w:this._contentBox.w-_5de.w-_5df.w-_5e1.w-_5e2.w};
if(_5dc){
_5dc.resize(this._containerContentBox);
}
},_setupChild:function(_5e6){
_5e6._wrapperWidget=new dijit.layout._AccordionInnerContainer({contentWidget:_5e6,buttonWidget:this.buttonWidget,id:_5e6.id+"_wrapper",dir:_5e6.dir,lang:_5e6.lang,parent:this});
this.inherited(arguments);
},addChild:function(_5e7,_5e8){
if(this._started){
dojo.place(_5e7.domNode,this.containerNode,_5e8);
if(!_5e7._started){
_5e7.startup();
}
this._setupChild(_5e7);
dojo.publish(this.id+"-addChild",[_5e7,_5e8]);
this.layout();
if(!this.selectedChildWidget){
this.selectChild(_5e7);
}
}else{
this.inherited(arguments);
}
},removeChild:function(_5e9){
if(_5e9._wrapperWidget){
dojo.place(_5e9.domNode,_5e9._wrapperWidget.domNode,"after");
_5e9._wrapperWidget.destroy();
delete _5e9._wrapperWidget;
}
dojo.removeClass(_5e9.domNode,"dijitHidden");
this.inherited(arguments);
},getChildren:function(){
return dojo.map(this.inherited(arguments),function(_5ea){
return _5ea.declaredClass=="dijit.layout._AccordionInnerContainer"?_5ea.contentWidget:_5ea;
},this);
},destroy:function(){
if(this._animation){
this._animation.stop();
}
dojo.forEach(this.getChildren(),function(_5eb){
if(_5eb._wrapperWidget){
_5eb._wrapperWidget.destroy();
}else{
_5eb.destroyRecursive();
}
});
this.inherited(arguments);
},_showChild:function(_5ec){
_5ec._wrapperWidget.containerNode.style.display="block";
return this.inherited(arguments);
},_hideChild:function(_5ed){
_5ed._wrapperWidget.containerNode.style.display="none";
this.inherited(arguments);
},_transition:function(_5ee,_5ef,_5f0){
if(dojo.isIE<8){
_5f0=false;
}
if(this._animation){
this._animation.stop(true);
delete this._animation;
}
var self=this;
if(_5ee){
_5ee._wrapperWidget.set("selected",true);
var d=this._showChild(_5ee);
if(this.doLayout&&_5ee.resize){
_5ee.resize(this._containerContentBox);
}
}
if(_5ef){
_5ef._wrapperWidget.set("selected",false);
if(!_5f0){
this._hideChild(_5ef);
}
}
if(_5f0){
var _5f1=_5ee._wrapperWidget.containerNode,_5f2=_5ef._wrapperWidget.containerNode;
var _5f3=_5ee._wrapperWidget.containerNode,_5f4=dojo._getMarginExtents(_5f3),_5f5=dojo._getPadBorderExtents(_5f3),_5f6=_5f4.h+_5f5.h;
_5f2.style.height=(self._verticalSpace-_5f6)+"px";
this._animation=new dojo.Animation({node:_5f1,duration:this.duration,curve:[1,this._verticalSpace-_5f6-1],onAnimate:function(_5f7){
_5f7=Math.floor(_5f7);
_5f1.style.height=_5f7+"px";
_5f2.style.height=(self._verticalSpace-_5f6-_5f7)+"px";
},onEnd:function(){
delete self._animation;
_5f1.style.height="auto";
_5ef._wrapperWidget.containerNode.style.display="none";
_5f2.style.height="auto";
self._hideChild(_5ef);
}});
this._animation.onStop=this._animation.onEnd;
this._animation.play();
}
return d;
},_onKeyPress:function(e,_5f8){
if(this.disabled||e.altKey||!(_5f8||e.ctrlKey)){
return;
}
var k=dojo.keys,c=e.charOrCode;
if((_5f8&&(c==k.LEFT_ARROW||c==k.UP_ARROW))||(e.ctrlKey&&c==k.PAGE_UP)){
this._adjacent(false)._buttonWidget._onTitleClick();
dojo.stopEvent(e);
}else{
if((_5f8&&(c==k.RIGHT_ARROW||c==k.DOWN_ARROW))||(e.ctrlKey&&(c==k.PAGE_DOWN||c==k.TAB))){
this._adjacent(true)._buttonWidget._onTitleClick();
dojo.stopEvent(e);
}
}
}});
dojo.declare("dijit.layout._AccordionInnerContainer",[dijit._Widget,dijit._CssStateMixin],{baseClass:"dijitAccordionInnerContainer",isContainer:true,isLayoutContainer:true,buildRendering:function(){
this.domNode=dojo.place("<div class='"+this.baseClass+"'>",this.contentWidget.domNode,"after");
var _5f9=this.contentWidget,cls=dojo.getObject(this.buttonWidget);
this.button=_5f9._buttonWidget=(new cls({contentWidget:_5f9,label:_5f9.title,title:_5f9.tooltip,dir:_5f9.dir,lang:_5f9.lang,iconClass:_5f9.iconClass,id:_5f9.id+"_button",parent:this.parent})).placeAt(this.domNode);
this.containerNode=dojo.place("<div class='dijitAccordionChildWrapper' style='display:none'>",this.domNode);
dojo.place(this.contentWidget.domNode,this.containerNode);
},postCreate:function(){
this.inherited(arguments);
var _5fa=this.button;
this._contentWidgetWatches=[this.contentWidget.watch("title",dojo.hitch(this,function(name,_5fb,_5fc){
_5fa.set("label",_5fc);
})),this.contentWidget.watch("tooltip",dojo.hitch(this,function(name,_5fd,_5fe){
_5fa.set("title",_5fe);
})),this.contentWidget.watch("iconClass",dojo.hitch(this,function(name,_5ff,_600){
_5fa.set("iconClass",_600);
}))];
},_setSelectedAttr:function(_601){
this._set("selected",_601);
this.button.set("selected",_601);
if(_601){
var cw=this.contentWidget;
if(cw.onSelected){
cw.onSelected();
}
}
},startup:function(){
this.contentWidget.startup();
},destroy:function(){
this.button.destroyRecursive();
dojo.forEach(this._contentWidgetWatches||[],function(w){
w.unwatch();
});
delete this.contentWidget._buttonWidget;
delete this.contentWidget._wrapperWidget;
this.inherited(arguments);
},destroyDescendants:function(){
this.contentWidget.destroyRecursive();
}});
dojo.declare("dijit.layout._AccordionButton",[dijit._Widget,dijit._Templated,dijit._CssStateMixin],{templateString:dojo.cache("dijit.layout","templates/AccordionButton.html","<div dojoAttachEvent='onclick:_onTitleClick' class='dijitAccordionTitle'>\r\n\t<div dojoAttachPoint='titleNode,focusNode' dojoAttachEvent='onkeypress:_onTitleKeyPress'\r\n\t\t\tclass='dijitAccordionTitleFocus' role=\"tab\" aria-expanded=\"false\"\r\n\t\t><span class='dijitInline dijitAccordionArrow' role=\"presentation\"></span\r\n\t\t><span class='arrowTextUp' role=\"presentation\">+</span\r\n\t\t><span class='arrowTextDown' role=\"presentation\">-</span\r\n\t\t><img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon\" dojoAttachPoint='iconNode' style=\"vertical-align: middle\" role=\"presentation\"/>\r\n\t\t<span role=\"presentation\" dojoAttachPoint='titleTextNode' class='dijitAccordionText'></span>\r\n\t</div>\r\n</div>\r\n"),attributeMap:dojo.mixin(dojo.clone(dijit.layout.ContentPane.prototype.attributeMap),{label:{node:"titleTextNode",type:"innerHTML"},title:{node:"titleTextNode",type:"attribute",attribute:"title"},iconClass:{node:"iconNode",type:"class"}}),baseClass:"dijitAccordionTitle",getParent:function(){
return this.parent;
},buildRendering:function(){
this.inherited(arguments);
var _602=this.id.replace(" ","_");
dojo.attr(this.titleTextNode,"id",_602+"_title");
dijit.setWaiState(this.focusNode,"labelledby",dojo.attr(this.titleTextNode,"id"));
dojo.setSelectable(this.domNode,false);
},getTitleHeight:function(){
return dojo._getMarginSize(this.domNode).h;
},_onTitleClick:function(){
var _603=this.getParent();
_603.selectChild(this.contentWidget,true);
dijit.focus(this.focusNode);
},_onTitleKeyPress:function(evt){
return this.getParent()._onKeyPress(evt,this.contentWidget);
},_setSelectedAttr:function(_604){
this._set("selected",_604);
dijit.setWaiState(this.focusNode,"expanded",_604);
dijit.setWaiState(this.focusNode,"selected",_604);
this.focusNode.setAttribute("tabIndex",_604?"0":"-1");
}});
}
if(!dojo._hasResource["dijit.layout._TabContainerBase"]){
dojo._hasResource["dijit.layout._TabContainerBase"]=true;
dojo.provide("dijit.layout._TabContainerBase");
dojo.declare("dijit.layout._TabContainerBase",[dijit.layout.StackContainer,dijit._Templated],{tabPosition:"top",baseClass:"dijitTabContainer",tabStrip:false,nested:false,templateString:dojo.cache("dijit.layout","templates/TabContainer.html","<div class=\"dijitTabContainer\">\r\n\t<div class=\"dijitTabListWrapper\" dojoAttachPoint=\"tablistNode\"></div>\r\n\t<div dojoAttachPoint=\"tablistSpacer\" class=\"dijitTabSpacer ${baseClass}-spacer\"></div>\r\n\t<div class=\"dijitTabPaneWrapper ${baseClass}-container\" dojoAttachPoint=\"containerNode\"></div>\r\n</div>\r\n"),postMixInProperties:function(){
this.baseClass+=this.tabPosition.charAt(0).toUpperCase()+this.tabPosition.substr(1).replace(/-.*/,"");
this.srcNodeRef&&dojo.style(this.srcNodeRef,"visibility","hidden");
this.inherited(arguments);
},buildRendering:function(){
this.inherited(arguments);
this.tablist=this._makeController(this.tablistNode);
if(!this.doLayout){
dojo.addClass(this.domNode,"dijitTabContainerNoLayout");
}
if(this.nested){
dojo.addClass(this.domNode,"dijitTabContainerNested");
dojo.addClass(this.tablist.containerNode,"dijitTabContainerTabListNested");
dojo.addClass(this.tablistSpacer,"dijitTabContainerSpacerNested");
dojo.addClass(this.containerNode,"dijitTabPaneWrapperNested");
}else{
dojo.addClass(this.domNode,"tabStrip-"+(this.tabStrip?"enabled":"disabled"));
}
},_setupChild:function(tab){
dojo.addClass(tab.domNode,"dijitTabPane");
this.inherited(arguments);
},startup:function(){
if(this._started){
return;
}
this.tablist.startup();
this.inherited(arguments);
},layout:function(){
if(!this._contentBox||typeof (this._contentBox.l)=="undefined"){
return;
}
var sc=this.selectedChildWidget;
if(this.doLayout){
var _605=this.tabPosition.replace(/-h/,"");
this.tablist.layoutAlign=_605;
var _606=[this.tablist,{domNode:this.tablistSpacer,layoutAlign:_605},{domNode:this.containerNode,layoutAlign:"client"}];
dijit.layout.layoutChildren(this.domNode,this._contentBox,_606);
this._containerContentBox=dijit.layout.marginBox2contentBox(this.containerNode,_606[2]);
if(sc&&sc.resize){
sc.resize(this._containerContentBox);
}
}else{
if(this.tablist.resize){
var s=this.tablist.domNode.style;
s.width="0";
var _607=dojo.contentBox(this.domNode).w;
s.width="";
this.tablist.resize({w:_607});
}
if(sc&&sc.resize){
sc.resize();
}
}
},destroy:function(){
if(this.tablist){
this.tablist.destroy();
}
this.inherited(arguments);
}});
}
if(!dojo._hasResource["dijit._KeyNavContainer"]){
dojo._hasResource["dijit._KeyNavContainer"]=true;
dojo.provide("dijit._KeyNavContainer");
dojo.declare("dijit._KeyNavContainer",dijit._Container,{tabIndex:"0",_keyNavCodes:{},connectKeyNavHandlers:function(_608,_609){
var _60a=(this._keyNavCodes={});
var prev=dojo.hitch(this,this.focusPrev);
var next=dojo.hitch(this,this.focusNext);
dojo.forEach(_608,function(code){
_60a[code]=prev;
});
dojo.forEach(_609,function(code){
_60a[code]=next;
});
_60a[dojo.keys.HOME]=dojo.hitch(this,"focusFirstChild");
_60a[dojo.keys.END]=dojo.hitch(this,"focusLastChild");
this.connect(this.domNode,"onkeypress","_onContainerKeypress");
this.connect(this.domNode,"onfocus","_onContainerFocus");
},startupKeyNavChildren:function(){
dojo.forEach(this.getChildren(),dojo.hitch(this,"_startupChild"));
},addChild:function(_60b,_60c){
dijit._KeyNavContainer.superclass.addChild.apply(this,arguments);
this._startupChild(_60b);
},focus:function(){
this.focusFirstChild();
},focusFirstChild:function(){
var _60d=this._getFirstFocusableChild();
if(_60d){
this.focusChild(_60d);
}
},focusLastChild:function(){
var _60e=this._getLastFocusableChild();
if(_60e){
this.focusChild(_60e);
}
},focusNext:function(){
var _60f=this._getNextFocusableChild(this.focusedChild,1);
this.focusChild(_60f);
},focusPrev:function(){
var _610=this._getNextFocusableChild(this.focusedChild,-1);
this.focusChild(_610,true);
},focusChild:function(_611,last){
if(this.focusedChild&&_611!==this.focusedChild){
this._onChildBlur(this.focusedChild);
}
_611.set("tabIndex",this.tabIndex);
_611.focus(last?"end":"start");
this._set("focusedChild",_611);
},_startupChild:function(_612){
_612.set("tabIndex","-1");
this.connect(_612,"_onFocus",function(){
_612.set("tabIndex",this.tabIndex);
});
this.connect(_612,"_onBlur",function(){
_612.set("tabIndex","-1");
});
},_onContainerFocus:function(evt){
if(evt.target!==this.domNode){
return;
}
this.focusFirstChild();
dojo.attr(this.domNode,"tabIndex","-1");
},_onBlur:function(evt){
if(this.tabIndex){
dojo.attr(this.domNode,"tabIndex",this.tabIndex);
}
this.inherited(arguments);
},_onContainerKeypress:function(evt){
if(evt.ctrlKey||evt.altKey){
return;
}
var func=this._keyNavCodes[evt.charOrCode];
if(func){
func();
dojo.stopEvent(evt);
}
},_onChildBlur:function(_613){
},_getFirstFocusableChild:function(){
return this._getNextFocusableChild(null,1);
},_getLastFocusableChild:function(){
return this._getNextFocusableChild(null,-1);
},_getNextFocusableChild:function(_614,dir){
if(_614){
_614=this._getSiblingOfChild(_614,dir);
}
var _615=this.getChildren();
for(var i=0;i<_615.length;i++){
if(!_614){
_614=_615[(dir>0)?0:(_615.length-1)];
}
if(_614.isFocusable()){
return _614;
}
_614=this._getSiblingOfChild(_614,dir);
}
return null;
}});
}
if(!dojo._hasResource["dijit.MenuItem"]){
dojo._hasResource["dijit.MenuItem"]=true;
dojo.provide("dijit.MenuItem");
dojo.declare("dijit.MenuItem",[dijit._Widget,dijit._Templated,dijit._Contained,dijit._CssStateMixin],{templateString:dojo.cache("dijit","templates/MenuItem.html","<tr class=\"dijitReset dijitMenuItem\" dojoAttachPoint=\"focusNode\" role=\"menuitem\" tabIndex=\"-1\"\r\n\t\tdojoAttachEvent=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\r\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\r\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitMenuItemIcon\" dojoAttachPoint=\"iconNode\"/>\r\n\t</td>\r\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" dojoAttachPoint=\"containerNode\"></td>\r\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" dojoAttachPoint=\"accelKeyNode\"></td>\r\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">\r\n\t\t<div dojoAttachPoint=\"arrowWrapper\" style=\"visibility: hidden\">\r\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuExpand\"/>\r\n\t\t\t<span class=\"dijitMenuExpandA11y\">+</span>\r\n\t\t</div>\r\n\t</td>\r\n</tr>\r\n"),attributeMap:dojo.delegate(dijit._Widget.prototype.attributeMap,{label:{node:"containerNode",type:"innerHTML"},iconClass:{node:"iconNode",type:"class"}}),baseClass:"dijitMenuItem",label:"",iconClass:"",accelKey:"",disabled:false,_fillContent:function(_616){
if(_616&&!("label" in this.params)){
this.set("label",_616.innerHTML);
}
},buildRendering:function(){
this.inherited(arguments);
var _617=this.id+"_text";
dojo.attr(this.containerNode,"id",_617);
if(this.accelKeyNode){
dojo.attr(this.accelKeyNode,"id",this.id+"_accel");
_617+=" "+this.id+"_accel";
}
dijit.setWaiState(this.domNode,"labelledby",_617);
dojo.setSelectable(this.domNode,false);
},_onHover:function(){
this.getParent().onItemHover(this);
},_onUnhover:function(){
this.getParent().onItemUnhover(this);
this._set("hovering",false);
},_onClick:function(evt){
this.getParent().onItemClick(this,evt);
dojo.stopEvent(evt);
},onClick:function(evt){
},focus:function(){
try{
if(dojo.isIE==8){
this.containerNode.focus();
}
dijit.focus(this.focusNode);
}
catch(e){
}
},_onFocus:function(){
this._setSelected(true);
this.getParent()._onItemFocus(this);
this.inherited(arguments);
},_setSelected:function(_618){
dojo.toggleClass(this.domNode,"dijitMenuItemSelected",_618);
},setLabel:function(_619){
dojo.deprecated("dijit.MenuItem.setLabel() is deprecated.  Use set('label', ...) instead.","","2.0");
this.set("label",_619);
},setDisabled:function(_61a){
dojo.deprecated("dijit.Menu.setDisabled() is deprecated.  Use set('disabled', bool) instead.","","2.0");
this.set("disabled",_61a);
},_setDisabledAttr:function(_61b){
dijit.setWaiState(this.focusNode,"disabled",_61b?"true":"false");
this._set("disabled",_61b);
},_setAccelKeyAttr:function(_61c){
this.accelKeyNode.style.display=_61c?"":"none";
this.accelKeyNode.innerHTML=_61c;
dojo.attr(this.containerNode,"colSpan",_61c?"1":"2");
this._set("accelKey",_61c);
}});
}
if(!dojo._hasResource["dijit.PopupMenuItem"]){
dojo._hasResource["dijit.PopupMenuItem"]=true;
dojo.provide("dijit.PopupMenuItem");
dojo.declare("dijit.PopupMenuItem",dijit.MenuItem,{_fillContent:function(){
if(this.srcNodeRef){
var _61d=dojo.query("*",this.srcNodeRef);
dijit.PopupMenuItem.superclass._fillContent.call(this,_61d[0]);
this.dropDownContainer=this.srcNodeRef;
}
},startup:function(){
if(this._started){
return;
}
this.inherited(arguments);
if(!this.popup){
var node=dojo.query("[widgetId]",this.dropDownContainer)[0];
this.popup=dijit.byNode(node);
}
dojo.body().appendChild(this.popup.domNode);
this.popup.startup();
this.popup.domNode.style.display="none";
if(this.arrowWrapper){
dojo.style(this.arrowWrapper,"visibility","");
}
dijit.setWaiState(this.focusNode,"haspopup","true");
},destroyDescendants:function(){
if(this.popup){
if(!this.popup._destroyed){
this.popup.destroyRecursive();
}
delete this.popup;
}
this.inherited(arguments);
}});
}
if(!dojo._hasResource["dijit.CheckedMenuItem"]){
dojo._hasResource["dijit.CheckedMenuItem"]=true;
dojo.provide("dijit.CheckedMenuItem");
dojo.declare("dijit.CheckedMenuItem",dijit.MenuItem,{templateString:dojo.cache("dijit","templates/CheckedMenuItem.html","<tr class=\"dijitReset dijitMenuItem\" dojoAttachPoint=\"focusNode\" role=\"menuitemcheckbox\" tabIndex=\"-1\"\r\n\t\tdojoAttachEvent=\"onmouseenter:_onHover,onmouseleave:_onUnhover,ondijitclick:_onClick\">\r\n\t<td class=\"dijitReset dijitMenuItemIconCell\" role=\"presentation\">\r\n\t\t<img src=\"${_blankGif}\" alt=\"\" class=\"dijitMenuItemIcon dijitCheckedMenuItemIcon\" dojoAttachPoint=\"iconNode\"/>\r\n\t\t<span class=\"dijitCheckedMenuItemIconChar\">&#10003;</span>\r\n\t</td>\r\n\t<td class=\"dijitReset dijitMenuItemLabel\" colspan=\"2\" dojoAttachPoint=\"containerNode,labelNode\"></td>\r\n\t<td class=\"dijitReset dijitMenuItemAccelKey\" style=\"display: none\" dojoAttachPoint=\"accelKeyNode\"></td>\r\n\t<td class=\"dijitReset dijitMenuArrowCell\" role=\"presentation\">&nbsp;</td>\r\n</tr>\r\n"),checked:false,_setCheckedAttr:function(_61e){
dojo.toggleClass(this.domNode,"dijitCheckedMenuItemChecked",_61e);
dijit.setWaiState(this.domNode,"checked",_61e);
this._set("checked",_61e);
},onChange:function(_61f){
},_onClick:function(e){
if(!this.disabled){
this.set("checked",!this.checked);
this.onChange(this.checked);
}
this.inherited(arguments);
}});
}
if(!dojo._hasResource["dijit.MenuSeparator"]){
dojo._hasResource["dijit.MenuSeparator"]=true;
dojo.provide("dijit.MenuSeparator");
dojo.declare("dijit.MenuSeparator",[dijit._Widget,dijit._Templated,dijit._Contained],{templateString:dojo.cache("dijit","templates/MenuSeparator.html","<tr class=\"dijitMenuSeparator\">\r\n\t<td class=\"dijitMenuSeparatorIconCell\">\r\n\t\t<div class=\"dijitMenuSeparatorTop\"></div>\r\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\r\n\t</td>\r\n\t<td colspan=\"3\" class=\"dijitMenuSeparatorLabelCell\">\r\n\t\t<div class=\"dijitMenuSeparatorTop dijitMenuSeparatorLabel\"></div>\r\n\t\t<div class=\"dijitMenuSeparatorBottom\"></div>\r\n\t</td>\r\n</tr>\r\n"),buildRendering:function(){
this.inherited(arguments);
dojo.setSelectable(this.domNode,false);
},isFocusable:function(){
return false;
}});
}
if(!dojo._hasResource["dijit.Menu"]){
dojo._hasResource["dijit.Menu"]=true;
dojo.provide("dijit.Menu");
dojo.declare("dijit._MenuBase",[dijit._Widget,dijit._Templated,dijit._KeyNavContainer],{parentMenu:null,popupDelay:500,startup:function(){
if(this._started){
return;
}
dojo.forEach(this.getChildren(),function(_620){
_620.startup();
});
this.startupKeyNavChildren();
this.inherited(arguments);
},onExecute:function(){
},onCancel:function(_621){
},_moveToPopup:function(evt){
if(this.focusedChild&&this.focusedChild.popup&&!this.focusedChild.disabled){
this.focusedChild._onClick(evt);
}else{
var _622=this._getTopMenu();
if(_622&&_622._isMenuBar){
_622.focusNext();
}
}
},_onPopupHover:function(evt){
if(this.currentPopup&&this.currentPopup._pendingClose_timer){
var _623=this.currentPopup.parentMenu;
if(_623.focusedChild){
_623.focusedChild._setSelected(false);
}
_623.focusedChild=this.currentPopup.from_item;
_623.focusedChild._setSelected(true);
this._stopPendingCloseTimer(this.currentPopup);
}
},onItemHover:function(item){
if(this.isActive){
this.focusChild(item);
if(this.focusedChild.popup&&!this.focusedChild.disabled&&!this.hover_timer){
this.hover_timer=setTimeout(dojo.hitch(this,"_openPopup"),this.popupDelay);
}
}
if(this.focusedChild){
this.focusChild(item);
}
this._hoveredChild=item;
},_onChildBlur:function(item){
this._stopPopupTimer();
item._setSelected(false);
var _624=item.popup;
if(_624){
this._stopPendingCloseTimer(_624);
_624._pendingClose_timer=setTimeout(function(){
_624._pendingClose_timer=null;
if(_624.parentMenu){
_624.parentMenu.currentPopup=null;
}
dijit.popup.close(_624);
},this.popupDelay);
}
},onItemUnhover:function(item){
if(this.isActive){
this._stopPopupTimer();
}
if(this._hoveredChild==item){
this._hoveredChild=null;
}
},_stopPopupTimer:function(){
if(this.hover_timer){
clearTimeout(this.hover_timer);
this.hover_timer=null;
}
},_stopPendingCloseTimer:function(_625){
if(_625._pendingClose_timer){
clearTimeout(_625._pendingClose_timer);
_625._pendingClose_timer=null;
}
},_stopFocusTimer:function(){
if(this._focus_timer){
clearTimeout(this._focus_timer);
this._focus_timer=null;
}
},_getTopMenu:function(){
for(var top=this;top.parentMenu;top=top.parentMenu){
}
return top;
},onItemClick:function(item,evt){
if(typeof this.isShowingNow=="undefined"){
this._markActive();
}
this.focusChild(item);
if(item.disabled){
return false;
}
if(item.popup){
this._openPopup();
}else{
this.onExecute();
item.onClick(evt);
}
},_openPopup:function(){
this._stopPopupTimer();
var _626=this.focusedChild;
if(!_626){
return;
}
var _627=_626.popup;
if(_627.isShowingNow){
return;
}
if(this.currentPopup){
this._stopPendingCloseTimer(this.currentPopup);
dijit.popup.close(this.currentPopup);
}
_627.parentMenu=this;
_627.from_item=_626;
var self=this;
dijit.popup.open({parent:this,popup:_627,around:_626.domNode,orient:this._orient||(this.isLeftToRight()?{"TR":"TL","TL":"TR","BR":"BL","BL":"BR"}:{"TL":"TR","TR":"TL","BL":"BR","BR":"BL"}),onCancel:function(){
self.focusChild(_626);
self._cleanUp();
_626._setSelected(true);
self.focusedChild=_626;
},onExecute:dojo.hitch(this,"_cleanUp")});
this.currentPopup=_627;
_627.connect(_627.domNode,"onmouseenter",dojo.hitch(self,"_onPopupHover"));
if(_627.focus){
_627._focus_timer=setTimeout(dojo.hitch(_627,function(){
this._focus_timer=null;
this.focus();
}),0);
}
},_markActive:function(){
this.isActive=true;
dojo.replaceClass(this.domNode,"dijitMenuActive","dijitMenuPassive");
},onOpen:function(e){
this.isShowingNow=true;
this._markActive();
},_markInactive:function(){
this.isActive=false;
dojo.replaceClass(this.domNode,"dijitMenuPassive","dijitMenuActive");
},onClose:function(){
this._stopFocusTimer();
this._markInactive();
this.isShowingNow=false;
this.parentMenu=null;
},_closeChild:function(){
this._stopPopupTimer();
var _628=this.focusedChild&&this.focusedChild.from_item;
if(this.currentPopup){
if(dijit._curFocus&&dojo.isDescendant(dijit._curFocus,this.currentPopup.domNode)){
this.focusedChild.focusNode.focus();
}
dijit.popup.close(this.currentPopup);
this.currentPopup=null;
}
if(this.focusedChild){
this.focusedChild._setSelected(false);
this.focusedChild._onUnhover();
this.focusedChild=null;
}
},_onItemFocus:function(item){
if(this._hoveredChild&&this._hoveredChild!=item){
this._hoveredChild._onUnhover();
}
},_onBlur:function(){
this._cleanUp();
this.inherited(arguments);
},_cleanUp:function(){
this._closeChild();
if(typeof this.isShowingNow=="undefined"){
this._markInactive();
}
}});
dojo.declare("dijit.Menu",dijit._MenuBase,{constructor:function(){
this._bindings=[];
},templateString:dojo.cache("dijit","templates/Menu.html","<table class=\"dijit dijitMenu dijitMenuPassive dijitReset dijitMenuTable\" role=\"menu\" tabIndex=\"${tabIndex}\" dojoAttachEvent=\"onkeypress:_onKeyPress\" cellspacing=\"0\">\r\n\t<tbody class=\"dijitReset\" dojoAttachPoint=\"containerNode\"></tbody>\r\n</table>\r\n"),baseClass:"dijitMenu",targetNodeIds:[],contextMenuForWindow:false,leftClickToOpen:false,refocus:true,postCreate:function(){
if(this.contextMenuForWindow){
this.bindDomNode(dojo.body());
}else{
dojo.forEach(this.targetNodeIds,this.bindDomNode,this);
}
var k=dojo.keys,l=this.isLeftToRight();
this._openSubMenuKey=l?k.RIGHT_ARROW:k.LEFT_ARROW;
this._closeSubMenuKey=l?k.LEFT_ARROW:k.RIGHT_ARROW;
this.connectKeyNavHandlers([k.UP_ARROW],[k.DOWN_ARROW]);
},_onKeyPress:function(evt){
if(evt.ctrlKey||evt.altKey){
return;
}
switch(evt.charOrCode){
case this._openSubMenuKey:
this._moveToPopup(evt);
dojo.stopEvent(evt);
break;
case this._closeSubMenuKey:
if(this.parentMenu){
if(this.parentMenu._isMenuBar){
this.parentMenu.focusPrev();
}else{
this.onCancel(false);
}
}else{
dojo.stopEvent(evt);
}
break;
}
},_iframeContentWindow:function(_629){
var win=dojo.window.get(this._iframeContentDocument(_629))||this._iframeContentDocument(_629)["__parent__"]||(_629.name&&dojo.doc.frames[_629.name])||null;
return win;
},_iframeContentDocument:function(_62a){
var doc=_62a.contentDocument||(_62a.contentWindow&&_62a.contentWindow.document)||(_62a.name&&dojo.doc.frames[_62a.name]&&dojo.doc.frames[_62a.name].document)||null;
return doc;
},bindDomNode:function(node){
node=dojo.byId(node);
var cn;
if(node.tagName.toLowerCase()=="iframe"){
var _62b=node,win=this._iframeContentWindow(_62b);
cn=dojo.withGlobal(win,dojo.body);
}else{
cn=(node==dojo.body()?dojo.doc.documentElement:node);
}
var _62c={node:node,iframe:_62b};
dojo.attr(node,"_dijitMenu"+this.id,this._bindings.push(_62c));
var _62d=dojo.hitch(this,function(cn){
return [dojo.connect(cn,this.leftClickToOpen?"onclick":"oncontextmenu",this,function(evt){
dojo.stopEvent(evt);
this._scheduleOpen(evt.target,_62b,{x:evt.pageX,y:evt.pageY});
}),dojo.connect(cn,"onkeydown",this,function(evt){
if(evt.shiftKey&&evt.keyCode==dojo.keys.F10){
dojo.stopEvent(evt);
this._scheduleOpen(evt.target,_62b);
}
})];
});
_62c.connects=cn?_62d(cn):[];
if(_62b){
_62c.onloadHandler=dojo.hitch(this,function(){
var win=this._iframeContentWindow(_62b);
cn=dojo.withGlobal(win,dojo.body);
_62c.connects=_62d(cn);
});
if(_62b.addEventListener){
_62b.addEventListener("load",_62c.onloadHandler,false);
}else{
_62b.attachEvent("onload",_62c.onloadHandler);
}
}
},unBindDomNode:function(_62e){
var node;
try{
node=dojo.byId(_62e);
}
catch(e){
return;
}
var _62f="_dijitMenu"+this.id;
if(node&&dojo.hasAttr(node,_62f)){
var bid=dojo.attr(node,_62f)-1,b=this._bindings[bid];
dojo.forEach(b.connects,dojo.disconnect);
var _630=b.iframe;
if(_630){
if(_630.removeEventListener){
_630.removeEventListener("load",b.onloadHandler,false);
}else{
_630.detachEvent("onload",b.onloadHandler);
}
}
dojo.removeAttr(node,_62f);
delete this._bindings[bid];
}
},_scheduleOpen:function(_631,_632,_633){
if(!this._openTimer){
this._openTimer=setTimeout(dojo.hitch(this,function(){
delete this._openTimer;
this._openMyself({target:_631,iframe:_632,coords:_633});
}),1);
}
},_openMyself:function(args){
var _634=args.target,_635=args.iframe,_636=args.coords;
if(_636){
if(_635){
var od=_634.ownerDocument,ifc=dojo.position(_635,true),win=this._iframeContentWindow(_635),_637=dojo.withGlobal(win,"_docScroll",dojo);
var cs=dojo.getComputedStyle(_635),tp=dojo._toPixelValue,left=(dojo.isIE&&dojo.isQuirks?0:tp(_635,cs.paddingLeft))+(dojo.isIE&&dojo.isQuirks?tp(_635,cs.borderLeftWidth):0),top=(dojo.isIE&&dojo.isQuirks?0:tp(_635,cs.paddingTop))+(dojo.isIE&&dojo.isQuirks?tp(_635,cs.borderTopWidth):0);
_636.x+=ifc.x+left-_637.x;
_636.y+=ifc.y+top-_637.y;
}
}else{
_636=dojo.position(_634,true);
_636.x+=10;
_636.y+=10;
}
var self=this;
var _638=dijit.getFocus(this);
function _639(){
if(self.refocus){
dijit.focus(_638);
}
dijit.popup.close(self);
};
dijit.popup.open({popup:this,x:_636.x,y:_636.y,onExecute:_639,onCancel:_639,orient:this.isLeftToRight()?"L":"R"});
this.focus();
this._onBlur=function(){
this.inherited("_onBlur",arguments);
dijit.popup.close(this);
};
},uninitialize:function(){
dojo.forEach(this._bindings,function(b){
if(b){
this.unBindDomNode(b.node);
}
},this);
this.inherited(arguments);
}});
}
if(!dojo._hasResource["dijit.layout.TabController"]){
dojo._hasResource["dijit.layout.TabController"]=true;
dojo.provide("dijit.layout.TabController");
dojo.declare("dijit.layout.TabController",dijit.layout.StackController,{templateString:"<div role='tablist' dojoAttachEvent='onkeypress:onkeypress'></div>",tabPosition:"top",buttonWidget:"dijit.layout._TabButton",_rectifyRtlTabList:function(){
if(0>=this.tabPosition.indexOf("-h")){
return;
}
if(!this.pane2button){
return;
}
var _63a=0;
for(var pane in this.pane2button){
var ow=this.pane2button[pane].innerDiv.scrollWidth;
_63a=Math.max(_63a,ow);
}
for(pane in this.pane2button){
this.pane2button[pane].innerDiv.style.width=_63a+"px";
}
}});
dojo.declare("dijit.layout._TabButton",dijit.layout._StackButton,{baseClass:"dijitTab",cssStateNodes:{closeNode:"dijitTabCloseButton"},templateString:dojo.cache("dijit.layout","templates/_TabButton.html","<div role=\"presentation\" dojoAttachPoint=\"titleNode\" dojoAttachEvent='onclick:onClick'>\r\n    <div role=\"presentation\" class='dijitTabInnerDiv' dojoAttachPoint='innerDiv'>\r\n        <div role=\"presentation\" class='dijitTabContent' dojoAttachPoint='tabContent'>\r\n        \t<div role=\"presentation\" dojoAttachPoint='focusNode'>\r\n\t\t        <img src=\"${_blankGif}\" alt=\"\" class=\"dijitIcon dijitTabButtonIcon\" dojoAttachPoint='iconNode' />\r\n\t\t        <span dojoAttachPoint='containerNode' class='tabLabel'></span>\r\n\t\t        <span class=\"dijitInline dijitTabCloseButton dijitTabCloseIcon\" dojoAttachPoint='closeNode'\r\n\t\t        \t\tdojoAttachEvent='onclick: onClickCloseButton' role=\"presentation\">\r\n\t\t            <span dojoAttachPoint='closeText' class='dijitTabCloseText'>[x]</span\r\n\t\t        ></span>\r\n\t\t\t</div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"),scrollOnFocus:false,buildRendering:function(){
this.inherited(arguments);
dojo.setSelectable(this.containerNode,false);
},startup:function(){
this.inherited(arguments);
var n=this.domNode;
setTimeout(function(){
n.className=n.className;
},1);
},_setCloseButtonAttr:function(disp){
this._set("closeButton",disp);
dojo.toggleClass(this.innerDiv,"dijitClosable",disp);
this.closeNode.style.display=disp?"":"none";
if(disp){
var _63b=dojo.i18n.getLocalization("dijit","common");
if(this.closeNode){
dojo.attr(this.closeNode,"title",_63b.itemClose);
}
var _63b=dojo.i18n.getLocalization("dijit","common");
this._closeMenu=new dijit.Menu({id:this.id+"_Menu",dir:this.dir,lang:this.lang,targetNodeIds:[this.domNode]});
this._closeMenu.addChild(new dijit.MenuItem({label:_63b.itemClose,dir:this.dir,lang:this.lang,onClick:dojo.hitch(this,"onClickCloseButton")}));
}else{
if(this._closeMenu){
this._closeMenu.destroyRecursive();
delete this._closeMenu;
}
}
},_setLabelAttr:function(_63c){
this.inherited(arguments);
if(this.showLabel==false&&!this.params.title){
this.iconNode.alt=dojo.trim(this.containerNode.innerText||this.containerNode.textContent||"");
}
},destroy:function(){
if(this._closeMenu){
this._closeMenu.destroyRecursive();
delete this._closeMenu;
}
this.inherited(arguments);
}});
}
if(!dojo._hasResource["dijit.layout.ScrollingTabController"]){
dojo._hasResource["dijit.layout.ScrollingTabController"]=true;
dojo.provide("dijit.layout.ScrollingTabController");
dojo.declare("dijit.layout.ScrollingTabController",dijit.layout.TabController,{templateString:dojo.cache("dijit.layout","templates/ScrollingTabController.html","<div class=\"dijitTabListContainer-${tabPosition}\" style=\"visibility:hidden\">\r\n\t<div dojoType=\"dijit.layout._ScrollingTabControllerMenuButton\"\r\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\r\n\t\t\tid=\"${id}_menuBtn\" containerId=\"${containerId}\" iconClass=\"dijitTabStripMenuIcon\"\r\n\t\t\tdropDownPosition=\"below-alt, above-alt\"\r\n\t\t\tdojoAttachPoint=\"_menuBtn\" showLabel=\"false\">&#9660;</div>\r\n\t<div dojoType=\"dijit.layout._ScrollingTabControllerButton\"\r\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\r\n\t\t\tid=\"${id}_leftBtn\" iconClass=\"dijitTabStripSlideLeftIcon\"\r\n\t\t\tdojoAttachPoint=\"_leftBtn\" dojoAttachEvent=\"onClick: doSlideLeft\" showLabel=\"false\">&#9664;</div>\r\n\t<div dojoType=\"dijit.layout._ScrollingTabControllerButton\"\r\n\t\t\tclass=\"tabStripButton-${tabPosition}\"\r\n\t\t\tid=\"${id}_rightBtn\" iconClass=\"dijitTabStripSlideRightIcon\"\r\n\t\t\tdojoAttachPoint=\"_rightBtn\" dojoAttachEvent=\"onClick: doSlideRight\" showLabel=\"false\">&#9654;</div>\r\n\t<div class='dijitTabListWrapper' dojoAttachPoint='tablistWrapper'>\r\n\t\t<div role='tablist' dojoAttachEvent='onkeypress:onkeypress'\r\n\t\t\t\tdojoAttachPoint='containerNode' class='nowrapTabStrip'></div>\r\n\t</div>\r\n</div>\r\n"),useMenu:true,useSlider:true,tabStripClass:"",widgetsInTemplate:true,_minScroll:5,attributeMap:dojo.delegate(dijit._Widget.prototype.attributeMap,{"class":"containerNode"}),buildRendering:function(){
this.inherited(arguments);
var n=this.domNode;
this.scrollNode=this.tablistWrapper;
this._initButtons();
if(!this.tabStripClass){
this.tabStripClass="dijitTabContainer"+this.tabPosition.charAt(0).toUpperCase()+this.tabPosition.substr(1).replace(/-.*/,"")+"None";
dojo.addClass(n,"tabStrip-disabled");
}
dojo.addClass(this.tablistWrapper,this.tabStripClass);
},onStartup:function(){
this.inherited(arguments);
dojo.style(this.domNode,"visibility","visible");
this._postStartup=true;
},onAddChild:function(page,_63d){
this.inherited(arguments);
dojo.forEach(["label","iconClass"],function(attr){
this.pane2watches[page.id].push(this.pane2button[page.id].watch(attr,dojo.hitch(this,function(name,_63e,_63f){
if(this._postStartup&&this._dim){
this.resize(this._dim);
}
})));
},this);
dojo.style(this.containerNode,"width",(dojo.style(this.containerNode,"width")+200)+"px");
},onRemoveChild:function(page,_640){
var _641=this.pane2button[page.id];
if(this._selectedTab===_641.domNode){
this._selectedTab=null;
}
this.inherited(arguments);
},_initButtons:function(){
this._btnWidth=0;
this._buttons=dojo.query("> .tabStripButton",this.domNode).filter(function(btn){
if((this.useMenu&&btn==this._menuBtn.domNode)||(this.useSlider&&(btn==this._rightBtn.domNode||btn==this._leftBtn.domNode))){
this._btnWidth+=dojo._getMarginSize(btn).w;
return true;
}else{
dojo.style(btn,"display","none");
return false;
}
},this);
},_getTabsWidth:function(){
var _642=this.getChildren();
if(_642.length){
var _643=_642[this.isLeftToRight()?0:_642.length-1].domNode,_644=_642[this.isLeftToRight()?_642.length-1:0].domNode;
return _644.offsetLeft+dojo.style(_644,"width")-_643.offsetLeft;
}else{
return 0;
}
},_enableBtn:function(_645){
var _646=this._getTabsWidth();
_645=_645||dojo.style(this.scrollNode,"width");
return _646>0&&_645<_646;
},resize:function(dim){
if(this.domNode.offsetWidth==0){
return;
}
this._dim=dim;
this.scrollNode.style.height="auto";
this._contentBox=dijit.layout.marginBox2contentBox(this.domNode,{h:0,w:dim.w});
this._contentBox.h=this.scrollNode.offsetHeight;
dojo.contentBox(this.domNode,this._contentBox);
var _647=this._enableBtn(this._contentBox.w);
this._buttons.style("display",_647?"":"none");
this._leftBtn.layoutAlign="left";
this._rightBtn.layoutAlign="right";
this._menuBtn.layoutAlign=this.isLeftToRight()?"right":"left";
dijit.layout.layoutChildren(this.domNode,this._contentBox,[this._menuBtn,this._leftBtn,this._rightBtn,{domNode:this.scrollNode,layoutAlign:"client"}]);
if(this._selectedTab){
if(this._anim&&this._anim.status()=="playing"){
this._anim.stop();
}
var w=this.scrollNode,sl=this._convertToScrollLeft(this._getScrollForSelectedTab());
w.scrollLeft=sl;
}
this._setButtonClass(this._getScroll());
this._postResize=true;
return {h:this._contentBox.h,w:dim.w};
},_getScroll:function(){
var sl=(this.isLeftToRight()||dojo.isIE<8||(dojo.isIE&&dojo.isQuirks)||dojo.isWebKit)?this.scrollNode.scrollLeft:dojo.style(this.containerNode,"width")-dojo.style(this.scrollNode,"width")+(dojo.isIE==8?-1:1)*this.scrollNode.scrollLeft;
return sl;
},_convertToScrollLeft:function(val){
if(this.isLeftToRight()||dojo.isIE<8||(dojo.isIE&&dojo.isQuirks)||dojo.isWebKit){
return val;
}else{
var _648=dojo.style(this.containerNode,"width")-dojo.style(this.scrollNode,"width");
return (dojo.isIE==8?-1:1)*(val-_648);
}
},onSelectChild:function(page){
var tab=this.pane2button[page.id];
if(!tab||!page){
return;
}
var node=tab.domNode;
if(this._postResize&&node!=this._selectedTab){
this._selectedTab=node;
var sl=this._getScroll();
if(sl>node.offsetLeft||sl+dojo.style(this.scrollNode,"width")<node.offsetLeft+dojo.style(node,"width")){
this.createSmoothScroll().play();
}
}
this.inherited(arguments);
},_getScrollBounds:function(){
var _649=this.getChildren(),_64a=dojo.style(this.scrollNode,"width"),_64b=dojo.style(this.containerNode,"width"),_64c=_64b-_64a,_64d=this._getTabsWidth();
if(_649.length&&_64d>_64a){
return {min:this.isLeftToRight()?0:_649[_649.length-1].domNode.offsetLeft,max:this.isLeftToRight()?(_649[_649.length-1].domNode.offsetLeft+dojo.style(_649[_649.length-1].domNode,"width"))-_64a:_64c};
}else{
var _64e=this.isLeftToRight()?0:_64c;
return {min:_64e,max:_64e};
}
},_getScrollForSelectedTab:function(){
var w=this.scrollNode,n=this._selectedTab,_64f=dojo.style(this.scrollNode,"width"),_650=this._getScrollBounds();
var pos=(n.offsetLeft+dojo.style(n,"width")/2)-_64f/2;
pos=Math.min(Math.max(pos,_650.min),_650.max);
return pos;
},createSmoothScroll:function(x){
if(arguments.length>0){
var _651=this._getScrollBounds();
x=Math.min(Math.max(x,_651.min),_651.max);
}else{
x=this._getScrollForSelectedTab();
}
if(this._anim&&this._anim.status()=="playing"){
this._anim.stop();
}
var self=this,w=this.scrollNode,anim=new dojo._Animation({beforeBegin:function(){
if(this.curve){
delete this.curve;
}
var oldS=w.scrollLeft,newS=self._convertToScrollLeft(x);
anim.curve=new dojo._Line(oldS,newS);
},onAnimate:function(val){
w.scrollLeft=val;
}});
this._anim=anim;
this._setButtonClass(x);
return anim;
},_getBtnNode:function(e){
var n=e.target;
while(n&&!dojo.hasClass(n,"tabStripButton")){
n=n.parentNode;
}
return n;
},doSlideRight:function(e){
this.doSlide(1,this._getBtnNode(e));
},doSlideLeft:function(e){
this.doSlide(-1,this._getBtnNode(e));
},doSlide:function(_652,node){
if(node&&dojo.hasClass(node,"dijitTabDisabled")){
return;
}
var _653=dojo.style(this.scrollNode,"width");
var d=(_653*0.75)*_652;
var to=this._getScroll()+d;
this._setButtonClass(to);
this.createSmoothScroll(to).play();
},_setButtonClass:function(_654){
var _655=this._getScrollBounds();
this._leftBtn.set("disabled",_654<=_655.min);
this._rightBtn.set("disabled",_654>=_655.max);
}});
dojo.declare("dijit.layout._ScrollingTabControllerButtonMixin",null,{baseClass:"dijitTab tabStripButton",templateString:dojo.cache("dijit.layout","templates/_ScrollingTabControllerButton.html","<div dojoAttachEvent=\"onclick:_onButtonClick\">\r\n\t<div role=\"presentation\" class=\"dijitTabInnerDiv\" dojoattachpoint=\"innerDiv,focusNode\">\r\n\t\t<div role=\"presentation\" class=\"dijitTabContent dijitButtonContents\" dojoattachpoint=\"tabContent\">\r\n\t\t\t<img role=\"presentation\" alt=\"\" src=\"${_blankGif}\" class=\"dijitTabStripIcon\" dojoAttachPoint=\"iconNode\"/>\r\n\t\t\t<span dojoAttachPoint=\"containerNode,titleNode\" class=\"dijitButtonText\"></span>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"),tabIndex:"",isFocusable:function(){
return false;
}});
dojo.declare("dijit.layout._ScrollingTabControllerButton",[dijit.form.Button,dijit.layout._ScrollingTabControllerButtonMixin]);
dojo.declare("dijit.layout._ScrollingTabControllerMenuButton",[dijit.form.Button,dijit._HasDropDown,dijit.layout._ScrollingTabControllerButtonMixin],{containerId:"",tabIndex:"-1",isLoaded:function(){
return false;
},loadDropDown:function(_656){
this.dropDown=new dijit.Menu({id:this.containerId+"_menu",dir:this.dir,lang:this.lang});
var _657=dijit.byId(this.containerId);
dojo.forEach(_657.getChildren(),function(page){
var _658=new dijit.MenuItem({id:page.id+"_stcMi",label:page.title,iconClass:page.iconClass,dir:page.dir,lang:page.lang,onClick:function(){
_657.selectChild(page);
}});
this.dropDown.addChild(_658);
},this);
_656();
},closeDropDown:function(_659){
this.inherited(arguments);
if(this.dropDown){
this.dropDown.destroyRecursive();
delete this.dropDown;
}
}});
}
if(!dojo._hasResource["dijit.layout.TabContainer"]){
dojo._hasResource["dijit.layout.TabContainer"]=true;
dojo.provide("dijit.layout.TabContainer");
dojo.declare("dijit.layout.TabContainer",dijit.layout._TabContainerBase,{useMenu:true,useSlider:true,controllerWidget:"",_makeController:function(_65a){
var cls=this.baseClass+"-tabs"+(this.doLayout?"":" dijitTabNoLayout"),_65b=dojo.getObject(this.controllerWidget);
return new _65b({id:this.id+"_tablist",dir:this.dir,lang:this.lang,tabPosition:this.tabPosition,doLayout:this.doLayout,containerId:this.id,"class":cls,nested:this.nested,useMenu:this.useMenu,useSlider:this.useSlider,tabStripClass:this.tabStrip?this.baseClass+(this.tabStrip?"":"No")+"Strip":null},_65a);
},postMixInProperties:function(){
this.inherited(arguments);
if(!this.controllerWidget){
this.controllerWidget=(this.tabPosition=="top"||this.tabPosition=="bottom")&&!this.nested?"dijit.layout.ScrollingTabController":"dijit.layout.TabController";
}
}});
}
if(!dojo._hasResource["dojo.DeferredList"]){
dojo._hasResource["dojo.DeferredList"]=true;
dojo.provide("dojo.DeferredList");
dojo.DeferredList=function(list,_65c,_65d,_65e,_65f){
var _660=[];
dojo.Deferred.call(this);
var self=this;
if(list.length===0&&!_65c){
this.resolve([0,[]]);
}
var _661=0;
dojo.forEach(list,function(item,i){
item.then(function(_662){
if(_65c){
self.resolve([i,_662]);
}else{
_663(true,_662);
}
},function(_664){
if(_65d){
self.reject(_664);
}else{
_663(false,_664);
}
if(_65e){
return null;
}
throw _664;
});
function _663(_665,_666){
_660[i]=[_665,_666];
_661++;
if(_661===list.length){
self.resolve(_660);
}
};
});
};
dojo.DeferredList.prototype=new dojo.Deferred();
dojo.DeferredList.prototype.gatherResults=function(_667){
var d=new dojo.DeferredList(_667,false,true,false);
d.addCallback(function(_668){
var ret=[];
dojo.forEach(_668,function(_669){
ret.push(_669[1]);
});
return ret;
});
return d;
};
}
if(!dojo._hasResource["dijit.tree.TreeStoreModel"]){
dojo._hasResource["dijit.tree.TreeStoreModel"]=true;
dojo.provide("dijit.tree.TreeStoreModel");
dojo.declare("dijit.tree.TreeStoreModel",null,{store:null,childrenAttrs:["children"],newItemIdAttr:"id",labelAttr:"",root:null,query:null,deferItemLoadingUntilExpand:false,constructor:function(args){
dojo.mixin(this,args);
this.connects=[];
var _66a=this.store;
if(!_66a.getFeatures()["dojo.data.api.Identity"]){
throw new Error("dijit.Tree: store must support dojo.data.Identity");
}
if(_66a.getFeatures()["dojo.data.api.Notification"]){
this.connects=this.connects.concat([dojo.connect(_66a,"onNew",this,"onNewItem"),dojo.connect(_66a,"onDelete",this,"onDeleteItem"),dojo.connect(_66a,"onSet",this,"onSetItem")]);
}
},destroy:function(){
dojo.forEach(this.connects,dojo.disconnect);
},getRoot:function(_66b,_66c){
if(this.root){
_66b(this.root);
}else{
this.store.fetch({query:this.query,onComplete:dojo.hitch(this,function(_66d){
if(_66d.length!=1){
throw new Error(this.declaredClass+": query "+dojo.toJson(this.query)+" returned "+_66d.length+" items, but must return exactly one item");
}
this.root=_66d[0];
_66b(this.root);
}),onError:_66c});
}
},mayHaveChildren:function(item){
return dojo.some(this.childrenAttrs,function(attr){
return this.store.hasAttribute(item,attr);
},this);
},getChildren:function(_66e,_66f,_670){
var _671=this.store;
if(!_671.isItemLoaded(_66e)){
var _672=dojo.hitch(this,arguments.callee);
_671.loadItem({item:_66e,onItem:function(_673){
_672(_673,_66f,_670);
},onError:_670});
return;
}
var _674=[];
for(var i=0;i<this.childrenAttrs.length;i++){
var vals=_671.getValues(_66e,this.childrenAttrs[i]);
_674=_674.concat(vals);
}
var _675=0;
if(!this.deferItemLoadingUntilExpand){
dojo.forEach(_674,function(item){
if(!_671.isItemLoaded(item)){
_675++;
}
});
}
if(_675==0){
_66f(_674);
}else{
dojo.forEach(_674,function(item,idx){
if(!_671.isItemLoaded(item)){
_671.loadItem({item:item,onItem:function(item){
_674[idx]=item;
if(--_675==0){
_66f(_674);
}
},onError:_670});
}
});
}
},isItem:function(_676){
return this.store.isItem(_676);
},fetchItemByIdentity:function(_677){
this.store.fetchItemByIdentity(_677);
},getIdentity:function(item){
return this.store.getIdentity(item);
},getLabel:function(item){
if(this.labelAttr){
return this.store.getValue(item,this.labelAttr);
}else{
return this.store.getLabel(item);
}
},newItem:function(args,_678,_679){
var _67a={parent:_678,attribute:this.childrenAttrs[0]},_67b;
if(this.newItemIdAttr&&args[this.newItemIdAttr]){
this.fetchItemByIdentity({identity:args[this.newItemIdAttr],scope:this,onItem:function(item){
if(item){
this.pasteItem(item,null,_678,true,_679);
}else{
_67b=this.store.newItem(args,_67a);
if(_67b&&(_679!=undefined)){
this.pasteItem(_67b,_678,_678,false,_679);
}
}
}});
}else{
_67b=this.store.newItem(args,_67a);
if(_67b&&(_679!=undefined)){
this.pasteItem(_67b,_678,_678,false,_679);
}
}
},pasteItem:function(_67c,_67d,_67e,_67f,_680){
var _681=this.store,_682=this.childrenAttrs[0];
if(_67d){
dojo.forEach(this.childrenAttrs,function(attr){
if(_681.containsValue(_67d,attr,_67c)){
if(!_67f){
var _683=dojo.filter(_681.getValues(_67d,attr),function(x){
return x!=_67c;
});
_681.setValues(_67d,attr,_683);
}
_682=attr;
}
});
}
if(_67e){
if(typeof _680=="number"){
var _684=_681.getValues(_67e,_682).slice();
_684.splice(_680,0,_67c);
_681.setValues(_67e,_682,_684);
}else{
_681.setValues(_67e,_682,_681.getValues(_67e,_682).concat(_67c));
}
}
},onChange:function(item){
},onChildrenChange:function(_685,_686){
},onDelete:function(_687,_688){
},onNewItem:function(item,_689){
if(!_689){
return;
}
this.getChildren(_689.item,dojo.hitch(this,function(_68a){
this.onChildrenChange(_689.item,_68a);
}));
},onDeleteItem:function(item){
this.onDelete(item);
},onSetItem:function(item,_68b,_68c,_68d){
if(dojo.indexOf(this.childrenAttrs,_68b)!=-1){
this.getChildren(item,dojo.hitch(this,function(_68e){
this.onChildrenChange(item,_68e);
}));
}else{
this.onChange(item);
}
}});
}
if(!dojo._hasResource["dijit.tree.ForestStoreModel"]){
dojo._hasResource["dijit.tree.ForestStoreModel"]=true;
dojo.provide("dijit.tree.ForestStoreModel");
dojo.declare("dijit.tree.ForestStoreModel",dijit.tree.TreeStoreModel,{rootId:"$root$",rootLabel:"ROOT",query:null,constructor:function(_68f){
this.root={store:this,root:true,id:_68f.rootId,label:_68f.rootLabel,children:_68f.rootChildren};
},mayHaveChildren:function(item){
return item===this.root||this.inherited(arguments);
},getChildren:function(_690,_691,_692){
if(_690===this.root){
if(this.root.children){
_691(this.root.children);
}else{
this.store.fetch({query:this.query,onComplete:dojo.hitch(this,function(_693){
this.root.children=_693;
_691(_693);
}),onError:_692});
}
}else{
this.inherited(arguments);
}
},isItem:function(_694){
return (_694===this.root)?true:this.inherited(arguments);
},fetchItemByIdentity:function(_695){
if(_695.identity==this.root.id){
var _696=_695.scope?_695.scope:dojo.global;
if(_695.onItem){
_695.onItem.call(_696,this.root);
}
}else{
this.inherited(arguments);
}
},getIdentity:function(item){
return (item===this.root)?this.root.id:this.inherited(arguments);
},getLabel:function(item){
return (item===this.root)?this.root.label:this.inherited(arguments);
},newItem:function(args,_697,_698){
if(_697===this.root){
this.onNewRootItem(args);
return this.store.newItem(args);
}else{
return this.inherited(arguments);
}
},onNewRootItem:function(args){
},pasteItem:function(_699,_69a,_69b,_69c,_69d){
if(_69a===this.root){
if(!_69c){
this.onLeaveRoot(_699);
}
}
dijit.tree.TreeStoreModel.prototype.pasteItem.call(this,_699,_69a===this.root?null:_69a,_69b===this.root?null:_69b,_69c,_69d);
if(_69b===this.root){
this.onAddToRoot(_699);
}
},onAddToRoot:function(item){
console.log(this,": item ",item," added to root");
},onLeaveRoot:function(item){
console.log(this,": item ",item," removed from root");
},_requeryTop:function(){
var _69e=this.root.children||[];
this.store.fetch({query:this.query,onComplete:dojo.hitch(this,function(_69f){
this.root.children=_69f;
if(_69e.length!=_69f.length||dojo.some(_69e,function(item,idx){
return _69f[idx]!=item;
})){
this.onChildrenChange(this.root,_69f);
}
})});
},onNewItem:function(item,_6a0){
this._requeryTop();
this.inherited(arguments);
},onDeleteItem:function(item){
if(dojo.indexOf(this.root.children,item)!=-1){
this._requeryTop();
}
this.inherited(arguments);
},onSetItem:function(item,_6a1,_6a2,_6a3){
this._requeryTop();
this.inherited(arguments);
}});
}
if(!dojo._hasResource["dijit.tree._dndContainer"]){
dojo._hasResource["dijit.tree._dndContainer"]=true;
dojo.provide("dijit.tree._dndContainer");
dojo.getObject("tree",true,dojo);
dijit.tree._compareNodes=function(n1,n2){
if(n1===n2){
return 0;
}
if("sourceIndex" in document.documentElement){
return n1.sourceIndex-n2.sourceIndex;
}else{
if("compareDocumentPosition" in document.documentElement){
return n1.compareDocumentPosition(n2)&2?1:-1;
}else{
if(document.createRange){
var r1=doc.createRange();
r1.setStartBefore(n1);
var r2=doc.createRange();
r2.setStartBefore(n2);
return r1.compareBoundaryPoints(r1.END_TO_END,r2);
}else{
throw Error("dijit.tree._compareNodes don't know how to compare two different nodes in this browser");
}
}
}
};
dojo.declare("dijit.tree._dndContainer",null,{constructor:function(tree,_6a4){
this.tree=tree;
this.node=tree.domNode;
dojo.mixin(this,_6a4);
this.map={};
this.current=null;
this.containerState="";
dojo.addClass(this.node,"dojoDndContainer");
this.events=[dojo.connect(this.node,"onmouseenter",this,"onOverEvent"),dojo.connect(this.node,"onmouseleave",this,"onOutEvent"),dojo.connect(this.tree,"_onNodeMouseEnter",this,"onMouseOver"),dojo.connect(this.tree,"_onNodeMouseLeave",this,"onMouseOut"),dojo.connect(this.node,"ondragstart",dojo,"stopEvent"),dojo.connect(this.node,"onselectstart",dojo,"stopEvent")];
},getItem:function(key){
var _6a5=this.selection[key],ret={data:_6a5,type:["treeNode"]};
return ret;
},destroy:function(){
dojo.forEach(this.events,dojo.disconnect);
this.node=this.parent=null;
},onMouseOver:function(_6a6,evt){
this.current=_6a6;
},onMouseOut:function(_6a7,evt){
this.current=null;
},_changeState:function(type,_6a8){
var _6a9="dojoDnd"+type;
var _6aa=type.toLowerCase()+"State";
dojo.replaceClass(this.node,_6a9+_6a8,_6a9+this[_6aa]);
this[_6aa]=_6a8;
},_addItemClass:function(node,type){
dojo.addClass(node,"dojoDndItem"+type);
},_removeItemClass:function(node,type){
dojo.removeClass(node,"dojoDndItem"+type);
},onOverEvent:function(){
this._changeState("Container","Over");
},onOutEvent:function(){
this._changeState("Container","");
}});
}
if(!dojo._hasResource["dijit.tree._dndSelector"]){
dojo._hasResource["dijit.tree._dndSelector"]=true;
dojo.provide("dijit.tree._dndSelector");
dojo.declare("dijit.tree._dndSelector",dijit.tree._dndContainer,{constructor:function(tree,_6ab){
this.selection={};
this.anchor=null;
dijit.setWaiState(this.tree.domNode,"multiselect",!this.singular);
this.events.push(dojo.connect(this.tree.domNode,"onmousedown",this,"onMouseDown"),dojo.connect(this.tree.domNode,"onmouseup",this,"onMouseUp"),dojo.connect(this.tree.domNode,"onmousemove",this,"onMouseMove"));
},singular:false,getSelectedTreeNodes:function(){
var _6ac=[],sel=this.selection;
for(var i in sel){
_6ac.push(sel[i]);
}
return _6ac;
},selectNone:function(){
this.setSelection([]);
return this;
},destroy:function(){
this.inherited(arguments);
this.selection=this.anchor=null;
},addTreeNode:function(node,_6ad){
this.setSelection(this.getSelectedTreeNodes().concat([node]));
if(_6ad){
this.anchor=node;
}
return node;
},removeTreeNode:function(node){
this.setSelection(this._setDifference(this.getSelectedTreeNodes(),[node]));
return node;
},isTreeNodeSelected:function(node){
return node.id&&!!this.selection[node.id];
},setSelection:function(_6ae){
var _6af=this.getSelectedTreeNodes();
dojo.forEach(this._setDifference(_6af,_6ae),dojo.hitch(this,function(node){
node.setSelected(false);
if(this.anchor==node){
delete this.anchor;
}
delete this.selection[node.id];
}));
dojo.forEach(this._setDifference(_6ae,_6af),dojo.hitch(this,function(node){
node.setSelected(true);
this.selection[node.id]=node;
}));
this._updateSelectionProperties();
},_setDifference:function(xs,ys){
dojo.forEach(ys,function(y){
y.__exclude__=true;
});
var ret=dojo.filter(xs,function(x){
return !x.__exclude__;
});
dojo.forEach(ys,function(y){
delete y["__exclude__"];
});
return ret;
},_updateSelectionProperties:function(){
var _6b0=this.getSelectedTreeNodes();
var _6b1=[],_6b2=[];
dojo.forEach(_6b0,function(node){
_6b2.push(node);
_6b1.push(node.getTreePath());
});
var _6b3=dojo.map(_6b2,function(node){
return node.item;
});
this.tree._set("paths",_6b1);
this.tree._set("path",_6b1[0]||[]);
this.tree._set("selectedNodes",_6b2);
this.tree._set("selectedNode",_6b2[0]||null);
this.tree._set("selectedItems",_6b3);
this.tree._set("selectedItem",_6b3[0]||null);
},onMouseDown:function(e){
if(!this.current||this.tree.isExpandoNode(e.target,this.current)){
return;
}
if(e.button==dojo.mouseButtons.RIGHT){
return;
}
dojo.stopEvent(e);
var _6b4=this.current,copy=dojo.isCopyKey(e),id=_6b4.id;
if(!this.singular&&!e.shiftKey&&this.selection[id]){
this._doDeselect=true;
return;
}else{
this._doDeselect=false;
}
this.userSelect(_6b4,copy,e.shiftKey);
},onMouseUp:function(e){
if(!this._doDeselect){
return;
}
this._doDeselect=false;
this.userSelect(this.current,dojo.isCopyKey(e),e.shiftKey);
},onMouseMove:function(e){
this._doDeselect=false;
},userSelect:function(node,_6b5,_6b6){
if(this.singular){
if(this.anchor==node&&_6b5){
this.selectNone();
}else{
this.setSelection([node]);
this.anchor=node;
}
}else{
if(_6b6&&this.anchor){
var cr=dijit.tree._compareNodes(this.anchor.rowNode,node.rowNode),_6b7,end,_6b8=this.anchor;
if(cr<0){
_6b7=_6b8;
end=node;
}else{
_6b7=node;
end=_6b8;
}
nodes=[];
while(_6b7!=end){
nodes.push(_6b7);
_6b7=this.tree._getNextNode(_6b7);
}
nodes.push(end);
this.setSelection(nodes);
}else{
if(this.selection[node.id]&&_6b5){
this.removeTreeNode(node);
}else{
if(_6b5){
this.addTreeNode(node,true);
}else{
this.setSelection([node]);
this.anchor=node;
}
}
}
}
},forInSelectedItems:function(f,o){
o=o||dojo.global;
for(var id in this.selection){
f.call(o,this.getItem(id),id,this);
}
}});
}
if(!dojo._hasResource["dijit.Tree"]){
dojo._hasResource["dijit.Tree"]=true;
dojo.provide("dijit.Tree");
dojo.declare("dijit._TreeNode",[dijit._Widget,dijit._Templated,dijit._Container,dijit._Contained,dijit._CssStateMixin],{item:null,isTreeNode:true,label:"",isExpandable:null,isExpanded:false,state:"UNCHECKED",templateString:dojo.cache("dijit","templates/TreeNode.html","<div class=\"dijitTreeNode\" role=\"presentation\"\r\n\t><div dojoAttachPoint=\"rowNode\" class=\"dijitTreeRow\" role=\"presentation\" dojoAttachEvent=\"onmouseenter:_onMouseEnter, onmouseleave:_onMouseLeave, onclick:_onClick, ondblclick:_onDblClick\"\r\n\t\t><img src=\"${_blankGif}\" alt=\"\" dojoAttachPoint=\"expandoNode\" class=\"dijitTreeExpando\" role=\"presentation\"\r\n\t\t/><span dojoAttachPoint=\"expandoNodeText\" class=\"dijitExpandoText\" role=\"presentation\"\r\n\t\t></span\r\n\t\t><span dojoAttachPoint=\"contentNode\"\r\n\t\t\tclass=\"dijitTreeContent\" role=\"presentation\">\r\n\t\t\t<img src=\"${_blankGif}\" alt=\"\" dojoAttachPoint=\"iconNode\" class=\"dijitIcon dijitTreeIcon\" role=\"presentation\"\r\n\t\t\t/><span dojoAttachPoint=\"labelNode\" class=\"dijitTreeLabel\" role=\"treeitem\" tabindex=\"-1\" aria-selected=\"false\" dojoAttachEvent=\"onfocus:_onLabelFocus\"></span>\r\n\t\t</span\r\n\t></div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitTreeContainer\" role=\"presentation\" style=\"display: none;\"></div>\r\n</div>\r\n"),baseClass:"dijitTreeNode",cssStateNodes:{rowNode:"dijitTreeRow",labelNode:"dijitTreeLabel"},attributeMap:dojo.delegate(dijit._Widget.prototype.attributeMap,{label:{node:"labelNode",type:"innerText"},tooltip:{node:"rowNode",type:"attribute",attribute:"title"}}),buildRendering:function(){
this.inherited(arguments);
this._setExpando();
this._updateItemClasses(this.item);
if(this.isExpandable){
dijit.setWaiState(this.labelNode,"expanded",this.isExpanded);
}
this.setSelected(false);
},_setIndentAttr:function(_6b9){
var _6ba=(Math.max(_6b9,0)*this.tree._nodePixelIndent)+"px";
dojo.style(this.domNode,"backgroundPosition",_6ba+" 0px");
dojo.style(this.rowNode,this.isLeftToRight()?"paddingLeft":"paddingRight",_6ba);
dojo.forEach(this.getChildren(),function(_6bb){
_6bb.set("indent",_6b9+1);
});
this._set("indent",_6b9);
},markProcessing:function(){
this.state="LOADING";
this._setExpando(true);
},unmarkProcessing:function(){
this._setExpando(false);
},_updateItemClasses:function(item){
var tree=this.tree,_6bc=tree.model;
if(tree._v10Compat&&item===_6bc.root){
item=null;
}
this._applyClassAndStyle(item,"icon","Icon");
this._applyClassAndStyle(item,"label","Label");
this._applyClassAndStyle(item,"row","Row");
},_applyClassAndStyle:function(item,_6bd,_6be){
var _6bf="_"+_6bd+"Class";
var _6c0=_6bd+"Node";
var _6c1=this[_6bf];
this[_6bf]=this.tree["get"+_6be+"Class"](item,this.isExpanded);
dojo.replaceClass(this[_6c0],this[_6bf]||"",_6c1||"");
dojo.style(this[_6c0],this.tree["get"+_6be+"Style"](item,this.isExpanded)||{});
},_updateLayout:function(){
var _6c2=this.getParent();
if(!_6c2||_6c2.rowNode.style.display=="none"){
dojo.addClass(this.domNode,"dijitTreeIsRoot");
}else{
dojo.toggleClass(this.domNode,"dijitTreeIsLast",!this.getNextSibling());
}
},_setExpando:function(_6c3){
var _6c4=["dijitTreeExpandoLoading","dijitTreeExpandoOpened","dijitTreeExpandoClosed","dijitTreeExpandoLeaf"],_6c5=["*","-","+","*"],idx=_6c3?0:(this.isExpandable?(this.isExpanded?1:2):3);
dojo.replaceClass(this.expandoNode,_6c4[idx],_6c4);
this.expandoNodeText.innerHTML=_6c5[idx];
},expand:function(){
if(this._expandDeferred){
return this._expandDeferred;
}
this._wipeOut&&this._wipeOut.stop();
this.isExpanded=true;
dijit.setWaiState(this.labelNode,"expanded","true");
if(this.tree.showRoot||this!==this.tree.rootNode){
dijit.setWaiRole(this.containerNode,"group");
}
dojo.addClass(this.contentNode,"dijitTreeContentExpanded");
this._setExpando();
this._updateItemClasses(this.item);
if(this==this.tree.rootNode){
dijit.setWaiState(this.tree.domNode,"expanded","true");
}
var def,_6c6=dojo.fx.wipeIn({node:this.containerNode,duration:dijit.defaultDuration,onEnd:function(){
def.callback(true);
}});
def=(this._expandDeferred=new dojo.Deferred(function(){
_6c6.stop();
}));
_6c6.play();
return def;
},collapse:function(){
if(!this.isExpanded){
return;
}
if(this._expandDeferred){
this._expandDeferred.cancel();
delete this._expandDeferred;
}
this.isExpanded=false;
dijit.setWaiState(this.labelNode,"expanded","false");
if(this==this.tree.rootNode){
dijit.setWaiState(this.tree.domNode,"expanded","false");
}
dojo.removeClass(this.contentNode,"dijitTreeContentExpanded");
this._setExpando();
this._updateItemClasses(this.item);
if(!this._wipeOut){
this._wipeOut=dojo.fx.wipeOut({node:this.containerNode,duration:dijit.defaultDuration});
}
this._wipeOut.play();
},indent:0,setChildItems:function(_6c7){
var tree=this.tree,_6c8=tree.model,defs=[];
dojo.forEach(this.getChildren(),function(_6c9){
dijit._Container.prototype.removeChild.call(this,_6c9);
},this);
this.state="LOADED";
if(_6c7&&_6c7.length>0){
this.isExpandable=true;
dojo.forEach(_6c7,function(item){
var id=_6c8.getIdentity(item),_6ca=tree._itemNodesMap[id],node;
if(_6ca){
for(var i=0;i<_6ca.length;i++){
if(_6ca[i]&&!_6ca[i].getParent()){
node=_6ca[i];
node.set("indent",this.indent+1);
break;
}
}
}
if(!node){
node=this.tree._createTreeNode({item:item,tree:tree,isExpandable:_6c8.mayHaveChildren(item),label:tree.getLabel(item),tooltip:tree.getTooltip(item),dir:tree.dir,lang:tree.lang,indent:this.indent+1});
if(_6ca){
_6ca.push(node);
}else{
tree._itemNodesMap[id]=[node];
}
}
this.addChild(node);
if(this.tree.autoExpand||this.tree._state(item)){
defs.push(tree._expandNode(node));
}
},this);
dojo.forEach(this.getChildren(),function(_6cb,idx){
_6cb._updateLayout();
});
}else{
this.isExpandable=false;
}
if(this._setExpando){
this._setExpando(false);
}
this._updateItemClasses(this.item);
if(this==tree.rootNode){
var fc=this.tree.showRoot?this:this.getChildren()[0];
if(fc){
fc.setFocusable(true);
tree.lastFocused=fc;
}else{
tree.domNode.setAttribute("tabIndex","0");
}
}
return new dojo.DeferredList(defs);
},getTreePath:function(){
var node=this;
var path=[];
while(node&&node!==this.tree.rootNode){
path.unshift(node.item);
node=node.getParent();
}
path.unshift(this.tree.rootNode.item);
return path;
},getIdentity:function(){
return this.tree.model.getIdentity(this.item);
},removeChild:function(node){
this.inherited(arguments);
var _6cc=this.getChildren();
if(_6cc.length==0){
this.isExpandable=false;
this.collapse();
}
dojo.forEach(_6cc,function(_6cd){
_6cd._updateLayout();
});
},makeExpandable:function(){
this.isExpandable=true;
this._setExpando(false);
},_onLabelFocus:function(evt){
this.tree._onNodeFocus(this);
},setSelected:function(_6ce){
dijit.setWaiState(this.labelNode,"selected",_6ce);
dojo.toggleClass(this.rowNode,"dijitTreeRowSelected",_6ce);
},setFocusable:function(_6cf){
this.labelNode.setAttribute("tabIndex",_6cf?"0":"-1");
},_onClick:function(evt){
this.tree._onClick(this,evt);
},_onDblClick:function(evt){
this.tree._onDblClick(this,evt);
},_onMouseEnter:function(evt){
this.tree._onNodeMouseEnter(this,evt);
},_onMouseLeave:function(evt){
this.tree._onNodeMouseLeave(this,evt);
}});
dojo.declare("dijit.Tree",[dijit._Widget,dijit._Templated],{store:null,model:null,query:null,label:"",showRoot:true,childrenAttr:["children"],paths:[],path:[],selectedItems:null,selectedItem:null,openOnClick:false,openOnDblClick:false,templateString:dojo.cache("dijit","templates/Tree.html","<div class=\"dijitTree dijitTreeContainer\" role=\"tree\"\r\n\tdojoAttachEvent=\"onkeypress:_onKeyPress\">\r\n\t<div class=\"dijitInline dijitTreeIndent\" style=\"position: absolute; top: -9999px\" dojoAttachPoint=\"indentDetector\"></div>\r\n</div>\r\n"),persist:true,autoExpand:false,dndController:"dijit.tree._dndSelector",dndParams:["onDndDrop","itemCreator","onDndCancel","checkAcceptance","checkItemAcceptance","dragThreshold","betweenThreshold"],onDndDrop:null,itemCreator:null,onDndCancel:null,checkAcceptance:null,checkItemAcceptance:null,dragThreshold:5,betweenThreshold:0,_nodePixelIndent:19,_publish:function(_6d0,_6d1){
dojo.publish(this.id,[dojo.mixin({tree:this,event:_6d0},_6d1||{})]);
},postMixInProperties:function(){
this.tree=this;
if(this.autoExpand){
this.persist=false;
}
this._itemNodesMap={};
if(!this.cookieName){
this.cookieName=this.id+"SaveStateCookie";
}
this._loadDeferred=new dojo.Deferred();
this.inherited(arguments);
},postCreate:function(){
this._initState();
if(!this.model){
this._store2model();
}
this.connect(this.model,"onChange","_onItemChange");
this.connect(this.model,"onChildrenChange","_onItemChildrenChange");
this.connect(this.model,"onDelete","_onItemDelete");
this._load();
this.inherited(arguments);
if(this.dndController){
if(dojo.isString(this.dndController)){
this.dndController=dojo.getObject(this.dndController);
}
var _6d2={};
for(var i=0;i<this.dndParams.length;i++){
if(this[this.dndParams[i]]){
_6d2[this.dndParams[i]]=this[this.dndParams[i]];
}
}
this.dndController=new this.dndController(this,_6d2);
}
},_store2model:function(){
this._v10Compat=true;
dojo.deprecated("Tree: from version 2.0, should specify a model object rather than a store/query");
var _6d3={id:this.id+"_ForestStoreModel",store:this.store,query:this.query,childrenAttrs:this.childrenAttr};
if(this.params.mayHaveChildren){
_6d3.mayHaveChildren=dojo.hitch(this,"mayHaveChildren");
}
if(this.params.getItemChildren){
_6d3.getChildren=dojo.hitch(this,function(item,_6d4,_6d5){
this.getItemChildren((this._v10Compat&&item===this.model.root)?null:item,_6d4,_6d5);
});
}
this.model=new dijit.tree.ForestStoreModel(_6d3);
this.showRoot=Boolean(this.label);
},onLoad:function(){
},_load:function(){
this.model.getRoot(dojo.hitch(this,function(item){
var rn=(this.rootNode=this.tree._createTreeNode({item:item,tree:this,isExpandable:true,label:this.label||this.getLabel(item),indent:this.showRoot?0:-1}));
if(!this.showRoot){
rn.rowNode.style.display="none";
dijit.setWaiRole(this.domNode,"presentation");
dijit.setWaiRole(rn.labelNode,"presentation");
dijit.setWaiRole(rn.containerNode,"tree");
}
this.domNode.appendChild(rn.domNode);
var _6d6=this.model.getIdentity(item);
if(this._itemNodesMap[_6d6]){
this._itemNodesMap[_6d6].push(rn);
}else{
this._itemNodesMap[_6d6]=[rn];
}
rn._updateLayout();
this._expandNode(rn).addCallback(dojo.hitch(this,function(){
this._loadDeferred.callback(true);
this.onLoad();
}));
}),function(err){
console.error(this,": error loading root: ",err);
});
},getNodesByItem:function(item){
if(!item){
return [];
}
var _6d7=dojo.isString(item)?item:this.model.getIdentity(item);
return [].concat(this._itemNodesMap[_6d7]);
},_setSelectedItemAttr:function(item){
this.set("selectedItems",[item]);
},_setSelectedItemsAttr:function(_6d8){
var tree=this;
this._loadDeferred.addCallback(dojo.hitch(this,function(){
var _6d9=dojo.map(_6d8,function(item){
return (!item||dojo.isString(item))?item:tree.model.getIdentity(item);
});
var _6da=[];
dojo.forEach(_6d9,function(id){
_6da=_6da.concat(tree._itemNodesMap[id]||[]);
});
this.set("selectedNodes",_6da);
}));
},_setPathAttr:function(path){
if(path.length){
return this.set("paths",[path]);
}else{
return this.set("paths",[]);
}
},_setPathsAttr:function(_6db){
var tree=this;
return new dojo.DeferredList(dojo.map(_6db,function(path){
var d=new dojo.Deferred();
path=dojo.map(path,function(item){
return dojo.isString(item)?item:tree.model.getIdentity(item);
});
if(path.length){
tree._loadDeferred.addCallback(function(){
_6dc(path,[tree.rootNode],d);
});
}else{
d.errback("Empty path");
}
return d;
})).addCallback(_6dd);
function _6dc(path,_6de,def){
var _6df=path.shift();
var _6e0=dojo.filter(_6de,function(node){
return node.getIdentity()==_6df;
})[0];
if(!!_6e0){
if(path.length){
tree._expandNode(_6e0).addCallback(function(){
_6dc(path,_6e0.getChildren(),def);
});
}else{
def.callback(_6e0);
}
}else{
def.errback("Could not expand path at "+_6df);
}
};
function _6dd(_6e1){
tree.set("selectedNodes",dojo.map(dojo.filter(_6e1,function(x){
return x[0];
}),function(x){
return x[1];
}));
};
},_setSelectedNodeAttr:function(node){
this.set("selectedNodes",[node]);
},_setSelectedNodesAttr:function(_6e2){
this._loadDeferred.addCallback(dojo.hitch(this,function(){
this.dndController.setSelection(_6e2);
}));
},mayHaveChildren:function(item){
},getItemChildren:function(_6e3,_6e4){
},getLabel:function(item){
return this.model.getLabel(item);
},getIconClass:function(item,_6e5){
return (!item||this.model.mayHaveChildren(item))?(_6e5?"dijitFolderOpened":"dijitFolderClosed"):"dijitLeaf";
},getLabelClass:function(item,_6e6){
},getRowClass:function(item,_6e7){
},getIconStyle:function(item,_6e8){
},getLabelStyle:function(item,_6e9){
},getRowStyle:function(item,_6ea){
},getTooltip:function(item){
return "";
},_onKeyPress:function(e){
if(e.altKey){
return;
}
var dk=dojo.keys;
var _6eb=dijit.getEnclosingWidget(e.target);
if(!_6eb){
return;
}
var key=e.charOrCode;
if(typeof key=="string"&&key!=" "){
if(!e.altKey&&!e.ctrlKey&&!e.shiftKey&&!e.metaKey){
this._onLetterKeyNav({node:_6eb,key:key.toLowerCase()});
dojo.stopEvent(e);
}
}else{
if(this._curSearch){
clearTimeout(this._curSearch.timer);
delete this._curSearch;
}
var map=this._keyHandlerMap;
if(!map){
map={};
map[dk.ENTER]="_onEnterKey";
map[dk.SPACE]=map[" "]="_onEnterKey";
map[this.isLeftToRight()?dk.LEFT_ARROW:dk.RIGHT_ARROW]="_onLeftArrow";
map[this.isLeftToRight()?dk.RIGHT_ARROW:dk.LEFT_ARROW]="_onRightArrow";
map[dk.UP_ARROW]="_onUpArrow";
map[dk.DOWN_ARROW]="_onDownArrow";
map[dk.HOME]="_onHomeKey";
map[dk.END]="_onEndKey";
this._keyHandlerMap=map;
}
if(this._keyHandlerMap[key]){
this[this._keyHandlerMap[key]]({node:_6eb,item:_6eb.item,evt:e});
dojo.stopEvent(e);
}
}
},_onEnterKey:function(_6ec){
this._publish("execute",{item:_6ec.item,node:_6ec.node});
this.dndController.userSelect(_6ec.node,dojo.isCopyKey(_6ec.evt),_6ec.evt.shiftKey);
this.onClick(_6ec.item,_6ec.node,_6ec.evt);
},_onDownArrow:function(_6ed){
var node=this._getNextNode(_6ed.node);
if(node&&node.isTreeNode){
this.focusNode(node);
}
},_onUpArrow:function(_6ee){
var node=_6ee.node;
var _6ef=node.getPreviousSibling();
if(_6ef){
node=_6ef;
while(node.isExpandable&&node.isExpanded&&node.hasChildren()){
var _6f0=node.getChildren();
node=_6f0[_6f0.length-1];
}
}else{
var _6f1=node.getParent();
if(!(!this.showRoot&&_6f1===this.rootNode)){
node=_6f1;
}
}
if(node&&node.isTreeNode){
this.focusNode(node);
}
},_onRightArrow:function(_6f2){
var node=_6f2.node;
if(node.isExpandable&&!node.isExpanded){
this._expandNode(node);
}else{
if(node.hasChildren()){
node=node.getChildren()[0];
if(node&&node.isTreeNode){
this.focusNode(node);
}
}
}
},_onLeftArrow:function(_6f3){
var node=_6f3.node;
if(node.isExpandable&&node.isExpanded){
this._collapseNode(node);
}else{
var _6f4=node.getParent();
if(_6f4&&_6f4.isTreeNode&&!(!this.showRoot&&_6f4===this.rootNode)){
this.focusNode(_6f4);
}
}
},_onHomeKey:function(){
var node=this._getRootOrFirstNode();
if(node){
this.focusNode(node);
}
},_onEndKey:function(_6f5){
var node=this.rootNode;
while(node.isExpanded){
var c=node.getChildren();
node=c[c.length-1];
}
if(node&&node.isTreeNode){
this.focusNode(node);
}
},multiCharSearchDuration:250,_onLetterKeyNav:function(_6f6){
var cs=this._curSearch;
if(cs){
cs.pattern=cs.pattern+_6f6.key;
clearTimeout(cs.timer);
}else{
cs=this._curSearch={pattern:_6f6.key,startNode:_6f6.node};
}
var self=this;
cs.timer=setTimeout(function(){
delete self._curSearch;
},this.multiCharSearchDuration);
var node=cs.startNode;
do{
node=this._getNextNode(node);
if(!node){
node=this._getRootOrFirstNode();
}
}while(node!==cs.startNode&&(node.label.toLowerCase().substr(0,cs.pattern.length)!=cs.pattern));
if(node&&node.isTreeNode){
if(node!==cs.startNode){
this.focusNode(node);
}
}
},isExpandoNode:function(node,_6f7){
return dojo.isDescendant(node,_6f7.expandoNode);
},_onClick:function(_6f8,e){
var _6f9=e.target,_6fa=this.isExpandoNode(_6f9,_6f8);
if((this.openOnClick&&_6f8.isExpandable)||_6fa){
if(_6f8.isExpandable){
this._onExpandoClick({node:_6f8});
}
}else{
this._publish("execute",{item:_6f8.item,node:_6f8,evt:e});
this.onClick(_6f8.item,_6f8,e);
this.focusNode(_6f8);
}
dojo.stopEvent(e);
},_onDblClick:function(_6fb,e){
var _6fc=e.target,_6fd=(_6fc==_6fb.expandoNode||_6fc==_6fb.expandoNodeText);
if((this.openOnDblClick&&_6fb.isExpandable)||_6fd){
if(_6fb.isExpandable){
this._onExpandoClick({node:_6fb});
}
}else{
this._publish("execute",{item:_6fb.item,node:_6fb,evt:e});
this.onDblClick(_6fb.item,_6fb,e);
this.focusNode(_6fb);
}
dojo.stopEvent(e);
},_onExpandoClick:function(_6fe){
var node=_6fe.node;
this.focusNode(node);
if(node.isExpanded){
this._collapseNode(node);
}else{
this._expandNode(node);
}
},onClick:function(item,node,evt){
},onDblClick:function(item,node,evt){
},onOpen:function(item,node){
},onClose:function(item,node){
},_getNextNode:function(node){
if(node.isExpandable&&node.isExpanded&&node.hasChildren()){
return node.getChildren()[0];
}else{
while(node&&node.isTreeNode){
var _6ff=node.getNextSibling();
if(_6ff){
return _6ff;
}
node=node.getParent();
}
return null;
}
},_getRootOrFirstNode:function(){
return this.showRoot?this.rootNode:this.rootNode.getChildren()[0];
},_collapseNode:function(node){
if(node._expandNodeDeferred){
delete node._expandNodeDeferred;
}
if(node.isExpandable){
if(node.state=="LOADING"){
return;
}
node.collapse();
this.onClose(node.item,node);
if(node.item){
this._state(node.item,false);
this._saveState();
}
}
},_expandNode:function(node,_700){
if(node._expandNodeDeferred&&!_700){
return node._expandNodeDeferred;
}
var _701=this.model,item=node.item,_702=this;
switch(node.state){
case "UNCHECKED":
node.markProcessing();
var def=(node._expandNodeDeferred=new dojo.Deferred());
_701.getChildren(item,function(_703){
node.unmarkProcessing();
var scid=node.setChildItems(_703);
var ed=_702._expandNode(node,true);
scid.addCallback(function(){
ed.addCallback(function(){
def.callback();
});
});
},function(err){
console.error(_702,": error loading root children: ",err);
});
break;
default:
def=(node._expandNodeDeferred=node.expand());
this.onOpen(node.item,node);
if(item){
this._state(item,true);
this._saveState();
}
}
return def;
},focusNode:function(node){
dijit.focus(node.labelNode);
},_onNodeFocus:function(node){
if(node&&node!=this.lastFocused){
if(this.lastFocused&&!this.lastFocused._destroyed){
this.lastFocused.setFocusable(false);
}
node.setFocusable(true);
this.lastFocused=node;
}
},_onNodeMouseEnter:function(node){
},_onNodeMouseLeave:function(node){
},_onItemChange:function(item){
var _704=this.model,_705=_704.getIdentity(item),_706=this._itemNodesMap[_705];
if(_706){
var _707=this.getLabel(item),_708=this.getTooltip(item);
dojo.forEach(_706,function(node){
node.set({item:item,label:_707,tooltip:_708});
node._updateItemClasses(item);
});
}
},_onItemChildrenChange:function(_709,_70a){
var _70b=this.model,_70c=_70b.getIdentity(_709),_70d=this._itemNodesMap[_70c];
if(_70d){
dojo.forEach(_70d,function(_70e){
_70e.setChildItems(_70a);
});
}
},_onItemDelete:function(item){
var _70f=this.model,_710=_70f.getIdentity(item),_711=this._itemNodesMap[_710];
if(_711){
dojo.forEach(_711,function(node){
this.dndController.removeTreeNode(node);
var _712=node.getParent();
if(_712){
_712.removeChild(node);
}
node.destroyRecursive();
},this);
delete this._itemNodesMap[_710];
}
},_initState:function(){
if(this.persist){
var _713=dojo.cookie(this.cookieName);
this._openedItemIds={};
if(_713){
dojo.forEach(_713.split(","),function(item){
this._openedItemIds[item]=true;
},this);
}
}
},_state:function(item,_714){
if(!this.persist){
return false;
}
var id=this.model.getIdentity(item);
if(arguments.length===1){
return this._openedItemIds[id];
}
if(_714){
this._openedItemIds[id]=true;
}else{
delete this._openedItemIds[id];
}
},_saveState:function(){
if(!this.persist){
return;
}
var ary=[];
for(var id in this._openedItemIds){
ary.push(id);
}
dojo.cookie(this.cookieName,ary.join(","),{expires:365});
},destroy:function(){
if(this._curSearch){
clearTimeout(this._curSearch.timer);
delete this._curSearch;
}
if(this.rootNode){
this.rootNode.destroyRecursive();
}
if(this.dndController&&!dojo.isString(this.dndController)){
this.dndController.destroy();
}
this.rootNode=null;
this.inherited(arguments);
},destroyRecursive:function(){
this.destroy();
},resize:function(_715){
if(_715){
dojo.marginBox(this.domNode,_715);
}
this._nodePixelIndent=dojo._getMarginSize(this.tree.indentDetector).w;
if(this.tree.rootNode){
this.tree.rootNode.set("indent",this.showRoot?0:-1);
}
},_createTreeNode:function(args){
return new dijit._TreeNode(args);
}});
}
if(!dojo._hasResource["dojox.xml.parser"]){
dojo._hasResource["dojox.xml.parser"]=true;
dojo.provide("dojox.xml.parser");
dojox.xml.parser.parse=function(str,_716){
var _717=dojo.doc;
var doc;
_716=_716||"text/xml";
if(str&&dojo.trim(str)&&"DOMParser" in dojo.global){
var _718=new DOMParser();
doc=_718.parseFromString(str,_716);
var de=doc.documentElement;
var _719="http://www.mozilla.org/newlayout/xml/parsererror.xml";
if(de.nodeName=="parsererror"&&de.namespaceURI==_719){
var _71a=de.getElementsByTagNameNS(_719,"sourcetext")[0];
if(_71a){
_71a=_71a.firstChild.data;
}
throw new Error("Error parsing text "+de.firstChild.data+" \n"+_71a);
}
return doc;
}else{
if("ActiveXObject" in dojo.global){
var ms=function(n){
return "MSXML"+n+".DOMDocument";
};
var dp=["Microsoft.XMLDOM",ms(6),ms(4),ms(3),ms(2)];
dojo.some(dp,function(p){
try{
doc=new ActiveXObject(p);
}
catch(e){
return false;
}
return true;
});
if(str&&doc){
doc.async=false;
doc.loadXML(str);
var pe=doc.parseError;
if(pe.errorCode!==0){
throw new Error("Line: "+pe.line+"\n"+"Col: "+pe.linepos+"\n"+"Reason: "+pe.reason+"\n"+"Error Code: "+pe.errorCode+"\n"+"Source: "+pe.srcText);
}
}
if(doc){
return doc;
}
}else{
if(_717.implementation&&_717.implementation.createDocument){
if(str&&dojo.trim(str)&&_717.createElement){
var tmp=_717.createElement("xml");
tmp.innerHTML=str;
var _71b=_717.implementation.createDocument("foo","",null);
dojo.forEach(tmp.childNodes,function(_71c){
_71b.importNode(_71c,true);
});
return _71b;
}else{
return _717.implementation.createDocument("","",null);
}
}
}
}
return null;
};
dojox.xml.parser.textContent=function(node,text){
if(arguments.length>1){
var _71d=node.ownerDocument||dojo.doc;
dojox.xml.parser.replaceChildren(node,_71d.createTextNode(text));
return text;
}else{
if(node.textContent!==undefined){
return node.textContent;
}
var _71e="";
if(node){
dojo.forEach(node.childNodes,function(_71f){
switch(_71f.nodeType){
case 1:
case 5:
_71e+=dojox.xml.parser.textContent(_71f);
break;
case 3:
case 2:
case 4:
_71e+=_71f.nodeValue;
}
});
}
return _71e;
}
};
dojox.xml.parser.replaceChildren=function(node,_720){
var _721=[];
if(dojo.isIE){
dojo.forEach(node.childNodes,function(_722){
_721.push(_722);
});
}
dojox.xml.parser.removeChildren(node);
dojo.forEach(_721,dojo.destroy);
if(!dojo.isArray(_720)){
node.appendChild(_720);
}else{
dojo.forEach(_720,function(_723){
node.appendChild(_723);
});
}
};
dojox.xml.parser.removeChildren=function(node){
var _724=node.childNodes.length;
while(node.hasChildNodes()){
node.removeChild(node.firstChild);
}
return _724;
};
dojox.xml.parser.innerXML=function(node){
if(node.innerXML){
return node.innerXML;
}else{
if(node.xml){
return node.xml;
}else{
if(typeof XMLSerializer!="undefined"){
return (new XMLSerializer()).serializeToString(node);
}
}
}
return null;
};
}
if(!dojo._hasResource["dojox.data.dom"]){
dojo._hasResource["dojox.data.dom"]=true;
dojo.provide("dojox.data.dom");
dojo.deprecated("dojox.data.dom","Use dojox.xml.parser instead.","2.0");
dojox.data.dom.createDocument=function(str,_725){
dojo.deprecated("dojox.data.dom.createDocument()","Use dojox.xml.parser.parse() instead.","2.0");
try{
return dojox.xml.parser.parse(str,_725);
}
catch(e){
return null;
}
};
dojox.data.dom.textContent=function(node,text){
dojo.deprecated("dojox.data.dom.textContent()","Use dojox.xml.parser.textContent() instead.","2.0");
if(arguments.length>1){
return dojox.xml.parser.textContent(node,text);
}else{
return dojox.xml.parser.textContent(node);
}
};
dojox.data.dom.replaceChildren=function(node,_726){
dojo.deprecated("dojox.data.dom.replaceChildren()","Use dojox.xml.parser.replaceChildren() instead.","2.0");
dojox.xml.parser.replaceChildren(node,_726);
};
dojox.data.dom.removeChildren=function(node){
dojo.deprecated("dojox.data.dom.removeChildren()","Use dojox.xml.parser.removeChildren() instead.","2.0");
return dojox.xml.parser.removeChildren(node);
};
dojox.data.dom.innerXML=function(node){
dojo.deprecated("dojox.data.dom.innerXML()","Use dojox.xml.parser.innerXML() instead.","2.0");
return dojox.xml.parser.innerXML(node);
};
}
if(!dojo._hasResource["dojox.data.XmlStore"]){
dojo._hasResource["dojox.data.XmlStore"]=true;
dojo.provide("dojox.data.XmlStore");
dojo.provide("dojox.data.XmlItem");
dojo.declare("dojox.data.XmlStore",null,{constructor:function(args){
if(args){
this.url=args.url;
this.rootItem=(args.rootItem||args.rootitem||this.rootItem);
this.keyAttribute=(args.keyAttribute||args.keyattribute||this.keyAttribute);
this._attributeMap=(args.attributeMap||args.attributemap);
this.label=args.label||this.label;
this.sendQuery=(args.sendQuery||args.sendquery||this.sendQuery);
if("urlPreventCache" in args){
this.urlPreventCache=args.urlPreventCache?true:false;
}
}
this._newItems=[];
this._deletedItems=[];
this._modifiedItems=[];
},url:"",rootItem:"",keyAttribute:"",label:"",sendQuery:false,attributeMap:null,urlPreventCache:true,getValue:function(item,_727,_728){
var _729=item.element;
var i;
var node;
if(_727==="tagName"){
return _729.nodeName;
}else{
if(_727==="childNodes"){
for(i=0;i<_729.childNodes.length;i++){
node=_729.childNodes[i];
if(node.nodeType===1){
return this._getItem(node);
}
}
return _728;
}else{
if(_727==="text()"){
for(i=0;i<_729.childNodes.length;i++){
node=_729.childNodes[i];
if(node.nodeType===3||node.nodeType===4){
return node.nodeValue;
}
}
return _728;
}else{
_727=this._getAttribute(_729.nodeName,_727);
if(_727.charAt(0)==="@"){
var name=_727.substring(1);
var _72a=_729.getAttribute(name);
return (_72a)?_72a:_728;
}else{
for(i=0;i<_729.childNodes.length;i++){
node=_729.childNodes[i];
if(node.nodeType===1&&node.nodeName===_727){
return this._getItem(node);
}
}
return _728;
}
}
}
}
},getValues:function(item,_72b){
var _72c=item.element;
var _72d=[];
var i;
var node;
if(_72b==="tagName"){
return [_72c.nodeName];
}else{
if(_72b==="childNodes"){
for(i=0;i<_72c.childNodes.length;i++){
node=_72c.childNodes[i];
if(node.nodeType===1){
_72d.push(this._getItem(node));
}
}
return _72d;
}else{
if(_72b==="text()"){
var ec=_72c.childNodes;
for(i=0;i<ec.length;i++){
node=ec[i];
if(node.nodeType===3||node.nodeType===4){
_72d.push(node.nodeValue);
}
}
return _72d;
}else{
_72b=this._getAttribute(_72c.nodeName,_72b);
if(_72b.charAt(0)==="@"){
var name=_72b.substring(1);
var _72e=_72c.getAttribute(name);
return (_72e!==undefined)?[_72e]:[];
}else{
for(i=0;i<_72c.childNodes.length;i++){
node=_72c.childNodes[i];
if(node.nodeType===1&&node.nodeName===_72b){
_72d.push(this._getItem(node));
}
}
return _72d;
}
}
}
}
},getAttributes:function(item){
var _72f=item.element;
var _730=[];
var i;
_730.push("tagName");
if(_72f.childNodes.length>0){
var _731={};
var _732=true;
var text=false;
for(i=0;i<_72f.childNodes.length;i++){
var node=_72f.childNodes[i];
if(node.nodeType===1){
var name=node.nodeName;
if(!_731[name]){
_730.push(name);
_731[name]=name;
}
_732=true;
}else{
if(node.nodeType===3){
text=true;
}
}
}
if(_732){
_730.push("childNodes");
}
if(text){
_730.push("text()");
}
}
for(i=0;i<_72f.attributes.length;i++){
_730.push("@"+_72f.attributes[i].nodeName);
}
if(this._attributeMap){
for(var key in this._attributeMap){
i=key.indexOf(".");
if(i>0){
var _733=key.substring(0,i);
if(_733===_72f.nodeName){
_730.push(key.substring(i+1));
}
}else{
_730.push(key);
}
}
}
return _730;
},hasAttribute:function(item,_734){
return (this.getValue(item,_734)!==undefined);
},containsValue:function(item,_735,_736){
var _737=this.getValues(item,_735);
for(var i=0;i<_737.length;i++){
if((typeof _736==="string")){
if(_737[i].toString&&_737[i].toString()===_736){
return true;
}
}else{
if(_737[i]===_736){
return true;
}
}
}
return false;
},isItem:function(_738){
if(_738&&_738.element&&_738.store&&_738.store===this){
return true;
}
return false;
},isItemLoaded:function(_739){
return this.isItem(_739);
},loadItem:function(_73a){
},getFeatures:function(){
var _73b={"dojo.data.api.Read":true,"dojo.data.api.Write":true};
if(!this.sendQuery||this.keyAttribute!==""){
_73b["dojo.data.api.Identity"]=true;
}
return _73b;
},getLabel:function(item){
if((this.label!=="")&&this.isItem(item)){
var _73c=this.getValue(item,this.label);
if(_73c){
return _73c.toString();
}
}
return undefined;
},getLabelAttributes:function(item){
if(this.label!==""){
return [this.label];
}
return null;
},_fetchItems:function(_73d,_73e,_73f){
var url=this._getFetchUrl(_73d);
console.log("XmlStore._fetchItems(): url="+url);
if(!url){
_73f(new Error("No URL specified."));
return;
}
var _740=(!this.sendQuery?_73d:{});
var self=this;
var _741={url:url,handleAs:"xml",preventCache:self.urlPreventCache};
var _742=dojo.xhrGet(_741);
_742.addCallback(function(data){
var _743=self._getItems(data,_740);
console.log("XmlStore._fetchItems(): length="+(_743?_743.length:0));
if(_743&&_743.length>0){
_73e(_743,_73d);
}else{
_73e([],_73d);
}
});
_742.addErrback(function(data){
_73f(data,_73d);
});
},_getFetchUrl:function(_744){
if(!this.sendQuery){
return this.url;
}
var _745=_744.query;
if(!_745){
return this.url;
}
if(dojo.isString(_745)){
return this.url+_745;
}
var _746="";
for(var name in _745){
var _747=_745[name];
if(_747){
if(_746){
_746+="&";
}
_746+=(name+"="+_747);
}
}
if(!_746){
return this.url;
}
var _748=this.url;
if(_748.indexOf("?")<0){
_748+="?";
}else{
_748+="&";
}
return _748+_746;
},_getItems:function(_749,_74a){
var _74b=null;
if(_74a){
_74b=_74a.query;
}
var _74c=[];
var _74d=null;
if(this.rootItem!==""){
_74d=dojo.query(this.rootItem,_749);
}else{
_74d=_749.documentElement.childNodes;
}
var deep=_74a.queryOptions?_74a.queryOptions.deep:false;
if(deep){
_74d=this._flattenNodes(_74d);
}
for(var i=0;i<_74d.length;i++){
var node=_74d[i];
if(node.nodeType!=1){
continue;
}
var item=this._getItem(node);
if(_74b){
var _74e=_74a.queryOptions?_74a.queryOptions.ignoreCase:false;
var _74f;
var _750=false;
var j;
var _751=true;
var _752={};
for(var key in _74b){
_74f=_74b[key];
if(typeof _74f==="string"){
_752[key]=dojo.data.util.filter.patternToRegExp(_74f,_74e);
}
}
for(var _753 in _74b){
_751=false;
var _754=this.getValues(item,_753);
for(j=0;j<_754.length;j++){
_74f=_754[j];
if(_74f){
var _755=_74b[_753];
if((typeof _74f)==="string"&&(_752[_753])){
if((_74f.match(_752[_753]))!==null){
_750=true;
}else{
_750=false;
}
}else{
if((typeof _74f)==="object"){
if(_74f.toString&&(_752[_753])){
var _756=_74f.toString();
if((_756.match(_752[_753]))!==null){
_750=true;
}else{
_750=false;
}
}else{
if(_755==="*"||_755===_74f){
_750=true;
}else{
_750=false;
}
}
}
}
}
if(_750){
break;
}
}
if(!_750){
break;
}
}
if(_751||_750){
_74c.push(item);
}
}else{
_74c.push(item);
}
}
dojo.forEach(_74c,function(item){
if(item.element.parentNode){
item.element.parentNode.removeChild(item.element);
}
},this);
return _74c;
},_flattenNodes:function(_757){
var _758=[];
if(_757){
var i;
for(i=0;i<_757.length;i++){
var node=_757[i];
_758.push(node);
if(node.childNodes&&node.childNodes.length>0){
_758=_758.concat(this._flattenNodes(node.childNodes));
}
}
}
return _758;
},close:function(_759){
},newItem:function(_75a,_75b){
console.log("XmlStore.newItem()");
_75a=(_75a||{});
var _75c=_75a.tagName;
if(!_75c){
_75c=this.rootItem;
if(_75c===""){
return null;
}
}
var _75d=this._getDocument();
var _75e=_75d.createElement(_75c);
for(var _75f in _75a){
var text;
if(_75f==="tagName"){
continue;
}else{
if(_75f==="text()"){
text=_75d.createTextNode(_75a[_75f]);
_75e.appendChild(text);
}else{
_75f=this._getAttribute(_75c,_75f);
if(_75f.charAt(0)==="@"){
var name=_75f.substring(1);
_75e.setAttribute(name,_75a[_75f]);
}else{
var _760=_75d.createElement(_75f);
text=_75d.createTextNode(_75a[_75f]);
_760.appendChild(text);
_75e.appendChild(_760);
}
}
}
}
var item=this._getItem(_75e);
this._newItems.push(item);
var _761=null;
if(_75b&&_75b.parent&&_75b.attribute){
_761={item:_75b.parent,attribute:_75b.attribute,oldValue:undefined};
var _762=this.getValues(_75b.parent,_75b.attribute);
if(_762&&_762.length>0){
var _763=_762.slice(0,_762.length);
if(_762.length===1){
_761.oldValue=_762[0];
}else{
_761.oldValue=_762.slice(0,_762.length);
}
_763.push(item);
this.setValues(_75b.parent,_75b.attribute,_763);
_761.newValue=this.getValues(_75b.parent,_75b.attribute);
}else{
this.setValues(_75b.parent,_75b.attribute,item);
_761.newValue=item;
}
}
return item;
},deleteItem:function(item){
console.log("XmlStore.deleteItem()");
var _764=item.element;
if(_764.parentNode){
this._backupItem(item);
_764.parentNode.removeChild(_764);
return true;
}
this._forgetItem(item);
this._deletedItems.push(item);
return true;
},setValue:function(item,_765,_766){
if(_765==="tagName"){
return false;
}
this._backupItem(item);
var _767=item.element;
var _768;
var text;
if(_765==="childNodes"){
_768=_766.element;
_767.appendChild(_768);
}else{
if(_765==="text()"){
while(_767.firstChild){
_767.removeChild(_767.firstChild);
}
text=this._getDocument(_767).createTextNode(_766);
_767.appendChild(text);
}else{
_765=this._getAttribute(_767.nodeName,_765);
if(_765.charAt(0)==="@"){
var name=_765.substring(1);
_767.setAttribute(name,_766);
}else{
for(var i=0;i<_767.childNodes.length;i++){
var node=_767.childNodes[i];
if(node.nodeType===1&&node.nodeName===_765){
_768=node;
break;
}
}
var _769=this._getDocument(_767);
if(_768){
while(_768.firstChild){
_768.removeChild(_768.firstChild);
}
}else{
_768=_769.createElement(_765);
_767.appendChild(_768);
}
text=_769.createTextNode(_766);
_768.appendChild(text);
}
}
}
return true;
},setValues:function(item,_76a,_76b){
if(_76a==="tagName"){
return false;
}
this._backupItem(item);
var _76c=item.element;
var i;
var _76d;
var text;
if(_76a==="childNodes"){
while(_76c.firstChild){
_76c.removeChild(_76c.firstChild);
}
for(i=0;i<_76b.length;i++){
_76d=_76b[i].element;
_76c.appendChild(_76d);
}
}else{
if(_76a==="text()"){
while(_76c.firstChild){
_76c.removeChild(_76c.firstChild);
}
var _76e="";
for(i=0;i<_76b.length;i++){
_76e+=_76b[i];
}
text=this._getDocument(_76c).createTextNode(_76e);
_76c.appendChild(text);
}else{
_76a=this._getAttribute(_76c.nodeName,_76a);
if(_76a.charAt(0)==="@"){
var name=_76a.substring(1);
_76c.setAttribute(name,_76b[0]);
}else{
for(i=_76c.childNodes.length-1;i>=0;i--){
var node=_76c.childNodes[i];
if(node.nodeType===1&&node.nodeName===_76a){
_76c.removeChild(node);
}
}
var _76f=this._getDocument(_76c);
for(i=0;i<_76b.length;i++){
_76d=_76f.createElement(_76a);
text=_76f.createTextNode(_76b[i]);
_76d.appendChild(text);
_76c.appendChild(_76d);
}
}
}
}
return true;
},unsetAttribute:function(item,_770){
if(_770==="tagName"){
return false;
}
this._backupItem(item);
var _771=item.element;
if(_770==="childNodes"||_770==="text()"){
while(_771.firstChild){
_771.removeChild(_771.firstChild);
}
}else{
_770=this._getAttribute(_771.nodeName,_770);
if(_770.charAt(0)==="@"){
var name=_770.substring(1);
_771.removeAttribute(name);
}else{
for(var i=_771.childNodes.length-1;i>=0;i--){
var node=_771.childNodes[i];
if(node.nodeType===1&&node.nodeName===_770){
_771.removeChild(node);
}
}
}
}
return true;
},save:function(_772){
if(!_772){
_772={};
}
var i;
for(i=0;i<this._modifiedItems.length;i++){
this._saveItem(this._modifiedItems[i],_772,"PUT");
}
for(i=0;i<this._newItems.length;i++){
var item=this._newItems[i];
if(item.element.parentNode){
this._newItems.splice(i,1);
i--;
continue;
}
this._saveItem(this._newItems[i],_772,"POST");
}
for(i=0;i<this._deletedItems.length;i++){
this._saveItem(this._deletedItems[i],_772,"DELETE");
}
},revert:function(){
console.log("XmlStore.revert() _newItems="+this._newItems.length);
console.log("XmlStore.revert() _deletedItems="+this._deletedItems.length);
console.log("XmlStore.revert() _modifiedItems="+this._modifiedItems.length);
this._newItems=[];
this._restoreItems(this._deletedItems);
this._deletedItems=[];
this._restoreItems(this._modifiedItems);
this._modifiedItems=[];
return true;
},isDirty:function(item){
if(item){
var _773=this._getRootElement(item.element);
return (this._getItemIndex(this._newItems,_773)>=0||this._getItemIndex(this._deletedItems,_773)>=0||this._getItemIndex(this._modifiedItems,_773)>=0);
}else{
return (this._newItems.length>0||this._deletedItems.length>0||this._modifiedItems.length>0);
}
},_saveItem:function(item,_774,_775){
var url;
var _776;
if(_775==="PUT"){
url=this._getPutUrl(item);
}else{
if(_775==="DELETE"){
url=this._getDeleteUrl(item);
}else{
url=this._getPostUrl(item);
}
}
if(!url){
if(_774.onError){
_776=_774.scope||dojo.global;
_774.onError.call(_776,new Error("No URL for saving content: "+this._getPostContent(item)));
}
return;
}
var _777={url:url,method:(_775||"POST"),contentType:"text/xml",handleAs:"xml"};
var _778;
if(_775==="PUT"){
_777.putData=this._getPutContent(item);
_778=dojo.rawXhrPut(_777);
}else{
if(_775==="DELETE"){
_778=dojo.xhrDelete(_777);
}else{
_777.postData=this._getPostContent(item);
_778=dojo.rawXhrPost(_777);
}
}
_776=(_774.scope||dojo.global);
var self=this;
_778.addCallback(function(data){
self._forgetItem(item);
if(_774.onComplete){
_774.onComplete.call(_776);
}
});
_778.addErrback(function(_779){
if(_774.onError){
_774.onError.call(_776,_779);
}
});
},_getPostUrl:function(item){
return this.url;
},_getPutUrl:function(item){
return this.url;
},_getDeleteUrl:function(item){
var url=this.url;
if(item&&this.keyAttribute!==""){
var _77a=this.getValue(item,this.keyAttribute);
if(_77a){
var key=this.keyAttribute.charAt(0)==="@"?this.keyAttribute.substring(1):this.keyAttribute;
url+=url.indexOf("?")<0?"?":"&";
url+=key+"="+_77a;
}
}
return url;
},_getPostContent:function(item){
var _77b=item.element;
var _77c="<?xml version=\"1.0\"?>";
return _77c+dojox.xml.parser.innerXML(_77b);
},_getPutContent:function(item){
var _77d=item.element;
var _77e="<?xml version=\"1.0\"?>";
return _77e+dojox.xml.parser.innerXML(_77d);
},_getAttribute:function(_77f,_780){
if(this._attributeMap){
var key=_77f+"."+_780;
var _781=this._attributeMap[key];
if(_781){
_780=_781;
}else{
_781=this._attributeMap[_780];
if(_781){
_780=_781;
}
}
}
return _780;
},_getItem:function(_782){
try{
var q=null;
if(this.keyAttribute===""){
q=this._getXPath(_782);
}
return new dojox.data.XmlItem(_782,this,q);
}
catch(e){
console.log(e);
}
return null;
},_getItemIndex:function(_783,_784){
for(var i=0;i<_783.length;i++){
if(_783[i].element===_784){
return i;
}
}
return -1;
},_backupItem:function(item){
var _785=this._getRootElement(item.element);
if(this._getItemIndex(this._newItems,_785)>=0||this._getItemIndex(this._modifiedItems,_785)>=0){
return;
}
if(_785!=item.element){
item=this._getItem(_785);
}
item._backup=_785.cloneNode(true);
this._modifiedItems.push(item);
},_restoreItems:function(_786){
dojo.forEach(_786,function(item){
if(item._backup){
item.element=item._backup;
item._backup=null;
}
},this);
},_forgetItem:function(item){
var _787=item.element;
var _788=this._getItemIndex(this._newItems,_787);
if(_788>=0){
this._newItems.splice(_788,1);
}
_788=this._getItemIndex(this._deletedItems,_787);
if(_788>=0){
this._deletedItems.splice(_788,1);
}
_788=this._getItemIndex(this._modifiedItems,_787);
if(_788>=0){
this._modifiedItems.splice(_788,1);
}
},_getDocument:function(_789){
if(_789){
return _789.ownerDocument;
}else{
if(!this._document){
return dojox.xml.parser.parse();
}
}
return null;
},_getRootElement:function(_78a){
while(_78a.parentNode){
_78a=_78a.parentNode;
}
return _78a;
},_getXPath:function(_78b){
var _78c=null;
if(!this.sendQuery){
var node=_78b;
_78c="";
while(node&&node!=_78b.ownerDocument){
var pos=0;
var _78d=node;
var name=node.nodeName;
while(_78d){
_78d=_78d.previousSibling;
if(_78d&&_78d.nodeName===name){
pos++;
}
}
var temp="/"+name+"["+pos+"]";
if(_78c){
_78c=temp+_78c;
}else{
_78c=temp;
}
node=node.parentNode;
}
}
return _78c;
},getIdentity:function(item){
if(!this.isItem(item)){
throw new Error("dojox.data.XmlStore: Object supplied to getIdentity is not an item");
}else{
var id=null;
if(this.sendQuery&&this.keyAttribute!==""){
id=this.getValue(item,this.keyAttribute).toString();
}else{
if(!this.serverQuery){
if(this.keyAttribute!==""){
id=this.getValue(item,this.keyAttribute).toString();
}else{
id=item.q;
}
}
}
return id;
}
},getIdentityAttributes:function(item){
if(!this.isItem(item)){
throw new Error("dojox.data.XmlStore: Object supplied to getIdentity is not an item");
}else{
if(this.keyAttribute!==""){
return [this.keyAttribute];
}else{
return null;
}
}
},fetchItemByIdentity:function(_78e){
var _78f=null;
var _790=null;
var self=this;
var url=null;
var _791=null;
var _792=null;
if(!self.sendQuery){
_78f=function(data){
if(data){
if(self.keyAttribute!==""){
var _793={};
_793.query={};
_793.query[self.keyAttribute]=_78e.identity;
_793.queryOptions={deep:true};
var _794=self._getItems(data,_793);
_790=_78e.scope||dojo.global;
if(_794.length===1){
if(_78e.onItem){
_78e.onItem.call(_790,_794[0]);
}
}else{
if(_794.length===0){
if(_78e.onItem){
_78e.onItem.call(_790,null);
}
}else{
if(_78e.onError){
_78e.onError.call(_790,new Error("Items array size for identity lookup greater than 1, invalid keyAttribute."));
}
}
}
}else{
var _795=_78e.identity.split("/");
var i;
var node=data;
for(i=0;i<_795.length;i++){
if(_795[i]&&_795[i]!==""){
var _796=_795[i];
_796=_796.substring(0,_796.length-1);
var vals=_796.split("[");
var tag=vals[0];
var _797=parseInt(vals[1],10);
var pos=0;
if(node){
var _798=node.childNodes;
if(_798){
var j;
var _799=null;
for(j=0;j<_798.length;j++){
var _79a=_798[j];
if(_79a.nodeName===tag){
if(pos<_797){
pos++;
}else{
_799=_79a;
break;
}
}
}
if(_799){
node=_799;
}else{
node=null;
}
}else{
node=null;
}
}else{
break;
}
}
}
var item=null;
if(node){
item=self._getItem(node);
if(item.element.parentNode){
item.element.parentNode.removeChild(item.element);
}
}
if(_78e.onItem){
_790=_78e.scope||dojo.global;
_78e.onItem.call(_790,item);
}
}
}
};
url=this._getFetchUrl(null);
_791={url:url,handleAs:"xml",preventCache:self.urlPreventCache};
_792=dojo.xhrGet(_791);
_792.addCallback(_78f);
if(_78e.onError){
_792.addErrback(function(_79b){
var s=_78e.scope||dojo.global;
_78e.onError.call(s,_79b);
});
}
}else{
if(self.keyAttribute!==""){
var _79c={query:{}};
_79c.query[self.keyAttribute]=_78e.identity;
url=this._getFetchUrl(_79c);
_78f=function(data){
var item=null;
if(data){
var _79d=self._getItems(data,{});
if(_79d.length===1){
item=_79d[0];
}else{
if(_78e.onError){
var _79e=_78e.scope||dojo.global;
_78e.onError.call(_79e,new Error("More than one item was returned from the server for the denoted identity"));
}
}
}
if(_78e.onItem){
_79e=_78e.scope||dojo.global;
_78e.onItem.call(_79e,item);
}
};
_791={url:url,handleAs:"xml",preventCache:self.urlPreventCache};
_792=dojo.xhrGet(_791);
_792.addCallback(_78f);
if(_78e.onError){
_792.addErrback(function(_79f){
var s=_78e.scope||dojo.global;
_78e.onError.call(s,_79f);
});
}
}else{
if(_78e.onError){
var s=_78e.scope||dojo.global;
_78e.onError.call(s,new Error("XmlStore is not told that the server to provides identity support.  No keyAttribute specified."));
}
}
}
}});
dojo.declare("dojox.data.XmlItem",null,{constructor:function(_7a0,_7a1,_7a2){
this.element=_7a0;
this.store=_7a1;
this.q=_7a2;
},toString:function(){
var str="";
if(this.element){
for(var i=0;i<this.element.childNodes.length;i++){
var node=this.element.childNodes[i];
if(node.nodeType===3||node.nodeType===4){
str+=node.nodeValue;
}
}
}
return str;
}});
dojo.extend(dojox.data.XmlStore,dojo.data.util.simpleFetch);
}
if(!dojo._hasResource["dojox.data.QueryReadStore"]){
dojo._hasResource["dojox.data.QueryReadStore"]=true;
dojo.provide("dojox.data.QueryReadStore");
dojo.declare("dojox.data.QueryReadStore",null,{url:"",requestMethod:"get",_className:"dojox.data.QueryReadStore",_items:[],_lastServerQuery:null,_numRows:-1,lastRequestHash:null,doClientPaging:false,doClientSorting:false,_itemsByIdentity:null,_identifier:null,_features:{"dojo.data.api.Read":true,"dojo.data.api.Identity":true},_labelAttr:"label",constructor:function(_7a3){
dojo.mixin(this,_7a3);
},getValue:function(item,_7a4,_7a5){
this._assertIsItem(item);
if(!dojo.isString(_7a4)){
throw new Error(this._className+".getValue(): Invalid attribute, string expected!");
}
if(!this.hasAttribute(item,_7a4)){
if(_7a5){
return _7a5;
}
}
return item.i[_7a4];
},getValues:function(item,_7a6){
this._assertIsItem(item);
var ret=[];
if(this.hasAttribute(item,_7a6)){
ret.push(item.i[_7a6]);
}
return ret;
},getAttributes:function(item){
this._assertIsItem(item);
var ret=[];
for(var i in item.i){
ret.push(i);
}
return ret;
},hasAttribute:function(item,_7a7){
return this.isItem(item)&&typeof item.i[_7a7]!="undefined";
},containsValue:function(item,_7a8,_7a9){
var _7aa=this.getValues(item,_7a8);
var len=_7aa.length;
for(var i=0;i<len;i++){
if(_7aa[i]==_7a9){
return true;
}
}
return false;
},isItem:function(_7ab){
if(_7ab){
return typeof _7ab.r!="undefined"&&_7ab.r==this;
}
return false;
},isItemLoaded:function(_7ac){
return this.isItem(_7ac);
},loadItem:function(args){
if(this.isItemLoaded(args.item)){
return;
}
},fetch:function(_7ad){
_7ad=_7ad||{};
if(!_7ad.store){
_7ad.store=this;
}
var self=this;
var _7ae=function(_7af,_7b0){
if(_7b0.onError){
var _7b1=_7b0.scope||dojo.global;
_7b0.onError.call(_7b1,_7af,_7b0);
}
};
var _7b2=function(_7b3,_7b4,_7b5){
var _7b6=_7b4.abort||null;
var _7b7=false;
var _7b8=_7b4.start?_7b4.start:0;
if(self.doClientPaging==false){
_7b8=0;
}
var _7b9=_7b4.count?(_7b8+_7b4.count):_7b3.length;
_7b4.abort=function(){
_7b7=true;
if(_7b6){
_7b6.call(_7b4);
}
};
var _7ba=_7b4.scope||dojo.global;
if(!_7b4.store){
_7b4.store=self;
}
if(_7b4.onBegin){
_7b4.onBegin.call(_7ba,_7b5,_7b4);
}
if(_7b4.sort&&self.doClientSorting){
_7b3.sort(dojo.data.util.sorter.createSortFunction(_7b4.sort,self));
}
if(_7b4.onItem){
for(var i=_7b8;(i<_7b3.length)&&(i<_7b9);++i){
var item=_7b3[i];
if(!_7b7){
_7b4.onItem.call(_7ba,item,_7b4);
}
}
}
if(_7b4.onComplete&&!_7b7){
var _7bb=null;
if(!_7b4.onItem){
_7bb=_7b3.slice(_7b8,_7b9);
}
_7b4.onComplete.call(_7ba,_7bb,_7b4);
}
};
this._fetchItems(_7ad,_7b2,_7ae);
return _7ad;
},getFeatures:function(){
return this._features;
},close:function(_7bc){
},getLabel:function(item){
if(this._labelAttr&&this.isItem(item)){
return this.getValue(item,this._labelAttr);
}
return undefined;
},getLabelAttributes:function(item){
if(this._labelAttr){
return [this._labelAttr];
}
return null;
},_xhrFetchHandler:function(data,_7bd,_7be,_7bf){
data=this._filterResponse(data);
if(data.label){
this._labelAttr=data.label;
}
var _7c0=data.numRows||-1;
this._items=[];
dojo.forEach(data.items,function(e){
this._items.push({i:e,r:this});
},this);
var _7c1=data.identifier;
this._itemsByIdentity={};
if(_7c1){
this._identifier=_7c1;
var i;
for(i=0;i<this._items.length;++i){
var item=this._items[i].i;
var _7c2=item[_7c1];
if(!this._itemsByIdentity[_7c2]){
this._itemsByIdentity[_7c2]=item;
}else{
throw new Error(this._className+":  The json data as specified by: ["+this.url+"] is malformed.  Items within the list have identifier: ["+_7c1+"].  Value collided: ["+_7c2+"]");
}
}
}else{
this._identifier=Number;
for(i=0;i<this._items.length;++i){
this._items[i].n=i;
}
}
_7c0=this._numRows=(_7c0===-1)?this._items.length:_7c0;
_7be(this._items,_7bd,_7c0);
this._numRows=_7c0;
},_fetchItems:function(_7c3,_7c4,_7c5){
var _7c6=_7c3.serverQuery||_7c3.query||{};
if(!this.doClientPaging){
_7c6.start=_7c3.start||0;
if(_7c3.count){
_7c6.count=_7c3.count;
}
}
if(!this.doClientSorting&&_7c3.sort){
var _7c7=[];
dojo.forEach(_7c3.sort,function(sort){
if(sort&&sort.attribute){
_7c7.push((sort.descending?"-":"")+sort.attribute);
}
});
_7c6.sort=_7c7.join(",");
}
if(this.doClientPaging&&this._lastServerQuery!==null&&dojo.toJson(_7c6)==dojo.toJson(this._lastServerQuery)){
this._numRows=(this._numRows===-1)?this._items.length:this._numRows;
_7c4(this._items,_7c3,this._numRows);
}else{
var _7c8=this.requestMethod.toLowerCase()=="post"?dojo.xhrPost:dojo.xhrGet;
var _7c9=_7c8({url:this.url,handleAs:"json-comment-optional",content:_7c6,failOk:true});
_7c3.abort=function(){
_7c9.cancel();
};
_7c9.addCallback(dojo.hitch(this,function(data){
this._xhrFetchHandler(data,_7c3,_7c4,_7c5);
}));
_7c9.addErrback(function(_7ca){
_7c5(_7ca,_7c3);
});
this.lastRequestHash=new Date().getTime()+"-"+String(Math.random()).substring(2);
this._lastServerQuery=dojo.mixin({},_7c6);
}
},_filterResponse:function(data){
return data;
},_assertIsItem:function(item){
if(!this.isItem(item)){
throw new Error(this._className+": Invalid item argument.");
}
},_assertIsAttribute:function(_7cb){
if(typeof _7cb!=="string"){
throw new Error(this._className+": Invalid attribute argument ('"+_7cb+"').");
}
},fetchItemByIdentity:function(_7cc){
if(this._itemsByIdentity){
var item=this._itemsByIdentity[_7cc.identity];
if(!(item===undefined)){
if(_7cc.onItem){
var _7cd=_7cc.scope?_7cc.scope:dojo.global;
_7cc.onItem.call(_7cd,{i:item,r:this});
}
return;
}
}
var _7ce=function(_7cf,_7d0){
var _7d1=_7cc.scope?_7cc.scope:dojo.global;
if(_7cc.onError){
_7cc.onError.call(_7d1,_7cf);
}
};
var _7d2=function(_7d3,_7d4){
var _7d5=_7cc.scope?_7cc.scope:dojo.global;
try{
var item=null;
if(_7d3&&_7d3.length==1){
item=_7d3[0];
}
if(_7cc.onItem){
_7cc.onItem.call(_7d5,item);
}
}
catch(error){
if(_7cc.onError){
_7cc.onError.call(_7d5,error);
}
}
};
var _7d6={serverQuery:{id:_7cc.identity}};
this._fetchItems(_7d6,_7d2,_7ce);
},getIdentity:function(item){
var _7d7=null;
if(this._identifier===Number){
_7d7=item.n;
}else{
_7d7=item.i[this._identifier];
}
return _7d7;
},getIdentityAttributes:function(item){
return [this._identifier];
}});
}
if(!dojo._hasResource["dojox.gfx.matrix"]){
dojo._hasResource["dojox.gfx.matrix"]=true;
dojo.provide("dojox.gfx.matrix");
(function(){
var m=dojox.gfx.matrix;
var _7d8={};
m._degToRad=function(_7d9){
return _7d8[_7d9]||(_7d8[_7d9]=(Math.PI*_7d9/180));
};
m._radToDeg=function(_7da){
return _7da/Math.PI*180;
};
m.Matrix2D=function(arg){
if(arg){
if(typeof arg=="number"){
this.xx=this.yy=arg;
}else{
if(arg instanceof Array){
if(arg.length>0){
var _7db=m.normalize(arg[0]);
for(var i=1;i<arg.length;++i){
var l=_7db,r=dojox.gfx.matrix.normalize(arg[i]);
_7db=new m.Matrix2D();
_7db.xx=l.xx*r.xx+l.xy*r.yx;
_7db.xy=l.xx*r.xy+l.xy*r.yy;
_7db.yx=l.yx*r.xx+l.yy*r.yx;
_7db.yy=l.yx*r.xy+l.yy*r.yy;
_7db.dx=l.xx*r.dx+l.xy*r.dy+l.dx;
_7db.dy=l.yx*r.dx+l.yy*r.dy+l.dy;
}
dojo.mixin(this,_7db);
}
}else{
dojo.mixin(this,arg);
}
}
}
};
dojo.extend(m.Matrix2D,{xx:1,xy:0,yx:0,yy:1,dx:0,dy:0});
dojo.mixin(m,{identity:new m.Matrix2D(),flipX:new m.Matrix2D({xx:-1}),flipY:new m.Matrix2D({yy:-1}),flipXY:new m.Matrix2D({xx:-1,yy:-1}),translate:function(a,b){
if(arguments.length>1){
return new m.Matrix2D({dx:a,dy:b});
}
return new m.Matrix2D({dx:a.x,dy:a.y});
},scale:function(a,b){
if(arguments.length>1){
return new m.Matrix2D({xx:a,yy:b});
}
if(typeof a=="number"){
return new m.Matrix2D({xx:a,yy:a});
}
return new m.Matrix2D({xx:a.x,yy:a.y});
},rotate:function(_7dc){
var c=Math.cos(_7dc);
var s=Math.sin(_7dc);
return new m.Matrix2D({xx:c,xy:-s,yx:s,yy:c});
},rotateg:function(_7dd){
return m.rotate(m._degToRad(_7dd));
},skewX:function(_7de){
return new m.Matrix2D({xy:Math.tan(_7de)});
},skewXg:function(_7df){
return m.skewX(m._degToRad(_7df));
},skewY:function(_7e0){
return new m.Matrix2D({yx:Math.tan(_7e0)});
},skewYg:function(_7e1){
return m.skewY(m._degToRad(_7e1));
},reflect:function(a,b){
if(arguments.length==1){
b=a.y;
a=a.x;
}
var a2=a*a,b2=b*b,n2=a2+b2,xy=2*a*b/n2;
return new m.Matrix2D({xx:2*a2/n2-1,xy:xy,yx:xy,yy:2*b2/n2-1});
},project:function(a,b){
if(arguments.length==1){
b=a.y;
a=a.x;
}
var a2=a*a,b2=b*b,n2=a2+b2,xy=a*b/n2;
return new m.Matrix2D({xx:a2/n2,xy:xy,yx:xy,yy:b2/n2});
},normalize:function(_7e2){
return (_7e2 instanceof m.Matrix2D)?_7e2:new m.Matrix2D(_7e2);
},clone:function(_7e3){
var obj=new m.Matrix2D();
for(var i in _7e3){
if(typeof (_7e3[i])=="number"&&typeof (obj[i])=="number"&&obj[i]!=_7e3[i]){
obj[i]=_7e3[i];
}
}
return obj;
},invert:function(_7e4){
var M=m.normalize(_7e4),D=M.xx*M.yy-M.xy*M.yx,M=new m.Matrix2D({xx:M.yy/D,xy:-M.xy/D,yx:-M.yx/D,yy:M.xx/D,dx:(M.xy*M.dy-M.yy*M.dx)/D,dy:(M.yx*M.dx-M.xx*M.dy)/D});
return M;
},_multiplyPoint:function(_7e5,x,y){
return {x:_7e5.xx*x+_7e5.xy*y+_7e5.dx,y:_7e5.yx*x+_7e5.yy*y+_7e5.dy};
},multiplyPoint:function(_7e6,a,b){
var M=m.normalize(_7e6);
if(typeof a=="number"&&typeof b=="number"){
return m._multiplyPoint(M,a,b);
}
return m._multiplyPoint(M,a.x,a.y);
},multiply:function(_7e7){
var M=m.normalize(_7e7);
for(var i=1;i<arguments.length;++i){
var l=M,r=m.normalize(arguments[i]);
M=new m.Matrix2D();
M.xx=l.xx*r.xx+l.xy*r.yx;
M.xy=l.xx*r.xy+l.xy*r.yy;
M.yx=l.yx*r.xx+l.yy*r.yx;
M.yy=l.yx*r.xy+l.yy*r.yy;
M.dx=l.xx*r.dx+l.xy*r.dy+l.dx;
M.dy=l.yx*r.dx+l.yy*r.dy+l.dy;
}
return M;
},_sandwich:function(_7e8,x,y){
return m.multiply(m.translate(x,y),_7e8,m.translate(-x,-y));
},scaleAt:function(a,b,c,d){
switch(arguments.length){
case 4:
return m._sandwich(m.scale(a,b),c,d);
case 3:
if(typeof c=="number"){
return m._sandwich(m.scale(a),b,c);
}
return m._sandwich(m.scale(a,b),c.x,c.y);
}
return m._sandwich(m.scale(a),b.x,b.y);
},rotateAt:function(_7e9,a,b){
if(arguments.length>2){
return m._sandwich(m.rotate(_7e9),a,b);
}
return m._sandwich(m.rotate(_7e9),a.x,a.y);
},rotategAt:function(_7ea,a,b){
if(arguments.length>2){
return m._sandwich(m.rotateg(_7ea),a,b);
}
return m._sandwich(m.rotateg(_7ea),a.x,a.y);
},skewXAt:function(_7eb,a,b){
if(arguments.length>2){
return m._sandwich(m.skewX(_7eb),a,b);
}
return m._sandwich(m.skewX(_7eb),a.x,a.y);
},skewXgAt:function(_7ec,a,b){
if(arguments.length>2){
return m._sandwich(m.skewXg(_7ec),a,b);
}
return m._sandwich(m.skewXg(_7ec),a.x,a.y);
},skewYAt:function(_7ed,a,b){
if(arguments.length>2){
return m._sandwich(m.skewY(_7ed),a,b);
}
return m._sandwich(m.skewY(_7ed),a.x,a.y);
},skewYgAt:function(_7ee,a,b){
if(arguments.length>2){
return m._sandwich(m.skewYg(_7ee),a,b);
}
return m._sandwich(m.skewYg(_7ee),a.x,a.y);
}});
})();
dojox.gfx.Matrix2D=dojox.gfx.matrix.Matrix2D;
}
if(!dojo._hasResource["dojox.gfx._base"]){
dojo._hasResource["dojox.gfx._base"]=true;
dojo.provide("dojox.gfx._base");
(function(){
var g=dojox.gfx,b=g._base;
g._hasClass=function(node,_7ef){
var cls=node.getAttribute("className");
return cls&&(" "+cls+" ").indexOf(" "+_7ef+" ")>=0;
};
g._addClass=function(node,_7f0){
var cls=node.getAttribute("className")||"";
if(!cls||(" "+cls+" ").indexOf(" "+_7f0+" ")<0){
node.setAttribute("className",cls+(cls?" ":"")+_7f0);
}
};
g._removeClass=function(node,_7f1){
var cls=node.getAttribute("className");
if(cls){
node.setAttribute("className",cls.replace(new RegExp("(^|\\s+)"+_7f1+"(\\s+|$)"),"$1$2"));
}
};
b._getFontMeasurements=function(){
var _7f2={"1em":0,"1ex":0,"100%":0,"12pt":0,"16px":0,"xx-small":0,"x-small":0,"small":0,"medium":0,"large":0,"x-large":0,"xx-large":0};
if(dojo.isIE){
dojo.doc.documentElement.style.fontSize="100%";
}
var div=dojo.create("div",{style:{position:"absolute",left:"0",top:"-100px",width:"30px",height:"1000em",borderWidth:"0",margin:"0",padding:"0",outline:"none",lineHeight:"1",overflow:"hidden"}},dojo.body());
for(var p in _7f2){
div.style.fontSize=p;
_7f2[p]=Math.round(div.offsetHeight*12/16)*16/12/1000;
}
dojo.body().removeChild(div);
return _7f2;
};
var _7f3=null;
b._getCachedFontMeasurements=function(_7f4){
if(_7f4||!_7f3){
_7f3=b._getFontMeasurements();
}
return _7f3;
};
var _7f5=null,_7f6={};
b._getTextBox=function(text,_7f7,_7f8){
var m,s,al=arguments.length;
if(!_7f5){
_7f5=dojo.create("div",{style:{position:"absolute",top:"-10000px",left:"0"}},dojo.body());
}
m=_7f5;
m.className="";
s=m.style;
s.borderWidth="0";
s.margin="0";
s.padding="0";
s.outline="0";
if(al>1&&_7f7){
for(var i in _7f7){
if(i in _7f6){
continue;
}
s[i]=_7f7[i];
}
}
if(al>2&&_7f8){
m.className=_7f8;
}
m.innerHTML=text;
if(m["getBoundingClientRect"]){
var bcr=m.getBoundingClientRect();
return {l:bcr.left,t:bcr.top,w:bcr.width||(bcr.right-bcr.left),h:bcr.height||(bcr.bottom-bcr.top)};
}else{
return dojo.marginBox(m);
}
};
var _7f9=0;
b._getUniqueId=function(){
var id;
do{
id=dojo._scopeName+"Unique"+(++_7f9);
}while(dojo.byId(id));
return id;
};
})();
dojo.mixin(dojox.gfx,{defaultPath:{type:"path",path:""},defaultPolyline:{type:"polyline",points:[]},defaultRect:{type:"rect",x:0,y:0,width:100,height:100,r:0},defaultEllipse:{type:"ellipse",cx:0,cy:0,rx:200,ry:100},defaultCircle:{type:"circle",cx:0,cy:0,r:100},defaultLine:{type:"line",x1:0,y1:0,x2:100,y2:100},defaultImage:{type:"image",x:0,y:0,width:0,height:0,src:""},defaultText:{type:"text",x:0,y:0,text:"",align:"start",decoration:"none",rotated:false,kerning:true},defaultTextPath:{type:"textpath",text:"",align:"start",decoration:"none",rotated:false,kerning:true},defaultStroke:{type:"stroke",color:"black",style:"solid",width:1,cap:"butt",join:4},defaultLinearGradient:{type:"linear",x1:0,y1:0,x2:100,y2:100,colors:[{offset:0,color:"black"},{offset:1,color:"white"}]},defaultRadialGradient:{type:"radial",cx:0,cy:0,r:100,colors:[{offset:0,color:"black"},{offset:1,color:"white"}]},defaultPattern:{type:"pattern",x:0,y:0,width:0,height:0,src:""},defaultFont:{type:"font",style:"normal",variant:"normal",weight:"normal",size:"10pt",family:"serif"},getDefault:(function(){
var _7fa={};
return function(type){
var t=_7fa[type];
if(t){
return new t();
}
t=_7fa[type]=new Function;
t.prototype=dojox.gfx["default"+type];
return new t();
};
})(),normalizeColor:function(_7fb){
return (_7fb instanceof dojo.Color)?_7fb:new dojo.Color(_7fb);
},normalizeParameters:function(_7fc,_7fd){
if(_7fd){
var _7fe={};
for(var x in _7fc){
if(x in _7fd&&!(x in _7fe)){
_7fc[x]=_7fd[x];
}
}
}
return _7fc;
},makeParameters:function(_7ff,_800){
if(!_800){
return dojo.delegate(_7ff);
}
var _801={};
for(var i in _7ff){
if(!(i in _801)){
_801[i]=dojo.clone((i in _800)?_800[i]:_7ff[i]);
}
}
return _801;
},formatNumber:function(x,_802){
var val=x.toString();
if(val.indexOf("e")>=0){
val=x.toFixed(4);
}else{
var _803=val.indexOf(".");
if(_803>=0&&val.length-_803>5){
val=x.toFixed(4);
}
}
if(x<0){
return val;
}
return _802?" "+val:val;
},makeFontString:function(font){
return font.style+" "+font.variant+" "+font.weight+" "+font.size+" "+font.family;
},splitFontString:function(str){
var font=dojox.gfx.getDefault("Font");
var t=str.split(/\s+/);
do{
if(t.length<5){
break;
}
font.style=t[0];
font.variant=t[1];
font.weight=t[2];
var i=t[3].indexOf("/");
font.size=i<0?t[3]:t[3].substring(0,i);
var j=4;
if(i<0){
if(t[4]=="/"){
j=6;
}else{
if(t[4].charAt(0)=="/"){
j=5;
}
}
}
if(j<t.length){
font.family=t.slice(j).join(" ");
}
}while(false);
return font;
},cm_in_pt:72/2.54,mm_in_pt:7.2/2.54,px_in_pt:function(){
return dojox.gfx._base._getCachedFontMeasurements()["12pt"]/12;
},pt2px:function(len){
return len*dojox.gfx.px_in_pt();
},px2pt:function(len){
return len/dojox.gfx.px_in_pt();
},normalizedLength:function(len){
if(len.length==0){
return 0;
}
if(len.length>2){
var _804=dojox.gfx.px_in_pt();
var val=parseFloat(len);
switch(len.slice(-2)){
case "px":
return val;
case "pt":
return val*_804;
case "in":
return val*72*_804;
case "pc":
return val*12*_804;
case "mm":
return val*dojox.gfx.mm_in_pt*_804;
case "cm":
return val*dojox.gfx.cm_in_pt*_804;
}
}
return parseFloat(len);
},pathVmlRegExp:/([A-Za-z]+)|(\d+(\.\d+)?)|(\.\d+)|(-\d+(\.\d+)?)|(-\.\d+)/g,pathSvgRegExp:/([A-Za-z])|(\d+(\.\d+)?)|(\.\d+)|(-\d+(\.\d+)?)|(-\.\d+)/g,equalSources:function(a,b){
return a&&b&&a==b;
},switchTo:function(_805){
var ns=dojox.gfx[_805];
if(ns){
dojo.forEach(["Group","Rect","Ellipse","Circle","Line","Polyline","Image","Text","Path","TextPath","Surface","createSurface"],function(name){
dojox.gfx[name]=ns[name];
});
}
}});
}
if(!dojo._hasResource["dojox.gfx"]){
dojo._hasResource["dojox.gfx"]=true;
dojo.provide("dojox.gfx");
dojo.loadInit(function(){
var gfx=dojo.getObject("dojox.gfx",true),sl,flag,_806;
while(!gfx.renderer){
if(dojo.config.forceGfxRenderer){
dojox.gfx.renderer=dojo.config.forceGfxRenderer;
break;
}
var _807=(typeof dojo.config.gfxRenderer=="string"?dojo.config.gfxRenderer:"svg,vml,canvas,silverlight").split(",");
for(var i=0;i<_807.length;++i){
switch(_807[i]){
case "svg":
if("SVGAngle" in dojo.global){
dojox.gfx.renderer="svg";
}
break;
case "vml":
if(dojo.isIE){
dojox.gfx.renderer="vml";
}
break;
case "silverlight":
try{
if(dojo.isIE){
sl=new ActiveXObject("AgControl.AgControl");
if(sl&&sl.IsVersionSupported("1.0")){
flag=true;
}
}else{
if(navigator.plugins["Silverlight Plug-In"]){
flag=true;
}
}
}
catch(e){
flag=false;
}
finally{
sl=null;
}
if(flag){
dojox.gfx.renderer="silverlight";
}
break;
case "canvas":
if(dojo.global.CanvasRenderingContext2D){
dojox.gfx.renderer="canvas";
}
break;
}
if(gfx.renderer){
break;
}
}
break;
}
if(dojo.config.isDebug){
console.log("gfx renderer = "+gfx.renderer);
}
if(gfx[gfx.renderer]){
gfx.switchTo(gfx.renderer);
}else{
gfx.loadAndSwitch=gfx.renderer;
dojo["require"]("dojox.gfx."+gfx.renderer);
}
});
}
if(!dojo._hasResource["dijit.dijit"]){
dojo._hasResource["dijit.dijit"]=true;
dojo.provide("dijit.dijit");
}
if(!dojo._hasResource["dojox.html.metrics"]){
dojo._hasResource["dojox.html.metrics"]=true;
dojo.provide("dojox.html.metrics");
(function(){
var dhm=dojox.html.metrics;
dhm.getFontMeasurements=function(){
var _808={"1em":0,"1ex":0,"100%":0,"12pt":0,"16px":0,"xx-small":0,"x-small":0,"small":0,"medium":0,"large":0,"x-large":0,"xx-large":0};
if(dojo.isIE){
dojo.doc.documentElement.style.fontSize="100%";
}
var div=dojo.doc.createElement("div");
var ds=div.style;
ds.position="absolute";
ds.left="-100px";
ds.top="0";
ds.width="30px";
ds.height="1000em";
ds.borderWidth="0";
ds.margin="0";
ds.padding="0";
ds.outline="0";
ds.lineHeight="1";
ds.overflow="hidden";
dojo.body().appendChild(div);
for(var p in _808){
ds.fontSize=p;
_808[p]=Math.round(div.offsetHeight*12/16)*16/12/1000;
}
dojo.body().removeChild(div);
div=null;
return _808;
};
var _809=null;
dhm.getCachedFontMeasurements=function(_80a){
if(_80a||!_809){
_809=dhm.getFontMeasurements();
}
return _809;
};
var _80b=null,_80c={};
dhm.getTextBox=function(text,_80d,_80e){
var m,s;
if(!_80b){
m=_80b=dojo.doc.createElement("div");
var c=dojo.doc.createElement("div");
c.appendChild(m);
s=c.style;
s.overflow="scroll";
s.position="absolute";
s.left="0px";
s.top="-10000px";
s.width="1px";
s.height="1px";
s.visibility="hidden";
s.borderWidth="0";
s.margin="0";
s.padding="0";
s.outline="0";
dojo.body().appendChild(c);
}else{
m=_80b;
}
m.className="";
s=m.style;
s.borderWidth="0";
s.margin="0";
s.padding="0";
s.outline="0";
if(arguments.length>1&&_80d){
for(var i in _80d){
if(i in _80c){
continue;
}
s[i]=_80d[i];
}
}
if(arguments.length>2&&_80e){
m.className=_80e;
}
m.innerHTML=text;
var box=dojo.position(m);
box.w=m.parentNode.scrollWidth;
return box;
};
var _80f={w:16,h:16};
dhm.getScrollbar=function(){
return {w:_80f.w,h:_80f.h};
};
dhm._fontResizeNode=null;
dhm.initOnFontResize=function(_810){
var f=dhm._fontResizeNode=dojo.doc.createElement("iframe");
var fs=f.style;
fs.position="absolute";
fs.width="5em";
fs.height="10em";
fs.top="-10000px";
if(dojo.isIE){
f.onreadystatechange=function(){
if(f.contentWindow.document.readyState=="complete"){
f.onresize=f.contentWindow.parent[dojox._scopeName].html.metrics._fontresize;
}
};
}else{
f.onload=function(){
f.contentWindow.onresize=f.contentWindow.parent[dojox._scopeName].html.metrics._fontresize;
};
}
f.setAttribute("src","javascript:'<html><head><script>if(\"loadFirebugConsole\" in window){window.loadFirebugConsole();}</script></head><body></body></html>'");
dojo.body().appendChild(f);
dhm.initOnFontResize=function(){
};
};
dhm.onFontResize=function(){
};
dhm._fontresize=function(){
dhm.onFontResize();
};
dojo.addOnUnload(function(){
var f=dhm._fontResizeNode;
if(f){
if(dojo.isIE&&f.onresize){
f.onresize=null;
}else{
if(f.contentWindow&&f.contentWindow.onresize){
f.contentWindow.onresize=null;
}
}
dhm._fontResizeNode=null;
}
});
dojo.addOnLoad(function(){
try{
var n=dojo.doc.createElement("div");
n.style.cssText="top:0;left:0;width:100px;height:100px;overflow:scroll;position:absolute;visibility:hidden;";
dojo.body().appendChild(n);
_80f.w=n.offsetWidth-n.clientWidth;
_80f.h=n.offsetHeight-n.clientHeight;
dojo.body().removeChild(n);
delete n;
}
catch(e){
}
if("fontSizeWatch" in dojo.config&&!!dojo.config.fontSizeWatch){
dhm.initOnFontResize();
}
});
})();
}
if(!dojo._hasResource["dojox.grid.util"]){
dojo._hasResource["dojox.grid.util"]=true;
dojo.provide("dojox.grid.util");
(function(){
var dgu=dojox.grid.util;
dgu.na="...";
dgu.rowIndexTag="gridRowIndex";
dgu.gridViewTag="gridView";
dgu.fire=function(ob,ev,args){
var fn=ob&&ev&&ob[ev];
return fn&&(args?fn.apply(ob,args):ob[ev]());
};
dgu.setStyleHeightPx=function(_811,_812){
if(_812>=0){
var s=_811.style;
var v=_812+"px";
if(_811&&s["height"]!=v){
s["height"]=v;
}
}
};
dgu.mouseEvents=["mouseover","mouseout","mousedown","mouseup","click","dblclick","contextmenu"];
dgu.keyEvents=["keyup","keydown","keypress"];
dgu.funnelEvents=function(_813,_814,_815,_816){
var evts=(_816?_816:dgu.mouseEvents.concat(dgu.keyEvents));
for(var i=0,l=evts.length;i<l;i++){
_814.connect(_813,"on"+evts[i],_815);
}
};
dgu.removeNode=function(_817){
_817=dojo.byId(_817);
_817&&_817.parentNode&&_817.parentNode.removeChild(_817);
return _817;
};
dgu.arrayCompare=function(inA,inB){
for(var i=0,l=inA.length;i<l;i++){
if(inA[i]!=inB[i]){
return false;
}
}
return (inA.length==inB.length);
};
dgu.arrayInsert=function(_818,_819,_81a){
if(_818.length<=_819){
_818[_819]=_81a;
}else{
_818.splice(_819,0,_81a);
}
};
dgu.arrayRemove=function(_81b,_81c){
_81b.splice(_81c,1);
};
dgu.arraySwap=function(_81d,inI,inJ){
var _81e=_81d[inI];
_81d[inI]=_81d[inJ];
_81d[inJ]=_81e;
};
})();
}
if(!dojo._hasResource["dojox.grid._Scroller"]){
dojo._hasResource["dojox.grid._Scroller"]=true;
dojo.provide("dojox.grid._Scroller");
(function(){
var _81f=function(_820){
var i=0,n,p=_820.parentNode;
while((n=p.childNodes[i++])){
if(n==_820){
return i-1;
}
}
return -1;
};
var _821=function(_822){
if(!_822){
return;
}
var _823=function(inW){
return inW.domNode&&dojo.isDescendant(inW.domNode,_822,true);
};
var ws=dijit.registry.filter(_823);
for(var i=0,w;(w=ws[i]);i++){
w.destroy();
}
delete ws;
};
var _824=function(_825){
var node=dojo.byId(_825);
return (node&&node.tagName?node.tagName.toLowerCase():"");
};
var _826=function(_827,_828){
var _829=[];
var i=0,n;
while((n=_827.childNodes[i])){
i++;
if(_824(n)==_828){
_829.push(n);
}
}
return _829;
};
var _82a=function(_82b){
return _826(_82b,"div");
};
dojo.declare("dojox.grid._Scroller",null,{constructor:function(_82c){
this.setContentNodes(_82c);
this.pageHeights=[];
this.pageNodes=[];
this.stack=[];
},rowCount:0,defaultRowHeight:32,keepRows:100,contentNode:null,scrollboxNode:null,defaultPageHeight:0,keepPages:10,pageCount:0,windowHeight:0,firstVisibleRow:0,lastVisibleRow:0,averageRowHeight:0,page:0,pageTop:0,init:function(_82d,_82e,_82f){
switch(arguments.length){
case 3:
this.rowsPerPage=_82f;
case 2:
this.keepRows=_82e;
case 1:
this.rowCount=_82d;
default:
break;
}
this.defaultPageHeight=this.defaultRowHeight*this.rowsPerPage;
this.pageCount=this._getPageCount(this.rowCount,this.rowsPerPage);
this.setKeepInfo(this.keepRows);
this.invalidate();
if(this.scrollboxNode){
this.scrollboxNode.scrollTop=0;
this.scroll(0);
this.scrollboxNode.onscroll=dojo.hitch(this,"onscroll");
}
},_getPageCount:function(_830,_831){
return _830?(Math.ceil(_830/_831)||1):0;
},destroy:function(){
this.invalidateNodes();
delete this.contentNodes;
delete this.contentNode;
delete this.scrollboxNode;
},setKeepInfo:function(_832){
this.keepRows=_832;
this.keepPages=!this.keepRows?this.keepPages:Math.max(Math.ceil(this.keepRows/this.rowsPerPage),2);
},setContentNodes:function(_833){
this.contentNodes=_833;
this.colCount=(this.contentNodes?this.contentNodes.length:0);
this.pageNodes=[];
for(var i=0;i<this.colCount;i++){
this.pageNodes[i]=[];
}
},getDefaultNodes:function(){
return this.pageNodes[0]||[];
},invalidate:function(){
this._invalidating=true;
this.invalidateNodes();
this.pageHeights=[];
this.height=(this.pageCount?(this.pageCount-1)*this.defaultPageHeight+this.calcLastPageHeight():0);
this.resize();
this._invalidating=false;
},updateRowCount:function(_834){
this.invalidateNodes();
this.rowCount=_834;
var _835=this.pageCount;
if(_835===0){
this.height=1;
}
this.pageCount=this._getPageCount(this.rowCount,this.rowsPerPage);
if(this.pageCount<_835){
for(var i=_835-1;i>=this.pageCount;i--){
this.height-=this.getPageHeight(i);
delete this.pageHeights[i];
}
}else{
if(this.pageCount>_835){
this.height+=this.defaultPageHeight*(this.pageCount-_835-1)+this.calcLastPageHeight();
}
}
this.resize();
},pageExists:function(_836){
return Boolean(this.getDefaultPageNode(_836));
},measurePage:function(_837){
if(this.grid.rowHeight){
var _838=this.grid.rowHeight+1;
return ((_837+1)*this.rowsPerPage>this.rowCount?this.rowCount-_837*this.rowsPerPage:this.rowsPerPage)*_838;
}
var n=this.getDefaultPageNode(_837);
return (n&&n.innerHTML)?n.offsetHeight:undefined;
},positionPage:function(_839,_83a){
for(var i=0;i<this.colCount;i++){
this.pageNodes[i][_839].style.top=_83a+"px";
}
},repositionPages:function(_83b){
var _83c=this.getDefaultNodes();
var last=0;
for(var i=0;i<this.stack.length;i++){
last=Math.max(this.stack[i],last);
}
var n=_83c[_83b];
var y=(n?this.getPageNodePosition(n)+this.getPageHeight(_83b):0);
for(var p=_83b+1;p<=last;p++){
n=_83c[p];
if(n){
if(this.getPageNodePosition(n)==y){
return;
}
this.positionPage(p,y);
}
y+=this.getPageHeight(p);
}
},installPage:function(_83d){
for(var i=0;i<this.colCount;i++){
this.contentNodes[i].appendChild(this.pageNodes[i][_83d]);
}
},preparePage:function(_83e,_83f){
var p=(_83f?this.popPage():null);
for(var i=0;i<this.colCount;i++){
var _840=this.pageNodes[i];
var _841=(p===null?this.createPageNode():this.invalidatePageNode(p,_840));
_841.pageIndex=_83e;
_840[_83e]=_841;
}
},renderPage:function(_842){
var _843=[];
var i,j;
for(i=0;i<this.colCount;i++){
_843[i]=this.pageNodes[i][_842];
}
for(i=0,j=_842*this.rowsPerPage;(i<this.rowsPerPage)&&(j<this.rowCount);i++,j++){
this.renderRow(j,_843);
}
},removePage:function(_844){
for(var i=0,j=_844*this.rowsPerPage;i<this.rowsPerPage;i++,j++){
this.removeRow(j);
}
},destroyPage:function(_845){
for(var i=0;i<this.colCount;i++){
var n=this.invalidatePageNode(_845,this.pageNodes[i]);
if(n){
dojo.destroy(n);
}
}
},pacify:function(_846){
},pacifying:false,pacifyTicks:200,setPacifying:function(_847){
if(this.pacifying!=_847){
this.pacifying=_847;
this.pacify(this.pacifying);
}
},startPacify:function(){
this.startPacifyTicks=new Date().getTime();
},doPacify:function(){
var _848=(new Date().getTime()-this.startPacifyTicks)>this.pacifyTicks;
this.setPacifying(true);
this.startPacify();
return _848;
},endPacify:function(){
this.setPacifying(false);
},resize:function(){
if(this.scrollboxNode){
this.windowHeight=this.scrollboxNode.clientHeight;
}
for(var i=0;i<this.colCount;i++){
dojox.grid.util.setStyleHeightPx(this.contentNodes[i],Math.max(1,this.height));
}
var _849=(!this._invalidating);
if(!_849){
var ah=this.grid.get("autoHeight");
if(typeof ah=="number"&&ah<=Math.min(this.rowsPerPage,this.rowCount)){
_849=true;
}
}
if(_849){
this.needPage(this.page,this.pageTop);
}
var _84a=(this.page<this.pageCount-1)?this.rowsPerPage:((this.rowCount%this.rowsPerPage)||this.rowsPerPage);
var _84b=this.getPageHeight(this.page);
this.averageRowHeight=(_84b>0&&_84a>0)?(_84b/_84a):0;
},calcLastPageHeight:function(){
if(!this.pageCount){
return 0;
}
var _84c=this.pageCount-1;
var _84d=((this.rowCount%this.rowsPerPage)||(this.rowsPerPage))*this.defaultRowHeight;
this.pageHeights[_84c]=_84d;
return _84d;
},updateContentHeight:function(inDh){
this.height+=inDh;
this.resize();
},updatePageHeight:function(_84e,_84f,_850){
if(this.pageExists(_84e)){
var oh=this.getPageHeight(_84e);
var h=(this.measurePage(_84e));
if(h===undefined){
h=oh;
}
this.pageHeights[_84e]=h;
if(oh!=h){
this.updateContentHeight(h-oh);
var ah=this.grid.get("autoHeight");
if((typeof ah=="number"&&ah>this.rowCount)||(ah===true&&!_84f)){
if(!_850){
this.grid.sizeChange();
}else{
var ns=this.grid.viewsNode.style;
ns.height=parseInt(ns.height)+h-oh+"px";
this.repositionPages(_84e);
}
}else{
this.repositionPages(_84e);
}
}
return h;
}
return 0;
},rowHeightChanged:function(_851,_852){
this.updatePageHeight(Math.floor(_851/this.rowsPerPage),false,_852);
},invalidateNodes:function(){
while(this.stack.length){
this.destroyPage(this.popPage());
}
},createPageNode:function(){
var p=document.createElement("div");
dojo.attr(p,"role","presentation");
p.style.position="absolute";
p.style[dojo._isBodyLtr()?"left":"right"]="0";
return p;
},getPageHeight:function(_853){
var ph=this.pageHeights[_853];
return (ph!==undefined?ph:this.defaultPageHeight);
},pushPage:function(_854){
return this.stack.push(_854);
},popPage:function(){
return this.stack.shift();
},findPage:function(_855){
var i=0,h=0;
for(var ph=0;i<this.pageCount;i++,h+=ph){
ph=this.getPageHeight(i);
if(h+ph>=_855){
break;
}
}
this.page=i;
this.pageTop=h;
},buildPage:function(_856,_857,_858){
this.preparePage(_856,_857);
this.positionPage(_856,_858);
this.installPage(_856);
this.renderPage(_856);
this.pushPage(_856);
},needPage:function(_859,_85a){
var h=this.getPageHeight(_859),oh=h;
if(!this.pageExists(_859)){
this.buildPage(_859,(!this.grid._autoHeight&&this.keepPages&&(this.stack.length>=this.keepPages)),_85a);
h=this.updatePageHeight(_859,true);
}else{
this.positionPage(_859,_85a);
}
return h;
},onscroll:function(){
this.scroll(this.scrollboxNode.scrollTop);
},scroll:function(_85b){
this.grid.scrollTop=_85b;
if(this.colCount){
this.startPacify();
this.findPage(_85b);
var h=this.height;
var b=this.getScrollBottom(_85b);
for(var p=this.page,y=this.pageTop;(p<this.pageCount)&&((b<0)||(y<b));p++){
y+=this.needPage(p,y);
}
this.firstVisibleRow=this.getFirstVisibleRow(this.page,this.pageTop,_85b);
this.lastVisibleRow=this.getLastVisibleRow(p-1,y,b);
if(h!=this.height){
this.repositionPages(p-1);
}
this.endPacify();
}
},getScrollBottom:function(_85c){
return (this.windowHeight>=0?_85c+this.windowHeight:-1);
},processNodeEvent:function(e,_85d){
var t=e.target;
while(t&&(t!=_85d)&&t.parentNode&&(t.parentNode.parentNode!=_85d)){
t=t.parentNode;
}
if(!t||!t.parentNode||(t.parentNode.parentNode!=_85d)){
return false;
}
var page=t.parentNode;
e.topRowIndex=page.pageIndex*this.rowsPerPage;
e.rowIndex=e.topRowIndex+_81f(t);
e.rowTarget=t;
return true;
},processEvent:function(e){
return this.processNodeEvent(e,this.contentNode);
},renderRow:function(_85e,_85f){
},removeRow:function(_860){
},getDefaultPageNode:function(_861){
return this.getDefaultNodes()[_861];
},positionPageNode:function(_862,_863){
},getPageNodePosition:function(_864){
return _864.offsetTop;
},invalidatePageNode:function(_865,_866){
var p=_866[_865];
if(p){
delete _866[_865];
this.removePage(_865,p);
_821(p);
p.innerHTML="";
}
return p;
},getPageRow:function(_867){
return _867*this.rowsPerPage;
},getLastPageRow:function(_868){
return Math.min(this.rowCount,this.getPageRow(_868+1))-1;
},getFirstVisibleRow:function(_869,_86a,_86b){
if(!this.pageExists(_869)){
return 0;
}
var row=this.getPageRow(_869);
var _86c=this.getDefaultNodes();
var rows=_82a(_86c[_869]);
for(var i=0,l=rows.length;i<l&&_86a<_86b;i++,row++){
_86a+=rows[i].offsetHeight;
}
return (row?row-1:row);
},getLastVisibleRow:function(_86d,_86e,_86f){
if(!this.pageExists(_86d)){
return 0;
}
var _870=this.getDefaultNodes();
var row=this.getLastPageRow(_86d);
var rows=_82a(_870[_86d]);
for(var i=rows.length-1;i>=0&&_86e>_86f;i--,row--){
_86e-=rows[i].offsetHeight;
}
return row+1;
},findTopRow:function(_871){
var _872=this.getDefaultNodes();
var rows=_82a(_872[this.page]);
for(var i=0,l=rows.length,t=this.pageTop,h;i<l;i++){
h=rows[i].offsetHeight;
t+=h;
if(t>=_871){
this.offset=h-(t-_871);
return i+this.page*this.rowsPerPage;
}
}
return -1;
},findScrollTop:function(_873){
var _874=Math.floor(_873/this.rowsPerPage);
var t=0;
var i,l;
for(i=0;i<_874;i++){
t+=this.getPageHeight(i);
}
this.pageTop=t;
this.page=_874;
this.needPage(_874,this.pageTop);
var _875=this.getDefaultNodes();
var rows=_82a(_875[_874]);
var r=_873-this.rowsPerPage*_874;
for(i=0,l=rows.length;i<l&&i<r;i++){
t+=rows[i].offsetHeight;
}
return t;
},dummy:0});
})();
}
if(!dojo._hasResource["dojox.grid.cells._base"]){
dojo._hasResource["dojox.grid.cells._base"]=true;
dojo.provide("dojox.grid.cells._base");
dojo.declare("dojox.grid._DeferredTextWidget",dijit._Widget,{deferred:null,_destroyOnRemove:true,postCreate:function(){
if(this.deferred){
this.deferred.addBoth(dojo.hitch(this,function(text){
if(this.domNode){
this.domNode.innerHTML=text;
}
}));
}
}});
(function(){
var _876=function(_877){
try{
dojox.grid.util.fire(_877,"focus");
dojox.grid.util.fire(_877,"select");
}
catch(e){
}
};
var _878=function(){
setTimeout(dojo.hitch.apply(dojo,arguments),0);
};
var dgc=dojox.grid.cells;
dojo.declare("dojox.grid.cells._Base",null,{styles:"",classes:"",editable:false,alwaysEditing:false,formatter:null,defaultValue:"...",value:null,hidden:false,noresize:false,draggable:true,_valueProp:"value",_formatPending:false,constructor:function(_879){
this._props=_879||{};
dojo.mixin(this,_879);
if(this.draggable===undefined){
this.draggable=true;
}
},_defaultFormat:function(_87a,_87b){
var s=this.grid.formatterScope||this;
var f=this.formatter;
if(f&&s&&typeof f=="string"){
f=this.formatter=s[f];
}
var v=(_87a!=this.defaultValue&&f)?f.apply(s,_87b):_87a;
if(typeof v=="undefined"){
return this.defaultValue;
}
if(v&&v.addBoth){
v=new dojox.grid._DeferredTextWidget({deferred:v},dojo.create("span",{innerHTML:this.defaultValue}));
}
if(v&&v.declaredClass&&v.startup){
return "<div class='dojoxGridStubNode' linkWidget='"+v.id+"' cellIdx='"+this.index+"'>"+this.defaultValue+"</div>";
}
return v;
},format:function(_87c,_87d){
var f,i=this.grid.edit.info,d=this.get?this.get(_87c,_87d):(this.value||this.defaultValue);
d=(d&&d.replace&&this.grid.escapeHTMLInData)?d.replace(/&/g,"&amp;").replace(/</g,"&lt;"):d;
if(this.editable&&(this.alwaysEditing||(i.rowIndex==_87c&&i.cell==this))){
return this.formatEditing(d,_87c);
}else{
return this._defaultFormat(d,[d,_87c,this]);
}
},formatEditing:function(_87e,_87f){
},getNode:function(_880){
return this.view.getCellNode(_880,this.index);
},getHeaderNode:function(){
return this.view.getHeaderCellNode(this.index);
},getEditNode:function(_881){
return (this.getNode(_881)||0).firstChild||0;
},canResize:function(){
var uw=this.unitWidth;
return uw&&(uw!=="auto");
},isFlex:function(){
var uw=this.unitWidth;
return uw&&dojo.isString(uw)&&(uw=="auto"||uw.slice(-1)=="%");
},applyEdit:function(_882,_883){
this.grid.edit.applyCellEdit(_882,this,_883);
},cancelEdit:function(_884){
this.grid.doCancelEdit(_884);
},_onEditBlur:function(_885){
if(this.grid.edit.isEditCell(_885,this.index)){
this.grid.edit.apply();
}
},registerOnBlur:function(_886,_887){
if(this.commitOnBlur){
dojo.connect(_886,"onblur",function(e){
setTimeout(dojo.hitch(this,"_onEditBlur",_887),250);
});
}
},needFormatNode:function(_888,_889){
this._formatPending=true;
_878(this,"_formatNode",_888,_889);
},cancelFormatNode:function(){
this._formatPending=false;
},_formatNode:function(_88a,_88b){
if(this._formatPending){
this._formatPending=false;
dojo.setSelectable(this.grid.domNode,true);
this.formatNode(this.getEditNode(_88b),_88a,_88b);
}
},formatNode:function(_88c,_88d,_88e){
if(dojo.isIE){
_878(this,"focus",_88e,_88c);
}else{
this.focus(_88e,_88c);
}
},dispatchEvent:function(m,e){
if(m in this){
return this[m](e);
}
},getValue:function(_88f){
return this.getEditNode(_88f)[this._valueProp];
},setValue:function(_890,_891){
var n=this.getEditNode(_890);
if(n){
n[this._valueProp]=_891;
}
},focus:function(_892,_893){
_876(_893||this.getEditNode(_892));
},save:function(_894){
this.value=this.value||this.getValue(_894);
},restore:function(_895){
this.setValue(_895,this.value);
},_finish:function(_896){
dojo.setSelectable(this.grid.domNode,false);
this.cancelFormatNode();
},apply:function(_897){
this.applyEdit(this.getValue(_897),_897);
this._finish(_897);
},cancel:function(_898){
this.cancelEdit(_898);
this._finish(_898);
}});
dgc._Base.markupFactory=function(node,_899){
var d=dojo;
var _89a=d.trim(d.attr(node,"formatter")||"");
if(_89a){
_899.formatter=dojo.getObject(_89a)||_89a;
}
var get=d.trim(d.attr(node,"get")||"");
if(get){
_899.get=dojo.getObject(get);
}
var _89b=function(attr,cell,_89c){
var _89d=d.trim(d.attr(node,attr)||"");
if(_89d){
cell[_89c||attr]=!(_89d.toLowerCase()=="false");
}
};
_89b("sortDesc",_899);
_89b("editable",_899);
_89b("alwaysEditing",_899);
_89b("noresize",_899);
_89b("draggable",_899);
var _89e=d.trim(d.attr(node,"loadingText")||d.attr(node,"defaultValue")||"");
if(_89e){
_899.defaultValue=_89e;
}
var _89f=function(attr,cell,_8a0){
var _8a1=d.trim(d.attr(node,attr)||"")||undefined;
if(_8a1){
cell[_8a0||attr]=_8a1;
}
};
_89f("styles",_899);
_89f("headerStyles",_899);
_89f("cellStyles",_899);
_89f("classes",_899);
_89f("headerClasses",_899);
_89f("cellClasses",_899);
};
dojo.declare("dojox.grid.cells.Cell",dgc._Base,{constructor:function(){
this.keyFilter=this.keyFilter;
},keyFilter:null,formatEditing:function(_8a2,_8a3){
this.needFormatNode(_8a2,_8a3);
return "<input class=\"dojoxGridInput\" type=\"text\" value=\""+_8a2+"\">";
},formatNode:function(_8a4,_8a5,_8a6){
this.inherited(arguments);
this.registerOnBlur(_8a4,_8a6);
},doKey:function(e){
if(this.keyFilter){
var key=String.fromCharCode(e.charCode);
if(key.search(this.keyFilter)==-1){
dojo.stopEvent(e);
}
}
},_finish:function(_8a7){
this.inherited(arguments);
var n=this.getEditNode(_8a7);
try{
dojox.grid.util.fire(n,"blur");
}
catch(e){
}
}});
dgc.Cell.markupFactory=function(node,_8a8){
dgc._Base.markupFactory(node,_8a8);
var d=dojo;
var _8a9=d.trim(d.attr(node,"keyFilter")||"");
if(_8a9){
_8a8.keyFilter=new RegExp(_8a9);
}
};
dojo.declare("dojox.grid.cells.RowIndex",dgc.Cell,{name:"Row",postscript:function(){
this.editable=false;
},get:function(_8aa){
return _8aa+1;
}});
dgc.RowIndex.markupFactory=function(node,_8ab){
dgc.Cell.markupFactory(node,_8ab);
};
dojo.declare("dojox.grid.cells.Select",dgc.Cell,{options:null,values:null,returnIndex:-1,constructor:function(_8ac){
this.values=this.values||this.options;
},formatEditing:function(_8ad,_8ae){
this.needFormatNode(_8ad,_8ae);
var h=["<select class=\"dojoxGridSelect\">"];
for(var i=0,o,v;((o=this.options[i])!==undefined)&&((v=this.values[i])!==undefined);i++){
h.push("<option",(_8ad==v?" selected":"")," value=\""+v+"\"",">",o,"</option>");
}
h.push("</select>");
return h.join("");
},getValue:function(_8af){
var n=this.getEditNode(_8af);
if(n){
var i=n.selectedIndex,o=n.options[i];
return this.returnIndex>-1?i:o.value||o.innerHTML;
}
}});
dgc.Select.markupFactory=function(node,cell){
dgc.Cell.markupFactory(node,cell);
var d=dojo;
var _8b0=d.trim(d.attr(node,"options")||"");
if(_8b0){
var o=_8b0.split(",");
if(o[0]!=_8b0){
cell.options=o;
}
}
var _8b1=d.trim(d.attr(node,"values")||"");
if(_8b1){
var v=_8b1.split(",");
if(v[0]!=_8b1){
cell.values=v;
}
}
};
dojo.declare("dojox.grid.cells.AlwaysEdit",dgc.Cell,{alwaysEditing:true,_formatNode:function(_8b2,_8b3){
this.formatNode(this.getEditNode(_8b3),_8b2,_8b3);
},applyStaticValue:function(_8b4){
var e=this.grid.edit;
e.applyCellEdit(this.getValue(_8b4),this,_8b4);
e.start(this,_8b4,true);
}});
dgc.AlwaysEdit.markupFactory=function(node,cell){
dgc.Cell.markupFactory(node,cell);
};
dojo.declare("dojox.grid.cells.Bool",dgc.AlwaysEdit,{_valueProp:"checked",formatEditing:function(_8b5,_8b6){
return "<input class=\"dojoxGridInput\" type=\"checkbox\""+(_8b5?" checked=\"checked\"":"")+" style=\"width: auto\" />";
},doclick:function(e){
if(e.target.tagName=="INPUT"){
this.applyStaticValue(e.rowIndex);
}
}});
dgc.Bool.markupFactory=function(node,cell){
dgc.AlwaysEdit.markupFactory(node,cell);
};
})();
}
if(!dojo._hasResource["dojox.grid.cells"]){
dojo._hasResource["dojox.grid.cells"]=true;
dojo.provide("dojox.grid.cells");
}
if(!dojo._hasResource["dojox.grid._Builder"]){
dojo._hasResource["dojox.grid._Builder"]=true;
dojo.provide("dojox.grid._Builder");
(function(){
var dg=dojox.grid;
var _8b7=function(td){
return td.cellIndex>=0?td.cellIndex:dojo.indexOf(td.parentNode.cells,td);
};
var _8b8=function(tr){
return tr.rowIndex>=0?tr.rowIndex:dojo.indexOf(tr.parentNode.childNodes,tr);
};
var _8b9=function(_8ba,_8bb){
return _8ba&&((_8ba.rows||0)[_8bb]||_8ba.childNodes[_8bb]);
};
var _8bc=function(node){
for(var n=node;n&&n.tagName!="TABLE";n=n.parentNode){
}
return n;
};
var _8bd=function(_8be,_8bf){
for(var n=_8be;n&&_8bf(n);n=n.parentNode){
}
return n;
};
var _8c0=function(_8c1){
var name=_8c1.toUpperCase();
return function(node){
return node.tagName!=name;
};
};
var _8c2=dojox.grid.util.rowIndexTag;
var _8c3=dojox.grid.util.gridViewTag;
dg._Builder=dojo.extend(function(view){
if(view){
this.view=view;
this.grid=view.grid;
}
},{view:null,_table:"<table class=\"dojoxGridRowTable\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" role=\"presentation\"",getTableArray:function(){
var html=[this._table];
if(this.view.viewWidth){
html.push([" style=\"width:",this.view.viewWidth,";\""].join(""));
}
html.push(">");
return html;
},generateCellMarkup:function(_8c4,_8c5,_8c6,_8c7){
var _8c8=[],html;
if(_8c7){
var _8c9=_8c4.index!=_8c4.grid.getSortIndex()?"":_8c4.grid.sortInfo>0?"aria-sort=\"ascending\"":"aria-sort=\"descending\"";
if(!_8c4.id){
_8c4.id=this.grid.id+"Hdr"+_8c4.index;
}
html=["<th tabIndex=\"-1\" aria-readonly=\"true\" role=\"columnheader\"",_8c9,"id=\"",_8c4.id,"\""];
}else{
var _8ca=this.grid.editable&&!_8c4.editable?"aria-readonly=\"true\"":"";
html=["<td tabIndex=\"-1\" role=\"gridcell\"",_8ca];
}
if(_8c4.colSpan){
html.push(" colspan=\"",_8c4.colSpan,"\"");
}
if(_8c4.rowSpan){
html.push(" rowspan=\"",_8c4.rowSpan,"\"");
}
html.push(" class=\"dojoxGridCell ");
if(_8c4.classes){
html.push(_8c4.classes," ");
}
if(_8c6){
html.push(_8c6," ");
}
_8c8.push(html.join(""));
_8c8.push("");
html=["\" idx=\"",_8c4.index,"\" style=\""];
if(_8c5&&_8c5[_8c5.length-1]!=";"){
_8c5+=";";
}
html.push(_8c4.styles,_8c5||"",_8c4.hidden?"display:none;":"");
if(_8c4.unitWidth){
html.push("width:",_8c4.unitWidth,";");
}
_8c8.push(html.join(""));
_8c8.push("");
html=["\""];
if(_8c4.attrs){
html.push(" ",_8c4.attrs);
}
html.push(">");
_8c8.push(html.join(""));
_8c8.push("");
_8c8.push(_8c7?"</th>":"</td>");
return _8c8;
},isCellNode:function(_8cb){
return Boolean(_8cb&&_8cb!=dojo.doc&&dojo.attr(_8cb,"idx"));
},getCellNodeIndex:function(_8cc){
return _8cc?Number(dojo.attr(_8cc,"idx")):-1;
},getCellNode:function(_8cd,_8ce){
for(var i=0,row;((row=_8b9(_8cd.firstChild,i))&&row.cells);i++){
for(var j=0,cell;(cell=row.cells[j]);j++){
if(this.getCellNodeIndex(cell)==_8ce){
return cell;
}
}
}
return null;
},findCellTarget:function(_8cf,_8d0){
var n=_8cf;
while(n&&(!this.isCellNode(n)||(n.offsetParent&&_8c3 in n.offsetParent.parentNode&&n.offsetParent.parentNode[_8c3]!=this.view.id))&&(n!=_8d0)){
n=n.parentNode;
}
return n!=_8d0?n:null;
},baseDecorateEvent:function(e){
e.dispatch="do"+e.type;
e.grid=this.grid;
e.sourceView=this.view;
e.cellNode=this.findCellTarget(e.target,e.rowNode);
e.cellIndex=this.getCellNodeIndex(e.cellNode);
e.cell=(e.cellIndex>=0?this.grid.getCell(e.cellIndex):null);
},findTarget:function(_8d1,_8d2){
var n=_8d1;
while(n&&(n!=this.domNode)&&(!(_8d2 in n)||(_8c3 in n&&n[_8c3]!=this.view.id))){
n=n.parentNode;
}
return (n!=this.domNode)?n:null;
},findRowTarget:function(_8d3){
return this.findTarget(_8d3,_8c2);
},isIntraNodeEvent:function(e){
try{
return (e.cellNode&&e.relatedTarget&&dojo.isDescendant(e.relatedTarget,e.cellNode));
}
catch(x){
return false;
}
},isIntraRowEvent:function(e){
try{
var row=e.relatedTarget&&this.findRowTarget(e.relatedTarget);
return !row&&(e.rowIndex==-1)||row&&(e.rowIndex==row.gridRowIndex);
}
catch(x){
return false;
}
},dispatchEvent:function(e){
if(e.dispatch in this){
return this[e.dispatch](e);
}
return false;
},domouseover:function(e){
if(e.cellNode&&(e.cellNode!=this.lastOverCellNode)){
this.lastOverCellNode=e.cellNode;
this.grid.onMouseOver(e);
}
this.grid.onMouseOverRow(e);
},domouseout:function(e){
if(e.cellNode&&(e.cellNode==this.lastOverCellNode)&&!this.isIntraNodeEvent(e,this.lastOverCellNode)){
this.lastOverCellNode=null;
this.grid.onMouseOut(e);
if(!this.isIntraRowEvent(e)){
this.grid.onMouseOutRow(e);
}
}
},domousedown:function(e){
if(e.cellNode){
this.grid.onMouseDown(e);
}
this.grid.onMouseDownRow(e);
}});
dg._ContentBuilder=dojo.extend(function(view){
dg._Builder.call(this,view);
},dg._Builder.prototype,{update:function(){
this.prepareHtml();
},prepareHtml:function(){
var _8d4=this.grid.get,_8d5=this.view.structure.cells;
for(var j=0,row;(row=_8d5[j]);j++){
for(var i=0,cell;(cell=row[i]);i++){
cell.get=cell.get||(cell.value==undefined)&&_8d4;
cell.markup=this.generateCellMarkup(cell,cell.cellStyles,cell.cellClasses,false);
if(!this.grid.editable&&cell.editable){
this.grid.editable=true;
}
}
}
},generateHtml:function(_8d6,_8d7){
var html=this.getTableArray(),v=this.view,_8d8=v.structure.cells,item=this.grid.getItem(_8d7);
dojox.grid.util.fire(this.view,"onBeforeRow",[_8d7,_8d8]);
for(var j=0,row;(row=_8d8[j]);j++){
if(row.hidden||row.header){
continue;
}
html.push(!row.invisible?"<tr>":"<tr class=\"dojoxGridInvisible\">");
for(var i=0,cell,m,cc,cs;(cell=row[i]);i++){
m=cell.markup;
cc=cell.customClasses=[];
cs=cell.customStyles=[];
m[5]=cell.format(_8d7,item);
m[1]=cc.join(" ");
m[3]=cs.join(";");
html.push.apply(html,m);
}
html.push("</tr>");
}
html.push("</table>");
return html.join("");
},decorateEvent:function(e){
e.rowNode=this.findRowTarget(e.target);
if(!e.rowNode){
return false;
}
e.rowIndex=e.rowNode[_8c2];
this.baseDecorateEvent(e);
e.cell=this.grid.getCell(e.cellIndex);
return true;
}});
dg._HeaderBuilder=dojo.extend(function(view){
this.moveable=null;
dg._Builder.call(this,view);
},dg._Builder.prototype,{_skipBogusClicks:false,overResizeWidth:4,minColWidth:1,update:function(){
if(this.tableMap){
this.tableMap.mapRows(this.view.structure.cells);
}else{
this.tableMap=new dg._TableMap(this.view.structure.cells);
}
},generateHtml:function(_8d9,_8da){
var html=this.getTableArray(),_8db=this.view.structure.cells;
dojox.grid.util.fire(this.view,"onBeforeRow",[-1,_8db]);
for(var j=0,row;(row=_8db[j]);j++){
if(row.hidden){
continue;
}
html.push(!row.invisible?"<tr>":"<tr class=\"dojoxGridInvisible\">");
for(var i=0,cell,_8dc;(cell=row[i]);i++){
cell.customClasses=[];
cell.customStyles=[];
if(this.view.simpleStructure){
if(cell.draggable){
if(cell.headerClasses){
if(cell.headerClasses.indexOf("dojoDndItem")==-1){
cell.headerClasses+=" dojoDndItem";
}
}else{
cell.headerClasses="dojoDndItem";
}
}
if(cell.attrs){
if(cell.attrs.indexOf("dndType='gridColumn_")==-1){
cell.attrs+=" dndType='gridColumn_"+this.grid.id+"'";
}
}else{
cell.attrs="dndType='gridColumn_"+this.grid.id+"'";
}
}
_8dc=this.generateCellMarkup(cell,cell.headerStyles,cell.headerClasses,true);
_8dc[5]=(_8da!=undefined?_8da:_8d9(cell));
_8dc[3]=cell.customStyles.join(";");
_8dc[1]=cell.customClasses.join(" ");
html.push(_8dc.join(""));
}
html.push("</tr>");
}
html.push("</table>");
return html.join("");
},getCellX:function(e){
var n,x=e.layerX;
if(dojo.isMoz||dojo.isIE>=9){
n=_8bd(e.target,_8c0("th"));
x-=(n&&n.offsetLeft)||0;
var t=e.sourceView.getScrollbarWidth();
if(!dojo._isBodyLtr()){
table=_8bd(n,_8c0("table"));
x-=(table&&table.offsetLeft)||0;
}
}
n=_8bd(e.target,function(){
if(!n||n==e.cellNode){
return false;
}
x+=(n.offsetLeft<0?0:n.offsetLeft);
return true;
});
return x;
},decorateEvent:function(e){
this.baseDecorateEvent(e);
e.rowIndex=-1;
e.cellX=this.getCellX(e);
return true;
},prepareResize:function(e,mod){
do{
var i=_8b7(e.cellNode);
e.cellNode=(i?e.cellNode.parentNode.cells[i+mod]:null);
e.cellIndex=(e.cellNode?this.getCellNodeIndex(e.cellNode):-1);
}while(e.cellNode&&e.cellNode.style.display=="none");
return Boolean(e.cellNode);
},canResize:function(e){
if(!e.cellNode||e.cellNode.colSpan>1){
return false;
}
var cell=this.grid.getCell(e.cellIndex);
return !cell.noresize&&cell.canResize();
},overLeftResizeArea:function(e){
if(dojo.hasClass(dojo.body(),"dojoDndMove")){
return false;
}
if(dojo.isIE){
var tN=e.target;
if(dojo.hasClass(tN,"dojoxGridArrowButtonNode")||dojo.hasClass(tN,"dojoxGridArrowButtonChar")){
return false;
}
}
if(dojo._isBodyLtr()){
return (e.cellIndex>0)&&(e.cellX>0&&e.cellX<this.overResizeWidth)&&this.prepareResize(e,-1);
}
var t=e.cellNode&&(e.cellX>0&&e.cellX<this.overResizeWidth);
return t;
},overRightResizeArea:function(e){
if(dojo.hasClass(dojo.body(),"dojoDndMove")){
return false;
}
if(dojo.isIE){
var tN=e.target;
if(dojo.hasClass(tN,"dojoxGridArrowButtonNode")||dojo.hasClass(tN,"dojoxGridArrowButtonChar")){
return false;
}
}
if(dojo._isBodyLtr()){
return e.cellNode&&(e.cellX>=e.cellNode.offsetWidth-this.overResizeWidth);
}
return (e.cellIndex>0)&&(e.cellX>=e.cellNode.offsetWidth-this.overResizeWidth)&&this.prepareResize(e,-1);
},domousemove:function(e){
if(!this.moveable){
var c=(this.overRightResizeArea(e)?"dojoxGridColResize":(this.overLeftResizeArea(e)?"dojoxGridColResize":""));
if(c&&!this.canResize(e)){
c="dojoxGridColNoResize";
}
dojo.toggleClass(e.sourceView.headerNode,"dojoxGridColNoResize",(c=="dojoxGridColNoResize"));
dojo.toggleClass(e.sourceView.headerNode,"dojoxGridColResize",(c=="dojoxGridColResize"));
if(dojo.isIE){
var t=e.sourceView.headerNode.scrollLeft;
e.sourceView.headerNode.scrollLeft=t;
}
if(c){
dojo.stopEvent(e);
}
}
},domousedown:function(e){
if(!this.moveable){
if((this.overRightResizeArea(e)||this.overLeftResizeArea(e))&&this.canResize(e)){
this.beginColumnResize(e);
}else{
this.grid.onMouseDown(e);
this.grid.onMouseOverRow(e);
}
}
},doclick:function(e){
if(this._skipBogusClicks){
dojo.stopEvent(e);
return true;
}
return false;
},colResizeSetup:function(e,_8dd){
var _8de=dojo.contentBox(e.sourceView.headerNode);
if(_8dd){
this.lineDiv=document.createElement("div");
var vw=(dojo.position||dojo._abs)(e.sourceView.headerNode,true);
var _8df=dojo.contentBox(e.sourceView.domNode);
var l=e.pageX;
if(!dojo._isBodyLtr()&&dojo.isIE<8){
l-=dojox.html.metrics.getScrollbar().w;
}
dojo.style(this.lineDiv,{top:vw.y+"px",left:l+"px",height:(_8df.h+_8de.h)+"px"});
dojo.addClass(this.lineDiv,"dojoxGridResizeColLine");
this.lineDiv._origLeft=l;
dojo.body().appendChild(this.lineDiv);
}
var _8e0=[],_8e1=this.tableMap.findOverlappingNodes(e.cellNode);
for(var i=0,cell;(cell=_8e1[i]);i++){
_8e0.push({node:cell,index:this.getCellNodeIndex(cell),width:cell.offsetWidth});
}
var view=e.sourceView;
var adj=dojo._isBodyLtr()?1:-1;
var _8e2=e.grid.views.views;
var _8e3=[];
for(var j=view.idx+adj,_8e4;(_8e4=_8e2[j]);j=j+adj){
_8e3.push({node:_8e4.headerNode,left:window.parseInt(_8e4.headerNode.style.left)});
}
var _8e5=view.headerContentNode.firstChild;
var drag={scrollLeft:e.sourceView.headerNode.scrollLeft,view:view,node:e.cellNode,index:e.cellIndex,w:dojo.contentBox(e.cellNode).w,vw:_8de.w,table:_8e5,tw:dojo.contentBox(_8e5).w,spanners:_8e0,followers:_8e3};
return drag;
},beginColumnResize:function(e){
this.moverDiv=document.createElement("div");
dojo.style(this.moverDiv,{position:"absolute",left:0});
dojo.body().appendChild(this.moverDiv);
dojo.addClass(this.grid.domNode,"dojoxGridColumnResizing");
var m=(this.moveable=new dojo.dnd.Moveable(this.moverDiv));
var drag=this.colResizeSetup(e,true);
m.onMove=dojo.hitch(this,"doResizeColumn",drag);
dojo.connect(m,"onMoveStop",dojo.hitch(this,function(){
this.endResizeColumn(drag);
if(drag.node.releaseCapture){
drag.node.releaseCapture();
}
this.moveable.destroy();
delete this.moveable;
this.moveable=null;
dojo.removeClass(this.grid.domNode,"dojoxGridColumnResizing");
}));
if(e.cellNode.setCapture){
e.cellNode.setCapture();
}
m.onMouseDown(e);
},doResizeColumn:function(_8e6,_8e7,_8e8){
var _8e9=_8e8.l;
var data={deltaX:_8e9,w:_8e6.w+(dojo._isBodyLtr()?_8e9:-_8e9),vw:_8e6.vw+_8e9,tw:_8e6.tw+_8e9};
this.dragRecord={inDrag:_8e6,mover:_8e7,leftTop:_8e8};
if(data.w>=this.minColWidth){
if(!_8e7){
this.doResizeNow(_8e6,data);
}else{
dojo.style(this.lineDiv,"left",(this.lineDiv._origLeft+data.deltaX)+"px");
}
}
},endResizeColumn:function(_8ea){
if(this.dragRecord){
var _8eb=this.dragRecord.leftTop;
var _8ec=dojo._isBodyLtr()?_8eb.l:-_8eb.l;
_8ec+=Math.max(_8ea.w+_8ec,this.minColWidth)-(_8ea.w+_8ec);
if(dojo.isWebKit&&_8ea.spanners.length){
_8ec+=dojo._getPadBorderExtents(_8ea.spanners[0].node).w;
}
var data={deltaX:_8ec,w:_8ea.w+_8ec,vw:_8ea.vw+_8ec,tw:_8ea.tw+_8ec};
this.doResizeNow(_8ea,data);
delete this.dragRecord;
}
dojo.destroy(this.lineDiv);
dojo.destroy(this.moverDiv);
dojo.destroy(this.moverDiv);
delete this.moverDiv;
this._skipBogusClicks=true;
_8ea.view.update();
this._skipBogusClicks=false;
this.grid.onResizeColumn(_8ea.index);
},doResizeNow:function(_8ed,data){
_8ed.view.convertColPctToFixed();
if(_8ed.view.flexCells&&!_8ed.view.testFlexCells()){
var t=_8bc(_8ed.node);
if(t){
(t.style.width="");
}
}
var i,s,sw,f,fl;
for(i=0;(s=_8ed.spanners[i]);i++){
sw=s.width+data.deltaX;
if(sw>0){
s.node.style.width=sw+"px";
_8ed.view.setColWidth(s.index,sw);
}
}
if(dojo._isBodyLtr()||!dojo.isIE){
for(i=0;(f=_8ed.followers[i]);i++){
fl=f.left+data.deltaX;
f.node.style.left=fl+"px";
}
}
_8ed.node.style.width=data.w+"px";
_8ed.view.setColWidth(_8ed.index,data.w);
_8ed.view.headerNode.style.width=data.vw+"px";
_8ed.view.setColumnsWidth(data.tw);
if(!dojo._isBodyLtr()){
_8ed.view.headerNode.scrollLeft=_8ed.scrollLeft+data.deltaX;
}
}});
dg._TableMap=dojo.extend(function(rows){
this.mapRows(rows);
},{map:null,mapRows:function(_8ee){
var _8ef=_8ee.length;
if(!_8ef){
return;
}
this.map=[];
var row;
for(var k=0;(row=_8ee[k]);k++){
this.map[k]=[];
}
for(var j=0;(row=_8ee[j]);j++){
for(var i=0,x=0,cell,_8f0,_8f1;(cell=row[i]);i++){
while(this.map[j][x]){
x++;
}
this.map[j][x]={c:i,r:j};
_8f1=cell.rowSpan||1;
_8f0=cell.colSpan||1;
for(var y=0;y<_8f1;y++){
for(var s=0;s<_8f0;s++){
this.map[j+y][x+s]=this.map[j][x];
}
}
x+=_8f0;
}
}
},dumpMap:function(){
for(var j=0,row,h="";(row=this.map[j]);j++,h=""){
for(var i=0,cell;(cell=row[i]);i++){
h+=cell.r+","+cell.c+"   ";
}
}
},getMapCoords:function(_8f2,_8f3){
for(var j=0,row;(row=this.map[j]);j++){
for(var i=0,cell;(cell=row[i]);i++){
if(cell.c==_8f3&&cell.r==_8f2){
return {j:j,i:i};
}
}
}
return {j:-1,i:-1};
},getNode:function(_8f4,_8f5,_8f6){
var row=_8f4&&_8f4.rows[_8f5];
return row&&row.cells[_8f6];
},_findOverlappingNodes:function(_8f7,_8f8,_8f9){
var _8fa=[];
var m=this.getMapCoords(_8f8,_8f9);
for(var j=0,row;(row=this.map[j]);j++){
if(j==m.j){
continue;
}
var rw=row[m.i];
var n=(rw?this.getNode(_8f7,rw.r,rw.c):null);
if(n){
_8fa.push(n);
}
}
return _8fa;
},findOverlappingNodes:function(_8fb){
return this._findOverlappingNodes(_8bc(_8fb),_8b8(_8fb.parentNode),_8b7(_8fb));
}});
})();
}
if(!dojo._hasResource["dojox.grid._View"]){
dojo._hasResource["dojox.grid._View"]=true;
dojo.provide("dojox.grid._View");
(function(){
var _8fc=function(_8fd,_8fe){
return _8fd.style.cssText==undefined?_8fd.getAttribute("style"):_8fd.style.cssText;
};
dojo.declare("dojox.grid._View",[dijit._Widget,dijit._Templated],{defaultWidth:"18em",viewWidth:"",templateString:"<div class=\"dojoxGridView\" role=\"presentation\">\r\n\t<div class=\"dojoxGridHeader\" dojoAttachPoint=\"headerNode\" role=\"presentation\">\r\n\t\t<div dojoAttachPoint=\"headerNodeContainer\" style=\"width:9000em\" role=\"presentation\">\r\n\t\t\t<div dojoAttachPoint=\"headerContentNode\" role=\"row\"></div>\r\n\t\t</div>\r\n\t</div>\r\n\t<input type=\"checkbox\" class=\"dojoxGridHiddenFocus\" dojoAttachPoint=\"hiddenFocusNode\" role=\"presentation\" />\r\n\t<input type=\"checkbox\" class=\"dojoxGridHiddenFocus\" role=\"presentation\" />\r\n\t<div class=\"dojoxGridScrollbox\" dojoAttachPoint=\"scrollboxNode\" role=\"presentation\">\r\n\t\t<div class=\"dojoxGridContent\" dojoAttachPoint=\"contentNode\" hidefocus=\"hidefocus\" role=\"presentation\"></div>\r\n\t</div>\r\n</div>\r\n",themeable:false,classTag:"dojoxGrid",marginBottom:0,rowPad:2,_togglingColumn:-1,_headerBuilderClass:dojox.grid._HeaderBuilder,_contentBuilderClass:dojox.grid._ContentBuilder,postMixInProperties:function(){
this.rowNodes={};
},postCreate:function(){
this.connect(this.scrollboxNode,"onscroll","doscroll");
dojox.grid.util.funnelEvents(this.contentNode,this,"doContentEvent",["mouseover","mouseout","click","dblclick","contextmenu","mousedown"]);
dojox.grid.util.funnelEvents(this.headerNode,this,"doHeaderEvent",["dblclick","mouseover","mouseout","mousemove","mousedown","click","contextmenu"]);
this.content=new this._contentBuilderClass(this);
this.header=new this._headerBuilderClass(this);
if(!dojo._isBodyLtr()){
this.headerNodeContainer.style.width="";
}
},destroy:function(){
dojo.destroy(this.headerNode);
delete this.headerNode;
for(var i in this.rowNodes){
dojo.destroy(this.rowNodes[i]);
}
this.rowNodes={};
if(this.source){
this.source.destroy();
}
this.inherited(arguments);
},focus:function(){
if(dojo.isIE||dojo.isWebKit||dojo.isOpera){
this.hiddenFocusNode.focus();
}else{
this.scrollboxNode.focus();
}
},setStructure:function(_8ff){
var vs=(this.structure=_8ff);
if(vs.width&&!isNaN(vs.width)){
this.viewWidth=vs.width+"em";
}else{
this.viewWidth=vs.width||(vs.noscroll?"auto":this.viewWidth);
}
this._onBeforeRow=vs.onBeforeRow||function(){
};
this._onAfterRow=vs.onAfterRow||function(){
};
this.noscroll=vs.noscroll;
if(this.noscroll){
this.scrollboxNode.style.overflow="hidden";
}
this.simpleStructure=Boolean(vs.cells.length==1);
this.testFlexCells();
this.updateStructure();
},_cleanupRowWidgets:function(_900){
if(_900){
dojo.forEach(dojo.query("[widgetId]",_900).map(dijit.byNode),function(w){
if(w._destroyOnRemove){
w.destroy();
delete w;
}else{
if(w.domNode&&w.domNode.parentNode){
w.domNode.parentNode.removeChild(w.domNode);
}
}
});
}
},onBeforeRow:function(_901,_902){
this._onBeforeRow(_901,_902);
if(_901>=0){
this._cleanupRowWidgets(this.getRowNode(_901));
}
},onAfterRow:function(_903,_904,_905){
this._onAfterRow(_903,_904,_905);
var g=this.grid;
dojo.forEach(dojo.query(".dojoxGridStubNode",_905),function(n){
if(n&&n.parentNode){
var lw=n.getAttribute("linkWidget");
var _906=window.parseInt(dojo.attr(n,"cellIdx"),10);
var _907=g.getCell(_906);
var w=dijit.byId(lw);
if(w){
n.parentNode.replaceChild(w.domNode,n);
if(!w._started){
w.startup();
}
}else{
n.innerHTML="";
}
}
},this);
},testFlexCells:function(){
this.flexCells=false;
for(var j=0,row;(row=this.structure.cells[j]);j++){
for(var i=0,cell;(cell=row[i]);i++){
cell.view=this;
this.flexCells=this.flexCells||cell.isFlex();
}
}
return this.flexCells;
},updateStructure:function(){
this.header.update();
this.content.update();
},getScrollbarWidth:function(){
var _908=this.hasVScrollbar();
var _909=dojo.style(this.scrollboxNode,"overflow");
if(this.noscroll||!_909||_909=="hidden"){
_908=false;
}else{
if(_909=="scroll"){
_908=true;
}
}
return (_908?dojox.html.metrics.getScrollbar().w:0);
},getColumnsWidth:function(){
var h=this.headerContentNode;
return h&&h.firstChild?h.firstChild.offsetWidth:0;
},setColumnsWidth:function(_90a){
this.headerContentNode.firstChild.style.width=_90a+"px";
if(this.viewWidth){
this.viewWidth=_90a+"px";
}
},getWidth:function(){
return this.viewWidth||(this.getColumnsWidth()+this.getScrollbarWidth())+"px";
},getContentWidth:function(){
return Math.max(0,dojo._getContentBox(this.domNode).w-this.getScrollbarWidth())+"px";
},render:function(){
this.scrollboxNode.style.height="";
this.renderHeader();
if(this._togglingColumn>=0){
this.setColumnsWidth(this.getColumnsWidth()-this._togglingColumn);
this._togglingColumn=-1;
}
var _90b=this.grid.layout.cells;
var _90c=dojo.hitch(this,function(node,_90d){
!dojo._isBodyLtr()&&(_90d=!_90d);
var inc=_90d?-1:1;
var idx=this.header.getCellNodeIndex(node)+inc;
var cell=_90b[idx];
while(cell&&cell.getHeaderNode()&&cell.getHeaderNode().style.display=="none"){
idx+=inc;
cell=_90b[idx];
}
if(cell){
return cell.getHeaderNode();
}
return null;
});
if(this.grid.columnReordering&&this.simpleStructure){
if(this.source){
this.source.destroy();
}
var _90e="dojoxGrid_bottomMarker";
var _90f="dojoxGrid_topMarker";
if(this.bottomMarker){
dojo.destroy(this.bottomMarker);
}
this.bottomMarker=dojo.byId(_90e);
if(this.topMarker){
dojo.destroy(this.topMarker);
}
this.topMarker=dojo.byId(_90f);
if(!this.bottomMarker){
this.bottomMarker=dojo.create("div",{"id":_90e,"class":"dojoxGridColPlaceBottom"},dojo.body());
this._hide(this.bottomMarker);
this.topMarker=dojo.create("div",{"id":_90f,"class":"dojoxGridColPlaceTop"},dojo.body());
this._hide(this.topMarker);
}
this.arrowDim=dojo.contentBox(this.bottomMarker);
var _910=dojo.contentBox(this.headerContentNode.firstChild.rows[0]).h;
this.source=new dojo.dnd.Source(this.headerContentNode.firstChild.rows[0],{horizontal:true,accept:["gridColumn_"+this.grid.id],viewIndex:this.index,generateText:false,onMouseDown:dojo.hitch(this,function(e){
this.header.decorateEvent(e);
if((this.header.overRightResizeArea(e)||this.header.overLeftResizeArea(e))&&this.header.canResize(e)&&!this.header.moveable){
this.header.beginColumnResize(e);
}else{
if(this.grid.headerMenu){
this.grid.headerMenu.onCancel(true);
}
if(e.button===(dojo.isIE?1:0)){
dojo.dnd.Source.prototype.onMouseDown.call(this.source,e);
}
}
}),onMouseOver:dojo.hitch(this,function(e){
var src=this.source;
if(src._getChildByEvent(e)){
dojo.dnd.Source.prototype.onMouseOver.apply(src,arguments);
}
}),_markTargetAnchor:dojo.hitch(this,function(_911){
var src=this.source;
if(src.current==src.targetAnchor&&src.before==_911){
return;
}
if(src.targetAnchor&&_90c(src.targetAnchor,src.before)){
src._removeItemClass(_90c(src.targetAnchor,src.before),src.before?"After":"Before");
}
dojo.dnd.Source.prototype._markTargetAnchor.call(src,_911);
var _912=_911?src.targetAnchor:_90c(src.targetAnchor,src.before);
var _913=0;
if(!_912){
_912=src.targetAnchor;
_913=dojo.contentBox(_912).w+this.arrowDim.w/2+2;
}
var pos=(dojo.position||dojo._abs)(_912,true);
var left=Math.floor(pos.x-this.arrowDim.w/2+_913);
dojo.style(this.bottomMarker,"visibility","visible");
dojo.style(this.topMarker,"visibility","visible");
dojo.style(this.bottomMarker,{"left":left+"px","top":(_910+pos.y)+"px"});
dojo.style(this.topMarker,{"left":left+"px","top":(pos.y-this.arrowDim.h)+"px"});
if(src.targetAnchor&&_90c(src.targetAnchor,src.before)){
src._addItemClass(_90c(src.targetAnchor,src.before),src.before?"After":"Before");
}
}),_unmarkTargetAnchor:dojo.hitch(this,function(){
var src=this.source;
if(!src.targetAnchor){
return;
}
if(src.targetAnchor&&_90c(src.targetAnchor,src.before)){
src._removeItemClass(_90c(src.targetAnchor,src.before),src.before?"After":"Before");
}
this._hide(this.bottomMarker);
this._hide(this.topMarker);
dojo.dnd.Source.prototype._unmarkTargetAnchor.call(src);
}),destroy:dojo.hitch(this,function(){
dojo.disconnect(this._source_conn);
dojo.unsubscribe(this._source_sub);
dojo.dnd.Source.prototype.destroy.call(this.source);
if(this.bottomMarker){
dojo.destroy(this.bottomMarker);
delete this.bottomMarker;
}
if(this.topMarker){
dojo.destroy(this.topMarker);
delete this.topMarker;
}
}),onDndCancel:dojo.hitch(this,function(){
dojo.dnd.Source.prototype.onDndCancel.call(this.source);
this._hide(this.bottomMarker);
this._hide(this.topMarker);
})});
this._source_conn=dojo.connect(this.source,"onDndDrop",this,"_onDndDrop");
this._source_sub=dojo.subscribe("/dnd/drop/before",this,"_onDndDropBefore");
this.source.startup();
}
},_hide:function(node){
dojo.style(node,{left:"-10000px",top:"-10000px","visibility":"hidden"});
},_onDndDropBefore:function(_914,_915,copy){
if(dojo.dnd.manager().target!==this.source){
return;
}
this.source._targetNode=this.source.targetAnchor;
this.source._beforeTarget=this.source.before;
var _916=this.grid.views.views;
var _917=_916[_914.viewIndex];
var _918=_916[this.index];
if(_918!=_917){
_917.convertColPctToFixed();
_918.convertColPctToFixed();
}
},_onDndDrop:function(_919,_91a,copy){
if(dojo.dnd.manager().target!==this.source){
if(dojo.dnd.manager().source===this.source){
this._removingColumn=true;
}
return;
}
this._hide(this.bottomMarker);
this._hide(this.topMarker);
var _91b=function(n){
return n?dojo.attr(n,"idx"):null;
};
var w=dojo.marginBox(_91a[0]).w;
if(_919.viewIndex!==this.index){
var _91c=this.grid.views.views;
var _91d=_91c[_919.viewIndex];
var _91e=_91c[this.index];
if(_91d.viewWidth&&_91d.viewWidth!="auto"){
_91d.setColumnsWidth(_91d.getColumnsWidth()-w);
}
if(_91e.viewWidth&&_91e.viewWidth!="auto"){
_91e.setColumnsWidth(_91e.getColumnsWidth());
}
}
var stn=this.source._targetNode;
var stb=this.source._beforeTarget;
!dojo._isBodyLtr()&&(stb=!stb);
var _91f=this.grid.layout;
var idx=this.index;
delete this.source._targetNode;
delete this.source._beforeTarget;
_91f.moveColumn(_919.viewIndex,idx,_91b(_91a[0]),_91b(stn),stb);
},renderHeader:function(){
this.headerContentNode.innerHTML=this.header.generateHtml(this._getHeaderContent);
if(this.flexCells){
this.contentWidth=this.getContentWidth();
this.headerContentNode.firstChild.style.width=this.contentWidth;
}
dojox.grid.util.fire(this,"onAfterRow",[-1,this.structure.cells,this.headerContentNode]);
},_getHeaderContent:function(_920){
var n=_920.name||_920.grid.getCellName(_920);
var ret=["<div class=\"dojoxGridSortNode"];
if(_920.index!=_920.grid.getSortIndex()){
ret.push("\">");
}else{
ret=ret.concat([" ",_920.grid.sortInfo>0?"dojoxGridSortUp":"dojoxGridSortDown","\"><div class=\"dojoxGridArrowButtonChar\">",_920.grid.sortInfo>0?"&#9650;":"&#9660;","</div><div class=\"dojoxGridArrowButtonNode\" role=\"presentation\"></div>","<div class=\"dojoxGridColCaption\">"]);
}
ret=ret.concat([n,"</div></div>"]);
return ret.join("");
},resize:function(){
this.adaptHeight();
this.adaptWidth();
},hasHScrollbar:function(_921){
var _922=this._hasHScroll||false;
if(this._hasHScroll==undefined||_921){
if(this.noscroll){
this._hasHScroll=false;
}else{
var _923=dojo.style(this.scrollboxNode,"overflow");
if(_923=="hidden"){
this._hasHScroll=false;
}else{
if(_923=="scroll"){
this._hasHScroll=true;
}else{
this._hasHScroll=(this.scrollboxNode.offsetWidth-this.getScrollbarWidth()<this.contentNode.offsetWidth);
}
}
}
}
if(_922!==this._hasHScroll){
this.grid.update();
}
return this._hasHScroll;
},hasVScrollbar:function(_924){
var _925=this._hasVScroll||false;
if(this._hasVScroll==undefined||_924){
if(this.noscroll){
this._hasVScroll=false;
}else{
var _926=dojo.style(this.scrollboxNode,"overflow");
if(_926=="hidden"){
this._hasVScroll=false;
}else{
if(_926=="scroll"){
this._hasVScroll=true;
}else{
this._hasVScroll=(this.scrollboxNode.scrollHeight>this.scrollboxNode.clientHeight);
}
}
}
}
if(_925!==this._hasVScroll){
this.grid.update();
}
return this._hasVScroll;
},convertColPctToFixed:function(){
var _927=false;
this.grid.initialWidth="";
var _928=dojo.query("th",this.headerContentNode);
var _929=dojo.map(_928,function(c,vIdx){
var w=c.style.width;
dojo.attr(c,"vIdx",vIdx);
if(w&&w.slice(-1)=="%"){
_927=true;
}else{
if(w&&w.slice(-2)=="px"){
return window.parseInt(w,10);
}
}
return dojo.contentBox(c).w;
});
if(_927){
dojo.forEach(this.grid.layout.cells,function(cell,idx){
if(cell.view==this){
var _92a=cell.view.getHeaderCellNode(cell.index);
if(_92a&&dojo.hasAttr(_92a,"vIdx")){
var vIdx=window.parseInt(dojo.attr(_92a,"vIdx"));
this.setColWidth(idx,_929[vIdx]);
dojo.removeAttr(_92a,"vIdx");
}
}
},this);
return true;
}
return false;
},adaptHeight:function(_92b){
if(!this.grid._autoHeight){
var h=(this.domNode.style.height&&parseInt(this.domNode.style.height.replace(/px/,""),10))||this.domNode.clientHeight;
var self=this;
var _92c=function(){
var v;
for(var i in self.grid.views.views){
v=self.grid.views.views[i];
if(v!==self&&v.hasHScrollbar()){
return true;
}
}
return false;
};
if(_92b||(this.noscroll&&_92c())){
h-=dojox.html.metrics.getScrollbar().h;
}
dojox.grid.util.setStyleHeightPx(this.scrollboxNode,h);
}
this.hasVScrollbar(true);
},adaptWidth:function(){
if(this.flexCells){
this.contentWidth=this.getContentWidth();
this.headerContentNode.firstChild.style.width=this.contentWidth;
}
var w=this.scrollboxNode.offsetWidth-this.getScrollbarWidth();
if(!this._removingColumn){
w=Math.max(w,this.getColumnsWidth())+"px";
}else{
w=Math.min(w,this.getColumnsWidth())+"px";
this._removingColumn=false;
}
var cn=this.contentNode;
cn.style.width=w;
this.hasHScrollbar(true);
},setSize:function(w,h){
var ds=this.domNode.style;
var hs=this.headerNode.style;
if(w){
ds.width=w;
hs.width=w;
}
ds.height=(h>=0?h+"px":"");
},renderRow:function(_92d){
var _92e=this.createRowNode(_92d);
this.buildRow(_92d,_92e);
this.grid.edit.restore(this,_92d);
return _92e;
},createRowNode:function(_92f){
var node=document.createElement("div");
node.className=this.classTag+"Row";
if(this instanceof dojox.grid._RowSelector){
dojo.attr(node,"role","presentation");
}else{
dojo.attr(node,"role","row");
if(this.grid.selectionMode!="none"){
dojo.attr(node,"aria-selected","false");
}
}
node[dojox.grid.util.gridViewTag]=this.id;
node[dojox.grid.util.rowIndexTag]=_92f;
this.rowNodes[_92f]=node;
return node;
},buildRow:function(_930,_931){
this.buildRowContent(_930,_931);
this.styleRow(_930,_931);
},buildRowContent:function(_932,_933){
_933.innerHTML=this.content.generateHtml(_932,_932);
if(this.flexCells&&this.contentWidth){
_933.firstChild.style.width=this.contentWidth;
}
dojox.grid.util.fire(this,"onAfterRow",[_932,this.structure.cells,_933]);
},rowRemoved:function(_934){
if(_934>=0){
this._cleanupRowWidgets(this.getRowNode(_934));
}
this.grid.edit.save(this,_934);
delete this.rowNodes[_934];
},getRowNode:function(_935){
return this.rowNodes[_935];
},getCellNode:function(_936,_937){
var row=this.getRowNode(_936);
if(row){
return this.content.getCellNode(row,_937);
}
},getHeaderCellNode:function(_938){
if(this.headerContentNode){
return this.header.getCellNode(this.headerContentNode,_938);
}
},styleRow:function(_939,_93a){
_93a._style=_8fc(_93a);
this.styleRowNode(_939,_93a);
},styleRowNode:function(_93b,_93c){
if(_93c){
this.doStyleRowNode(_93b,_93c);
}
},doStyleRowNode:function(_93d,_93e){
this.grid.styleRowNode(_93d,_93e);
},updateRow:function(_93f){
var _940=this.getRowNode(_93f);
if(_940){
_940.style.height="";
this.buildRow(_93f,_940);
}
return _940;
},updateRowStyles:function(_941){
this.styleRowNode(_941,this.getRowNode(_941));
},lastTop:0,firstScroll:0,doscroll:function(_942){
var _943=dojo._isBodyLtr();
if(this.firstScroll<2){
if((!_943&&this.firstScroll==1)||(_943&&this.firstScroll===0)){
var s=dojo.marginBox(this.headerNodeContainer);
if(dojo.isIE){
this.headerNodeContainer.style.width=s.w+this.getScrollbarWidth()+"px";
}else{
if(dojo.isMoz){
this.headerNodeContainer.style.width=s.w-this.getScrollbarWidth()+"px";
this.scrollboxNode.scrollLeft=_943?this.scrollboxNode.clientWidth-this.scrollboxNode.scrollWidth:this.scrollboxNode.scrollWidth-this.scrollboxNode.clientWidth;
}
}
}
this.firstScroll++;
}
this.headerNode.scrollLeft=this.scrollboxNode.scrollLeft;
var top=this.scrollboxNode.scrollTop;
if(top!==this.lastTop){
this.grid.scrollTo(top);
}
},setScrollTop:function(_944){
this.lastTop=_944;
this.scrollboxNode.scrollTop=_944;
return this.scrollboxNode.scrollTop;
},doContentEvent:function(e){
if(this.content.decorateEvent(e)){
this.grid.onContentEvent(e);
}
},doHeaderEvent:function(e){
if(this.header.decorateEvent(e)){
this.grid.onHeaderEvent(e);
}
},dispatchContentEvent:function(e){
return this.content.dispatchEvent(e);
},dispatchHeaderEvent:function(e){
return this.header.dispatchEvent(e);
},setColWidth:function(_945,_946){
this.grid.setCellWidth(_945,_946+"px");
},update:function(){
if(!this.domNode){
return;
}
this.content.update();
this.grid.update();
var left=this.scrollboxNode.scrollLeft;
this.scrollboxNode.scrollLeft=left;
this.headerNode.scrollLeft=left;
}});
dojo.declare("dojox.grid._GridAvatar",dojo.dnd.Avatar,{construct:function(){
var dd=dojo.doc;
var a=dd.createElement("table");
a.cellPadding=a.cellSpacing="0";
a.className="dojoxGridDndAvatar";
a.style.position="absolute";
a.style.zIndex=1999;
a.style.margin="0px";
var b=dd.createElement("tbody");
var tr=dd.createElement("tr");
var td=dd.createElement("td");
var img=dd.createElement("td");
tr.className="dojoxGridDndAvatarItem";
img.className="dojoxGridDndAvatarItemImage";
img.style.width="16px";
var _947=this.manager.source,node;
if(_947.creator){
node=_947._normalizedCreator(_947.getItem(this.manager.nodes[0].id).data,"avatar").node;
}else{
node=this.manager.nodes[0].cloneNode(true);
var _948,_949;
if(node.tagName.toLowerCase()=="tr"){
_948=dd.createElement("table");
_949=dd.createElement("tbody");
_949.appendChild(node);
_948.appendChild(_949);
node=_948;
}else{
if(node.tagName.toLowerCase()=="th"){
_948=dd.createElement("table");
_949=dd.createElement("tbody");
var r=dd.createElement("tr");
_948.cellPadding=_948.cellSpacing="0";
r.appendChild(node);
_949.appendChild(r);
_948.appendChild(_949);
node=_948;
}
}
}
node.id="";
td.appendChild(node);
tr.appendChild(img);
tr.appendChild(td);
dojo.style(tr,"opacity",0.9);
b.appendChild(tr);
a.appendChild(b);
this.node=a;
var m=dojo.dnd.manager();
this.oldOffsetY=m.OFFSET_Y;
m.OFFSET_Y=1;
},destroy:function(){
dojo.dnd.manager().OFFSET_Y=this.oldOffsetY;
this.inherited(arguments);
}});
var _94a=dojo.dnd.manager().makeAvatar;
dojo.dnd.manager().makeAvatar=function(){
var src=this.source;
if(src.viewIndex!==undefined&&!dojo.hasClass(dojo.body(),"dijit_a11y")){
return new dojox.grid._GridAvatar(this);
}
return _94a.call(dojo.dnd.manager());
};
})();
}
if(!dojo._hasResource["dojox.grid._RowSelector"]){
dojo._hasResource["dojox.grid._RowSelector"]=true;
dojo.provide("dojox.grid._RowSelector");
dojo.declare("dojox.grid._RowSelector",dojox.grid._View,{defaultWidth:"2em",noscroll:true,padBorderWidth:2,buildRendering:function(){
this.inherited("buildRendering",arguments);
this.scrollboxNode.style.overflow="hidden";
this.headerNode.style.visibility="hidden";
},getWidth:function(){
return this.viewWidth||this.defaultWidth;
},buildRowContent:function(_94b,_94c){
var w=this.contentWidth||0;
_94c.innerHTML="<table class=\"dojoxGridRowbarTable\" style=\"width:"+w+"px;height:1px;\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" role=\"presentation\"><tr><td class=\"dojoxGridRowbarInner\">&nbsp;</td></tr></table>";
},renderHeader:function(){
},updateRow:function(){
},resize:function(){
this.adaptHeight();
},adaptWidth:function(){
if(!("contentWidth" in this)&&this.contentNode){
this.contentWidth=this.contentNode.offsetWidth-this.padBorderWidth;
}
},doStyleRowNode:function(_94d,_94e){
var n=["dojoxGridRowbar dojoxGridNonNormalizedCell"];
if(this.grid.rows.isOver(_94d)){
n.push("dojoxGridRowbarOver");
}
if(this.grid.selection.isSelected(_94d)){
n.push("dojoxGridRowbarSelected");
}
_94e.className=n.join(" ");
},domouseover:function(e){
this.grid.onMouseOverRow(e);
},domouseout:function(e){
if(!this.isIntraRowEvent(e)){
this.grid.onMouseOutRow(e);
}
}});
}
if(!dojo._hasResource["dojox.grid._Layout"]){
dojo._hasResource["dojox.grid._Layout"]=true;
dojo.provide("dojox.grid._Layout");
dojo.declare("dojox.grid._Layout",null,{constructor:function(_94f){
this.grid=_94f;
},cells:[],structure:null,defaultWidth:"6em",moveColumn:function(_950,_951,_952,_953,_954){
var _955=this.structure[_950].cells[0];
var _956=this.structure[_951].cells[0];
var cell=null;
var _957=0;
var _958=0;
for(var i=0,c;c=_955[i];i++){
if(c.index==_952){
_957=i;
break;
}
}
cell=_955.splice(_957,1)[0];
cell.view=this.grid.views.views[_951];
for(i=0,c=null;c=_956[i];i++){
if(c.index==_953){
_958=i;
break;
}
}
if(!_954){
_958+=1;
}
_956.splice(_958,0,cell);
var _959=this.grid.getCell(this.grid.getSortIndex());
if(_959){
_959._currentlySorted=this.grid.getSortAsc();
}
this.cells=[];
_952=0;
var v;
for(i=0;v=this.structure[i];i++){
for(var j=0,cs;cs=v.cells[j];j++){
for(var k=0;c=cs[k];k++){
c.index=_952;
this.cells.push(c);
if("_currentlySorted" in c){
var si=_952+1;
si*=c._currentlySorted?1:-1;
this.grid.sortInfo=si;
delete c._currentlySorted;
}
_952++;
}
}
}
dojo.forEach(this.cells,function(c){
var _95a=c.markup[2].split(" ");
var _95b=parseInt(_95a[1].substring(5));
if(_95b!=c.index){
_95a[1]="idx=\""+c.index+"\"";
c.markup[2]=_95a.join(" ");
}
});
this.grid.setupHeaderMenu();
},setColumnVisibility:function(_95c,_95d){
var cell=this.cells[_95c];
if(cell.hidden==_95d){
cell.hidden=!_95d;
var v=cell.view,w=v.viewWidth;
if(w&&w!="auto"){
v._togglingColumn=dojo.marginBox(cell.getHeaderNode()).w||0;
}
v.update();
return true;
}else{
return false;
}
},addCellDef:function(_95e,_95f,_960){
var self=this;
var _961=function(_962){
var w=0;
if(_962.colSpan>1){
w=0;
}else{
w=_962.width||self._defaultCellProps.width||self.defaultWidth;
if(!isNaN(w)){
w=w+"em";
}
}
return w;
};
var _963={grid:this.grid,subrow:_95e,layoutIndex:_95f,index:this.cells.length};
if(_960&&_960 instanceof dojox.grid.cells._Base){
var _964=dojo.clone(_960);
_963.unitWidth=_961(_964._props);
_964=dojo.mixin(_964,this._defaultCellProps,_960._props,_963);
return _964;
}
var _965=_960.type||_960.cellType||this._defaultCellProps.type||this._defaultCellProps.cellType||dojox.grid.cells.Cell;
_963.unitWidth=_961(_960);
return new _965(dojo.mixin({},this._defaultCellProps,_960,_963));
},addRowDef:function(_966,_967){
var _968=[];
var _969=0,_96a=0,_96b=true;
for(var i=0,def,cell;(def=_967[i]);i++){
cell=this.addCellDef(_966,i,def);
_968.push(cell);
this.cells.push(cell);
if(_96b&&cell.relWidth){
_969+=cell.relWidth;
}else{
if(cell.width){
var w=cell.width;
if(typeof w=="string"&&w.slice(-1)=="%"){
_96a+=window.parseInt(w,10);
}else{
if(w=="auto"){
_96b=false;
}
}
}
}
}
if(_969&&_96b){
dojo.forEach(_968,function(cell){
if(cell.relWidth){
cell.width=cell.unitWidth=((cell.relWidth/_969)*(100-_96a))+"%";
}
});
}
return _968;
},addRowsDef:function(_96c){
var _96d=[];
if(dojo.isArray(_96c)){
if(dojo.isArray(_96c[0])){
for(var i=0,row;_96c&&(row=_96c[i]);i++){
_96d.push(this.addRowDef(i,row));
}
}else{
_96d.push(this.addRowDef(0,_96c));
}
}
return _96d;
},addViewDef:function(_96e){
this._defaultCellProps=_96e.defaultCell||{};
if(_96e.width&&_96e.width=="auto"){
delete _96e.width;
}
return dojo.mixin({},_96e,{cells:this.addRowsDef(_96e.rows||_96e.cells)});
},setStructure:function(_96f){
this.fieldIndex=0;
this.cells=[];
var s=this.structure=[];
if(this.grid.rowSelector){
var sel={type:dojox._scopeName+".grid._RowSelector"};
if(dojo.isString(this.grid.rowSelector)){
var _970=this.grid.rowSelector;
if(_970=="false"){
sel=null;
}else{
if(_970!="true"){
sel["width"]=_970;
}
}
}else{
if(!this.grid.rowSelector){
sel=null;
}
}
if(sel){
s.push(this.addViewDef(sel));
}
}
var _971=function(def){
return ("name" in def||"field" in def||"get" in def);
};
var _972=function(def){
if(dojo.isArray(def)){
if(dojo.isArray(def[0])||_971(def[0])){
return true;
}
}
return false;
};
var _973=function(def){
return (def!==null&&dojo.isObject(def)&&("cells" in def||"rows" in def||("type" in def&&!_971(def))));
};
if(dojo.isArray(_96f)){
var _974=false;
for(var i=0,st;(st=_96f[i]);i++){
if(_973(st)){
_974=true;
break;
}
}
if(!_974){
s.push(this.addViewDef({cells:_96f}));
}else{
for(i=0;(st=_96f[i]);i++){
if(_972(st)){
s.push(this.addViewDef({cells:st}));
}else{
if(_973(st)){
s.push(this.addViewDef(st));
}
}
}
}
}else{
if(_973(_96f)){
s.push(this.addViewDef(_96f));
}
}
this.cellCount=this.cells.length;
this.grid.setupHeaderMenu();
}});
}
if(!dojo._hasResource["dojox.grid._ViewManager"]){
dojo._hasResource["dojox.grid._ViewManager"]=true;
dojo.provide("dojox.grid._ViewManager");
dojo.declare("dojox.grid._ViewManager",null,{constructor:function(_975){
this.grid=_975;
},defaultWidth:200,views:[],resize:function(){
this.onEach("resize");
},render:function(){
this.onEach("render");
},addView:function(_976){
_976.idx=this.views.length;
this.views.push(_976);
},destroyViews:function(){
for(var i=0,v;v=this.views[i];i++){
v.destroy();
}
this.views=[];
},getContentNodes:function(){
var _977=[];
for(var i=0,v;v=this.views[i];i++){
_977.push(v.contentNode);
}
return _977;
},forEach:function(_978){
for(var i=0,v;v=this.views[i];i++){
_978(v,i);
}
},onEach:function(_979,_97a){
_97a=_97a||[];
for(var i=0,v;v=this.views[i];i++){
if(_979 in v){
v[_979].apply(v,_97a);
}
}
},normalizeHeaderNodeHeight:function(){
var _97b=[];
for(var i=0,v;(v=this.views[i]);i++){
if(v.headerContentNode.firstChild){
_97b.push(v.headerContentNode);
}
}
this.normalizeRowNodeHeights(_97b);
},normalizeRowNodeHeights:function(_97c){
var h=0;
var _97d=[];
if(this.grid.rowHeight){
h=this.grid.rowHeight;
}else{
if(_97c.length<=1){
return;
}
for(var i=0,n;(n=_97c[i]);i++){
if(!dojo.hasClass(n,"dojoxGridNonNormalizedCell")){
_97d[i]=n.firstChild.offsetHeight;
h=Math.max(h,_97d[i]);
}
}
h=(h>=0?h:0);
if(dojo.isMoz&&h){
h++;
}
}
for(i=0;(n=_97c[i]);i++){
if(_97d[i]!=h){
n.firstChild.style.height=h+"px";
}
}
},resetHeaderNodeHeight:function(){
for(var i=0,v,n;(v=this.views[i]);i++){
n=v.headerContentNode.firstChild;
if(n){
n.style.height="";
}
}
},renormalizeRow:function(_97e){
var _97f=[];
for(var i=0,v,n;(v=this.views[i])&&(n=v.getRowNode(_97e));i++){
n.firstChild.style.height="";
_97f.push(n);
}
this.normalizeRowNodeHeights(_97f);
},getViewWidth:function(_980){
return this.views[_980].getWidth()||this.defaultWidth;
},measureHeader:function(){
this.resetHeaderNodeHeight();
this.forEach(function(_981){
_981.headerContentNode.style.height="";
});
var h=0;
this.forEach(function(_982){
h=Math.max(_982.headerNode.offsetHeight,h);
});
return h;
},measureContent:function(){
var h=0;
this.forEach(function(_983){
h=Math.max(_983.domNode.offsetHeight,h);
});
return h;
},findClient:function(_984){
var c=this.grid.elasticView||-1;
if(c<0){
for(var i=1,v;(v=this.views[i]);i++){
if(v.viewWidth){
for(i=1;(v=this.views[i]);i++){
if(!v.viewWidth){
c=i;
break;
}
}
break;
}
}
}
if(c<0){
c=Math.floor(this.views.length/2);
}
return c;
},arrange:function(l,w){
var i,v,vw,len=this.views.length;
var c=(w<=0?len:this.findClient());
var _985=function(v,l){
var ds=v.domNode.style;
var hs=v.headerNode.style;
if(!dojo._isBodyLtr()){
ds.right=l+"px";
if(dojo.isMoz){
hs.right=l+v.getScrollbarWidth()+"px";
hs.width=parseInt(hs.width,10)-v.getScrollbarWidth()+"px";
}else{
hs.right=l+"px";
}
}else{
ds.left=l+"px";
hs.left=l+"px";
}
ds.top=0+"px";
hs.top=0;
};
for(i=0;(v=this.views[i])&&(i<c);i++){
vw=this.getViewWidth(i);
v.setSize(vw,0);
_985(v,l);
if(v.headerContentNode&&v.headerContentNode.firstChild){
vw=v.getColumnsWidth()+v.getScrollbarWidth();
}else{
vw=v.domNode.offsetWidth;
}
l+=vw;
}
i++;
var r=w;
for(var j=len-1;(v=this.views[j])&&(i<=j);j--){
vw=this.getViewWidth(j);
v.setSize(vw,0);
vw=v.domNode.offsetWidth;
r-=vw;
_985(v,r);
}
if(c<len){
v=this.views[c];
vw=Math.max(1,r-l);
v.setSize(vw+"px",0);
_985(v,l);
}
return l;
},renderRow:function(_986,_987,_988){
var _989=[];
for(var i=0,v,n,_98a;(v=this.views[i])&&(n=_987[i]);i++){
_98a=v.renderRow(_986);
n.appendChild(_98a);
_989.push(_98a);
}
if(!_988){
this.normalizeRowNodeHeights(_989);
}
},rowRemoved:function(_98b){
this.onEach("rowRemoved",[_98b]);
},updateRow:function(_98c,_98d){
for(var i=0,v;v=this.views[i];i++){
v.updateRow(_98c);
}
if(!_98d){
this.renormalizeRow(_98c);
}
},updateRowStyles:function(_98e){
this.onEach("updateRowStyles",[_98e]);
},setScrollTop:function(_98f){
var top=_98f;
for(var i=0,v;v=this.views[i];i++){
top=v.setScrollTop(_98f);
if(dojo.isIE&&v.headerNode&&v.scrollboxNode){
v.headerNode.scrollLeft=v.scrollboxNode.scrollLeft;
}
}
return top;
},getFirstScrollingView:function(){
for(var i=0,v;(v=this.views[i]);i++){
if(v.hasHScrollbar()||v.hasVScrollbar()){
return v;
}
}
return null;
}});
}
if(!dojo._hasResource["dojox.grid._RowManager"]){
dojo._hasResource["dojox.grid._RowManager"]=true;
dojo.provide("dojox.grid._RowManager");
(function(){
var _990=function(_991,_992){
if(_991.style.cssText==undefined){
_991.setAttribute("style",_992);
}else{
_991.style.cssText=_992;
}
};
dojo.declare("dojox.grid._RowManager",null,{constructor:function(_993){
this.grid=_993;
},linesToEms:2,overRow:-2,prepareStylingRow:function(_994,_995){
return {index:_994,node:_995,odd:Boolean(_994&1),selected:!!this.grid.selection.isSelected(_994),over:this.isOver(_994),customStyles:"",customClasses:"dojoxGridRow"};
},styleRowNode:function(_996,_997){
var row=this.prepareStylingRow(_996,_997);
this.grid.onStyleRow(row);
this.applyStyles(row);
},applyStyles:function(_998){
var i=_998;
i.node.className=i.customClasses;
var h=i.node.style.height;
_990(i.node,i.customStyles+";"+(i.node._style||""));
i.node.style.height=h;
},updateStyles:function(_999){
this.grid.updateRowStyles(_999);
},setOverRow:function(_99a){
var last=this.overRow;
this.overRow=_99a;
if((last!=this.overRow)&&(dojo.isString(last)||last>=0)){
this.updateStyles(last);
}
this.updateStyles(this.overRow);
},isOver:function(_99b){
return (this.overRow==_99b&&!dojo.hasClass(this.grid.domNode,"dojoxGridColumnResizing"));
}});
})();
}
if(!dojo._hasResource["dojox.grid._FocusManager"]){
dojo._hasResource["dojox.grid._FocusManager"]=true;
dojo.provide("dojox.grid._FocusManager");
dojo.declare("dojox.grid._FocusManager",null,{constructor:function(_99c){
this.grid=_99c;
this.cell=null;
this.rowIndex=-1;
this._connects=[];
this._headerConnects=[];
this.headerMenu=this.grid.headerMenu;
this._connects.push(dojo.connect(this.grid.domNode,"onfocus",this,"doFocus"));
this._connects.push(dojo.connect(this.grid.domNode,"onblur",this,"doBlur"));
this._connects.push(dojo.connect(this.grid.domNode,"oncontextmenu",this,"doContextMenu"));
this._connects.push(dojo.connect(this.grid.lastFocusNode,"onfocus",this,"doLastNodeFocus"));
this._connects.push(dojo.connect(this.grid.lastFocusNode,"onblur",this,"doLastNodeBlur"));
this._connects.push(dojo.connect(this.grid,"_onFetchComplete",this,"_delayedCellFocus"));
this._connects.push(dojo.connect(this.grid,"postrender",this,"_delayedHeaderFocus"));
},destroy:function(){
dojo.forEach(this._connects,dojo.disconnect);
dojo.forEach(this._headerConnects,dojo.disconnect);
delete this.grid;
delete this.cell;
},_colHeadNode:null,_colHeadFocusIdx:null,_contextMenuBindNode:null,tabbingOut:false,focusClass:"dojoxGridCellFocus",focusView:null,initFocusView:function(){
this.focusView=this.grid.views.getFirstScrollingView()||this.focusView||this.grid.views.views[0];
this._initColumnHeaders();
},isFocusCell:function(_99d,_99e){
return (this.cell==_99d)&&(this.rowIndex==_99e);
},isLastFocusCell:function(){
if(this.cell){
return (this.rowIndex==this.grid.rowCount-1)&&(this.cell.index==this.grid.layout.cellCount-1);
}
return false;
},isFirstFocusCell:function(){
if(this.cell){
return (this.rowIndex===0)&&(this.cell.index===0);
}
return false;
},isNoFocusCell:function(){
return (this.rowIndex<0)||!this.cell;
},isNavHeader:function(){
return (!!this._colHeadNode);
},getHeaderIndex:function(){
if(this._colHeadNode){
return dojo.indexOf(this._findHeaderCells(),this._colHeadNode);
}else{
return -1;
}
},_focusifyCellNode:function(_99f){
var n=this.cell&&this.cell.getNode(this.rowIndex);
if(n){
dojo.toggleClass(n,this.focusClass,_99f);
if(_99f){
var sl=this.scrollIntoView();
try{
if(!this.grid.edit.isEditing()){
dojox.grid.util.fire(n,"focus");
if(sl){
this.cell.view.scrollboxNode.scrollLeft=sl;
}
}
}
catch(e){
}
}
}
},_delayedCellFocus:function(){
if(this.isNavHeader()||!this.grid._focused){
return;
}
var n=this.cell&&this.cell.getNode(this.rowIndex);
if(n){
try{
if(!this.grid.edit.isEditing()){
dojo.toggleClass(n,this.focusClass,true);
this.blurHeader();
dojox.grid.util.fire(n,"focus");
}
}
catch(e){
}
}
},_delayedHeaderFocus:function(){
if(this.isNavHeader()){
this.focusHeader();
this.grid.domNode.focus();
}
},_initColumnHeaders:function(){
dojo.forEach(this._headerConnects,dojo.disconnect);
this._headerConnects=[];
var _9a0=this._findHeaderCells();
for(var i=0;i<_9a0.length;i++){
this._headerConnects.push(dojo.connect(_9a0[i],"onfocus",this,"doColHeaderFocus"));
this._headerConnects.push(dojo.connect(_9a0[i],"onblur",this,"doColHeaderBlur"));
}
},_findHeaderCells:function(){
var _9a1=dojo.query("th",this.grid.viewsHeaderNode);
var _9a2=[];
for(var i=0;i<_9a1.length;i++){
var _9a3=_9a1[i];
var _9a4=dojo.hasAttr(_9a3,"tabIndex");
var _9a5=dojo.attr(_9a3,"tabIndex");
if(_9a4&&_9a5<0){
_9a2.push(_9a3);
}
}
return _9a2;
},_setActiveColHeader:function(_9a6,_9a7,_9a8){
dojo.attr(this.grid.domNode,"aria-activedescendant",_9a6.id);
if(_9a8!=null&&_9a8>=0&&_9a8!=_9a7){
dojo.toggleClass(this._findHeaderCells()[_9a8],this.focusClass,false);
}
dojo.toggleClass(_9a6,this.focusClass,true);
this._colHeadNode=_9a6;
this._colHeadFocusIdx=_9a7;
this._scrollHeader(this._colHeadFocusIdx);
},scrollIntoView:function(){
var info=(this.cell?this._scrollInfo(this.cell):null);
if(!info||!info.s){
return null;
}
var rt=this.grid.scroller.findScrollTop(this.rowIndex);
if(info.n&&info.sr){
if(info.n.offsetLeft+info.n.offsetWidth>info.sr.l+info.sr.w){
info.s.scrollLeft=info.n.offsetLeft+info.n.offsetWidth-info.sr.w;
}else{
if(info.n.offsetLeft<info.sr.l){
info.s.scrollLeft=info.n.offsetLeft;
}
}
}
if(info.r&&info.sr){
if(rt+info.r.offsetHeight>info.sr.t+info.sr.h){
this.grid.setScrollTop(rt+info.r.offsetHeight-info.sr.h);
}else{
if(rt<info.sr.t){
this.grid.setScrollTop(rt);
}
}
}
return info.s.scrollLeft;
},_scrollInfo:function(cell,_9a9){
if(cell){
var cl=cell,sbn=cl.view.scrollboxNode,sbnr={w:sbn.clientWidth,l:sbn.scrollLeft,t:sbn.scrollTop,h:sbn.clientHeight},rn=cl.view.getRowNode(this.rowIndex);
return {c:cl,s:sbn,sr:sbnr,n:(_9a9?_9a9:cell.getNode(this.rowIndex)),r:rn};
}
return null;
},_scrollHeader:function(_9aa){
var info=null;
if(this._colHeadNode){
var cell=this.grid.getCell(_9aa);
info=this._scrollInfo(cell,cell.getNode(0));
}
if(info&&info.s&&info.sr&&info.n){
var _9ab=info.sr.l+info.sr.w;
if(info.n.offsetLeft+info.n.offsetWidth>_9ab){
info.s.scrollLeft=info.n.offsetLeft+info.n.offsetWidth-info.sr.w;
}else{
if(info.n.offsetLeft<info.sr.l){
info.s.scrollLeft=info.n.offsetLeft;
}else{
if(dojo.isIE<=7&&cell&&cell.view.headerNode){
cell.view.headerNode.scrollLeft=info.s.scrollLeft;
}
}
}
}
},_isHeaderHidden:function(){
var _9ac=this.focusView;
if(!_9ac){
for(var i=0,_9ad;(_9ad=this.grid.views.views[i]);i++){
if(_9ad.headerNode){
_9ac=_9ad;
break;
}
}
}
return (_9ac&&dojo.getComputedStyle(_9ac.headerNode).display=="none");
},colSizeAdjust:function(e,_9ae,_9af){
var _9b0=this._findHeaderCells();
var view=this.focusView;
if(!view){
for(var i=0,_9b1;(_9b1=this.grid.views.views[i]);i++){
if(_9b1.header.tableMap.map){
view=_9b1;
break;
}
}
}
var _9b2=_9b0[_9ae];
if(!view||(_9ae==_9b0.length-1&&_9ae===0)){
return;
}
view.content.baseDecorateEvent(e);
e.cellNode=_9b2;
e.cellIndex=view.content.getCellNodeIndex(e.cellNode);
e.cell=(e.cellIndex>=0?this.grid.getCell(e.cellIndex):null);
if(view.header.canResize(e)){
var _9b3={l:_9af};
var drag=view.header.colResizeSetup(e,false);
view.header.doResizeColumn(drag,null,_9b3);
view.update();
}
},styleRow:function(_9b4){
return;
},setFocusIndex:function(_9b5,_9b6){
this.setFocusCell(this.grid.getCell(_9b6),_9b5);
},setFocusCell:function(_9b7,_9b8){
if(_9b7&&!this.isFocusCell(_9b7,_9b8)){
this.tabbingOut=false;
if(this._colHeadNode){
this.blurHeader();
}
this._colHeadNode=this._colHeadFocusIdx=null;
this.focusGridView();
this._focusifyCellNode(false);
this.cell=_9b7;
this.rowIndex=_9b8;
this._focusifyCellNode(true);
}
if(dojo.isOpera){
setTimeout(dojo.hitch(this.grid,"onCellFocus",this.cell,this.rowIndex),1);
}else{
this.grid.onCellFocus(this.cell,this.rowIndex);
}
},next:function(){
if(this.cell){
var row=this.rowIndex,col=this.cell.index+1,cc=this.grid.layout.cellCount-1,rc=this.grid.rowCount-1;
if(col>cc){
col=0;
row++;
}
if(row>rc){
col=cc;
row=rc;
}
if(this.grid.edit.isEditing()){
var _9b9=this.grid.getCell(col);
if(!this.isLastFocusCell()&&(!_9b9.editable||this.grid.canEdit&&!this.grid.canEdit(_9b9,row))){
this.cell=_9b9;
this.rowIndex=row;
this.next();
return;
}
}
this.setFocusIndex(row,col);
}
},previous:function(){
if(this.cell){
var row=(this.rowIndex||0),col=(this.cell.index||0)-1;
if(col<0){
col=this.grid.layout.cellCount-1;
row--;
}
if(row<0){
row=0;
col=0;
}
if(this.grid.edit.isEditing()){
var _9ba=this.grid.getCell(col);
if(!this.isFirstFocusCell()&&!_9ba.editable){
this.cell=_9ba;
this.rowIndex=row;
this.previous();
return;
}
}
this.setFocusIndex(row,col);
}
},move:function(_9bb,_9bc){
var _9bd=_9bc<0?-1:1;
if(this.isNavHeader()){
var _9be=this._findHeaderCells();
var _9bf=currentIdx=dojo.indexOf(_9be,this._colHeadNode);
currentIdx+=_9bc;
while(currentIdx>=0&&currentIdx<_9be.length&&_9be[currentIdx].style.display=="none"){
currentIdx+=_9bd;
}
if((currentIdx>=0)&&(currentIdx<_9be.length)){
this._setActiveColHeader(_9be[currentIdx],currentIdx,_9bf);
}
}else{
if(this.cell){
var sc=this.grid.scroller,r=this.rowIndex,rc=this.grid.rowCount-1,row=Math.min(rc,Math.max(0,r+_9bb));
if(_9bb){
if(_9bb>0){
if(row>sc.getLastPageRow(sc.page)){
this.grid.setScrollTop(this.grid.scrollTop+sc.findScrollTop(row)-sc.findScrollTop(r));
}
}else{
if(_9bb<0){
if(row<=sc.getPageRow(sc.page)){
this.grid.setScrollTop(this.grid.scrollTop-sc.findScrollTop(r)-sc.findScrollTop(row));
}
}
}
}
var cc=this.grid.layout.cellCount-1,i=this.cell.index,col=Math.min(cc,Math.max(0,i+_9bc));
var cell=this.grid.getCell(col);
while(col>=0&&col<cc&&cell&&cell.hidden===true){
col+=_9bd;
cell=this.grid.getCell(col);
}
if(!cell||cell.hidden===true){
col=i;
}
var n=cell.getNode(row);
if(!n&&_9bb){
if((row+_9bb)>=0&&(row+_9bb)<=rc){
this.move(_9bb>0?++_9bb:--_9bb,_9bc);
}
return;
}else{
if((!n||dojo.style(n,"display")==="none")&&_9bc){
if((col+_9bb)>=0&&(col+_9bb)<=cc){
this.move(_9bb,_9bc>0?++_9bc:--_9bc);
}
return;
}
}
this.setFocusIndex(row,col);
if(_9bb){
this.grid.updateRow(r);
}
}
}
},previousKey:function(e){
if(this.grid.edit.isEditing()){
dojo.stopEvent(e);
this.previous();
}else{
if(!this.isNavHeader()&&!this._isHeaderHidden()){
this.grid.domNode.focus();
dojo.stopEvent(e);
}else{
this.tabOut(this.grid.domNode);
if(this._colHeadFocusIdx!=null){
dojo.toggleClass(this._findHeaderCells()[this._colHeadFocusIdx],this.focusClass,false);
this._colHeadFocusIdx=null;
}
this._focusifyCellNode(false);
}
}
},nextKey:function(e){
var _9c0=(this.grid.rowCount===0);
if(e.target===this.grid.domNode&&this._colHeadFocusIdx==null){
this.focusHeader();
dojo.stopEvent(e);
}else{
if(this.isNavHeader()){
this.blurHeader();
if(!this.findAndFocusGridCell()){
this.tabOut(this.grid.lastFocusNode);
}
this._colHeadNode=this._colHeadFocusIdx=null;
}else{
if(this.grid.edit.isEditing()){
dojo.stopEvent(e);
this.next();
}else{
this.tabOut(this.grid.lastFocusNode);
}
}
}
},tabOut:function(_9c1){
this.tabbingOut=true;
_9c1.focus();
},focusGridView:function(){
dojox.grid.util.fire(this.focusView,"focus");
},focusGrid:function(_9c2){
this.focusGridView();
this._focusifyCellNode(true);
},findAndFocusGridCell:function(){
var _9c3=true;
var _9c4=(this.grid.rowCount===0);
if(this.isNoFocusCell()&&!_9c4){
var _9c5=0;
var cell=this.grid.getCell(_9c5);
if(cell.hidden){
_9c5=this.isNavHeader()?this._colHeadFocusIdx:0;
}
this.setFocusIndex(0,_9c5);
}else{
if(this.cell&&!_9c4){
if(this.focusView&&!this.focusView.rowNodes[this.rowIndex]){
this.grid.scrollToRow(this.rowIndex);
}
this.focusGrid();
}else{
_9c3=false;
}
}
this._colHeadNode=this._colHeadFocusIdx=null;
return _9c3;
},focusHeader:function(){
var _9c6=this._findHeaderCells();
var _9c7=this._colHeadFocusIdx;
if(this._isHeaderHidden()){
this.findAndFocusGridCell();
}else{
if(!this._colHeadFocusIdx){
if(this.isNoFocusCell()){
this._colHeadFocusIdx=0;
}else{
this._colHeadFocusIdx=this.cell.index;
}
}
}
this._colHeadNode=_9c6[this._colHeadFocusIdx];
while(this._colHeadNode&&this._colHeadFocusIdx>=0&&this._colHeadFocusIdx<_9c6.length&&this._colHeadNode.style.display=="none"){
this._colHeadFocusIdx++;
this._colHeadNode=_9c6[this._colHeadFocusIdx];
}
if(this._colHeadNode&&this._colHeadNode.style.display!="none"){
if(this.headerMenu&&this._contextMenuBindNode!=this.grid.domNode){
this.headerMenu.unBindDomNode(this.grid.viewsHeaderNode);
this.headerMenu.bindDomNode(this.grid.domNode);
this._contextMenuBindNode=this.grid.domNode;
}
this._setActiveColHeader(this._colHeadNode,this._colHeadFocusIdx,_9c7);
this._scrollHeader(this._colHeadFocusIdx);
this._focusifyCellNode(false);
}else{
this.findAndFocusGridCell();
}
},blurHeader:function(){
dojo.removeClass(this._colHeadNode,this.focusClass);
dojo.removeAttr(this.grid.domNode,"aria-activedescendant");
if(this.headerMenu&&this._contextMenuBindNode==this.grid.domNode){
var _9c8=this.grid.viewsHeaderNode;
this.headerMenu.unBindDomNode(this.grid.domNode);
this.headerMenu.bindDomNode(_9c8);
this._contextMenuBindNode=_9c8;
}
},doFocus:function(e){
if(e&&e.target!=e.currentTarget){
dojo.stopEvent(e);
return;
}
if(!this.tabbingOut){
this.focusHeader();
}
this.tabbingOut=false;
dojo.stopEvent(e);
},doBlur:function(e){
dojo.stopEvent(e);
},doContextMenu:function(e){
if(!this.headerMenu){
dojo.stopEvent(e);
}
},doLastNodeFocus:function(e){
if(this.tabbingOut){
this._focusifyCellNode(false);
}else{
if(this.grid.rowCount>0){
if(this.isNoFocusCell()){
this.setFocusIndex(0,0);
}
this._focusifyCellNode(true);
}else{
this.focusHeader();
}
}
this.tabbingOut=false;
dojo.stopEvent(e);
},doLastNodeBlur:function(e){
dojo.stopEvent(e);
},doColHeaderFocus:function(e){
this._setActiveColHeader(e.target,dojo.attr(e.target,"idx"),this._colHeadFocusIdx);
this._scrollHeader(this.getHeaderIndex());
dojo.stopEvent(e);
},doColHeaderBlur:function(e){
dojo.toggleClass(e.target,this.focusClass,false);
}});
}
if(!dojo._hasResource["dojox.grid._EditManager"]){
dojo._hasResource["dojox.grid._EditManager"]=true;
dojo.provide("dojox.grid._EditManager");
dojo.declare("dojox.grid._EditManager",null,{constructor:function(_9c9){
this.grid=_9c9;
if(dojo.isIE){
this.connections=[dojo.connect(document.body,"onfocus",dojo.hitch(this,"_boomerangFocus"))];
}else{
this.connections=[dojo.connect(this.grid,"onBlur",this,"apply")];
}
},info:{},destroy:function(){
dojo.forEach(this.connections,dojo.disconnect);
},cellFocus:function(_9ca,_9cb){
if(this.grid.singleClickEdit||this.isEditRow(_9cb)){
this.setEditCell(_9ca,_9cb);
}else{
this.apply();
}
if(this.isEditing()||(_9ca&&_9ca.editable&&_9ca.alwaysEditing)){
this._focusEditor(_9ca,_9cb);
}
},rowClick:function(e){
if(this.isEditing()&&!this.isEditRow(e.rowIndex)){
this.apply();
}
},styleRow:function(_9cc){
if(_9cc.index==this.info.rowIndex){
_9cc.customClasses+=" dojoxGridRowEditing";
}
},dispatchEvent:function(e){
var c=e.cell,ed=(c&&c["editable"])?c:0;
return ed&&ed.dispatchEvent(e.dispatch,e);
},isEditing:function(){
return this.info.rowIndex!==undefined;
},isEditCell:function(_9cd,_9ce){
return (this.info.rowIndex===_9cd)&&(this.info.cell.index==_9ce);
},isEditRow:function(_9cf){
return this.info.rowIndex===_9cf;
},setEditCell:function(_9d0,_9d1){
if(!this.isEditCell(_9d1,_9d0.index)&&this.grid.canEdit&&this.grid.canEdit(_9d0,_9d1)){
this.start(_9d0,_9d1,this.isEditRow(_9d1)||_9d0.editable);
}
},_focusEditor:function(_9d2,_9d3){
dojox.grid.util.fire(_9d2,"focus",[_9d3]);
},focusEditor:function(){
if(this.isEditing()){
this._focusEditor(this.info.cell,this.info.rowIndex);
}
},_boomerangWindow:500,_shouldCatchBoomerang:function(){
return this._catchBoomerang>new Date().getTime();
},_boomerangFocus:function(){
if(this._shouldCatchBoomerang()){
this.grid.focus.focusGrid();
this.focusEditor();
this._catchBoomerang=0;
}
},_doCatchBoomerang:function(){
if(dojo.isIE){
this._catchBoomerang=new Date().getTime()+this._boomerangWindow;
}
},start:function(_9d4,_9d5,_9d6){
this.grid.beginUpdate();
this.editorApply();
if(this.isEditing()&&!this.isEditRow(_9d5)){
this.applyRowEdit();
this.grid.updateRow(_9d5);
}
if(_9d6){
this.info={cell:_9d4,rowIndex:_9d5};
this.grid.doStartEdit(_9d4,_9d5);
this.grid.updateRow(_9d5);
}else{
this.info={};
}
this.grid.endUpdate();
this.grid.focus.focusGrid();
this._focusEditor(_9d4,_9d5);
this._doCatchBoomerang();
},_editorDo:function(_9d7){
var c=this.info.cell;
if(c&&c.editable){
c[_9d7](this.info.rowIndex);
}
},editorApply:function(){
this._editorDo("apply");
},editorCancel:function(){
this._editorDo("cancel");
},applyCellEdit:function(_9d8,_9d9,_9da){
if(this.grid.canEdit(_9d9,_9da)){
this.grid.doApplyCellEdit(_9d8,_9da,_9d9.field);
}
},applyRowEdit:function(){
this.grid.doApplyEdit(this.info.rowIndex,this.info.cell.field);
},apply:function(){
if(this.isEditing()){
this.grid.beginUpdate();
this.editorApply();
this.applyRowEdit();
this.info={};
this.grid.endUpdate();
this.grid.focus.focusGrid();
this._doCatchBoomerang();
}
},cancel:function(){
if(this.isEditing()){
this.grid.beginUpdate();
this.editorCancel();
this.info={};
this.grid.endUpdate();
this.grid.focus.focusGrid();
this._doCatchBoomerang();
}
},save:function(_9db,_9dc){
var c=this.info.cell;
if(this.isEditRow(_9db)&&(!_9dc||c.view==_9dc)&&c.editable){
c.save(c,this.info.rowIndex);
}
},restore:function(_9dd,_9de){
var c=this.info.cell;
if(this.isEditRow(_9de)&&c.view==_9dd&&c.editable){
c.restore(c,this.info.rowIndex);
}
}});
}
if(!dojo._hasResource["dojox.grid.Selection"]){
dojo._hasResource["dojox.grid.Selection"]=true;
dojo.provide("dojox.grid.Selection");
dojo.declare("dojox.grid.Selection",null,{constructor:function(_9df){
this.grid=_9df;
this.selected=[];
this.setMode(_9df.selectionMode);
},mode:"extended",selected:null,updating:0,selectedIndex:-1,setMode:function(mode){
if(this.selected.length){
this.deselectAll();
}
if(mode!="extended"&&mode!="multiple"&&mode!="single"&&mode!="none"){
this.mode="extended";
}else{
this.mode=mode;
}
},onCanSelect:function(_9e0){
return this.grid.onCanSelect(_9e0);
},onCanDeselect:function(_9e1){
return this.grid.onCanDeselect(_9e1);
},onSelected:function(_9e2){
},onDeselected:function(_9e3){
},onChanging:function(){
},onChanged:function(){
},isSelected:function(_9e4){
if(this.mode=="none"){
return false;
}
return this.selected[_9e4];
},getFirstSelected:function(){
if(!this.selected.length||this.mode=="none"){
return -1;
}
for(var i=0,l=this.selected.length;i<l;i++){
if(this.selected[i]){
return i;
}
}
return -1;
},getNextSelected:function(_9e5){
if(this.mode=="none"){
return -1;
}
for(var i=_9e5+1,l=this.selected.length;i<l;i++){
if(this.selected[i]){
return i;
}
}
return -1;
},getSelected:function(){
var _9e6=[];
for(var i=0,l=this.selected.length;i<l;i++){
if(this.selected[i]){
_9e6.push(i);
}
}
return _9e6;
},getSelectedCount:function(){
var c=0;
for(var i=0;i<this.selected.length;i++){
if(this.selected[i]){
c++;
}
}
return c;
},_beginUpdate:function(){
if(this.updating===0){
this.onChanging();
}
this.updating++;
},_endUpdate:function(){
this.updating--;
if(this.updating===0){
this.onChanged();
}
},select:function(_9e7){
if(this.mode=="none"){
return;
}
if(this.mode!="multiple"){
this.deselectAll(_9e7);
this.addToSelection(_9e7);
}else{
this.toggleSelect(_9e7);
}
},addToSelection:function(_9e8){
if(this.mode=="none"){
return;
}
if(dojo.isArray(_9e8)){
dojo.forEach(_9e8,this.addToSelection,this);
return;
}
_9e8=Number(_9e8);
if(this.selected[_9e8]){
this.selectedIndex=_9e8;
}else{
if(this.onCanSelect(_9e8)!==false){
this.selectedIndex=_9e8;
var _9e9=this.grid.getRowNode(_9e8);
if(_9e9){
dojo.attr(_9e9,"aria-selected","true");
}
this._beginUpdate();
this.selected[_9e8]=true;
this.onSelected(_9e8);
this._endUpdate();
}
}
},deselect:function(_9ea){
if(this.mode=="none"){
return;
}
if(dojo.isArray(_9ea)){
dojo.forEach(_9ea,this.deselect,this);
return;
}
_9ea=Number(_9ea);
if(this.selectedIndex==_9ea){
this.selectedIndex=-1;
}
if(this.selected[_9ea]){
if(this.onCanDeselect(_9ea)===false){
return;
}
var _9eb=this.grid.getRowNode(_9ea);
if(_9eb){
dojo.attr(_9eb,"aria-selected","false");
}
this._beginUpdate();
delete this.selected[_9ea];
this.onDeselected(_9ea);
this._endUpdate();
}
},setSelected:function(_9ec,_9ed){
this[(_9ed?"addToSelection":"deselect")](_9ec);
},toggleSelect:function(_9ee){
if(dojo.isArray(_9ee)){
dojo.forEach(_9ee,this.toggleSelect,this);
return;
}
this.setSelected(_9ee,!this.selected[_9ee]);
},_range:function(_9ef,inTo,func){
var s=(_9ef>=0?_9ef:inTo),e=inTo;
if(s>e){
e=s;
s=inTo;
}
for(var i=s;i<=e;i++){
func(i);
}
},selectRange:function(_9f0,inTo){
this._range(_9f0,inTo,dojo.hitch(this,"addToSelection"));
},deselectRange:function(_9f1,inTo){
this._range(_9f1,inTo,dojo.hitch(this,"deselect"));
},insert:function(_9f2){
this.selected.splice(_9f2,0,false);
if(this.selectedIndex>=_9f2){
this.selectedIndex++;
}
},remove:function(_9f3){
this.selected.splice(_9f3,1);
if(this.selectedIndex>=_9f3){
this.selectedIndex--;
}
},deselectAll:function(_9f4){
for(var i in this.selected){
if((i!=_9f4)&&(this.selected[i]===true)){
this.deselect(i);
}
}
},clickSelect:function(_9f5,_9f6,_9f7){
if(this.mode=="none"){
return;
}
this._beginUpdate();
if(this.mode!="extended"){
this.select(_9f5);
}else{
var _9f8=this.selectedIndex;
if(!_9f6){
this.deselectAll(_9f5);
}
if(_9f7){
this.selectRange(_9f8,_9f5);
}else{
if(_9f6){
this.toggleSelect(_9f5);
}else{
this.addToSelection(_9f5);
}
}
}
this._endUpdate();
},clickSelectEvent:function(e){
this.clickSelect(e.rowIndex,dojo.isCopyKey(e),e.shiftKey);
},clear:function(){
this._beginUpdate();
this.deselectAll();
this._endUpdate();
}});
}
if(!dojo._hasResource["dojox.grid._Events"]){
dojo._hasResource["dojox.grid._Events"]=true;
dojo.provide("dojox.grid._Events");
dojo.declare("dojox.grid._Events",null,{cellOverClass:"dojoxGridCellOver",onKeyEvent:function(e){
this.dispatchKeyEvent(e);
},onContentEvent:function(e){
this.dispatchContentEvent(e);
},onHeaderEvent:function(e){
this.dispatchHeaderEvent(e);
},onStyleRow:function(_9f9){
var i=_9f9;
i.customClasses+=(i.odd?" dojoxGridRowOdd":"")+(i.selected?" dojoxGridRowSelected":"")+(i.over?" dojoxGridRowOver":"");
this.focus.styleRow(_9f9);
this.edit.styleRow(_9f9);
},onKeyDown:function(e){
if(e.altKey||e.metaKey){
return;
}
var dk=dojo.keys;
var _9fa;
switch(e.keyCode){
case dk.ESCAPE:
this.edit.cancel();
break;
case dk.ENTER:
if(!this.edit.isEditing()){
_9fa=this.focus.getHeaderIndex();
if(_9fa>=0){
this.setSortIndex(_9fa);
break;
}else{
this.selection.clickSelect(this.focus.rowIndex,dojo.isCopyKey(e),e.shiftKey);
}
dojo.stopEvent(e);
}
if(!e.shiftKey){
var _9fb=this.edit.isEditing();
this.edit.apply();
if(!_9fb){
this.edit.setEditCell(this.focus.cell,this.focus.rowIndex);
}
}
if(!this.edit.isEditing()){
var _9fc=this.focus.focusView||this.views.views[0];
_9fc.content.decorateEvent(e);
this.onRowClick(e);
dojo.stopEvent(e);
}
break;
case dk.SPACE:
if(!this.edit.isEditing()){
_9fa=this.focus.getHeaderIndex();
if(_9fa>=0){
this.setSortIndex(_9fa);
break;
}else{
this.selection.clickSelect(this.focus.rowIndex,dojo.isCopyKey(e),e.shiftKey);
}
dojo.stopEvent(e);
}
break;
case dk.TAB:
this.focus[e.shiftKey?"previousKey":"nextKey"](e);
break;
case dk.LEFT_ARROW:
case dk.RIGHT_ARROW:
if(!this.edit.isEditing()){
var _9fd=e.keyCode;
dojo.stopEvent(e);
_9fa=this.focus.getHeaderIndex();
if(_9fa>=0&&(e.shiftKey&&e.ctrlKey)){
this.focus.colSizeAdjust(e,_9fa,(_9fd==dk.LEFT_ARROW?-1:1)*5);
}else{
var _9fe=(_9fd==dk.LEFT_ARROW)?1:-1;
if(dojo._isBodyLtr()){
_9fe*=-1;
}
this.focus.move(0,_9fe);
}
}
break;
case dk.UP_ARROW:
if(!this.edit.isEditing()&&this.focus.rowIndex!==0){
dojo.stopEvent(e);
this.focus.move(-1,0);
}
break;
case dk.DOWN_ARROW:
if(!this.edit.isEditing()&&this.focus.rowIndex+1!=this.rowCount){
dojo.stopEvent(e);
this.focus.move(1,0);
}
break;
case dk.PAGE_UP:
if(!this.edit.isEditing()&&this.focus.rowIndex!==0){
dojo.stopEvent(e);
if(this.focus.rowIndex!=this.scroller.firstVisibleRow+1){
this.focus.move(this.scroller.firstVisibleRow-this.focus.rowIndex,0);
}else{
this.setScrollTop(this.scroller.findScrollTop(this.focus.rowIndex-1));
this.focus.move(this.scroller.firstVisibleRow-this.scroller.lastVisibleRow+1,0);
}
}
break;
case dk.PAGE_DOWN:
if(!this.edit.isEditing()&&this.focus.rowIndex+1!=this.rowCount){
dojo.stopEvent(e);
if(this.focus.rowIndex!=this.scroller.lastVisibleRow-1){
this.focus.move(this.scroller.lastVisibleRow-this.focus.rowIndex-1,0);
}else{
this.setScrollTop(this.scroller.findScrollTop(this.focus.rowIndex+1));
this.focus.move(this.scroller.lastVisibleRow-this.scroller.firstVisibleRow-1,0);
}
}
break;
default:
break;
}
},onMouseOver:function(e){
e.rowIndex==-1?this.onHeaderCellMouseOver(e):this.onCellMouseOver(e);
},onMouseOut:function(e){
e.rowIndex==-1?this.onHeaderCellMouseOut(e):this.onCellMouseOut(e);
},onMouseDown:function(e){
e.rowIndex==-1?this.onHeaderCellMouseDown(e):this.onCellMouseDown(e);
},onMouseOverRow:function(e){
if(!this.rows.isOver(e.rowIndex)){
this.rows.setOverRow(e.rowIndex);
e.rowIndex==-1?this.onHeaderMouseOver(e):this.onRowMouseOver(e);
}
},onMouseOutRow:function(e){
if(this.rows.isOver(-1)){
this.onHeaderMouseOut(e);
}else{
if(!this.rows.isOver(-2)){
this.rows.setOverRow(-2);
this.onRowMouseOut(e);
}
}
},onMouseDownRow:function(e){
if(e.rowIndex!=-1){
this.onRowMouseDown(e);
}
},onCellMouseOver:function(e){
if(e.cellNode){
dojo.addClass(e.cellNode,this.cellOverClass);
}
},onCellMouseOut:function(e){
if(e.cellNode){
dojo.removeClass(e.cellNode,this.cellOverClass);
}
},onCellMouseDown:function(e){
},onCellClick:function(e){
this._click[0]=this._click[1];
this._click[1]=e;
if(!this.edit.isEditCell(e.rowIndex,e.cellIndex)){
this.focus.setFocusCell(e.cell,e.rowIndex);
}
this.onRowClick(e);
},onCellDblClick:function(e){
if(this._click.length>1&&dojo.isIE){
this.edit.setEditCell(this._click[1].cell,this._click[1].rowIndex);
}else{
if(this._click.length>1&&this._click[0].rowIndex!=this._click[1].rowIndex){
this.edit.setEditCell(this._click[0].cell,this._click[0].rowIndex);
}else{
this.edit.setEditCell(e.cell,e.rowIndex);
}
}
this.onRowDblClick(e);
},onCellContextMenu:function(e){
this.onRowContextMenu(e);
},onCellFocus:function(_9ff,_a00){
this.edit.cellFocus(_9ff,_a00);
},onRowClick:function(e){
this.edit.rowClick(e);
this.selection.clickSelectEvent(e);
},onRowDblClick:function(e){
},onRowMouseOver:function(e){
},onRowMouseOut:function(e){
},onRowMouseDown:function(e){
},onRowContextMenu:function(e){
dojo.stopEvent(e);
},onHeaderMouseOver:function(e){
},onHeaderMouseOut:function(e){
},onHeaderCellMouseOver:function(e){
if(e.cellNode){
dojo.addClass(e.cellNode,this.cellOverClass);
}
},onHeaderCellMouseOut:function(e){
if(e.cellNode){
dojo.removeClass(e.cellNode,this.cellOverClass);
}
},onHeaderCellMouseDown:function(e){
},onHeaderClick:function(e){
},onHeaderCellClick:function(e){
this.setSortIndex(e.cell.index);
this.onHeaderClick(e);
},onHeaderDblClick:function(e){
},onHeaderCellDblClick:function(e){
this.onHeaderDblClick(e);
},onHeaderCellContextMenu:function(e){
this.onHeaderContextMenu(e);
},onHeaderContextMenu:function(e){
if(!this.headerMenu){
dojo.stopEvent(e);
}
},onStartEdit:function(_a01,_a02){
},onApplyCellEdit:function(_a03,_a04,_a05){
},onCancelEdit:function(_a06){
},onApplyEdit:function(_a07){
},onCanSelect:function(_a08){
return true;
},onCanDeselect:function(_a09){
return true;
},onSelected:function(_a0a){
this.updateRowStyles(_a0a);
},onDeselected:function(_a0b){
this.updateRowStyles(_a0b);
},onSelectionChanged:function(){
}});
}
if(!dojo._hasResource["dojox.grid._Grid"]){
dojo._hasResource["dojox.grid._Grid"]=true;
dojo.provide("dojox.grid._Grid");
(function(){
if(!dojo.isCopyKey){
dojo.isCopyKey=dojo.dnd.getCopyKeyState;
}
dojo.declare("dojox.grid._Grid",[dijit._Widget,dijit._Templated,dojox.grid._Events],{templateString:"<div hidefocus=\"hidefocus\" role=\"grid\" dojoAttachEvent=\"onmouseout:_mouseOut\">\r\n\t<div class=\"dojoxGridMasterHeader\" dojoAttachPoint=\"viewsHeaderNode\" role=\"presentation\"></div>\r\n\t<div class=\"dojoxGridMasterView\" dojoAttachPoint=\"viewsNode\" role=\"presentation\"></div>\r\n\t<div class=\"dojoxGridMasterMessages\" style=\"display: none;\" dojoAttachPoint=\"messagesNode\"></div>\r\n\t<span dojoAttachPoint=\"lastFocusNode\" tabindex=\"0\"></span>\r\n</div>\r\n",classTag:"dojoxGrid",rowCount:5,keepRows:75,rowsPerPage:25,autoWidth:false,initialWidth:"",autoHeight:"",rowHeight:0,autoRender:true,defaultHeight:"15em",height:"",structure:null,elasticView:-1,singleClickEdit:false,selectionMode:"extended",rowSelector:"",columnReordering:false,headerMenu:null,placeholderLabel:"GridColumns",selectable:false,_click:null,loadingMessage:"<span class='dojoxGridLoading'>${loadingState}</span>",errorMessage:"<span class='dojoxGridError'>${errorState}</span>",noDataMessage:"",escapeHTMLInData:true,formatterScope:null,editable:false,sortInfo:0,themeable:true,_placeholders:null,_layoutClass:dojox.grid._Layout,buildRendering:function(){
this.inherited(arguments);
if(!this.domNode.getAttribute("tabIndex")){
this.domNode.tabIndex="0";
}
this.createScroller();
this.createLayout();
this.createViews();
this.createManagers();
this.createSelection();
this.connect(this.selection,"onSelected","onSelected");
this.connect(this.selection,"onDeselected","onDeselected");
this.connect(this.selection,"onChanged","onSelectionChanged");
dojox.html.metrics.initOnFontResize();
this.connect(dojox.html.metrics,"onFontResize","textSizeChanged");
dojox.grid.util.funnelEvents(this.domNode,this,"doKeyEvent",dojox.grid.util.keyEvents);
if(this.selectionMode!="none"){
dojo.attr(this.domNode,"aria-multiselectable",this.selectionMode=="single"?"false":"true");
}
dojo.addClass(this.domNode,this.classTag);
if(!this.isLeftToRight()){
dojo.addClass(this.domNode,this.classTag+"Rtl");
}
},postMixInProperties:function(){
this.inherited(arguments);
var _a0c=dojo.i18n.getLocalization("dijit","loading",this.lang);
this.loadingMessage=dojo.string.substitute(this.loadingMessage,_a0c);
this.errorMessage=dojo.string.substitute(this.errorMessage,_a0c);
if(this.srcNodeRef&&this.srcNodeRef.style.height){
this.height=this.srcNodeRef.style.height;
}
this._setAutoHeightAttr(this.autoHeight,true);
this.lastScrollTop=this.scrollTop=0;
},postCreate:function(){
this._placeholders=[];
this._setHeaderMenuAttr(this.headerMenu);
this._setStructureAttr(this.structure);
this._click=[];
this.inherited(arguments);
if(this.domNode&&this.autoWidth&&this.initialWidth){
this.domNode.style.width=this.initialWidth;
}
if(this.domNode&&!this.editable){
dojo.attr(this.domNode,"aria-readonly","true");
}
},destroy:function(){
this.domNode.onReveal=null;
this.domNode.onSizeChange=null;
delete this._click;
this.edit.destroy();
delete this.edit;
this.views.destroyViews();
if(this.scroller){
this.scroller.destroy();
delete this.scroller;
}
if(this.focus){
this.focus.destroy();
delete this.focus;
}
if(this.headerMenu&&this._placeholders.length){
dojo.forEach(this._placeholders,function(p){
p.unReplace(true);
});
this.headerMenu.unBindDomNode(this.viewsHeaderNode);
}
this.inherited(arguments);
},_setAutoHeightAttr:function(ah,_a0d){
if(typeof ah=="string"){
if(!ah||ah=="false"){
ah=false;
}else{
if(ah=="true"){
ah=true;
}else{
ah=window.parseInt(ah,10);
}
}
}
if(typeof ah=="number"){
if(isNaN(ah)){
ah=false;
}
if(ah<0){
ah=true;
}else{
if(ah===0){
ah=false;
}
}
}
this.autoHeight=ah;
if(typeof ah=="boolean"){
this._autoHeight=ah;
}else{
if(typeof ah=="number"){
this._autoHeight=(ah>=this.get("rowCount"));
}else{
this._autoHeight=false;
}
}
if(this._started&&!_a0d){
this.render();
}
},_getRowCountAttr:function(){
return this.updating&&this.invalidated&&this.invalidated.rowCount!=undefined?this.invalidated.rowCount:this.rowCount;
},textSizeChanged:function(){
this.render();
},sizeChange:function(){
this.update();
},createManagers:function(){
this.rows=new dojox.grid._RowManager(this);
this.focus=new dojox.grid._FocusManager(this);
this.edit=new dojox.grid._EditManager(this);
},createSelection:function(){
this.selection=new dojox.grid.Selection(this);
},createScroller:function(){
this.scroller=new dojox.grid._Scroller();
this.scroller.grid=this;
this.scroller.renderRow=dojo.hitch(this,"renderRow");
this.scroller.removeRow=dojo.hitch(this,"rowRemoved");
},createLayout:function(){
this.layout=new this._layoutClass(this);
this.connect(this.layout,"moveColumn","onMoveColumn");
},onMoveColumn:function(){
this.render();
},onResizeColumn:function(_a0e){
},createViews:function(){
this.views=new dojox.grid._ViewManager(this);
this.views.createView=dojo.hitch(this,"createView");
},createView:function(_a0f,idx){
var c=dojo.getObject(_a0f);
var view=new c({grid:this,index:idx});
this.viewsNode.appendChild(view.domNode);
this.viewsHeaderNode.appendChild(view.headerNode);
this.views.addView(view);
dojo.attr(this.domNode,"align",dojo._isBodyLtr()?"left":"right");
return view;
},buildViews:function(){
for(var i=0,vs;(vs=this.layout.structure[i]);i++){
this.createView(vs.type||dojox._scopeName+".grid._View",i).setStructure(vs);
}
this.scroller.setContentNodes(this.views.getContentNodes());
},_setStructureAttr:function(_a10){
var s=_a10;
if(s&&dojo.isString(s)){
dojo.deprecated("dojox.grid._Grid.set('structure', 'objVar')","use dojox.grid._Grid.set('structure', objVar) instead","2.0");
s=dojo.getObject(s);
}
this.structure=s;
if(!s){
if(this.layout.structure){
s=this.layout.structure;
}else{
return;
}
}
this.views.destroyViews();
this.focus.focusView=null;
if(s!==this.layout.structure){
this.layout.setStructure(s);
}
this._structureChanged();
},setStructure:function(_a11){
dojo.deprecated("dojox.grid._Grid.setStructure(obj)","use dojox.grid._Grid.set('structure', obj) instead.","2.0");
this._setStructureAttr(_a11);
},getColumnTogglingItems:function(){
return dojo.map(this.layout.cells,function(cell){
if(!cell.menuItems){
cell.menuItems=[];
}
var self=this;
var item=new dijit.CheckedMenuItem({label:cell.name,checked:!cell.hidden,_gridCell:cell,onChange:function(_a12){
if(self.layout.setColumnVisibility(this._gridCell.index,_a12)){
var _a13=this._gridCell.menuItems;
if(_a13.length>1){
dojo.forEach(_a13,function(item){
if(item!==this){
item.setAttribute("checked",_a12);
}
},this);
}
_a12=dojo.filter(self.layout.cells,function(c){
if(c.menuItems.length>1){
dojo.forEach(c.menuItems,"item.set('disabled', false);");
}else{
c.menuItems[0].set("disabled",false);
}
return !c.hidden;
});
if(_a12.length==1){
dojo.forEach(_a12[0].menuItems,"item.set('disabled', true);");
}
}
},destroy:function(){
var _a14=dojo.indexOf(this._gridCell.menuItems,this);
this._gridCell.menuItems.splice(_a14,1);
delete this._gridCell;
dijit.CheckedMenuItem.prototype.destroy.apply(this,arguments);
}});
cell.menuItems.push(item);
return item;
},this);
},_setHeaderMenuAttr:function(menu){
if(this._placeholders&&this._placeholders.length){
dojo.forEach(this._placeholders,function(p){
p.unReplace(true);
});
this._placeholders=[];
}
if(this.headerMenu){
this.headerMenu.unBindDomNode(this.viewsHeaderNode);
}
this.headerMenu=menu;
if(!menu){
return;
}
this.headerMenu.bindDomNode(this.viewsHeaderNode);
if(this.headerMenu.getPlaceholders){
this._placeholders=this.headerMenu.getPlaceholders(this.placeholderLabel);
}
},setHeaderMenu:function(menu){
dojo.deprecated("dojox.grid._Grid.setHeaderMenu(obj)","use dojox.grid._Grid.set('headerMenu', obj) instead.","2.0");
this._setHeaderMenuAttr(menu);
},setupHeaderMenu:function(){
if(this._placeholders&&this._placeholders.length){
dojo.forEach(this._placeholders,function(p){
if(p._replaced){
p.unReplace(true);
}
p.replace(this.getColumnTogglingItems());
},this);
}
},_fetch:function(_a15){
this.setScrollTop(0);
},getItem:function(_a16){
return null;
},showMessage:function(_a17){
if(_a17){
this.messagesNode.innerHTML=_a17;
this.messagesNode.style.display="";
}else{
this.messagesNode.innerHTML="";
this.messagesNode.style.display="none";
}
},_structureChanged:function(){
this.buildViews();
if(this.autoRender&&this._started){
this.render();
}
},hasLayout:function(){
return this.layout.cells.length;
},resize:function(_a18,_a19){
this._pendingChangeSize=_a18;
this._pendingResultSize=_a19;
this.sizeChange();
},_getPadBorder:function(){
this._padBorder=this._padBorder||dojo._getPadBorderExtents(this.domNode);
return this._padBorder;
},_getHeaderHeight:function(){
var vns=this.viewsHeaderNode.style,t=vns.display=="none"?0:this.views.measureHeader();
vns.height=t+"px";
this.views.normalizeHeaderNodeHeight();
return t;
},_resize:function(_a1a,_a1b){
_a1a=_a1a||this._pendingChangeSize;
_a1b=_a1b||this._pendingResultSize;
delete this._pendingChangeSize;
delete this._pendingResultSize;
if(!this.domNode){
return;
}
var pn=this.domNode.parentNode;
if(!pn||pn.nodeType!=1||!this.hasLayout()||pn.style.visibility=="hidden"||pn.style.display=="none"){
return;
}
var _a1c=this._getPadBorder();
var hh=undefined;
var h;
if(this._autoHeight){
this.domNode.style.height="auto";
}else{
if(typeof this.autoHeight=="number"){
h=hh=this._getHeaderHeight();
h+=(this.scroller.averageRowHeight*this.autoHeight);
this.domNode.style.height=h+"px";
}else{
if(this.domNode.clientHeight<=_a1c.h){
if(pn==document.body){
this.domNode.style.height=this.defaultHeight;
}else{
if(this.height){
this.domNode.style.height=this.height;
}else{
this.fitTo="parent";
}
}
}
}
}
if(_a1b){
_a1a=_a1b;
}
if(_a1a){
dojo.marginBox(this.domNode,_a1a);
this.height=this.domNode.style.height;
delete this.fitTo;
}else{
if(this.fitTo=="parent"){
h=this._parentContentBoxHeight=this._parentContentBoxHeight||dojo._getContentBox(pn).h;
this.domNode.style.height=Math.max(0,h)+"px";
}
}
var _a1d=dojo.some(this.views.views,function(v){
return v.flexCells;
});
if(!this._autoHeight&&(h||dojo._getContentBox(this.domNode).h)===0){
this.viewsHeaderNode.style.display="none";
}else{
this.viewsHeaderNode.style.display="block";
if(!_a1d&&hh===undefined){
hh=this._getHeaderHeight();
}
}
if(_a1d){
hh=undefined;
}
this.adaptWidth();
this.adaptHeight(hh);
this.postresize();
},adaptWidth:function(){
var _a1e=(!this.initialWidth&&this.autoWidth);
var w=_a1e?0:this.domNode.clientWidth||(this.domNode.offsetWidth-this._getPadBorder().w),vw=this.views.arrange(1,w);
this.views.onEach("adaptWidth");
if(_a1e){
this.domNode.style.width=vw+"px";
}
},adaptHeight:function(_a1f){
var t=_a1f===undefined?this._getHeaderHeight():_a1f;
var h=(this._autoHeight?-1:Math.max(this.domNode.clientHeight-t,0)||0);
this.views.onEach("setSize",[0,h]);
this.views.onEach("adaptHeight");
if(!this._autoHeight){
var _a20=0,_a21=0;
var _a22=dojo.filter(this.views.views,function(v){
var has=v.hasHScrollbar();
if(has){
_a20++;
}else{
_a21++;
}
return (!has);
});
if(_a20>0&&_a21>0){
dojo.forEach(_a22,function(v){
v.adaptHeight(true);
});
}
}
if(this.autoHeight===true||h!=-1||(typeof this.autoHeight=="number"&&this.autoHeight>=this.get("rowCount"))){
this.scroller.windowHeight=h;
}else{
this.scroller.windowHeight=Math.max(this.domNode.clientHeight-t,0);
}
},startup:function(){
if(this._started){
return;
}
this.inherited(arguments);
if(this.autoRender){
this.render();
}
},render:function(){
if(!this.domNode){
return;
}
if(!this._started){
return;
}
if(!this.hasLayout()){
this.scroller.init(0,this.keepRows,this.rowsPerPage);
return;
}
this.update=this.defaultUpdate;
this._render();
},_render:function(){
this.scroller.init(this.get("rowCount"),this.keepRows,this.rowsPerPage);
this.prerender();
this.setScrollTop(0);
this.postrender();
},prerender:function(){
this.keepRows=this._autoHeight?0:this.keepRows;
this.scroller.setKeepInfo(this.keepRows);
this.views.render();
this._resize();
},postrender:function(){
this.postresize();
this.focus.initFocusView();
dojo.setSelectable(this.domNode,this.selectable);
},postresize:function(){
if(this._autoHeight){
var size=Math.max(this.views.measureContent())+"px";
this.viewsNode.style.height=size;
}
},renderRow:function(_a23,_a24){
this.views.renderRow(_a23,_a24,this._skipRowRenormalize);
},rowRemoved:function(_a25){
this.views.rowRemoved(_a25);
},invalidated:null,updating:false,beginUpdate:function(){
this.invalidated=[];
this.updating=true;
},endUpdate:function(){
this.updating=false;
var i=this.invalidated,r;
if(i.all){
this.update();
}else{
if(i.rowCount!=undefined){
this.updateRowCount(i.rowCount);
}else{
for(r in i){
this.updateRow(Number(r));
}
}
}
this.invalidated=[];
},defaultUpdate:function(){
if(!this.domNode){
return;
}
if(this.updating){
this.invalidated.all=true;
return;
}
this.lastScrollTop=this.scrollTop;
this.prerender();
this.scroller.invalidateNodes();
this.setScrollTop(this.lastScrollTop);
this.postrender();
},update:function(){
this.render();
},updateRow:function(_a26){
_a26=Number(_a26);
if(this.updating){
this.invalidated[_a26]=true;
}else{
this.views.updateRow(_a26);
this.scroller.rowHeightChanged(_a26);
}
},updateRows:function(_a27,_a28){
_a27=Number(_a27);
_a28=Number(_a28);
var i;
if(this.updating){
for(i=0;i<_a28;i++){
this.invalidated[i+_a27]=true;
}
}else{
for(i=0;i<_a28;i++){
this.views.updateRow(i+_a27,this._skipRowRenormalize);
}
this.scroller.rowHeightChanged(_a27);
}
},updateRowCount:function(_a29){
if(this.updating){
this.invalidated.rowCount=_a29;
}else{
this.rowCount=_a29;
this._setAutoHeightAttr(this.autoHeight,true);
if(this.layout.cells.length){
this.scroller.updateRowCount(_a29);
}
this._resize();
if(this.layout.cells.length){
this.setScrollTop(this.scrollTop);
}
}
},updateRowStyles:function(_a2a){
this.views.updateRowStyles(_a2a);
},getRowNode:function(_a2b){
if(this.focus.focusView&&!(this.focus.focusView instanceof dojox.grid._RowSelector)){
return this.focus.focusView.rowNodes[_a2b];
}else{
for(var i=0,_a2c;(_a2c=this.views.views[i]);i++){
if(!(_a2c instanceof dojox.grid._RowSelector)){
return _a2c.rowNodes[_a2b];
}
}
}
return null;
},rowHeightChanged:function(_a2d){
this.views.renormalizeRow(_a2d);
this.scroller.rowHeightChanged(_a2d);
},fastScroll:true,delayScroll:false,scrollRedrawThreshold:(dojo.isIE?100:50),scrollTo:function(_a2e){
if(!this.fastScroll){
this.setScrollTop(_a2e);
return;
}
var _a2f=Math.abs(this.lastScrollTop-_a2e);
this.lastScrollTop=_a2e;
if(_a2f>this.scrollRedrawThreshold||this.delayScroll){
this.delayScroll=true;
this.scrollTop=_a2e;
this.views.setScrollTop(_a2e);
if(this._pendingScroll){
window.clearTimeout(this._pendingScroll);
}
var _a30=this;
this._pendingScroll=window.setTimeout(function(){
delete _a30._pendingScroll;
_a30.finishScrollJob();
},200);
}else{
this.setScrollTop(_a2e);
}
},finishScrollJob:function(){
this.delayScroll=false;
this.setScrollTop(this.scrollTop);
},setScrollTop:function(_a31){
this.scroller.scroll(this.views.setScrollTop(_a31));
},scrollToRow:function(_a32){
this.setScrollTop(this.scroller.findScrollTop(_a32)+1);
},styleRowNode:function(_a33,_a34){
if(_a34){
this.rows.styleRowNode(_a33,_a34);
}
},_mouseOut:function(e){
this.rows.setOverRow(-2);
},getCell:function(_a35){
return this.layout.cells[_a35];
},setCellWidth:function(_a36,_a37){
this.getCell(_a36).unitWidth=_a37;
},getCellName:function(_a38){
return "Cell "+_a38.index;
},canSort:function(_a39){
},sort:function(){
},getSortAsc:function(_a3a){
_a3a=_a3a==undefined?this.sortInfo:_a3a;
return Boolean(_a3a>0);
},getSortIndex:function(_a3b){
_a3b=_a3b==undefined?this.sortInfo:_a3b;
return Math.abs(_a3b)-1;
},setSortIndex:function(_a3c,_a3d){
var si=_a3c+1;
if(_a3d!=undefined){
si*=(_a3d?1:-1);
}else{
if(this.getSortIndex()==_a3c){
si=-this.sortInfo;
}
}
this.setSortInfo(si);
},setSortInfo:function(_a3e){
if(this.canSort(_a3e)){
this.sortInfo=_a3e;
this.sort();
this.update();
}
},doKeyEvent:function(e){
e.dispatch="do"+e.type;
this.onKeyEvent(e);
},_dispatch:function(m,e){
if(m in this){
return this[m](e);
}
return false;
},dispatchKeyEvent:function(e){
this._dispatch(e.dispatch,e);
},dispatchContentEvent:function(e){
this.edit.dispatchEvent(e)||e.sourceView.dispatchContentEvent(e)||this._dispatch(e.dispatch,e);
},dispatchHeaderEvent:function(e){
e.sourceView.dispatchHeaderEvent(e)||this._dispatch("doheader"+e.type,e);
},dokeydown:function(e){
this.onKeyDown(e);
},doclick:function(e){
if(e.cellNode){
this.onCellClick(e);
}else{
this.onRowClick(e);
}
},dodblclick:function(e){
if(e.cellNode){
this.onCellDblClick(e);
}else{
this.onRowDblClick(e);
}
},docontextmenu:function(e){
if(e.cellNode){
this.onCellContextMenu(e);
}else{
this.onRowContextMenu(e);
}
},doheaderclick:function(e){
if(e.cellNode){
this.onHeaderCellClick(e);
}else{
this.onHeaderClick(e);
}
},doheaderdblclick:function(e){
if(e.cellNode){
this.onHeaderCellDblClick(e);
}else{
this.onHeaderDblClick(e);
}
},doheadercontextmenu:function(e){
if(e.cellNode){
this.onHeaderCellContextMenu(e);
}else{
this.onHeaderContextMenu(e);
}
},doStartEdit:function(_a3f,_a40){
this.onStartEdit(_a3f,_a40);
},doApplyCellEdit:function(_a41,_a42,_a43){
this.onApplyCellEdit(_a41,_a42,_a43);
},doCancelEdit:function(_a44){
this.onCancelEdit(_a44);
},doApplyEdit:function(_a45){
this.onApplyEdit(_a45);
},addRow:function(){
this.updateRowCount(this.get("rowCount")+1);
},removeSelectedRows:function(){
if(this.allItemsSelected){
this.updateRowCount(0);
}else{
this.updateRowCount(Math.max(0,this.get("rowCount")-this.selection.getSelected().length));
}
this.selection.clear();
}});
dojox.grid._Grid.markupFactory=function(_a46,node,ctor,_a47){
var d=dojo;
var _a48=function(n){
var w=d.attr(n,"width")||"auto";
if((w!="auto")&&(w.slice(-2)!="em")&&(w.slice(-1)!="%")){
w=parseInt(w,10)+"px";
}
return w;
};
if(!_a46.structure&&node.nodeName.toLowerCase()=="table"){
_a46.structure=d.query("> colgroup",node).map(function(cg){
var sv=d.attr(cg,"span");
var v={noscroll:(d.attr(cg,"noscroll")=="true")?true:false,__span:(!!sv?parseInt(sv,10):1),cells:[]};
if(d.hasAttr(cg,"width")){
v.width=_a48(cg);
}
return v;
});
if(!_a46.structure.length){
_a46.structure.push({__span:Infinity,cells:[]});
}
d.query("thead > tr",node).forEach(function(tr,_a49){
var _a4a=0;
var _a4b=0;
var _a4c;
var _a4d=null;
d.query("> th",tr).map(function(th){
if(!_a4d){
_a4c=0;
_a4d=_a46.structure[0];
}else{
if(_a4a>=(_a4c+_a4d.__span)){
_a4b++;
_a4c+=_a4d.__span;
var _a4e=_a4d;
_a4d=_a46.structure[_a4b];
}
}
var cell={name:d.trim(d.attr(th,"name")||th.innerHTML),colSpan:parseInt(d.attr(th,"colspan")||1,10),type:d.trim(d.attr(th,"cellType")||""),id:d.trim(d.attr(th,"id")||"")};
_a4a+=cell.colSpan;
var _a4f=d.attr(th,"rowspan");
if(_a4f){
cell.rowSpan=_a4f;
}
if(d.hasAttr(th,"width")){
cell.width=_a48(th);
}
if(d.hasAttr(th,"relWidth")){
cell.relWidth=window.parseInt(dojo.attr(th,"relWidth"),10);
}
if(d.hasAttr(th,"hidden")){
cell.hidden=(d.attr(th,"hidden")=="true"||d.attr(th,"hidden")===true);
}
if(_a47){
_a47(th,cell);
}
cell.type=cell.type?dojo.getObject(cell.type):dojox.grid.cells.Cell;
if(cell.type&&cell.type.markupFactory){
cell.type.markupFactory(th,cell);
}
if(!_a4d.cells[_a49]){
_a4d.cells[_a49]=[];
}
_a4d.cells[_a49].push(cell);
});
});
}
return new ctor(_a46,node);
};
})();
}
if(!dojo._hasResource["dojox.grid.DataSelection"]){
dojo._hasResource["dojox.grid.DataSelection"]=true;
dojo.provide("dojox.grid.DataSelection");
dojo.declare("dojox.grid.DataSelection",dojox.grid.Selection,{getFirstSelected:function(){
var idx=dojox.grid.Selection.prototype.getFirstSelected.call(this);
if(idx==-1){
return null;
}
return this.grid.getItem(idx);
},getNextSelected:function(_a50){
var _a51=this.grid.getItemIndex(_a50);
var idx=dojox.grid.Selection.prototype.getNextSelected.call(this,_a51);
if(idx==-1){
return null;
}
return this.grid.getItem(idx);
},getSelected:function(){
var _a52=[];
for(var i=0,l=this.selected.length;i<l;i++){
if(this.selected[i]){
_a52.push(this.grid.getItem(i));
}
}
return _a52;
},addToSelection:function(_a53){
if(this.mode=="none"){
return;
}
var idx=null;
if(typeof _a53=="number"||typeof _a53=="string"){
idx=_a53;
}else{
idx=this.grid.getItemIndex(_a53);
}
dojox.grid.Selection.prototype.addToSelection.call(this,idx);
},deselect:function(_a54){
if(this.mode=="none"){
return;
}
var idx=null;
if(typeof _a54=="number"||typeof _a54=="string"){
idx=_a54;
}else{
idx=this.grid.getItemIndex(_a54);
}
dojox.grid.Selection.prototype.deselect.call(this,idx);
},deselectAll:function(_a55){
var idx=null;
if(_a55||typeof _a55=="number"){
if(typeof _a55=="number"||typeof _a55=="string"){
idx=_a55;
}else{
idx=this.grid.getItemIndex(_a55);
}
dojox.grid.Selection.prototype.deselectAll.call(this,idx);
}else{
this.inherited(arguments);
}
}});
}
if(!dojo._hasResource["dojox.grid.DataGrid"]){
dojo._hasResource["dojox.grid.DataGrid"]=true;
dojo.provide("dojox.grid.DataGrid");
dojo.declare("dojox.grid.DataGrid",dojox.grid._Grid,{store:null,query:null,queryOptions:null,fetchText:"...",sortFields:null,updateDelay:1,items:null,_store_connects:null,_by_idty:null,_by_idx:null,_cache:null,_pages:null,_pending_requests:null,_bop:-1,_eop:-1,_requests:0,rowCount:0,_isLoaded:false,_isLoading:false,postCreate:function(){
this._pages=[];
this._store_connects=[];
this._by_idty={};
this._by_idx=[];
this._cache=[];
this._pending_requests={};
this._setStore(this.store);
this.inherited(arguments);
},createSelection:function(){
this.selection=new dojox.grid.DataSelection(this);
},get:function(_a56,_a57){
if(_a57&&this.field=="_item"&&!this.fields){
return _a57;
}else{
if(_a57&&this.fields){
var ret=[];
var s=this.grid.store;
dojo.forEach(this.fields,function(f){
ret=ret.concat(s.getValues(_a57,f));
});
return ret;
}else{
if(!_a57&&typeof _a56==="string"){
return this.inherited(arguments);
}
}
}
return (!_a57?this.defaultValue:(!this.field?this.value:(this.field=="_item"?_a57:this.grid.store.getValue(_a57,this.field))));
},_checkUpdateStatus:function(){
if(this.updateDelay>0){
var _a58=false;
if(this._endUpdateDelay){
clearTimeout(this._endUpdateDelay);
delete this._endUpdateDelay;
_a58=true;
}
if(!this.updating){
this.beginUpdate();
_a58=true;
}
if(_a58){
var _a59=this;
this._endUpdateDelay=setTimeout(function(){
delete _a59._endUpdateDelay;
_a59.endUpdate();
},this.updateDelay);
}
}
},_onSet:function(item,_a5a,_a5b,_a5c){
this._checkUpdateStatus();
var idx=this.getItemIndex(item);
if(idx>-1){
this.updateRow(idx);
}
},_createItem:function(item,_a5d){
var idty=this._hasIdentity?this.store.getIdentity(item):dojo.toJson(this.query)+":idx:"+_a5d+":sort:"+dojo.toJson(this.getSortProps());
var o=this._by_idty[idty]={idty:idty,item:item};
return o;
},_addItem:function(item,_a5e,_a5f){
this._by_idx[_a5e]=this._createItem(item,_a5e);
if(!_a5f){
this.updateRow(_a5e);
}
},_onNew:function(item,_a60){
this._checkUpdateStatus();
var _a61=this.get("rowCount");
this._addingItem=true;
this.updateRowCount(_a61+1);
this._addingItem=false;
this._addItem(item,_a61);
this.showMessage();
},_onDelete:function(item){
this._checkUpdateStatus();
var idx=this._getItemIndex(item,true);
if(idx>=0){
this._pages=[];
this._bop=-1;
this._eop=-1;
var o=this._by_idx[idx];
this._by_idx.splice(idx,1);
delete this._by_idty[o.idty];
this.updateRowCount(this.get("rowCount")-1);
if(this.get("rowCount")===0){
this.showMessage(this.noDataMessage);
}
}
},_onRevert:function(){
this._refresh();
},setStore:function(_a62,_a63,_a64){
this._setQuery(_a63,_a64);
this._setStore(_a62);
this._refresh(true);
},setQuery:function(_a65,_a66){
this._setQuery(_a65,_a66);
this._refresh(true);
},setItems:function(_a67){
this.items=_a67;
this._setStore(this.store);
this._refresh(true);
},_setQuery:function(_a68,_a69){
this.query=_a68;
this.queryOptions=_a69||this.queryOptions;
},_setStore:function(_a6a){
if(this.store&&this._store_connects){
dojo.forEach(this._store_connects,this.disconnect,this);
}
this.store=_a6a;
if(this.store){
var f=this.store.getFeatures();
var h=[];
this._canEdit=!!f["dojo.data.api.Write"]&&!!f["dojo.data.api.Identity"];
this._hasIdentity=!!f["dojo.data.api.Identity"];
if(!!f["dojo.data.api.Notification"]&&!this.items){
h.push(this.connect(this.store,"onSet","_onSet"));
h.push(this.connect(this.store,"onNew","_onNew"));
h.push(this.connect(this.store,"onDelete","_onDelete"));
}
if(this._canEdit){
h.push(this.connect(this.store,"revert","_onRevert"));
}
this._store_connects=h;
}
},_onFetchBegin:function(size,req){
if(!this.scroller){
return;
}
if(this.rowCount!=size){
if(req.isRender){
this.scroller.init(size,this.keepRows,this.rowsPerPage);
this.rowCount=size;
this._setAutoHeightAttr(this.autoHeight,true);
this._skipRowRenormalize=true;
this.prerender();
this._skipRowRenormalize=false;
}else{
this.updateRowCount(size);
}
}
if(!size){
this.views.render();
this._resize();
this.showMessage(this.noDataMessage);
this.focus.initFocusView();
}else{
this.showMessage();
}
},_onFetchComplete:function(_a6b,req){
if(!this.scroller){
return;
}
if(_a6b&&_a6b.length>0){
dojo.forEach(_a6b,function(item,idx){
this._addItem(item,req.start+idx,true);
},this);
this.updateRows(req.start,_a6b.length);
if(req.isRender){
this.setScrollTop(0);
this.postrender();
}else{
if(this._lastScrollTop){
this.setScrollTop(this._lastScrollTop);
}
}
}
delete this._lastScrollTop;
if(!this._isLoaded){
this._isLoading=false;
this._isLoaded=true;
}
this._pending_requests[req.start]=false;
},_onFetchError:function(err,req){
console.log(err);
delete this._lastScrollTop;
if(!this._isLoaded){
this._isLoading=false;
this._isLoaded=true;
this.showMessage(this.errorMessage);
}
this._pending_requests[req.start]=false;
this.onFetchError(err,req);
},onFetchError:function(err,req){
},_fetch:function(_a6c,_a6d){
_a6c=_a6c||0;
if(this.store&&!this._pending_requests[_a6c]){
if(!this._isLoaded&&!this._isLoading){
this._isLoading=true;
this.showMessage(this.loadingMessage);
}
this._pending_requests[_a6c]=true;
try{
if(this.items){
var _a6e=this.items;
var _a6f=this.store;
this.rowsPerPage=_a6e.length;
var req={start:_a6c,count:this.rowsPerPage,isRender:_a6d};
this._onFetchBegin(_a6e.length,req);
var _a70=0;
dojo.forEach(_a6e,function(i){
if(!_a6f.isItemLoaded(i)){
_a70++;
}
});
if(_a70===0){
this._onFetchComplete(_a6e,req);
}else{
var _a71=function(item){
_a70--;
if(_a70===0){
this._onFetchComplete(_a6e,req);
}
};
dojo.forEach(_a6e,function(i){
if(!_a6f.isItemLoaded(i)){
_a6f.loadItem({item:i,onItem:_a71,scope:this});
}
},this);
}
}else{
this.store.fetch({start:_a6c,count:this.rowsPerPage,query:this.query,sort:this.getSortProps(),queryOptions:this.queryOptions,isRender:_a6d,onBegin:dojo.hitch(this,"_onFetchBegin"),onComplete:dojo.hitch(this,"_onFetchComplete"),onError:dojo.hitch(this,"_onFetchError")});
}
}
catch(e){
this._onFetchError(e,{start:_a6c,count:this.rowsPerPage});
}
}
},_clearData:function(){
this.updateRowCount(0);
this._by_idty={};
this._by_idx=[];
this._pages=[];
this._bop=this._eop=-1;
this._isLoaded=false;
this._isLoading=false;
},getItem:function(idx){
var data=this._by_idx[idx];
if(!data||(data&&!data.item)){
this._preparePage(idx);
return null;
}
return data.item;
},getItemIndex:function(item){
return this._getItemIndex(item,false);
},_getItemIndex:function(item,_a72){
if(!_a72&&!this.store.isItem(item)){
return -1;
}
var idty=this._hasIdentity?this.store.getIdentity(item):null;
for(var i=0,l=this._by_idx.length;i<l;i++){
var d=this._by_idx[i];
if(d&&((idty&&d.idty==idty)||(d.item===item))){
return i;
}
}
return -1;
},filter:function(_a73,_a74){
this.query=_a73;
if(_a74){
this._clearData();
}
this._fetch();
},_getItemAttr:function(idx,attr){
var item=this.getItem(idx);
return (!item?this.fetchText:this.store.getValue(item,attr));
},_render:function(){
if(this.domNode.parentNode){
this.scroller.init(this.get("rowCount"),this.keepRows,this.rowsPerPage);
this.prerender();
this._fetch(0,true);
}
},_requestsPending:function(_a75){
return this._pending_requests[_a75];
},_rowToPage:function(_a76){
return (this.rowsPerPage?Math.floor(_a76/this.rowsPerPage):_a76);
},_pageToRow:function(_a77){
return (this.rowsPerPage?this.rowsPerPage*_a77:_a77);
},_preparePage:function(_a78){
if((_a78<this._bop||_a78>=this._eop)&&!this._addingItem){
var _a79=this._rowToPage(_a78);
this._needPage(_a79);
this._bop=_a79*this.rowsPerPage;
this._eop=this._bop+(this.rowsPerPage||this.get("rowCount"));
}
},_needPage:function(_a7a){
if(!this._pages[_a7a]){
this._pages[_a7a]=true;
this._requestPage(_a7a);
}
},_requestPage:function(_a7b){
var row=this._pageToRow(_a7b);
var _a7c=Math.min(this.rowsPerPage,this.get("rowCount")-row);
if(_a7c>0){
this._requests++;
if(!this._requestsPending(row)){
setTimeout(dojo.hitch(this,"_fetch",row,false),1);
}
}
},getCellName:function(_a7d){
return _a7d.field;
},_refresh:function(_a7e){
this._clearData();
this._fetch(0,_a7e);
},sort:function(){
this.edit.apply();
this._lastScrollTop=this.scrollTop;
this._refresh();
},canSort:function(){
return (!this._isLoading);
},getSortProps:function(){
var c=this.getCell(this.getSortIndex());
if(!c){
if(this.sortFields){
return this.sortFields;
}
return null;
}else{
var desc=c["sortDesc"];
var si=!(this.sortInfo>0);
if(typeof desc=="undefined"){
desc=si;
}else{
desc=si?!desc:desc;
}
return [{attribute:c.field,descending:desc}];
}
},styleRowState:function(_a7f){
if(this.store&&this.store.getState){
var _a80=this.store.getState(_a7f.index),c="";
for(var i=0,ss=["inflight","error","inserting"],s;s=ss[i];i++){
if(_a80[s]){
c=" dojoxGridRow-"+s;
break;
}
}
_a7f.customClasses+=c;
}
},onStyleRow:function(_a81){
this.styleRowState(_a81);
this.inherited(arguments);
},canEdit:function(_a82,_a83){
return this._canEdit;
},_copyAttr:function(idx,attr){
var row={};
var _a84={};
var src=this.getItem(idx);
return this.store.getValue(src,attr);
},doStartEdit:function(_a85,_a86){
if(!this._cache[_a86]){
this._cache[_a86]=this._copyAttr(_a86,_a85.field);
}
this.onStartEdit(_a85,_a86);
},doApplyCellEdit:function(_a87,_a88,_a89){
this.store.fetchItemByIdentity({identity:this._by_idx[_a88].idty,onItem:dojo.hitch(this,function(item){
var _a8a=this.store.getValue(item,_a89);
if(typeof _a8a=="number"){
_a87=isNaN(_a87)?_a87:parseFloat(_a87);
}else{
if(typeof _a8a=="boolean"){
_a87=_a87=="true"?true:_a87=="false"?false:_a87;
}else{
if(_a8a instanceof Date){
var _a8b=new Date(_a87);
_a87=isNaN(_a8b.getTime())?_a87:_a8b;
}
}
}
this.store.setValue(item,_a89,_a87);
this.onApplyCellEdit(_a87,_a88,_a89);
})});
},doCancelEdit:function(_a8c){
var _a8d=this._cache[_a8c];
if(_a8d){
this.updateRow(_a8c);
delete this._cache[_a8c];
}
this.onCancelEdit.apply(this,arguments);
},doApplyEdit:function(_a8e,_a8f){
var _a90=this._cache[_a8e];
this.onApplyEdit(_a8e);
},removeSelectedRows:function(){
if(this._canEdit){
this.edit.apply();
var fx=dojo.hitch(this,function(_a91){
if(_a91.length){
dojo.forEach(_a91,this.store.deleteItem,this.store);
this.selection.clear();
}
});
if(this.allItemsSelected){
this.store.fetch({query:this.query,queryOptions:this.queryOptions,onComplete:fx});
}else{
fx(this.selection.getSelected());
}
}
}});
dojox.grid.DataGrid.cell_markupFactory=function(_a92,node,_a93){
var _a94=dojo.trim(dojo.attr(node,"field")||"");
if(_a94){
_a93.field=_a94;
}
_a93.field=_a93.field||_a93.name;
var _a95=dojo.trim(dojo.attr(node,"fields")||"");
if(_a95){
_a93.fields=_a95.split(",");
}
if(_a92){
_a92(node,_a93);
}
};
dojox.grid.DataGrid.markupFactory=function(_a96,node,ctor,_a97){
return dojox.grid._Grid.markupFactory(_a96,node,ctor,dojo.partial(dojox.grid.DataGrid.cell_markupFactory,_a97));
};
}
if(!dojo._hasResource["dijit.form._Spinner"]){
dojo._hasResource["dijit.form._Spinner"]=true;
dojo.provide("dijit.form._Spinner");
dojo.declare("dijit.form._Spinner",dijit.form.RangeBoundTextBox,{defaultTimeout:500,minimumTimeout:10,timeoutChangeRate:0.9,smallDelta:1,largeDelta:10,templateString:dojo.cache("dijit.form","templates/Spinner.html","<div class=\"dijit dijitReset dijitInlineTable dijitLeft\"\r\n\tid=\"widget_${id}\" role=\"presentation\"\r\n\t><div class=\"dijitReset dijitButtonNode dijitSpinnerButtonContainer\"\r\n\t\t><input class=\"dijitReset dijitInputField dijitSpinnerButtonInner\" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t\t/><div class=\"dijitReset dijitLeft dijitButtonNode dijitArrowButton dijitUpArrowButton\"\r\n\t\t\tdojoAttachPoint=\"upArrowNode\"\r\n\t\t\t><div class=\"dijitArrowButtonInner\"\r\n\t\t\t\t><input class=\"dijitReset dijitInputField\" value=\"&#9650;\" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t\t\t\t\t${_buttonInputDisabled}\r\n\t\t\t/></div\r\n\t\t></div\r\n\t\t><div class=\"dijitReset dijitLeft dijitButtonNode dijitArrowButton dijitDownArrowButton\"\r\n\t\t\tdojoAttachPoint=\"downArrowNode\"\r\n\t\t\t><div class=\"dijitArrowButtonInner\"\r\n\t\t\t\t><input class=\"dijitReset dijitInputField\" value=\"&#9660;\" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t\t\t\t\t${_buttonInputDisabled}\r\n\t\t\t/></div\r\n\t\t></div\r\n\t></div\r\n\t><div class='dijitReset dijitValidationContainer'\r\n\t\t><input class=\"dijitReset dijitInputField dijitValidationIcon dijitValidationInner\" value=\"&#935;\" type=\"text\" tabIndex=\"-1\" readonly=\"readonly\" role=\"presentation\"\r\n\t/></div\r\n\t><div class=\"dijitReset dijitInputField dijitInputContainer\"\r\n\t\t><input class='dijitReset dijitInputInner' dojoAttachPoint=\"textbox,focusNode\" type=\"${type}\" dojoAttachEvent=\"onkeypress:_onKeyPress\"\r\n\t\t\trole=\"spinbutton\" autocomplete=\"off\" ${!nameAttrSetting}\r\n\t/></div\r\n></div>\r\n"),baseClass:"dijitTextBox dijitSpinner",cssStateNodes:{"upArrowNode":"dijitUpArrowButton","downArrowNode":"dijitDownArrowButton"},adjust:function(val,_a98){
return val;
},_arrowPressed:function(_a99,_a9a,_a9b){
if(this.disabled||this.readOnly){
return;
}
this._setValueAttr(this.adjust(this.get("value"),_a9a*_a9b),false);
dijit.selectInputText(this.textbox,this.textbox.value.length);
},_arrowReleased:function(node){
this._wheelTimer=null;
if(this.disabled||this.readOnly){
return;
}
},_typematicCallback:function(_a9c,node,evt){
var inc=this.smallDelta;
if(node==this.textbox){
var k=dojo.keys;
var key=evt.charOrCode;
inc=(key==k.PAGE_UP||key==k.PAGE_DOWN)?this.largeDelta:this.smallDelta;
node=(key==k.UP_ARROW||key==k.PAGE_UP)?this.upArrowNode:this.downArrowNode;
}
if(_a9c==-1){
this._arrowReleased(node);
}else{
this._arrowPressed(node,(node==this.upArrowNode)?1:-1,inc);
}
},_wheelTimer:null,_mouseWheeled:function(evt){
dojo.stopEvent(evt);
var _a9d=evt.detail?(evt.detail*-1):(evt.wheelDelta/120);
if(_a9d!==0){
var node=this[(_a9d>0?"upArrowNode":"downArrowNode")];
this._arrowPressed(node,_a9d,this.smallDelta);
if(!this._wheelTimer){
clearTimeout(this._wheelTimer);
}
this._wheelTimer=setTimeout(dojo.hitch(this,"_arrowReleased",node),50);
}
},postCreate:function(){
this.inherited(arguments);
this.connect(this.domNode,!dojo.isMozilla?"onmousewheel":"DOMMouseScroll","_mouseWheeled");
this._connects.push(dijit.typematic.addListener(this.upArrowNode,this.textbox,{charOrCode:dojo.keys.UP_ARROW,ctrlKey:false,altKey:false,shiftKey:false,metaKey:false},this,"_typematicCallback",this.timeoutChangeRate,this.defaultTimeout,this.minimumTimeout));
this._connects.push(dijit.typematic.addListener(this.downArrowNode,this.textbox,{charOrCode:dojo.keys.DOWN_ARROW,ctrlKey:false,altKey:false,shiftKey:false,metaKey:false},this,"_typematicCallback",this.timeoutChangeRate,this.defaultTimeout,this.minimumTimeout));
this._connects.push(dijit.typematic.addListener(this.upArrowNode,this.textbox,{charOrCode:dojo.keys.PAGE_UP,ctrlKey:false,altKey:false,shiftKey:false,metaKey:false},this,"_typematicCallback",this.timeoutChangeRate,this.defaultTimeout,this.minimumTimeout));
this._connects.push(dijit.typematic.addListener(this.downArrowNode,this.textbox,{charOrCode:dojo.keys.PAGE_DOWN,ctrlKey:false,altKey:false,shiftKey:false,metaKey:false},this,"_typematicCallback",this.timeoutChangeRate,this.defaultTimeout,this.minimumTimeout));
}});
}
if(!dojo._hasResource["dijit.form.NumberTextBox"]){
dojo._hasResource["dijit.form.NumberTextBox"]=true;
dojo.provide("dijit.form.NumberTextBox");
dojo.declare("dijit.form.NumberTextBoxMixin",null,{regExpGen:dojo.number.regexp,value:NaN,editOptions:{pattern:"#.######"},_formatter:dojo.number.format,_setConstraintsAttr:function(_a9e){
var _a9f=typeof _a9e.places=="number"?_a9e.places:0;
if(_a9f){
_a9f++;
}
if(typeof _a9e.max!="number"){
_a9e.max=9*Math.pow(10,15-_a9f);
}
if(typeof _a9e.min!="number"){
_a9e.min=-9*Math.pow(10,15-_a9f);
}
this.inherited(arguments,[_a9e]);
if(this.focusNode&&this.focusNode.value&&!isNaN(this.value)){
this.set("value",this.value);
}
},_onFocus:function(){
if(this.disabled){
return;
}
var val=this.get("value");
if(typeof val=="number"&&!isNaN(val)){
var _aa0=this.format(val,this.constraints);
if(_aa0!==undefined){
this.textbox.value=_aa0;
}
}
this.inherited(arguments);
},format:function(_aa1,_aa2){
var _aa3=String(_aa1);
if(typeof _aa1!="number"){
return _aa3;
}
if(isNaN(_aa1)){
return "";
}
if(!("rangeCheck" in this&&this.rangeCheck(_aa1,_aa2))&&_aa2.exponent!==false&&/\de[-+]?\d/i.test(_aa3)){
return _aa3;
}
if(this.editOptions&&this._focused){
_aa2=dojo.mixin({},_aa2,this.editOptions);
}
return this._formatter(_aa1,_aa2);
},_parser:dojo.number.parse,parse:function(_aa4,_aa5){
var v=this._parser(_aa4,dojo.mixin({},_aa5,(this.editOptions&&this._focused)?this.editOptions:{}));
if(this.editOptions&&this._focused&&isNaN(v)){
v=this._parser(_aa4,_aa5);
}
return v;
},_getDisplayedValueAttr:function(){
var v=this.inherited(arguments);
return isNaN(v)?this.textbox.value:v;
},filter:function(_aa6){
return (_aa6===null||_aa6===""||_aa6===undefined)?NaN:this.inherited(arguments);
},serialize:function(_aa7,_aa8){
return (typeof _aa7!="number"||isNaN(_aa7))?"":this.inherited(arguments);
},_setBlurValue:function(){
var val=dojo.hitch(dojo.mixin({},this,{_focused:true}),"get")("value");
this._setValueAttr(val,true);
},_setValueAttr:function(_aa9,_aaa,_aab){
if(_aa9!==undefined&&_aab===undefined){
_aab=String(_aa9);
if(typeof _aa9=="number"){
if(isNaN(_aa9)){
_aab="";
}else{
if(("rangeCheck" in this&&this.rangeCheck(_aa9,this.constraints))||this.constraints.exponent===false||!/\de[-+]?\d/i.test(_aab)){
_aab=undefined;
}
}
}else{
if(!_aa9){
_aab="";
_aa9=NaN;
}else{
_aa9=undefined;
}
}
}
this.inherited(arguments,[_aa9,_aaa,_aab]);
},_getValueAttr:function(){
var v=this.inherited(arguments);
if(isNaN(v)&&this.textbox.value!==""){
if(this.constraints.exponent!==false&&/\de[-+]?\d/i.test(this.textbox.value)&&(new RegExp("^"+dojo.number._realNumberRegexp(dojo.mixin({},this.constraints))+"$").test(this.textbox.value))){
var n=Number(this.textbox.value);
return isNaN(n)?undefined:n;
}else{
return undefined;
}
}else{
return v;
}
},isValid:function(_aac){
if(!this._focused||this._isEmpty(this.textbox.value)){
return this.inherited(arguments);
}else{
var v=this.get("value");
if(!isNaN(v)&&this.rangeCheck(v,this.constraints)){
if(this.constraints.exponent!==false&&/\de[-+]?\d/i.test(this.textbox.value)){
return true;
}else{
return this.inherited(arguments);
}
}else{
return false;
}
}
}});
dojo.declare("dijit.form.NumberTextBox",[dijit.form.RangeBoundTextBox,dijit.form.NumberTextBoxMixin],{baseClass:"dijitTextBox dijitNumberTextBox"});
}
if(!dojo._hasResource["dijit.form.NumberSpinner"]){
dojo._hasResource["dijit.form.NumberSpinner"]=true;
dojo.provide("dijit.form.NumberSpinner");
dojo.declare("dijit.form.NumberSpinner",[dijit.form._Spinner,dijit.form.NumberTextBoxMixin],{adjust:function(val,_aad){
var tc=this.constraints,v=isNaN(val),_aae=!isNaN(tc.max),_aaf=!isNaN(tc.min);
if(v&&_aad!=0){
val=(_aad>0)?_aaf?tc.min:_aae?tc.max:0:_aae?this.constraints.max:_aaf?tc.min:0;
}
var _ab0=val+_aad;
if(v||isNaN(_ab0)){
return val;
}
if(_aae&&(_ab0>tc.max)){
_ab0=tc.max;
}
if(_aaf&&(_ab0<tc.min)){
_ab0=tc.min;
}
return _ab0;
},_onKeyPress:function(e){
if((e.charOrCode==dojo.keys.HOME||e.charOrCode==dojo.keys.END)&&!(e.ctrlKey||e.altKey||e.metaKey)&&typeof this.get("value")!="undefined"){
var _ab1=this.constraints[(e.charOrCode==dojo.keys.HOME?"min":"max")];
if(typeof _ab1=="number"){
this._setValueAttr(_ab1,false);
}
dojo.stopEvent(e);
}
}});
}
if(!dojo._hasResource["dojo.cldr.monetary"]){
dojo._hasResource["dojo.cldr.monetary"]=true;
dojo.provide("dojo.cldr.monetary");
dojo.getObject("cldr.monetary",true,dojo);
dojo.cldr.monetary.getData=function(code){
var _ab2={ADP:0,AFN:0,ALL:0,AMD:0,BHD:3,BIF:0,BYR:0,CLF:0,CLP:0,COP:0,CRC:0,DJF:0,ESP:0,GNF:0,GYD:0,HUF:0,IDR:0,IQD:0,IRR:3,ISK:0,ITL:0,JOD:3,JPY:0,KMF:0,KPW:0,KRW:0,KWD:3,LAK:0,LBP:0,LUF:0,LYD:3,MGA:0,MGF:0,MMK:0,MNT:0,MRO:0,MUR:0,OMR:3,PKR:0,PYG:0,RSD:0,RWF:0,SLL:0,SOS:0,STD:0,SYP:0,TMM:0,TND:3,TRL:0,TZS:0,UGX:0,UZS:0,VND:0,VUV:0,XAF:0,XOF:0,XPF:0,YER:0,ZMK:0,ZWD:0};
var _ab3={CHF:5};
var _ab4=_ab2[code],_ab5=_ab3[code];
if(typeof _ab4=="undefined"){
_ab4=2;
}
if(typeof _ab5=="undefined"){
_ab5=0;
}
return {places:_ab4,round:_ab5};
};
}
if(!dojo._hasResource["dojo.currency"]){
dojo._hasResource["dojo.currency"]=true;
dojo.provide("dojo.currency");
dojo.getObject("currency",true,dojo);
dojo.currency._mixInDefaults=function(_ab6){
_ab6=_ab6||{};
_ab6.type="currency";
var _ab7=dojo.i18n.getLocalization("dojo.cldr","currency",_ab6.locale)||{};
var iso=_ab6.currency;
var data=dojo.cldr.monetary.getData(iso);
dojo.forEach(["displayName","symbol","group","decimal"],function(prop){
data[prop]=_ab7[iso+"_"+prop];
});
data.fractional=[true,false];
return dojo.mixin(data,_ab6);
};
dojo.currency.format=function(_ab8,_ab9){
return dojo.number.format(_ab8,dojo.currency._mixInDefaults(_ab9));
};
dojo.currency.regexp=function(_aba){
return dojo.number.regexp(dojo.currency._mixInDefaults(_aba));
};
dojo.currency.parse=function(_abb,_abc){
return dojo.number.parse(_abb,dojo.currency._mixInDefaults(_abc));
};
}
if(!dojo._hasResource["dijit.form.CurrencyTextBox"]){
dojo._hasResource["dijit.form.CurrencyTextBox"]=true;
dojo.provide("dijit.form.CurrencyTextBox");
dojo.declare("dijit.form.CurrencyTextBox",dijit.form.NumberTextBox,{currency:"",baseClass:"dijitTextBox dijitCurrencyTextBox",regExpGen:function(_abd){
return "("+(this._focused?this.inherited(arguments,[dojo.mixin({},_abd,this.editOptions)])+"|":"")+dojo.currency.regexp(_abd)+")";
},_formatter:dojo.currency.format,_parser:dojo.currency.parse,parse:function(_abe,_abf){
var v=this.inherited(arguments);
if(isNaN(v)&&/\d+/.test(_abe)){
v=dojo.hitch(dojo.mixin({},this,{_parser:dijit.form.NumberTextBox.prototype._parser}),"inherited")(arguments);
}
return v;
},_setConstraintsAttr:function(_ac0){
if(!_ac0.currency&&this.currency){
_ac0.currency=this.currency;
}
this.inherited(arguments,[dojo.currency._mixInDefaults(dojo.mixin(_ac0,{exponent:false}))]);
}});
}
if(!dojo._hasResource["dijit.form.HorizontalSlider"]){
dojo._hasResource["dijit.form.HorizontalSlider"]=true;
dojo.provide("dijit.form.HorizontalSlider");
dojo.declare("dijit.form.HorizontalSlider",[dijit.form._FormValueWidget,dijit._Container],{templateString:dojo.cache("dijit.form","templates/HorizontalSlider.html","<table class=\"dijit dijitReset dijitSlider dijitSliderH\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" rules=\"none\" dojoAttachEvent=\"onkeypress:_onKeyPress,onkeyup:_onKeyUp\"\r\n\t><tr class=\"dijitReset\"\r\n\t\t><td class=\"dijitReset\" colspan=\"2\"></td\r\n\t\t><td dojoAttachPoint=\"topDecoration\" class=\"dijitReset dijitSliderDecoration dijitSliderDecorationT dijitSliderDecorationH\"></td\r\n\t\t><td class=\"dijitReset\" colspan=\"2\"></td\r\n\t></tr\r\n\t><tr class=\"dijitReset\"\r\n\t\t><td class=\"dijitReset dijitSliderButtonContainer dijitSliderButtonContainerH\"\r\n\t\t\t><div class=\"dijitSliderDecrementIconH\" style=\"display:none\" dojoAttachPoint=\"decrementButton\"><span class=\"dijitSliderButtonInner\">-</span></div\r\n\t\t></td\r\n\t\t><td class=\"dijitReset\"\r\n\t\t\t><div class=\"dijitSliderBar dijitSliderBumper dijitSliderBumperH dijitSliderLeftBumper\" dojoAttachEvent=\"onmousedown:_onClkDecBumper\"></div\r\n\t\t></td\r\n\t\t><td class=\"dijitReset\"\r\n\t\t\t><input dojoAttachPoint=\"valueNode\" type=\"hidden\" ${!nameAttrSetting}\r\n\t\t\t/><div class=\"dijitReset dijitSliderBarContainerH\" role=\"presentation\" dojoAttachPoint=\"sliderBarContainer\"\r\n\t\t\t\t><div role=\"presentation\" dojoAttachPoint=\"progressBar\" class=\"dijitSliderBar dijitSliderBarH dijitSliderProgressBar dijitSliderProgressBarH\" dojoAttachEvent=\"onmousedown:_onBarClick\"\r\n\t\t\t\t\t><div class=\"dijitSliderMoveable dijitSliderMoveableH\"\r\n\t\t\t\t\t\t><div dojoAttachPoint=\"sliderHandle,focusNode\" class=\"dijitSliderImageHandle dijitSliderImageHandleH\" dojoAttachEvent=\"onmousedown:_onHandleClick\" role=\"slider\" valuemin=\"${minimum}\" valuemax=\"${maximum}\"></div\r\n\t\t\t\t\t></div\r\n\t\t\t\t></div\r\n\t\t\t\t><div role=\"presentation\" dojoAttachPoint=\"remainingBar\" class=\"dijitSliderBar dijitSliderBarH dijitSliderRemainingBar dijitSliderRemainingBarH\" dojoAttachEvent=\"onmousedown:_onBarClick\"></div\r\n\t\t\t></div\r\n\t\t></td\r\n\t\t><td class=\"dijitReset\"\r\n\t\t\t><div class=\"dijitSliderBar dijitSliderBumper dijitSliderBumperH dijitSliderRightBumper\" dojoAttachEvent=\"onmousedown:_onClkIncBumper\"></div\r\n\t\t></td\r\n\t\t><td class=\"dijitReset dijitSliderButtonContainer dijitSliderButtonContainerH\"\r\n\t\t\t><div class=\"dijitSliderIncrementIconH\" style=\"display:none\" dojoAttachPoint=\"incrementButton\"><span class=\"dijitSliderButtonInner\">+</span></div\r\n\t\t></td\r\n\t></tr\r\n\t><tr class=\"dijitReset\"\r\n\t\t><td class=\"dijitReset\" colspan=\"2\"></td\r\n\t\t><td dojoAttachPoint=\"containerNode,bottomDecoration\" class=\"dijitReset dijitSliderDecoration dijitSliderDecorationB dijitSliderDecorationH\"></td\r\n\t\t><td class=\"dijitReset\" colspan=\"2\"></td\r\n\t></tr\r\n></table>\r\n"),value:0,showButtons:true,minimum:0,maximum:100,discreteValues:Infinity,pageIncrement:2,clickSelect:true,slideDuration:dijit.defaultDuration,widgetsInTemplate:true,attributeMap:dojo.delegate(dijit.form._FormWidget.prototype.attributeMap,{id:""}),baseClass:"dijitSlider",cssStateNodes:{incrementButton:"dijitSliderIncrementButton",decrementButton:"dijitSliderDecrementButton",focusNode:"dijitSliderThumb"},_mousePixelCoord:"pageX",_pixelCount:"w",_startingPixelCoord:"x",_startingPixelCount:"l",_handleOffsetCoord:"left",_progressPixelSize:"width",_onKeyUp:function(e){
if(this.disabled||this.readOnly||e.altKey||e.ctrlKey||e.metaKey){
return;
}
this._setValueAttr(this.value,true);
},_onKeyPress:function(e){
if(this.disabled||this.readOnly||e.altKey||e.ctrlKey||e.metaKey){
return;
}
switch(e.charOrCode){
case dojo.keys.HOME:
this._setValueAttr(this.minimum,false);
break;
case dojo.keys.END:
this._setValueAttr(this.maximum,false);
break;
case ((this._descending||this.isLeftToRight())?dojo.keys.RIGHT_ARROW:dojo.keys.LEFT_ARROW):
case (this._descending===false?dojo.keys.DOWN_ARROW:dojo.keys.UP_ARROW):
case (this._descending===false?dojo.keys.PAGE_DOWN:dojo.keys.PAGE_UP):
this.increment(e);
break;
case ((this._descending||this.isLeftToRight())?dojo.keys.LEFT_ARROW:dojo.keys.RIGHT_ARROW):
case (this._descending===false?dojo.keys.UP_ARROW:dojo.keys.DOWN_ARROW):
case (this._descending===false?dojo.keys.PAGE_UP:dojo.keys.PAGE_DOWN):
this.decrement(e);
break;
default:
return;
}
dojo.stopEvent(e);
},_onHandleClick:function(e){
if(this.disabled||this.readOnly){
return;
}
if(!dojo.isIE){
dijit.focus(this.sliderHandle);
}
dojo.stopEvent(e);
},_isReversed:function(){
return !this.isLeftToRight();
},_onBarClick:function(e){
if(this.disabled||this.readOnly||!this.clickSelect){
return;
}
dijit.focus(this.sliderHandle);
dojo.stopEvent(e);
var _ac1=dojo.position(this.sliderBarContainer,true);
var _ac2=e[this._mousePixelCoord]-_ac1[this._startingPixelCoord];
this._setPixelValue(this._isReversed()?(_ac1[this._pixelCount]-_ac2):_ac2,_ac1[this._pixelCount],true);
this._movable.onMouseDown(e);
},_setPixelValue:function(_ac3,_ac4,_ac5){
if(this.disabled||this.readOnly){
return;
}
_ac3=_ac3<0?0:_ac4<_ac3?_ac4:_ac3;
var _ac6=this.discreteValues;
if(_ac6<=1||_ac6==Infinity){
_ac6=_ac4;
}
_ac6--;
var _ac7=_ac4/_ac6;
var _ac8=Math.round(_ac3/_ac7);
this._setValueAttr((this.maximum-this.minimum)*_ac8/_ac6+this.minimum,_ac5);
},_setValueAttr:function(_ac9,_aca){
this._set("value",_ac9);
this.valueNode.value=_ac9;
dijit.setWaiState(this.focusNode,"valuenow",_ac9);
this.inherited(arguments);
var _acb=(_ac9-this.minimum)/(this.maximum-this.minimum);
var _acc=(this._descending===false)?this.remainingBar:this.progressBar;
var _acd=(this._descending===false)?this.progressBar:this.remainingBar;
if(this._inProgressAnim&&this._inProgressAnim.status!="stopped"){
this._inProgressAnim.stop(true);
}
if(_aca&&this.slideDuration>0&&_acc.style[this._progressPixelSize]){
var _ace=this;
var _acf={};
var _ad0=parseFloat(_acc.style[this._progressPixelSize]);
var _ad1=this.slideDuration*(_acb-_ad0/100);
if(_ad1==0){
return;
}
if(_ad1<0){
_ad1=0-_ad1;
}
_acf[this._progressPixelSize]={start:_ad0,end:_acb*100,units:"%"};
this._inProgressAnim=dojo.animateProperty({node:_acc,duration:_ad1,onAnimate:function(v){
_acd.style[_ace._progressPixelSize]=(100-parseFloat(v[_ace._progressPixelSize]))+"%";
},onEnd:function(){
delete _ace._inProgressAnim;
},properties:_acf});
this._inProgressAnim.play();
}else{
_acc.style[this._progressPixelSize]=(_acb*100)+"%";
_acd.style[this._progressPixelSize]=((1-_acb)*100)+"%";
}
},_bumpValue:function(_ad2,_ad3){
if(this.disabled||this.readOnly){
return;
}
var s=dojo.getComputedStyle(this.sliderBarContainer);
var c=dojo._getContentBox(this.sliderBarContainer,s);
var _ad4=this.discreteValues;
if(_ad4<=1||_ad4==Infinity){
_ad4=c[this._pixelCount];
}
_ad4--;
var _ad5=(this.value-this.minimum)*_ad4/(this.maximum-this.minimum)+_ad2;
if(_ad5<0){
_ad5=0;
}
if(_ad5>_ad4){
_ad5=_ad4;
}
_ad5=_ad5*(this.maximum-this.minimum)/_ad4+this.minimum;
this._setValueAttr(_ad5,_ad3);
},_onClkBumper:function(val){
if(this.disabled||this.readOnly||!this.clickSelect){
return;
}
this._setValueAttr(val,true);
},_onClkIncBumper:function(){
this._onClkBumper(this._descending===false?this.minimum:this.maximum);
},_onClkDecBumper:function(){
this._onClkBumper(this._descending===false?this.maximum:this.minimum);
},decrement:function(e){
this._bumpValue(e.charOrCode==dojo.keys.PAGE_DOWN?-this.pageIncrement:-1);
},increment:function(e){
this._bumpValue(e.charOrCode==dojo.keys.PAGE_UP?this.pageIncrement:1);
},_mouseWheeled:function(evt){
dojo.stopEvent(evt);
var _ad6=!dojo.isMozilla;
var _ad7=evt[(_ad6?"wheelDelta":"detail")]*(_ad6?1:-1);
this._bumpValue(_ad7<0?-1:1,true);
},startup:function(){
if(this._started){
return;
}
dojo.forEach(this.getChildren(),function(_ad8){
if(this[_ad8.container]!=this.containerNode){
this[_ad8.container].appendChild(_ad8.domNode);
}
},this);
this.inherited(arguments);
},_typematicCallback:function(_ad9,_ada,e){
if(_ad9==-1){
this._setValueAttr(this.value,true);
}else{
this[(_ada==(this._descending?this.incrementButton:this.decrementButton))?"decrement":"increment"](e);
}
},buildRendering:function(){
this.inherited(arguments);
if(this.showButtons){
this.incrementButton.style.display="";
this.decrementButton.style.display="";
}
var _adb=dojo.query("label[for=\""+this.id+"\"]");
if(_adb.length){
_adb[0].id=(this.id+"_label");
dijit.setWaiState(this.focusNode,"labelledby",_adb[0].id);
}
dijit.setWaiState(this.focusNode,"valuemin",this.minimum);
dijit.setWaiState(this.focusNode,"valuemax",this.maximum);
},postCreate:function(){
this.inherited(arguments);
if(this.showButtons){
this._connects.push(dijit.typematic.addMouseListener(this.decrementButton,this,"_typematicCallback",25,500));
this._connects.push(dijit.typematic.addMouseListener(this.incrementButton,this,"_typematicCallback",25,500));
}
this.connect(this.domNode,!dojo.isMozilla?"onmousewheel":"DOMMouseScroll","_mouseWheeled");
var _adc=dojo.declare(dijit.form._SliderMover,{widget:this});
this._movable=new dojo.dnd.Moveable(this.sliderHandle,{mover:_adc});
this._layoutHackIE7();
},destroy:function(){
this._movable.destroy();
if(this._inProgressAnim&&this._inProgressAnim.status!="stopped"){
this._inProgressAnim.stop(true);
}
this._supportingWidgets=dijit.findWidgets(this.domNode);
this.inherited(arguments);
}});
dojo.declare("dijit.form._SliderMover",dojo.dnd.Mover,{onMouseMove:function(e){
var _add=this.widget;
var _ade=_add._abspos;
if(!_ade){
_ade=_add._abspos=dojo.position(_add.sliderBarContainer,true);
_add._setPixelValue_=dojo.hitch(_add,"_setPixelValue");
_add._isReversed_=_add._isReversed();
}
var _adf=e.touches?e.touches[0]:e,_ae0=_adf[_add._mousePixelCoord]-_ade[_add._startingPixelCoord];
_add._setPixelValue_(_add._isReversed_?(_ade[_add._pixelCount]-_ae0):_ae0,_ade[_add._pixelCount],false);
},destroy:function(e){
dojo.dnd.Mover.prototype.destroy.apply(this,arguments);
var _ae1=this.widget;
_ae1._abspos=null;
_ae1._setValueAttr(_ae1.value,true);
}});
}
if(!dojo._hasResource["dijit._editor.selection"]){
dojo._hasResource["dijit._editor.selection"]=true;
dojo.provide("dijit._editor.selection");
dojo.getObject("_editor.selection",true,dijit);
dojo.mixin(dijit._editor.selection,{getType:function(){
if(dojo.isIE<9){
return dojo.doc.selection.type.toLowerCase();
}else{
var _ae2="text";
var oSel;
try{
oSel=dojo.global.getSelection();
}
catch(e){
}
if(oSel&&oSel.rangeCount==1){
var _ae3=oSel.getRangeAt(0);
if((_ae3.startContainer==_ae3.endContainer)&&((_ae3.endOffset-_ae3.startOffset)==1)&&(_ae3.startContainer.nodeType!=3)){
_ae2="control";
}
}
return _ae2;
}
},getSelectedText:function(){
if(dojo.isIE<9){
if(dijit._editor.selection.getType()=="control"){
return null;
}
return dojo.doc.selection.createRange().text;
}else{
var _ae4=dojo.global.getSelection();
if(_ae4){
return _ae4.toString();
}
}
return "";
},getSelectedHtml:function(){
if(dojo.isIE<9){
if(dijit._editor.selection.getType()=="control"){
return null;
}
return dojo.doc.selection.createRange().htmlText;
}else{
var _ae5=dojo.global.getSelection();
if(_ae5&&_ae5.rangeCount){
var i;
var html="";
for(i=0;i<_ae5.rangeCount;i++){
var frag=_ae5.getRangeAt(i).cloneContents();
var div=dojo.doc.createElement("div");
div.appendChild(frag);
html+=div.innerHTML;
}
return html;
}
return null;
}
},getSelectedElement:function(){
if(dijit._editor.selection.getType()=="control"){
if(dojo.isIE<9){
var _ae6=dojo.doc.selection.createRange();
if(_ae6&&_ae6.item){
return dojo.doc.selection.createRange().item(0);
}
}else{
var _ae7=dojo.global.getSelection();
return _ae7.anchorNode.childNodes[_ae7.anchorOffset];
}
}
return null;
},getParentElement:function(){
if(dijit._editor.selection.getType()=="control"){
var p=this.getSelectedElement();
if(p){
return p.parentNode;
}
}else{
if(dojo.isIE<9){
var r=dojo.doc.selection.createRange();
r.collapse(true);
return r.parentElement();
}else{
var _ae8=dojo.global.getSelection();
if(_ae8){
var node=_ae8.anchorNode;
while(node&&(node.nodeType!=1)){
node=node.parentNode;
}
return node;
}
}
}
return null;
},hasAncestorElement:function(_ae9){
return this.getAncestorElement.apply(this,arguments)!=null;
},getAncestorElement:function(_aea){
var node=this.getSelectedElement()||this.getParentElement();
return this.getParentOfType(node,arguments);
},isTag:function(node,tags){
if(node&&node.tagName){
var _aeb=node.tagName.toLowerCase();
for(var i=0;i<tags.length;i++){
var _aec=String(tags[i]).toLowerCase();
if(_aeb==_aec){
return _aec;
}
}
}
return "";
},getParentOfType:function(node,tags){
while(node){
if(this.isTag(node,tags).length){
return node;
}
node=node.parentNode;
}
return null;
},collapse:function(_aed){
if(window.getSelection){
var _aee=dojo.global.getSelection();
if(_aee.removeAllRanges){
if(_aed){
_aee.collapseToStart();
}else{
_aee.collapseToEnd();
}
}else{
_aee.collapse(_aed);
}
}else{
if(dojo.isIE){
var _aef=dojo.doc.selection.createRange();
_aef.collapse(_aed);
_aef.select();
}
}
},remove:function(){
var sel=dojo.doc.selection;
if(dojo.isIE<9){
if(sel.type.toLowerCase()!="none"){
sel.clear();
}
return sel;
}else{
sel=dojo.global.getSelection();
sel.deleteFromDocument();
return sel;
}
},selectElementChildren:function(_af0,_af1){
var win=dojo.global;
var doc=dojo.doc;
var _af2;
_af0=dojo.byId(_af0);
if(doc.selection&&dojo.isIE<9&&dojo.body().createTextRange){
_af2=_af0.ownerDocument.body.createTextRange();
_af2.moveToElementText(_af0);
if(!_af1){
try{
_af2.select();
}
catch(e){
}
}
}else{
if(win.getSelection){
var _af3=dojo.global.getSelection();
if(dojo.isOpera){
if(_af3.rangeCount){
_af2=_af3.getRangeAt(0);
}else{
_af2=doc.createRange();
}
_af2.setStart(_af0,0);
_af2.setEnd(_af0,(_af0.nodeType==3)?_af0.length:_af0.childNodes.length);
_af3.addRange(_af2);
}else{
_af3.selectAllChildren(_af0);
}
}
}
},selectElement:function(_af4,_af5){
var _af6;
var doc=dojo.doc;
var win=dojo.global;
_af4=dojo.byId(_af4);
if(dojo.isIE<9&&dojo.body().createTextRange){
try{
var tg=_af4.tagName?_af4.tagName.toLowerCase():"";
if(tg==="img"||tg==="table"){
_af6=dojo.body().createControlRange();
}else{
_af6=dojo.body().createRange();
}
_af6.addElement(_af4);
if(!_af5){
_af6.select();
}
}
catch(e){
this.selectElementChildren(_af4,_af5);
}
}else{
if(dojo.global.getSelection){
var _af7=win.getSelection();
_af6=doc.createRange();
if(_af7.removeAllRanges){
if(dojo.isOpera){
if(_af7.getRangeAt(0)){
_af6=_af7.getRangeAt(0);
}
}
_af6.selectNode(_af4);
_af7.removeAllRanges();
_af7.addRange(_af6);
}
}
}
},inSelection:function(node){
if(node){
var _af8;
var doc=dojo.doc;
var _af9;
if(dojo.global.getSelection){
var sel=dojo.global.getSelection();
if(sel&&sel.rangeCount>0){
_af9=sel.getRangeAt(0);
}
if(_af9&&_af9.compareBoundaryPoints&&doc.createRange){
try{
_af8=doc.createRange();
_af8.setStart(node,0);
if(_af9.compareBoundaryPoints(_af9.START_TO_END,_af8)===1){
return true;
}
}
catch(e){
}
}
}else{
if(doc.selection){
_af9=doc.selection.createRange();
try{
_af8=node.ownerDocument.body.createControlRange();
if(_af8){
_af8.addElement(node);
}
}
catch(e1){
try{
_af8=node.ownerDocument.body.createTextRange();
_af8.moveToElementText(node);
}
catch(e2){
}
}
if(_af9&&_af8){
if(_af9.compareEndPoints("EndToStart",_af8)===1){
return true;
}
}
}
}
}
return false;
}});
}
if(!dojo._hasResource["dijit._editor.range"]){
dojo._hasResource["dijit._editor.range"]=true;
dojo.provide("dijit._editor.range");
dijit.range={};
dijit.range.getIndex=function(node,_afa){
var ret=[],retR=[];
var stop=_afa;
var _afb=node;
var _afc,n;
while(node!=stop){
var i=0;
_afc=node.parentNode;
while((n=_afc.childNodes[i++])){
if(n===node){
--i;
break;
}
}
ret.unshift(i);
retR.unshift(i-_afc.childNodes.length);
node=_afc;
}
if(ret.length>0&&_afb.nodeType==3){
n=_afb.previousSibling;
while(n&&n.nodeType==3){
ret[ret.length-1]--;
n=n.previousSibling;
}
n=_afb.nextSibling;
while(n&&n.nodeType==3){
retR[retR.length-1]++;
n=n.nextSibling;
}
}
return {o:ret,r:retR};
};
dijit.range.getNode=function(_afd,_afe){
if(!dojo.isArray(_afd)||_afd.length==0){
return _afe;
}
var node=_afe;
dojo.every(_afd,function(i){
if(i>=0&&i<node.childNodes.length){
node=node.childNodes[i];
}else{
node=null;
return false;
}
return true;
});
return node;
};
dijit.range.getCommonAncestor=function(n1,n2,root){
root=root||n1.ownerDocument.body;
var _aff=function(n){
var as=[];
while(n){
as.unshift(n);
if(n!==root){
n=n.parentNode;
}else{
break;
}
}
return as;
};
var n1as=_aff(n1);
var n2as=_aff(n2);
var m=Math.min(n1as.length,n2as.length);
var com=n1as[0];
for(var i=1;i<m;i++){
if(n1as[i]===n2as[i]){
com=n1as[i];
}else{
break;
}
}
return com;
};
dijit.range.getAncestor=function(node,_b00,root){
root=root||node.ownerDocument.body;
while(node&&node!==root){
var name=node.nodeName.toUpperCase();
if(_b00.test(name)){
return node;
}
node=node.parentNode;
}
return null;
};
dijit.range.BlockTagNames=/^(?:P|DIV|H1|H2|H3|H4|H5|H6|ADDRESS|PRE|OL|UL|LI|DT|DE)$/;
dijit.range.getBlockAncestor=function(node,_b01,root){
root=root||node.ownerDocument.body;
_b01=_b01||dijit.range.BlockTagNames;
var _b02=null,_b03;
while(node&&node!==root){
var name=node.nodeName.toUpperCase();
if(!_b02&&_b01.test(name)){
_b02=node;
}
if(!_b03&&(/^(?:BODY|TD|TH|CAPTION)$/).test(name)){
_b03=node;
}
node=node.parentNode;
}
return {blockNode:_b02,blockContainer:_b03||node.ownerDocument.body};
};
dijit.range.atBeginningOfContainer=function(_b04,node,_b05){
var _b06=false;
var _b07=(_b05==0);
if(!_b07&&node.nodeType==3){
if(/^[\s\xA0]+$/.test(node.nodeValue.substr(0,_b05))){
_b07=true;
}
}
if(_b07){
var _b08=node;
_b06=true;
while(_b08&&_b08!==_b04){
if(_b08.previousSibling){
_b06=false;
break;
}
_b08=_b08.parentNode;
}
}
return _b06;
};
dijit.range.atEndOfContainer=function(_b09,node,_b0a){
var _b0b=false;
var _b0c=(_b0a==(node.length||node.childNodes.length));
if(!_b0c&&node.nodeType==3){
if(/^[\s\xA0]+$/.test(node.nodeValue.substr(_b0a))){
_b0c=true;
}
}
if(_b0c){
var _b0d=node;
_b0b=true;
while(_b0d&&_b0d!==_b09){
if(_b0d.nextSibling){
_b0b=false;
break;
}
_b0d=_b0d.parentNode;
}
}
return _b0b;
};
dijit.range.adjacentNoneTextNode=function(_b0e,next){
var node=_b0e;
var len=(0-_b0e.length)||0;
var prop=next?"nextSibling":"previousSibling";
while(node){
if(node.nodeType!=3){
break;
}
len+=node.length;
node=node[prop];
}
return [node,len];
};
dijit.range._w3c=Boolean(window["getSelection"]);
dijit.range.create=function(win){
if(dijit.range._w3c){
return (win||dojo.global).document.createRange();
}else{
return new dijit.range.W3CRange;
}
};
dijit.range.getSelection=function(win,_b0f){
if(dijit.range._w3c){
return win.getSelection();
}else{
var s=new dijit.range.ie.selection(win);
if(!_b0f){
s._getCurrentSelection();
}
return s;
}
};
if(!dijit.range._w3c){
dijit.range.ie={cachedSelection:{},selection:function(win){
this._ranges=[];
this.addRange=function(r,_b10){
this._ranges.push(r);
if(!_b10){
r._select();
}
this.rangeCount=this._ranges.length;
};
this.removeAllRanges=function(){
this._ranges=[];
this.rangeCount=0;
};
var _b11=function(){
var r=win.document.selection.createRange();
var type=win.document.selection.type.toUpperCase();
if(type=="CONTROL"){
return new dijit.range.W3CRange(dijit.range.ie.decomposeControlRange(r));
}else{
return new dijit.range.W3CRange(dijit.range.ie.decomposeTextRange(r));
}
};
this.getRangeAt=function(i){
return this._ranges[i];
};
this._getCurrentSelection=function(){
this.removeAllRanges();
var r=_b11();
if(r){
this.addRange(r,true);
}
};
},decomposeControlRange:function(_b12){
var _b13=_b12.item(0),_b14=_b12.item(_b12.length-1);
var _b15=_b13.parentNode,_b16=_b14.parentNode;
var _b17=dijit.range.getIndex(_b13,_b15).o;
var _b18=dijit.range.getIndex(_b14,_b16).o+1;
return [_b15,_b17,_b16,_b18];
},getEndPoint:function(_b19,end){
var _b1a=_b19.duplicate();
_b1a.collapse(!end);
var _b1b="EndTo"+(end?"End":"Start");
var _b1c=_b1a.parentElement();
var _b1d,_b1e,_b1f;
if(_b1c.childNodes.length>0){
dojo.every(_b1c.childNodes,function(node,i){
var _b20;
if(node.nodeType!=3){
_b1a.moveToElementText(node);
if(_b1a.compareEndPoints(_b1b,_b19)>0){
if(_b1f&&_b1f.nodeType==3){
_b1d=_b1f;
_b20=true;
}else{
_b1d=_b1c;
_b1e=i;
return false;
}
}else{
if(i==_b1c.childNodes.length-1){
_b1d=_b1c;
_b1e=_b1c.childNodes.length;
return false;
}
}
}else{
if(i==_b1c.childNodes.length-1){
_b1d=node;
_b20=true;
}
}
if(_b20&&_b1d){
var _b21=dijit.range.adjacentNoneTextNode(_b1d)[0];
if(_b21){
_b1d=_b21.nextSibling;
}else{
_b1d=_b1c.firstChild;
}
var _b22=dijit.range.adjacentNoneTextNode(_b1d);
_b21=_b22[0];
var _b23=_b22[1];
if(_b21){
_b1a.moveToElementText(_b21);
_b1a.collapse(false);
}else{
_b1a.moveToElementText(_b1c);
}
_b1a.setEndPoint(_b1b,_b19);
_b1e=_b1a.text.length-_b23;
return false;
}
_b1f=node;
return true;
});
}else{
_b1d=_b1c;
_b1e=0;
}
if(!end&&_b1d.nodeType==1&&_b1e==_b1d.childNodes.length){
var _b24=_b1d.nextSibling;
if(_b24&&_b24.nodeType==3){
_b1d=_b24;
_b1e=0;
}
}
return [_b1d,_b1e];
},setEndPoint:function(_b25,_b26,_b27){
var _b28=_b25.duplicate(),node,len;
if(_b26.nodeType!=3){
if(_b27>0){
node=_b26.childNodes[_b27-1];
if(node){
if(node.nodeType==3){
_b26=node;
_b27=node.length;
}else{
if(node.nextSibling&&node.nextSibling.nodeType==3){
_b26=node.nextSibling;
_b27=0;
}else{
_b28.moveToElementText(node.nextSibling?node:_b26);
var _b29=node.parentNode;
var _b2a=_b29.insertBefore(node.ownerDocument.createTextNode(" "),node.nextSibling);
_b28.collapse(false);
_b29.removeChild(_b2a);
}
}
}
}else{
_b28.moveToElementText(_b26);
_b28.collapse(true);
}
}
if(_b26.nodeType==3){
var _b2b=dijit.range.adjacentNoneTextNode(_b26);
var _b2c=_b2b[0];
len=_b2b[1];
if(_b2c){
_b28.moveToElementText(_b2c);
_b28.collapse(false);
if(_b2c.contentEditable!="inherit"){
len++;
}
}else{
_b28.moveToElementText(_b26.parentNode);
_b28.collapse(true);
}
_b27+=len;
if(_b27>0){
if(_b28.move("character",_b27)!=_b27){
console.error("Error when moving!");
}
}
}
return _b28;
},decomposeTextRange:function(_b2d){
var _b2e=dijit.range.ie.getEndPoint(_b2d);
var _b2f=_b2e[0],_b30=_b2e[1];
var _b31=_b2e[0],_b32=_b2e[1];
if(_b2d.htmlText.length){
if(_b2d.htmlText==_b2d.text){
_b32=_b30+_b2d.text.length;
}else{
_b2e=dijit.range.ie.getEndPoint(_b2d,true);
_b31=_b2e[0],_b32=_b2e[1];
}
}
return [_b2f,_b30,_b31,_b32];
},setRange:function(_b33,_b34,_b35,_b36,_b37,_b38){
var _b39=dijit.range.ie.setEndPoint(_b33,_b34,_b35);
_b33.setEndPoint("StartToStart",_b39);
if(!_b38){
var end=dijit.range.ie.setEndPoint(_b33,_b36,_b37);
}
_b33.setEndPoint("EndToEnd",end||_b39);
return _b33;
}};
dojo.declare("dijit.range.W3CRange",null,{constructor:function(){
if(arguments.length>0){
this.setStart(arguments[0][0],arguments[0][1]);
this.setEnd(arguments[0][2],arguments[0][3]);
}else{
this.commonAncestorContainer=null;
this.startContainer=null;
this.startOffset=0;
this.endContainer=null;
this.endOffset=0;
this.collapsed=true;
}
},_updateInternal:function(){
if(this.startContainer!==this.endContainer){
this.commonAncestorContainer=dijit.range.getCommonAncestor(this.startContainer,this.endContainer);
}else{
this.commonAncestorContainer=this.startContainer;
}
this.collapsed=(this.startContainer===this.endContainer)&&(this.startOffset==this.endOffset);
},setStart:function(node,_b3a){
_b3a=parseInt(_b3a);
if(this.startContainer===node&&this.startOffset==_b3a){
return;
}
delete this._cachedBookmark;
this.startContainer=node;
this.startOffset=_b3a;
if(!this.endContainer){
this.setEnd(node,_b3a);
}else{
this._updateInternal();
}
},setEnd:function(node,_b3b){
_b3b=parseInt(_b3b);
if(this.endContainer===node&&this.endOffset==_b3b){
return;
}
delete this._cachedBookmark;
this.endContainer=node;
this.endOffset=_b3b;
if(!this.startContainer){
this.setStart(node,_b3b);
}else{
this._updateInternal();
}
},setStartAfter:function(node,_b3c){
this._setPoint("setStart",node,_b3c,1);
},setStartBefore:function(node,_b3d){
this._setPoint("setStart",node,_b3d,0);
},setEndAfter:function(node,_b3e){
this._setPoint("setEnd",node,_b3e,1);
},setEndBefore:function(node,_b3f){
this._setPoint("setEnd",node,_b3f,0);
},_setPoint:function(what,node,_b40,ext){
var _b41=dijit.range.getIndex(node,node.parentNode).o;
this[what](node.parentNode,_b41.pop()+ext);
},_getIERange:function(){
var r=(this._body||this.endContainer.ownerDocument.body).createTextRange();
dijit.range.ie.setRange(r,this.startContainer,this.startOffset,this.endContainer,this.endOffset,this.collapsed);
return r;
},getBookmark:function(body){
this._getIERange();
return this._cachedBookmark;
},_select:function(){
var r=this._getIERange();
r.select();
},deleteContents:function(){
var r=this._getIERange();
r.pasteHTML("");
this.endContainer=this.startContainer;
this.endOffset=this.startOffset;
this.collapsed=true;
},cloneRange:function(){
var r=new dijit.range.W3CRange([this.startContainer,this.startOffset,this.endContainer,this.endOffset]);
r._body=this._body;
return r;
},detach:function(){
this._body=null;
this.commonAncestorContainer=null;
this.startContainer=null;
this.startOffset=0;
this.endContainer=null;
this.endOffset=0;
this.collapsed=true;
}});
}
}
if(!dojo._hasResource["dijit._editor.html"]){
dojo._hasResource["dijit._editor.html"]=true;
dojo.provide("dijit._editor.html");
dojo.getObject("_editor",true,dijit);
dijit._editor.escapeXml=function(str,_b42){
str=str.replace(/&/gm,"&amp;").replace(/</gm,"&lt;").replace(/>/gm,"&gt;").replace(/"/gm,"&quot;");
if(!_b42){
str=str.replace(/'/gm,"&#39;");
}
return str;
};
dijit._editor.getNodeHtml=function(node){
var _b43;
switch(node.nodeType){
case 1:
var _b44=node.nodeName.toLowerCase();
if(!_b44||_b44.charAt(0)=="/"){
return "";
}
_b43="<"+_b44;
var _b45=[];
var attr;
if(dojo.isIE&&node.outerHTML){
var s=node.outerHTML;
s=s.substr(0,s.indexOf(">")).replace(/(['"])[^"']*\1/g,"");
var reg=/(\b\w+)\s?=/g;
var m,key;
while((m=reg.exec(s))){
key=m[1];
if(key.substr(0,3)!="_dj"){
if(key=="src"||key=="href"){
if(node.getAttribute("_djrealurl")){
_b45.push([key,node.getAttribute("_djrealurl")]);
continue;
}
}
var val,_b46;
switch(key){
case "style":
val=node.style.cssText.toLowerCase();
break;
case "class":
val=node.className;
break;
case "width":
if(_b44==="img"){
_b46=/width=(\S+)/i.exec(s);
if(_b46){
val=_b46[1];
}
break;
}
case "height":
if(_b44==="img"){
_b46=/height=(\S+)/i.exec(s);
if(_b46){
val=_b46[1];
}
break;
}
default:
val=node.getAttribute(key);
}
if(val!=null){
_b45.push([key,val.toString()]);
}
}
}
}else{
var i=0;
while((attr=node.attributes[i++])){
var n=attr.name;
if(n.substr(0,3)!="_dj"){
var v=attr.value;
if(n=="src"||n=="href"){
if(node.getAttribute("_djrealurl")){
v=node.getAttribute("_djrealurl");
}
}
_b45.push([n,v]);
}
}
}
_b45.sort(function(a,b){
return a[0]<b[0]?-1:(a[0]==b[0]?0:1);
});
var j=0;
while((attr=_b45[j++])){
_b43+=" "+attr[0]+"=\""+(dojo.isString(attr[1])?dijit._editor.escapeXml(attr[1],true):attr[1])+"\"";
}
if(_b44==="script"){
_b43+=">"+node.innerHTML+"</"+_b44+">";
}else{
if(node.childNodes.length){
_b43+=">"+dijit._editor.getChildrenHtml(node)+"</"+_b44+">";
}else{
switch(_b44){
case "br":
case "hr":
case "img":
case "input":
case "base":
case "meta":
case "area":
case "basefont":
_b43+=" />";
break;
default:
_b43+="></"+_b44+">";
}
}
}
break;
case 4:
case 3:
_b43=dijit._editor.escapeXml(node.nodeValue,true);
break;
case 8:
_b43="<!--"+dijit._editor.escapeXml(node.nodeValue,true)+"-->";
break;
default:
_b43="<!-- Element not recognized - Type: "+node.nodeType+" Name: "+node.nodeName+"-->";
}
return _b43;
};
dijit._editor.getChildrenHtml=function(dom){
var out="";
if(!dom){
return out;
}
var _b47=dom["childNodes"]||dom;
var _b48=!dojo.isIE||_b47!==dom;
var node,i=0;
while((node=_b47[i++])){
if(!_b48||node.parentNode==dom){
out+=dijit._editor.getNodeHtml(node);
}
}
return out;
};
}
if(!dojo._hasResource["dijit._editor.RichText"]){
dojo._hasResource["dijit._editor.RichText"]=true;
dojo.provide("dijit._editor.RichText");
if(!dojo.config["useXDomain"]||dojo.config["allowXdRichTextSave"]){
if(dojo._postLoad){
(function(){
var _b49=dojo.doc.createElement("textarea");
_b49.id=dijit._scopeName+"._editor.RichText.value";
dojo.style(_b49,{display:"none",position:"absolute",top:"-100px",height:"3px",width:"3px"});
dojo.body().appendChild(_b49);
})();
}else{
try{
dojo.doc.write("<textarea id=\""+dijit._scopeName+"._editor.RichText.value\" "+"style=\"display:none;position:absolute;top:-100px;left:-100px;height:3px;width:3px;overflow:hidden;\"></textarea>");
}
catch(e){
}
}
}
dojo.declare("dijit._editor.RichText",[dijit._Widget,dijit._CssStateMixin],{constructor:function(_b4a){
this.contentPreFilters=[];
this.contentPostFilters=[];
this.contentDomPreFilters=[];
this.contentDomPostFilters=[];
this.editingAreaStyleSheets=[];
this.events=[].concat(this.events);
this._keyHandlers={};
if(_b4a&&dojo.isString(_b4a.value)){
this.value=_b4a.value;
}
this.onLoadDeferred=new dojo.Deferred();
},baseClass:"dijitEditor",inheritWidth:false,focusOnLoad:false,name:"",styleSheets:"",height:"300px",minHeight:"1em",isClosed:true,isLoaded:false,_SEPARATOR:"@@**%%__RICHTEXTBOUNDRY__%%**@@",_NAME_CONTENT_SEP:"@@**%%:%%**@@",onLoadDeferred:null,isTabIndent:false,disableSpellCheck:false,postCreate:function(){
if("textarea"==this.domNode.tagName.toLowerCase()){
console.warn("RichText should not be used with the TEXTAREA tag.  See dijit._editor.RichText docs.");
}
this.contentPreFilters=[dojo.hitch(this,"_preFixUrlAttributes")].concat(this.contentPreFilters);
if(dojo.isMoz){
this.contentPreFilters=[this._normalizeFontStyle].concat(this.contentPreFilters);
this.contentPostFilters=[this._removeMozBogus].concat(this.contentPostFilters);
}
if(dojo.isWebKit){
this.contentPreFilters=[this._removeWebkitBogus].concat(this.contentPreFilters);
this.contentPostFilters=[this._removeWebkitBogus].concat(this.contentPostFilters);
}
if(dojo.isIE){
this.contentPostFilters=[this._normalizeFontStyle].concat(this.contentPostFilters);
}
this.inherited(arguments);
dojo.publish(dijit._scopeName+"._editor.RichText::init",[this]);
this.open();
this.setupDefaultShortcuts();
},setupDefaultShortcuts:function(){
var exec=dojo.hitch(this,function(cmd,arg){
return function(){
return !this.execCommand(cmd,arg);
};
});
var _b4b={b:exec("bold"),i:exec("italic"),u:exec("underline"),a:exec("selectall"),s:function(){
this.save(true);
},m:function(){
this.isTabIndent=!this.isTabIndent;
},"1":exec("formatblock","h1"),"2":exec("formatblock","h2"),"3":exec("formatblock","h3"),"4":exec("formatblock","h4"),"\\":exec("insertunorderedlist")};
if(!dojo.isIE){
_b4b.Z=exec("redo");
}
for(var key in _b4b){
this.addKeyHandler(key,true,false,_b4b[key]);
}
},events:["onKeyPress","onKeyDown","onKeyUp"],captureEvents:[],_editorCommandsLocalized:false,_localizeEditorCommands:function(){
if(dijit._editor._editorCommandsLocalized){
this._local2NativeFormatNames=dijit._editor._local2NativeFormatNames;
this._native2LocalFormatNames=dijit._editor._native2LocalFormatNames;
return;
}
dijit._editor._editorCommandsLocalized=true;
dijit._editor._local2NativeFormatNames={};
dijit._editor._native2LocalFormatNames={};
this._local2NativeFormatNames=dijit._editor._local2NativeFormatNames;
this._native2LocalFormatNames=dijit._editor._native2LocalFormatNames;
var _b4c=["div","p","pre","h1","h2","h3","h4","h5","h6","ol","ul","address"];
var _b4d="",_b4e,i=0;
while((_b4e=_b4c[i++])){
if(_b4e.charAt(1)!=="l"){
_b4d+="<"+_b4e+"><span>content</span></"+_b4e+"><br/>";
}else{
_b4d+="<"+_b4e+"><li>content</li></"+_b4e+"><br/>";
}
}
var _b4f={position:"absolute",top:"0px",zIndex:10,opacity:0.01};
var div=dojo.create("div",{style:_b4f,innerHTML:_b4d});
dojo.body().appendChild(div);
var _b50=dojo.hitch(this,function(){
var node=div.firstChild;
while(node){
try{
dijit._editor.selection.selectElement(node.firstChild);
var _b51=node.tagName.toLowerCase();
this._local2NativeFormatNames[_b51]=document.queryCommandValue("formatblock");
this._native2LocalFormatNames[this._local2NativeFormatNames[_b51]]=_b51;
node=node.nextSibling.nextSibling;
}
catch(e){
}
}
div.parentNode.removeChild(div);
div.innerHTML="";
});
setTimeout(_b50,0);
},open:function(_b52){
if(!this.onLoadDeferred||this.onLoadDeferred.fired>=0){
this.onLoadDeferred=new dojo.Deferred();
}
if(!this.isClosed){
this.close();
}
dojo.publish(dijit._scopeName+"._editor.RichText::open",[this]);
if(arguments.length==1&&_b52.nodeName){
this.domNode=_b52;
}
var dn=this.domNode;
var html;
if(dojo.isString(this.value)){
html=this.value;
delete this.value;
dn.innerHTML="";
}else{
if(dn.nodeName&&dn.nodeName.toLowerCase()=="textarea"){
var ta=(this.textarea=dn);
this.name=ta.name;
html=ta.value;
dn=this.domNode=dojo.doc.createElement("div");
dn.setAttribute("widgetId",this.id);
ta.removeAttribute("widgetId");
dn.cssText=ta.cssText;
dn.className+=" "+ta.className;
dojo.place(dn,ta,"before");
var _b53=dojo.hitch(this,function(){
dojo.style(ta,{display:"block",position:"absolute",top:"-1000px"});
if(dojo.isIE){
var s=ta.style;
this.__overflow=s.overflow;
s.overflow="hidden";
}
});
if(dojo.isIE){
setTimeout(_b53,10);
}else{
_b53();
}
if(ta.form){
var _b54=ta.value;
this.reset=function(){
var _b55=this.getValue();
if(_b55!=_b54){
this.replaceValue(_b54);
}
};
dojo.connect(ta.form,"onsubmit",this,function(){
dojo.attr(ta,"disabled",this.disabled);
ta.value=this.getValue();
});
}
}else{
html=dijit._editor.getChildrenHtml(dn);
dn.innerHTML="";
}
}
var _b56=dojo.contentBox(dn);
this._oldHeight=_b56.h;
this._oldWidth=_b56.w;
this.value=html;
if(dn.nodeName&&dn.nodeName=="LI"){
dn.innerHTML=" <br>";
}
this.header=dn.ownerDocument.createElement("div");
dn.appendChild(this.header);
this.editingArea=dn.ownerDocument.createElement("div");
dn.appendChild(this.editingArea);
this.footer=dn.ownerDocument.createElement("div");
dn.appendChild(this.footer);
if(!this.name){
this.name=this.id+"_AUTOGEN";
}
if(this.name!==""&&(!dojo.config["useXDomain"]||dojo.config["allowXdRichTextSave"])){
var _b57=dojo.byId(dijit._scopeName+"._editor.RichText.value");
if(_b57&&_b57.value!==""){
var _b58=_b57.value.split(this._SEPARATOR),i=0,dat;
while((dat=_b58[i++])){
var data=dat.split(this._NAME_CONTENT_SEP);
if(data[0]==this.name){
html=data[1];
_b58=_b58.splice(i,1);
_b57.value=_b58.join(this._SEPARATOR);
break;
}
}
}
if(!dijit._editor._globalSaveHandler){
dijit._editor._globalSaveHandler={};
dojo.addOnUnload(function(){
var id;
for(id in dijit._editor._globalSaveHandler){
var f=dijit._editor._globalSaveHandler[id];
if(dojo.isFunction(f)){
f();
}
}
});
}
dijit._editor._globalSaveHandler[this.id]=dojo.hitch(this,"_saveContent");
}
this.isClosed=false;
var ifr=(this.editorObject=this.iframe=dojo.doc.createElement("iframe"));
ifr.id=this.id+"_iframe";
this._iframeSrc=this._getIframeDocTxt();
ifr.style.border="none";
ifr.style.width="100%";
if(this._layoutMode){
ifr.style.height="100%";
}else{
if(dojo.isIE>=7){
if(this.height){
ifr.style.height=this.height;
}
if(this.minHeight){
ifr.style.minHeight=this.minHeight;
}
}else{
ifr.style.height=this.height?this.height:this.minHeight;
}
}
ifr.frameBorder=0;
ifr._loadFunc=dojo.hitch(this,function(win){
this.window=win;
this.document=this.window.document;
if(dojo.isIE){
this._localizeEditorCommands();
}
this.onLoad(html);
});
var s="javascript:parent."+dijit._scopeName+".byId(\""+this.id+"\")._iframeSrc";
ifr.setAttribute("src",s);
this.editingArea.appendChild(ifr);
if(dojo.isSafari<=4){
var src=ifr.getAttribute("src");
if(!src||src.indexOf("javascript")==-1){
setTimeout(function(){
ifr.setAttribute("src",s);
},0);
}
}
if(dn.nodeName=="LI"){
dn.lastChild.style.marginTop="-1.2em";
}
dojo.addClass(this.domNode,this.baseClass);
},_local2NativeFormatNames:{},_native2LocalFormatNames:{},_getIframeDocTxt:function(){
var _b59=dojo.getComputedStyle(this.domNode);
var html="";
var _b5a=true;
if(dojo.isIE||dojo.isWebKit||(!this.height&&!dojo.isMoz)){
html="<div id='dijitEditorBody'></div>";
_b5a=false;
}else{
if(dojo.isMoz){
this._cursorToStart=true;
html="&nbsp;";
}
}
var font=[_b59.fontWeight,_b59.fontSize,_b59.fontFamily].join(" ");
var _b5b=_b59.lineHeight;
if(_b5b.indexOf("px")>=0){
_b5b=parseFloat(_b5b)/parseFloat(_b59.fontSize);
}else{
if(_b5b.indexOf("em")>=0){
_b5b=parseFloat(_b5b);
}else{
_b5b="normal";
}
}
var _b5c="";
var self=this;
this.style.replace(/(^|;)\s*(line-|font-?)[^;]+/ig,function(_b5d){
_b5d=_b5d.replace(/^;/ig,"")+";";
var s=_b5d.split(":")[0];
if(s){
s=dojo.trim(s);
s=s.toLowerCase();
var i;
var sC="";
for(i=0;i<s.length;i++){
var c=s.charAt(i);
switch(c){
case "-":
i++;
c=s.charAt(i).toUpperCase();
default:
sC+=c;
}
}
dojo.style(self.domNode,sC,"");
}
_b5c+=_b5d+";";
});
var _b5e=dojo.query("label[for=\""+this.id+"\"]");
return [this.isLeftToRight()?"<html>\n<head>\n":"<html dir='rtl'>\n<head>\n",(dojo.isMoz&&_b5e.length?"<title>"+_b5e[0].innerHTML+"</title>\n":""),"<meta http-equiv='Content-Type' content='text/html'>\n","<style>\n","\tbody,html {\n","\t\tbackground:transparent;\n","\t\tpadding: 1px 0 0 0;\n","\t\tmargin: -1px 0 0 0;\n",((dojo.isWebKit)?"\t\twidth: 100%;\n":""),((dojo.isWebKit)?"\t\theight: 100%;\n":""),"\t}\n","\tbody{\n","\t\ttop:0px;\n","\t\tleft:0px;\n","\t\tright:0px;\n","\t\tfont:",font,";\n",((this.height||dojo.isOpera)?"":"\t\tposition: fixed;\n"),"\t\tmin-height:",this.minHeight,";\n","\t\tline-height:",_b5b,";\n","\t}\n","\tp{ margin: 1em 0; }\n",(!_b5a&&!this.height?"\tbody,html {overflow-y: hidden;}\n":""),"\t#dijitEditorBody{overflow-x: auto; overflow-y:"+(this.height?"auto;":"hidden;")+" outline: 0px;}\n","\tli > ul:-moz-first-node, li > ol:-moz-first-node{ padding-top: 1.2em; }\n",(!dojo.isIE?"\tli{ min-height:1.2em; }\n":""),"</style>\n",this._applyEditingAreaStyleSheets(),"\n","</head>\n<body ",(_b5a?"id='dijitEditorBody' ":""),"onload='frameElement._loadFunc(window,document)' style='"+_b5c+"'>",html,"</body>\n</html>"].join("");
},_applyEditingAreaStyleSheets:function(){
var _b5f=[];
if(this.styleSheets){
_b5f=this.styleSheets.split(";");
this.styleSheets="";
}
_b5f=_b5f.concat(this.editingAreaStyleSheets);
this.editingAreaStyleSheets=[];
var text="",i=0,url;
while((url=_b5f[i++])){
var _b60=(new dojo._Url(dojo.global.location,url)).toString();
this.editingAreaStyleSheets.push(_b60);
text+="<link rel=\"stylesheet\" type=\"text/css\" href=\""+_b60+"\"/>";
}
return text;
},addStyleSheet:function(uri){
var url=uri.toString();
if(url.charAt(0)=="."||(url.charAt(0)!="/"&&!uri.host)){
url=(new dojo._Url(dojo.global.location,url)).toString();
}
if(dojo.indexOf(this.editingAreaStyleSheets,url)>-1){
return;
}
this.editingAreaStyleSheets.push(url);
this.onLoadDeferred.addCallback(dojo.hitch(this,function(){
if(this.document.createStyleSheet){
this.document.createStyleSheet(url);
}else{
var head=this.document.getElementsByTagName("head")[0];
var _b61=this.document.createElement("link");
_b61.rel="stylesheet";
_b61.type="text/css";
_b61.href=url;
head.appendChild(_b61);
}
}));
},removeStyleSheet:function(uri){
var url=uri.toString();
if(url.charAt(0)=="."||(url.charAt(0)!="/"&&!uri.host)){
url=(new dojo._Url(dojo.global.location,url)).toString();
}
var _b62=dojo.indexOf(this.editingAreaStyleSheets,url);
if(_b62==-1){
return;
}
delete this.editingAreaStyleSheets[_b62];
dojo.withGlobal(this.window,"query",dojo,["link:[href=\""+url+"\"]"]).orphan();
},disabled:false,_mozSettingProps:{"styleWithCSS":false},_setDisabledAttr:function(_b63){
_b63=!!_b63;
this._set("disabled",_b63);
if(!this.isLoaded){
return;
}
if(dojo.isIE||dojo.isWebKit||dojo.isOpera){
var _b64=dojo.isIE&&(this.isLoaded||!this.focusOnLoad);
if(_b64){
this.editNode.unselectable="on";
}
this.editNode.contentEditable=!_b63;
if(_b64){
var _b65=this;
setTimeout(function(){
_b65.editNode.unselectable="off";
},0);
}
}else{
try{
this.document.designMode=(_b63?"off":"on");
}
catch(e){
return;
}
if(!_b63&&this._mozSettingProps){
var ps=this._mozSettingProps;
for(var n in ps){
if(ps.hasOwnProperty(n)){
try{
this.document.execCommand(n,false,ps[n]);
}
catch(e2){
}
}
}
}
}
this._disabledOK=true;
},onLoad:function(html){
if(!this.window.__registeredWindow){
this.window.__registeredWindow=true;
this._iframeRegHandle=dijit.registerIframe(this.iframe);
}
if(!dojo.isIE&&!dojo.isWebKit&&(this.height||dojo.isMoz)){
this.editNode=this.document.body;
}else{
this.editNode=this.document.body.firstChild;
var _b66=this;
if(dojo.isIE){
this.tabStop=dojo.create("div",{tabIndex:-1},this.editingArea);
this.iframe.onfocus=function(){
_b66.editNode.setActive();
};
}
}
this.focusNode=this.editNode;
var _b67=this.events.concat(this.captureEvents);
var ap=this.iframe?this.document:this.editNode;
dojo.forEach(_b67,function(item){
this.connect(ap,item.toLowerCase(),item);
},this);
this.connect(ap,"onmouseup","onClick");
if(dojo.isIE){
this.connect(this.document,"onmousedown","_onIEMouseDown");
this.editNode.style.zoom=1;
}else{
this.connect(this.document,"onmousedown",function(){
delete this._cursorToStart;
});
}
if(dojo.isWebKit){
this._webkitListener=this.connect(this.document,"onmouseup","onDisplayChanged");
this.connect(this.document,"onmousedown",function(e){
var t=e.target;
if(t&&(t===this.document.body||t===this.document)){
setTimeout(dojo.hitch(this,"placeCursorAtEnd"),0);
}
});
}
if(dojo.isIE){
try{
this.document.execCommand("RespectVisibilityInDesign",true,null);
}
catch(e){
}
}
this.isLoaded=true;
this.set("disabled",this.disabled);
var _b68=dojo.hitch(this,function(){
this.setValue(html);
if(this.onLoadDeferred){
this.onLoadDeferred.callback(true);
}
this.onDisplayChanged();
if(this.focusOnLoad){
dojo.addOnLoad(dojo.hitch(this,function(){
setTimeout(dojo.hitch(this,"focus"),this.updateInterval);
}));
}
this.value=this.getValue(true);
});
if(this.setValueDeferred){
this.setValueDeferred.addCallback(_b68);
}else{
_b68();
}
},onKeyDown:function(e){
if(e.keyCode===dojo.keys.TAB&&this.isTabIndent){
dojo.stopEvent(e);
if(this.queryCommandEnabled((e.shiftKey?"outdent":"indent"))){
this.execCommand((e.shiftKey?"outdent":"indent"));
}
}
if(dojo.isIE){
if(e.keyCode==dojo.keys.TAB&&!this.isTabIndent){
if(e.shiftKey&&!e.ctrlKey&&!e.altKey){
this.iframe.focus();
}else{
if(!e.shiftKey&&!e.ctrlKey&&!e.altKey){
this.tabStop.focus();
}
}
}else{
if(e.keyCode===dojo.keys.BACKSPACE&&this.document.selection.type==="Control"){
dojo.stopEvent(e);
this.execCommand("delete");
}else{
if((65<=e.keyCode&&e.keyCode<=90)||(e.keyCode>=37&&e.keyCode<=40)){
e.charCode=e.keyCode;
this.onKeyPress(e);
}
}
}
}
return true;
},onKeyUp:function(e){
return;
},setDisabled:function(_b69){
dojo.deprecated("dijit.Editor::setDisabled is deprecated","use dijit.Editor::attr(\"disabled\",boolean) instead",2);
this.set("disabled",_b69);
},_setValueAttr:function(_b6a){
this.setValue(_b6a);
},_setDisableSpellCheckAttr:function(_b6b){
if(this.document){
dojo.attr(this.document.body,"spellcheck",!_b6b);
}else{
this.onLoadDeferred.addCallback(dojo.hitch(this,function(){
dojo.attr(this.document.body,"spellcheck",!_b6b);
}));
}
this._set("disableSpellCheck",_b6b);
},onKeyPress:function(e){
var c=(e.keyChar&&e.keyChar.toLowerCase())||e.keyCode,_b6c=this._keyHandlers[c],args=arguments;
if(_b6c&&!e.altKey){
dojo.some(_b6c,function(h){
if(!(h.shift^e.shiftKey)&&!(h.ctrl^(e.ctrlKey||e.metaKey))){
if(!h.handler.apply(this,args)){
e.preventDefault();
}
return true;
}
},this);
}
if(!this._onKeyHitch){
this._onKeyHitch=dojo.hitch(this,"onKeyPressed");
}
setTimeout(this._onKeyHitch,1);
return true;
},addKeyHandler:function(key,ctrl,_b6d,_b6e){
if(!dojo.isArray(this._keyHandlers[key])){
this._keyHandlers[key]=[];
}
this._keyHandlers[key].push({shift:_b6d||false,ctrl:ctrl||false,handler:_b6e});
},onKeyPressed:function(){
this.onDisplayChanged();
},onClick:function(e){
this.onDisplayChanged(e);
},_onIEMouseDown:function(e){
if(!this._focused&&!this.disabled){
this.focus();
}
},_onBlur:function(e){
this.inherited(arguments);
var _b6f=this.getValue(true);
if(_b6f!=this.value){
this.onChange(_b6f);
}
this._set("value",_b6f);
},_onFocus:function(e){
if(!this.disabled){
if(!this._disabledOK){
this.set("disabled",false);
}
this.inherited(arguments);
}
},blur:function(){
if(!dojo.isIE&&this.window.document.documentElement&&this.window.document.documentElement.focus){
this.window.document.documentElement.focus();
}else{
if(dojo.doc.body.focus){
dojo.doc.body.focus();
}
}
},focus:function(){
if(!this.isLoaded){
this.focusOnLoad=true;
return;
}
if(this._cursorToStart){
delete this._cursorToStart;
if(this.editNode.childNodes){
this.placeCursorAtStart();
return;
}
}
if(!dojo.isIE){
dijit.focus(this.iframe);
}else{
if(this.editNode&&this.editNode.focus){
this.iframe.fireEvent("onfocus",document.createEventObject());
}
}
},updateInterval:200,_updateTimer:null,onDisplayChanged:function(e){
if(this._updateTimer){
clearTimeout(this._updateTimer);
}
if(!this._updateHandler){
this._updateHandler=dojo.hitch(this,"onNormalizedDisplayChanged");
}
this._updateTimer=setTimeout(this._updateHandler,this.updateInterval);
},onNormalizedDisplayChanged:function(){
delete this._updateTimer;
},onChange:function(_b70){
},_normalizeCommand:function(cmd,_b71){
var _b72=cmd.toLowerCase();
if(_b72=="formatblock"){
if(dojo.isSafari&&_b71===undefined){
_b72="heading";
}
}else{
if(_b72=="hilitecolor"&&!dojo.isMoz){
_b72="backcolor";
}
}
return _b72;
},_qcaCache:{},queryCommandAvailable:function(_b73){
var ca=this._qcaCache[_b73];
if(ca!==undefined){
return ca;
}
return (this._qcaCache[_b73]=this._queryCommandAvailable(_b73));
},_queryCommandAvailable:function(_b74){
var ie=1;
var _b75=1<<1;
var _b76=1<<2;
var _b77=1<<3;
function _b78(_b79){
return {ie:Boolean(_b79&ie),mozilla:Boolean(_b79&_b75),webkit:Boolean(_b79&_b76),opera:Boolean(_b79&_b77)};
};
var _b7a=null;
switch(_b74.toLowerCase()){
case "bold":
case "italic":
case "underline":
case "subscript":
case "superscript":
case "fontname":
case "fontsize":
case "forecolor":
case "hilitecolor":
case "justifycenter":
case "justifyfull":
case "justifyleft":
case "justifyright":
case "delete":
case "selectall":
case "toggledir":
_b7a=_b78(_b75|ie|_b76|_b77);
break;
case "createlink":
case "unlink":
case "removeformat":
case "inserthorizontalrule":
case "insertimage":
case "insertorderedlist":
case "insertunorderedlist":
case "indent":
case "outdent":
case "formatblock":
case "inserthtml":
case "undo":
case "redo":
case "strikethrough":
case "tabindent":
_b7a=_b78(_b75|ie|_b77|_b76);
break;
case "blockdirltr":
case "blockdirrtl":
case "dirltr":
case "dirrtl":
case "inlinedirltr":
case "inlinedirrtl":
_b7a=_b78(ie);
break;
case "cut":
case "copy":
case "paste":
_b7a=_b78(ie|_b75|_b76);
break;
case "inserttable":
_b7a=_b78(_b75|ie);
break;
case "insertcell":
case "insertcol":
case "insertrow":
case "deletecells":
case "deletecols":
case "deleterows":
case "mergecells":
case "splitcell":
_b7a=_b78(ie|_b75);
break;
default:
return false;
}
return (dojo.isIE&&_b7a.ie)||(dojo.isMoz&&_b7a.mozilla)||(dojo.isWebKit&&_b7a.webkit)||(dojo.isOpera&&_b7a.opera);
},execCommand:function(_b7b,_b7c){
var _b7d;
this.focus();
_b7b=this._normalizeCommand(_b7b,_b7c);
if(_b7c!==undefined){
if(_b7b=="heading"){
throw new Error("unimplemented");
}else{
if((_b7b=="formatblock")&&dojo.isIE){
_b7c="<"+_b7c+">";
}
}
}
var _b7e="_"+_b7b+"Impl";
if(this[_b7e]){
_b7d=this[_b7e](_b7c);
}else{
_b7c=arguments.length>1?_b7c:null;
if(_b7c||_b7b!="createlink"){
_b7d=this.document.execCommand(_b7b,false,_b7c);
}
}
this.onDisplayChanged();
return _b7d;
},queryCommandEnabled:function(_b7f){
if(this.disabled||!this._disabledOK){
return false;
}
_b7f=this._normalizeCommand(_b7f);
if(dojo.isMoz||dojo.isWebKit){
if(_b7f=="unlink"){
return this._sCall("hasAncestorElement",["a"]);
}else{
if(_b7f=="inserttable"){
return true;
}
}
}
if(dojo.isWebKit){
if(_b7f=="cut"||_b7f=="copy"){
var sel=this.window.getSelection();
if(sel){
sel=sel.toString();
}
return !!sel;
}else{
if(_b7f=="paste"){
return true;
}
}
}
var elem=dojo.isIE?this.document.selection.createRange():this.document;
try{
return elem.queryCommandEnabled(_b7f);
}
catch(e){
return false;
}
},queryCommandState:function(_b80){
if(this.disabled||!this._disabledOK){
return false;
}
_b80=this._normalizeCommand(_b80);
try{
return this.document.queryCommandState(_b80);
}
catch(e){
return false;
}
},queryCommandValue:function(_b81){
if(this.disabled||!this._disabledOK){
return false;
}
var r;
_b81=this._normalizeCommand(_b81);
if(dojo.isIE&&_b81=="formatblock"){
r=this._native2LocalFormatNames[this.document.queryCommandValue(_b81)];
}else{
if(dojo.isMoz&&_b81==="hilitecolor"){
var _b82;
try{
_b82=this.document.queryCommandValue("styleWithCSS");
}
catch(e){
_b82=false;
}
this.document.execCommand("styleWithCSS",false,true);
r=this.document.queryCommandValue(_b81);
this.document.execCommand("styleWithCSS",false,_b82);
}else{
r=this.document.queryCommandValue(_b81);
}
}
return r;
},_sCall:function(name,args){
return dojo.withGlobal(this.window,name,dijit._editor.selection,args);
},placeCursorAtStart:function(){
this.focus();
var _b83=false;
if(dojo.isMoz){
var _b84=this.editNode.firstChild;
while(_b84){
if(_b84.nodeType==3){
if(_b84.nodeValue.replace(/^\s+|\s+$/g,"").length>0){
_b83=true;
this._sCall("selectElement",[_b84]);
break;
}
}else{
if(_b84.nodeType==1){
_b83=true;
var tg=_b84.tagName?_b84.tagName.toLowerCase():"";
if(/br|input|img|base|meta|area|basefont|hr|link/.test(tg)){
this._sCall("selectElement",[_b84]);
}else{
this._sCall("selectElementChildren",[_b84]);
}
break;
}
}
_b84=_b84.nextSibling;
}
}else{
_b83=true;
this._sCall("selectElementChildren",[this.editNode]);
}
if(_b83){
this._sCall("collapse",[true]);
}
},placeCursorAtEnd:function(){
this.focus();
var _b85=false;
if(dojo.isMoz){
var last=this.editNode.lastChild;
while(last){
if(last.nodeType==3){
if(last.nodeValue.replace(/^\s+|\s+$/g,"").length>0){
_b85=true;
this._sCall("selectElement",[last]);
break;
}
}else{
if(last.nodeType==1){
_b85=true;
if(last.lastChild){
this._sCall("selectElement",[last.lastChild]);
}else{
this._sCall("selectElement",[last]);
}
break;
}
}
last=last.previousSibling;
}
}else{
_b85=true;
this._sCall("selectElementChildren",[this.editNode]);
}
if(_b85){
this._sCall("collapse",[false]);
}
},getValue:function(_b86){
if(this.textarea){
if(this.isClosed||!this.isLoaded){
return this.textarea.value;
}
}
return this._postFilterContent(null,_b86);
},_getValueAttr:function(){
return this.getValue(true);
},setValue:function(html){
if(!this.isLoaded){
this.onLoadDeferred.addCallback(dojo.hitch(this,function(){
this.setValue(html);
}));
return;
}
this._cursorToStart=true;
if(this.textarea&&(this.isClosed||!this.isLoaded)){
this.textarea.value=html;
}else{
html=this._preFilterContent(html);
var node=this.isClosed?this.domNode:this.editNode;
if(html&&dojo.isMoz&&html.toLowerCase()=="<p></p>"){
html="<p>&nbsp;</p>";
}
if(!html&&dojo.isWebKit){
html="&nbsp;";
}
node.innerHTML=html;
this._preDomFilterContent(node);
}
this.onDisplayChanged();
this._set("value",this.getValue(true));
},replaceValue:function(html){
if(this.isClosed){
this.setValue(html);
}else{
if(this.window&&this.window.getSelection&&!dojo.isMoz){
this.setValue(html);
}else{
if(this.window&&this.window.getSelection){
html=this._preFilterContent(html);
this.execCommand("selectall");
if(!html){
this._cursorToStart=true;
html="&nbsp;";
}
this.execCommand("inserthtml",html);
this._preDomFilterContent(this.editNode);
}else{
if(this.document&&this.document.selection){
this.setValue(html);
}
}
}
}
this._set("value",this.getValue(true));
},_preFilterContent:function(html){
var ec=html;
dojo.forEach(this.contentPreFilters,function(ef){
if(ef){
ec=ef(ec);
}
});
return ec;
},_preDomFilterContent:function(dom){
dom=dom||this.editNode;
dojo.forEach(this.contentDomPreFilters,function(ef){
if(ef&&dojo.isFunction(ef)){
ef(dom);
}
},this);
},_postFilterContent:function(dom,_b87){
var ec;
if(!dojo.isString(dom)){
dom=dom||this.editNode;
if(this.contentDomPostFilters.length){
if(_b87){
dom=dojo.clone(dom);
}
dojo.forEach(this.contentDomPostFilters,function(ef){
dom=ef(dom);
});
}
ec=dijit._editor.getChildrenHtml(dom);
}else{
ec=dom;
}
if(!dojo.trim(ec.replace(/^\xA0\xA0*/,"").replace(/\xA0\xA0*$/,"")).length){
ec="";
}
dojo.forEach(this.contentPostFilters,function(ef){
ec=ef(ec);
});
return ec;
},_saveContent:function(e){
var _b88=dojo.byId(dijit._scopeName+"._editor.RichText.value");
if(_b88.value){
_b88.value+=this._SEPARATOR;
}
_b88.value+=this.name+this._NAME_CONTENT_SEP+this.getValue(true);
},escapeXml:function(str,_b89){
str=str.replace(/&/gm,"&amp;").replace(/</gm,"&lt;").replace(/>/gm,"&gt;").replace(/"/gm,"&quot;");
if(!_b89){
str=str.replace(/'/gm,"&#39;");
}
return str;
},getNodeHtml:function(node){
dojo.deprecated("dijit.Editor::getNodeHtml is deprecated","use dijit._editor.getNodeHtml instead",2);
return dijit._editor.getNodeHtml(node);
},getNodeChildrenHtml:function(dom){
dojo.deprecated("dijit.Editor::getNodeChildrenHtml is deprecated","use dijit._editor.getChildrenHtml instead",2);
return dijit._editor.getChildrenHtml(dom);
},close:function(save){
if(this.isClosed){
return;
}
if(!arguments.length){
save=true;
}
if(save){
this._set("value",this.getValue(true));
}
if(this.interval){
clearInterval(this.interval);
}
if(this._webkitListener){
this.disconnect(this._webkitListener);
delete this._webkitListener;
}
if(dojo.isIE){
this.iframe.onfocus=null;
}
this.iframe._loadFunc=null;
if(this._iframeRegHandle){
dijit.unregisterIframe(this._iframeRegHandle);
delete this._iframeRegHandle;
}
if(this.textarea){
var s=this.textarea.style;
s.position="";
s.left=s.top="";
if(dojo.isIE){
s.overflow=this.__overflow;
this.__overflow=null;
}
this.textarea.value=this.value;
dojo.destroy(this.domNode);
this.domNode=this.textarea;
}else{
this.domNode.innerHTML=this.value;
}
delete this.iframe;
dojo.removeClass(this.domNode,this.baseClass);
this.isClosed=true;
this.isLoaded=false;
delete this.editNode;
delete this.focusNode;
if(this.window&&this.window._frameElement){
this.window._frameElement=null;
}
this.window=null;
this.document=null;
this.editingArea=null;
this.editorObject=null;
},destroy:function(){
if(!this.isClosed){
this.close(false);
}
this.inherited(arguments);
if(dijit._editor._globalSaveHandler){
delete dijit._editor._globalSaveHandler[this.id];
}
},_removeMozBogus:function(html){
return html.replace(/\stype="_moz"/gi,"").replace(/\s_moz_dirty=""/gi,"").replace(/_moz_resizing="(true|false)"/gi,"");
},_removeWebkitBogus:function(html){
html=html.replace(/\sclass="webkit-block-placeholder"/gi,"");
html=html.replace(/\sclass="apple-style-span"/gi,"");
html=html.replace(/<meta charset=\"utf-8\" \/>/gi,"");
return html;
},_normalizeFontStyle:function(html){
return html.replace(/<(\/)?strong([ \>])/gi,"<$1b$2").replace(/<(\/)?em([ \>])/gi,"<$1i$2");
},_preFixUrlAttributes:function(html){
return html.replace(/(?:(<a(?=\s).*?\shref=)("|')(.*?)\2)|(?:(<a\s.*?href=)([^"'][^ >]+))/gi,"$1$4$2$3$5$2 _djrealurl=$2$3$5$2").replace(/(?:(<img(?=\s).*?\ssrc=)("|')(.*?)\2)|(?:(<img\s.*?src=)([^"'][^ >]+))/gi,"$1$4$2$3$5$2 _djrealurl=$2$3$5$2");
},_inserthorizontalruleImpl:function(_b8a){
if(dojo.isIE){
return this._inserthtmlImpl("<hr>");
}
return this.document.execCommand("inserthorizontalrule",false,_b8a);
},_unlinkImpl:function(_b8b){
if((this.queryCommandEnabled("unlink"))&&(dojo.isMoz||dojo.isWebKit)){
var a=this._sCall("getAncestorElement",["a"]);
this._sCall("selectElement",[a]);
return this.document.execCommand("unlink",false,null);
}
return this.document.execCommand("unlink",false,_b8b);
},_hilitecolorImpl:function(_b8c){
var _b8d;
if(dojo.isMoz){
this.document.execCommand("styleWithCSS",false,true);
_b8d=this.document.execCommand("hilitecolor",false,_b8c);
this.document.execCommand("styleWithCSS",false,false);
}else{
_b8d=this.document.execCommand("hilitecolor",false,_b8c);
}
return _b8d;
},_backcolorImpl:function(_b8e){
if(dojo.isIE){
_b8e=_b8e?_b8e:null;
}
return this.document.execCommand("backcolor",false,_b8e);
},_forecolorImpl:function(_b8f){
if(dojo.isIE){
_b8f=_b8f?_b8f:null;
}
return this.document.execCommand("forecolor",false,_b8f);
},_inserthtmlImpl:function(_b90){
_b90=this._preFilterContent(_b90);
var rv=true;
if(dojo.isIE){
var _b91=this.document.selection.createRange();
if(this.document.selection.type.toUpperCase()=="CONTROL"){
var n=_b91.item(0);
while(_b91.length){
_b91.remove(_b91.item(0));
}
n.outerHTML=_b90;
}else{
_b91.pasteHTML(_b90);
}
_b91.select();
}else{
if(dojo.isMoz&&!_b90.length){
this._sCall("remove");
}else{
rv=this.document.execCommand("inserthtml",false,_b90);
}
}
return rv;
},_boldImpl:function(_b92){
if(dojo.isIE){
this._adaptIESelection();
}
return this.document.execCommand("bold",false,_b92);
},_italicImpl:function(_b93){
if(dojo.isIE){
this._adaptIESelection();
}
return this.document.execCommand("italic",false,_b93);
},_underlineImpl:function(_b94){
if(dojo.isIE){
this._adaptIESelection();
}
return this.document.execCommand("underline",false,_b94);
},_strikethroughImpl:function(_b95){
if(dojo.isIE){
this._adaptIESelection();
}
return this.document.execCommand("strikethrough",false,_b95);
},getHeaderHeight:function(){
return this._getNodeChildrenHeight(this.header);
},getFooterHeight:function(){
return this._getNodeChildrenHeight(this.footer);
},_getNodeChildrenHeight:function(node){
var h=0;
if(node&&node.childNodes){
var i;
for(i=0;i<node.childNodes.length;i++){
var size=dojo.position(node.childNodes[i]);
h+=size.h;
}
}
return h;
},_isNodeEmpty:function(node,_b96){
if(node.nodeType==1){
if(node.childNodes.length>0){
return this._isNodeEmpty(node.childNodes[0],_b96);
}
return true;
}else{
if(node.nodeType==3){
return (node.nodeValue.substring(_b96)=="");
}
}
return false;
},_removeStartingRangeFromRange:function(node,_b97){
if(node.nextSibling){
_b97.setStart(node.nextSibling,0);
}else{
var _b98=node.parentNode;
while(_b98&&_b98.nextSibling==null){
_b98=_b98.parentNode;
}
if(_b98){
_b97.setStart(_b98.nextSibling,0);
}
}
return _b97;
},_adaptIESelection:function(){
var _b99=dijit.range.getSelection(this.window);
if(_b99&&_b99.rangeCount&&!_b99.isCollapsed){
var _b9a=_b99.getRangeAt(0);
var _b9b=_b9a.startContainer;
var _b9c=_b9a.startOffset;
while(_b9b.nodeType==3&&_b9c>=_b9b.length&&_b9b.nextSibling){
_b9c=_b9c-_b9b.length;
_b9b=_b9b.nextSibling;
}
var _b9d=null;
while(this._isNodeEmpty(_b9b,_b9c)&&_b9b!=_b9d){
_b9d=_b9b;
_b9a=this._removeStartingRangeFromRange(_b9b,_b9a);
_b9b=_b9a.startContainer;
_b9c=0;
}
_b99.removeAllRanges();
_b99.addRange(_b9a);
}
}});
}
if(!dojo._hasResource["dijit.ToolbarSeparator"]){
dojo._hasResource["dijit.ToolbarSeparator"]=true;
dojo.provide("dijit.ToolbarSeparator");
dojo.declare("dijit.ToolbarSeparator",[dijit._Widget,dijit._Templated],{templateString:"<div class=\"dijitToolbarSeparator dijitInline\" role=\"presentation\"></div>",buildRendering:function(){
this.inherited(arguments);
dojo.setSelectable(this.domNode,false);
},isFocusable:function(){
return false;
}});
}
if(!dojo._hasResource["dijit.Toolbar"]){
dojo._hasResource["dijit.Toolbar"]=true;
dojo.provide("dijit.Toolbar");
dojo.declare("dijit.Toolbar",[dijit._Widget,dijit._Templated,dijit._KeyNavContainer],{templateString:"<div class=\"dijit\" role=\"toolbar\" tabIndex=\"${tabIndex}\" dojoAttachPoint=\"containerNode\">"+"</div>",baseClass:"dijitToolbar",postCreate:function(){
this.inherited(arguments);
this.connectKeyNavHandlers(this.isLeftToRight()?[dojo.keys.LEFT_ARROW]:[dojo.keys.RIGHT_ARROW],this.isLeftToRight()?[dojo.keys.RIGHT_ARROW]:[dojo.keys.LEFT_ARROW]);
},startup:function(){
if(this._started){
return;
}
this.startupKeyNavChildren();
this.inherited(arguments);
}});
}
if(!dojo._hasResource["dijit._editor._Plugin"]){
dojo._hasResource["dijit._editor._Plugin"]=true;
dojo.provide("dijit._editor._Plugin");
dojo.declare("dijit._editor._Plugin",null,{constructor:function(args,node){
this.params=args||{};
dojo.mixin(this,this.params);
this._connects=[];
this._attrPairNames={};
},editor:null,iconClassPrefix:"dijitEditorIcon",button:null,command:"",useDefaultCommand:true,buttonClass:dijit.form.Button,disabled:false,getLabel:function(key){
return this.editor.commands[key];
},_initButton:function(){
if(this.command.length){
var _b9e=this.getLabel(this.command),_b9f=this.editor,_ba0=this.iconClassPrefix+" "+this.iconClassPrefix+this.command.charAt(0).toUpperCase()+this.command.substr(1);
if(!this.button){
var _ba1=dojo.mixin({label:_b9e,dir:_b9f.dir,lang:_b9f.lang,showLabel:false,iconClass:_ba0,dropDown:this.dropDown,tabIndex:"-1"},this.params||{});
this.button=new this.buttonClass(_ba1);
}
}
if(this.get("disabled")&&this.button){
this.button.set("disabled",this.get("disabled"));
}
},destroy:function(){
dojo.forEach(this._connects,dojo.disconnect);
if(this.dropDown){
this.dropDown.destroyRecursive();
}
},connect:function(o,f,tf){
this._connects.push(dojo.connect(o,f,this,tf));
},updateState:function(){
var e=this.editor,c=this.command,_ba2,_ba3;
if(!e||!e.isLoaded||!c.length){
return;
}
var _ba4=this.get("disabled");
if(this.button){
try{
_ba3=!_ba4&&e.queryCommandEnabled(c);
if(this.enabled!==_ba3){
this.enabled=_ba3;
this.button.set("disabled",!_ba3);
}
if(typeof this.button.checked=="boolean"){
_ba2=e.queryCommandState(c);
if(this.checked!==_ba2){
this.checked=_ba2;
this.button.set("checked",e.queryCommandState(c));
}
}
}
catch(e){
console.log(e);
}
}
},setEditor:function(_ba5){
this.editor=_ba5;
this._initButton();
if(this.button&&this.useDefaultCommand){
if(this.editor.queryCommandAvailable(this.command)){
this.connect(this.button,"onClick",dojo.hitch(this.editor,"execCommand",this.command,this.commandArg));
}else{
this.button.domNode.style.display="none";
}
}
this.connect(this.editor,"onNormalizedDisplayChanged","updateState");
},setToolbar:function(_ba6){
if(this.button){
_ba6.addChild(this.button);
}
},set:function(name,_ba7){
if(typeof name==="object"){
for(var x in name){
this.set(x,name[x]);
}
return this;
}
var _ba8=this._getAttrNames(name);
if(this[_ba8.s]){
var _ba9=this[_ba8.s].apply(this,Array.prototype.slice.call(arguments,1));
}else{
this._set(name,_ba7);
}
return _ba9||this;
},get:function(name){
var _baa=this._getAttrNames(name);
return this[_baa.g]?this[_baa.g]():this[name];
},_setDisabledAttr:function(_bab){
this.disabled=_bab;
this.updateState();
},_getAttrNames:function(name){
var apn=this._attrPairNames;
if(apn[name]){
return apn[name];
}
var uc=name.charAt(0).toUpperCase()+name.substr(1);
return (apn[name]={s:"_set"+uc+"Attr",g:"_get"+uc+"Attr"});
},_set:function(name,_bac){
var _bad=this[name];
this[name]=_bac;
}});
}
if(!dojo._hasResource["dijit._editor.plugins.EnterKeyHandling"]){
dojo._hasResource["dijit._editor.plugins.EnterKeyHandling"]=true;
dojo.provide("dijit._editor.plugins.EnterKeyHandling");
dojo.declare("dijit._editor.plugins.EnterKeyHandling",dijit._editor._Plugin,{blockNodeForEnter:"BR",constructor:function(args){
if(args){
if("blockNodeForEnter" in args){
args.blockNodeForEnter=args.blockNodeForEnter.toUpperCase();
}
dojo.mixin(this,args);
}
},setEditor:function(_bae){
if(this.editor===_bae){
return;
}
this.editor=_bae;
if(this.blockNodeForEnter=="BR"){
this.editor.customUndo=true;
_bae.onLoadDeferred.addCallback(dojo.hitch(this,function(d){
this.connect(_bae.document,"onkeypress",function(e){
if(e.charOrCode==dojo.keys.ENTER){
var ne=dojo.mixin({},e);
ne.shiftKey=true;
if(!this.handleEnterKey(ne)){
dojo.stopEvent(e);
}
}
});
return d;
}));
}else{
if(this.blockNodeForEnter){
var h=dojo.hitch(this,this.handleEnterKey);
_bae.addKeyHandler(13,0,0,h);
_bae.addKeyHandler(13,0,1,h);
this.connect(this.editor,"onKeyPressed","onKeyPressed");
}
}
},onKeyPressed:function(e){
if(this._checkListLater){
if(dojo.withGlobal(this.editor.window,"isCollapsed",dijit)){
var _baf=dojo.withGlobal(this.editor.window,"getAncestorElement",dijit._editor.selection,["LI"]);
if(!_baf){
dijit._editor.RichText.prototype.execCommand.call(this.editor,"formatblock",this.blockNodeForEnter);
var _bb0=dojo.withGlobal(this.editor.window,"getAncestorElement",dijit._editor.selection,[this.blockNodeForEnter]);
if(_bb0){
_bb0.innerHTML=this.bogusHtmlContent;
if(dojo.isIE){
var r=this.editor.document.selection.createRange();
r.move("character",-1);
r.select();
}
}else{
console.error("onKeyPressed: Cannot find the new block node");
}
}else{
if(dojo.isMoz){
if(_baf.parentNode.parentNode.nodeName=="LI"){
_baf=_baf.parentNode.parentNode;
}
}
var fc=_baf.firstChild;
if(fc&&fc.nodeType==1&&(fc.nodeName=="UL"||fc.nodeName=="OL")){
_baf.insertBefore(fc.ownerDocument.createTextNode(" "),fc);
var _bb1=dijit.range.create(this.editor.window);
_bb1.setStart(_baf.firstChild,0);
var _bb2=dijit.range.getSelection(this.editor.window,true);
_bb2.removeAllRanges();
_bb2.addRange(_bb1);
}
}
}
this._checkListLater=false;
}
if(this._pressedEnterInBlock){
if(this._pressedEnterInBlock.previousSibling){
this.removeTrailingBr(this._pressedEnterInBlock.previousSibling);
}
delete this._pressedEnterInBlock;
}
},bogusHtmlContent:"&nbsp;",blockNodes:/^(?:P|H1|H2|H3|H4|H5|H6|LI)$/,handleEnterKey:function(e){
var _bb3,_bb4,_bb5,_bb6,_bb7,_bb8,doc=this.editor.document,br,rs,txt;
if(e.shiftKey){
var _bb9=dojo.withGlobal(this.editor.window,"getParentElement",dijit._editor.selection);
var _bba=dijit.range.getAncestor(_bb9,this.blockNodes);
if(_bba){
if(_bba.tagName=="LI"){
return true;
}
_bb3=dijit.range.getSelection(this.editor.window);
_bb4=_bb3.getRangeAt(0);
if(!_bb4.collapsed){
_bb4.deleteContents();
_bb3=dijit.range.getSelection(this.editor.window);
_bb4=_bb3.getRangeAt(0);
}
if(dijit.range.atBeginningOfContainer(_bba,_bb4.startContainer,_bb4.startOffset)){
br=doc.createElement("br");
_bb5=dijit.range.create(this.editor.window);
_bba.insertBefore(br,_bba.firstChild);
_bb5.setStartBefore(br.nextSibling);
_bb3.removeAllRanges();
_bb3.addRange(_bb5);
}else{
if(dijit.range.atEndOfContainer(_bba,_bb4.startContainer,_bb4.startOffset)){
_bb5=dijit.range.create(this.editor.window);
br=doc.createElement("br");
_bba.appendChild(br);
_bba.appendChild(doc.createTextNode(" "));
_bb5.setStart(_bba.lastChild,0);
_bb3.removeAllRanges();
_bb3.addRange(_bb5);
}else{
rs=_bb4.startContainer;
if(rs&&rs.nodeType==3){
txt=rs.nodeValue;
dojo.withGlobal(this.editor.window,function(){
_bb6=doc.createTextNode(txt.substring(0,_bb4.startOffset));
_bb7=doc.createTextNode(txt.substring(_bb4.startOffset));
_bb8=doc.createElement("br");
if(_bb7.nodeValue==""&&dojo.isWebKit){
_bb7=doc.createTextNode(" ");
}
dojo.place(_bb6,rs,"after");
dojo.place(_bb8,_bb6,"after");
dojo.place(_bb7,_bb8,"after");
dojo.destroy(rs);
_bb5=dijit.range.create(dojo.gobal);
_bb5.setStart(_bb7,0);
_bb3.removeAllRanges();
_bb3.addRange(_bb5);
});
return false;
}
return true;
}
}
}else{
_bb3=dijit.range.getSelection(this.editor.window);
if(_bb3.rangeCount){
_bb4=_bb3.getRangeAt(0);
if(_bb4&&_bb4.startContainer){
if(!_bb4.collapsed){
_bb4.deleteContents();
_bb3=dijit.range.getSelection(this.editor.window);
_bb4=_bb3.getRangeAt(0);
}
rs=_bb4.startContainer;
if(rs&&rs.nodeType==3){
dojo.withGlobal(this.editor.window,dojo.hitch(this,function(){
var _bbb=false;
var _bbc=_bb4.startOffset;
if(rs.length<_bbc){
ret=this._adjustNodeAndOffset(rs,_bbc);
rs=ret.node;
_bbc=ret.offset;
}
txt=rs.nodeValue;
_bb6=doc.createTextNode(txt.substring(0,_bbc));
_bb7=doc.createTextNode(txt.substring(_bbc));
_bb8=doc.createElement("br");
if(!_bb7.length){
_bb7=doc.createTextNode(" ");
_bbb=true;
}
if(_bb6.length){
dojo.place(_bb6,rs,"after");
}else{
_bb6=rs;
}
dojo.place(_bb8,_bb6,"after");
dojo.place(_bb7,_bb8,"after");
dojo.destroy(rs);
_bb5=dijit.range.create(dojo.gobal);
_bb5.setStart(_bb7,0);
_bb5.setEnd(_bb7,_bb7.length);
_bb3.removeAllRanges();
_bb3.addRange(_bb5);
if(_bbb&&!dojo.isWebKit){
dijit._editor.selection.remove();
}else{
dijit._editor.selection.collapse(true);
}
}));
}else{
dojo.withGlobal(this.editor.window,dojo.hitch(this,function(){
var _bbd=doc.createElement("br");
rs.appendChild(_bbd);
var _bbe=doc.createTextNode(" ");
rs.appendChild(_bbe);
_bb5=dijit.range.create(dojo.global);
_bb5.setStart(_bbe,0);
_bb5.setEnd(_bbe,_bbe.length);
_bb3.removeAllRanges();
_bb3.addRange(_bb5);
dijit._editor.selection.collapse(true);
}));
}
}
}else{
dijit._editor.RichText.prototype.execCommand.call(this.editor,"inserthtml","<br>");
}
}
return false;
}
var _bbf=true;
_bb3=dijit.range.getSelection(this.editor.window);
_bb4=_bb3.getRangeAt(0);
if(!_bb4.collapsed){
_bb4.deleteContents();
_bb3=dijit.range.getSelection(this.editor.window);
_bb4=_bb3.getRangeAt(0);
}
var _bc0=dijit.range.getBlockAncestor(_bb4.endContainer,null,this.editor.editNode);
var _bc1=_bc0.blockNode;
if((this._checkListLater=(_bc1&&(_bc1.nodeName=="LI"||_bc1.parentNode.nodeName=="LI")))){
if(dojo.isMoz){
this._pressedEnterInBlock=_bc1;
}
if(/^(\s|&nbsp;|\xA0|<span\b[^>]*\bclass=['"]Apple-style-span['"][^>]*>(\s|&nbsp;|\xA0)<\/span>)?(<br>)?$/.test(_bc1.innerHTML)){
_bc1.innerHTML="";
if(dojo.isWebKit){
_bb5=dijit.range.create(this.editor.window);
_bb5.setStart(_bc1,0);
_bb3.removeAllRanges();
_bb3.addRange(_bb5);
}
this._checkListLater=false;
}
return true;
}
if(!_bc0.blockNode||_bc0.blockNode===this.editor.editNode){
try{
dijit._editor.RichText.prototype.execCommand.call(this.editor,"formatblock",this.blockNodeForEnter);
}
catch(e2){
}
_bc0={blockNode:dojo.withGlobal(this.editor.window,"getAncestorElement",dijit._editor.selection,[this.blockNodeForEnter]),blockContainer:this.editor.editNode};
if(_bc0.blockNode){
if(_bc0.blockNode!=this.editor.editNode&&(!(_bc0.blockNode.textContent||_bc0.blockNode.innerHTML).replace(/^\s+|\s+$/g,"").length)){
this.removeTrailingBr(_bc0.blockNode);
return false;
}
}else{
_bc0.blockNode=this.editor.editNode;
}
_bb3=dijit.range.getSelection(this.editor.window);
_bb4=_bb3.getRangeAt(0);
}
var _bc2=doc.createElement(this.blockNodeForEnter);
_bc2.innerHTML=this.bogusHtmlContent;
this.removeTrailingBr(_bc0.blockNode);
var _bc3=_bb4.endOffset;
var node=_bb4.endContainer;
if(node.length<_bc3){
var ret=this._adjustNodeAndOffset(node,_bc3);
node=ret.node;
_bc3=ret.offset;
}
if(dijit.range.atEndOfContainer(_bc0.blockNode,node,_bc3)){
if(_bc0.blockNode===_bc0.blockContainer){
_bc0.blockNode.appendChild(_bc2);
}else{
dojo.place(_bc2,_bc0.blockNode,"after");
}
_bbf=false;
_bb5=dijit.range.create(this.editor.window);
_bb5.setStart(_bc2,0);
_bb3.removeAllRanges();
_bb3.addRange(_bb5);
if(this.editor.height){
dojo.window.scrollIntoView(_bc2);
}
}else{
if(dijit.range.atBeginningOfContainer(_bc0.blockNode,_bb4.startContainer,_bb4.startOffset)){
dojo.place(_bc2,_bc0.blockNode,_bc0.blockNode===_bc0.blockContainer?"first":"before");
if(_bc2.nextSibling&&this.editor.height){
_bb5=dijit.range.create(this.editor.window);
_bb5.setStart(_bc2.nextSibling,0);
_bb3.removeAllRanges();
_bb3.addRange(_bb5);
dojo.window.scrollIntoView(_bc2.nextSibling);
}
_bbf=false;
}else{
if(_bc0.blockNode===_bc0.blockContainer){
_bc0.blockNode.appendChild(_bc2);
}else{
dojo.place(_bc2,_bc0.blockNode,"after");
}
_bbf=false;
if(_bc0.blockNode.style){
if(_bc2.style){
if(_bc0.blockNode.style.cssText){
_bc2.style.cssText=_bc0.blockNode.style.cssText;
}
}
}
rs=_bb4.startContainer;
var _bc4;
if(rs&&rs.nodeType==3){
var _bc5,_bc6;
_bc3=_bb4.endOffset;
if(rs.length<_bc3){
ret=this._adjustNodeAndOffset(rs,_bc3);
rs=ret.node;
_bc3=ret.offset;
}
txt=rs.nodeValue;
_bb6=doc.createTextNode(txt.substring(0,_bc3));
_bb7=doc.createTextNode(txt.substring(_bc3,txt.length));
dojo.place(_bb6,rs,"before");
dojo.place(_bb7,rs,"after");
dojo.destroy(rs);
var _bc7=_bb6.parentNode;
while(_bc7!==_bc0.blockNode){
var tg=_bc7.tagName;
var _bc8=doc.createElement(tg);
if(_bc7.style){
if(_bc8.style){
if(_bc7.style.cssText){
_bc8.style.cssText=_bc7.style.cssText;
}
}
}
if(_bc7.tagName==="FONT"){
if(_bc7.color){
_bc8.color=_bc7.color;
}
if(_bc7.face){
_bc8.face=_bc7.face;
}
if(_bc7.size){
_bc8.size=_bc7.size;
}
}
_bc5=_bb7;
while(_bc5){
_bc6=_bc5.nextSibling;
_bc8.appendChild(_bc5);
_bc5=_bc6;
}
dojo.place(_bc8,_bc7,"after");
_bb6=_bc7;
_bb7=_bc8;
_bc7=_bc7.parentNode;
}
_bc5=_bb7;
if(_bc5.nodeType==1||(_bc5.nodeType==3&&_bc5.nodeValue)){
_bc2.innerHTML="";
}
_bc4=_bc5;
while(_bc5){
_bc6=_bc5.nextSibling;
_bc2.appendChild(_bc5);
_bc5=_bc6;
}
}
_bb5=dijit.range.create(this.editor.window);
var _bc9;
var _bca=_bc4;
if(this.blockNodeForEnter!=="BR"){
while(_bca){
_bc9=_bca;
_bc6=_bca.firstChild;
_bca=_bc6;
}
if(_bc9&&_bc9.parentNode){
_bc2=_bc9.parentNode;
_bb5.setStart(_bc2,0);
_bb3.removeAllRanges();
_bb3.addRange(_bb5);
if(this.editor.height){
dijit.scrollIntoView(_bc2);
}
if(dojo.isMoz){
this._pressedEnterInBlock=_bc0.blockNode;
}
}else{
_bbf=true;
}
}else{
_bb5.setStart(_bc2,0);
_bb3.removeAllRanges();
_bb3.addRange(_bb5);
if(this.editor.height){
dijit.scrollIntoView(_bc2);
}
if(dojo.isMoz){
this._pressedEnterInBlock=_bc0.blockNode;
}
}
}
}
return _bbf;
},_adjustNodeAndOffset:function(node,_bcb){
while(node.length<_bcb&&node.nextSibling&&node.nextSibling.nodeType==3){
_bcb=_bcb-node.length;
node=node.nextSibling;
}
var ret={"node":node,"offset":_bcb};
return ret;
},removeTrailingBr:function(_bcc){
var para=/P|DIV|LI/i.test(_bcc.tagName)?_bcc:dijit._editor.selection.getParentOfType(_bcc,["P","DIV","LI"]);
if(!para){
return;
}
if(para.lastChild){
if((para.childNodes.length>1&&para.lastChild.nodeType==3&&/^[\s\xAD]*$/.test(para.lastChild.nodeValue))||para.lastChild.tagName=="BR"){
dojo.destroy(para.lastChild);
}
}
if(!para.childNodes.length){
para.innerHTML=this.bogusHtmlContent;
}
}});
}
if(!dojo._hasResource["dijit.Editor"]){
dojo._hasResource["dijit.Editor"]=true;
dojo.provide("dijit.Editor");
dojo.declare("dijit.Editor",dijit._editor.RichText,{plugins:null,extraPlugins:null,constructor:function(){
if(!dojo.isArray(this.plugins)){
this.plugins=["undo","redo","|","cut","copy","paste","|","bold","italic","underline","strikethrough","|","insertOrderedList","insertUnorderedList","indent","outdent","|","justifyLeft","justifyRight","justifyCenter","justifyFull","dijit._editor.plugins.EnterKeyHandling"];
}
this._plugins=[];
this._editInterval=this.editActionInterval*1000;
if(dojo.isIE){
this.events.push("onBeforeDeactivate");
this.events.push("onBeforeActivate");
}
},postMixInProperties:function(){
this.setValueDeferred=new dojo.Deferred();
this.inherited(arguments);
},postCreate:function(){
this._steps=this._steps.slice(0);
this._undoedSteps=this._undoedSteps.slice(0);
if(dojo.isArray(this.extraPlugins)){
this.plugins=this.plugins.concat(this.extraPlugins);
}
this.inherited(arguments);
this.commands=dojo.i18n.getLocalization("dijit._editor","commands",this.lang);
if(!this.toolbar){
this.toolbar=new dijit.Toolbar({dir:this.dir,lang:this.lang});
this.header.appendChild(this.toolbar.domNode);
}
dojo.forEach(this.plugins,this.addPlugin,this);
this.setValueDeferred.callback(true);
dojo.addClass(this.iframe.parentNode,"dijitEditorIFrameContainer");
dojo.addClass(this.iframe,"dijitEditorIFrame");
dojo.attr(this.iframe,"allowTransparency",true);
if(dojo.isWebKit){
dojo.style(this.domNode,"KhtmlUserSelect","none");
}
this.toolbar.startup();
this.onNormalizedDisplayChanged();
},destroy:function(){
dojo.forEach(this._plugins,function(p){
if(p&&p.destroy){
p.destroy();
}
});
this._plugins=[];
this.toolbar.destroyRecursive();
delete this.toolbar;
this.inherited(arguments);
},addPlugin:function(_bcd,_bce){
var args=dojo.isString(_bcd)?{name:_bcd}:_bcd;
if(!args.setEditor){
var o={"args":args,"plugin":null,"editor":this};
dojo.publish(dijit._scopeName+".Editor.getPlugin",[o]);
if(!o.plugin){
var pc=dojo.getObject(args.name);
if(pc){
o.plugin=new pc(args);
}
}
if(!o.plugin){
console.warn("Cannot find plugin",_bcd);
return;
}
_bcd=o.plugin;
}
if(arguments.length>1){
this._plugins[_bce]=_bcd;
}else{
this._plugins.push(_bcd);
}
_bcd.setEditor(this);
if(dojo.isFunction(_bcd.setToolbar)){
_bcd.setToolbar(this.toolbar);
}
},startup:function(){
},resize:function(size){
if(size){
dijit.layout._LayoutWidget.prototype.resize.apply(this,arguments);
}
},layout:function(){
var _bcf=(this._contentBox.h-(this.getHeaderHeight()+this.getFooterHeight()+dojo._getPadBorderExtents(this.iframe.parentNode).h+dojo._getMarginExtents(this.iframe.parentNode).h));
this.editingArea.style.height=_bcf+"px";
if(this.iframe){
this.iframe.style.height="100%";
}
this._layoutMode=true;
},_onIEMouseDown:function(e){
var _bd0;
var b=this.document.body;
var _bd1=b.clientWidth;
var _bd2=b.clientHeight;
var _bd3=b.clientLeft;
var _bd4=b.offsetWidth;
var _bd5=b.offsetHeight;
var _bd6=b.offsetLeft;
bodyDir=b.dir?b.dir.toLowerCase():"";
if(bodyDir!="rtl"){
if(_bd1<_bd4&&e.x>_bd1&&e.x<_bd4){
_bd0=true;
}
}else{
if(e.x<_bd3&&e.x>_bd6){
_bd0=true;
}
}
if(!_bd0){
if(_bd2<_bd5&&e.y>_bd2&&e.y<_bd5){
_bd0=true;
}
}
if(!_bd0){
delete this._cursorToStart;
delete this._savedSelection;
if(e.target.tagName=="BODY"){
setTimeout(dojo.hitch(this,"placeCursorAtEnd"),0);
}
this.inherited(arguments);
}
},onBeforeActivate:function(e){
this._restoreSelection();
},onBeforeDeactivate:function(e){
if(this.customUndo){
this.endEditing(true);
}
if(e.target.tagName!="BODY"){
this._saveSelection();
}
},customUndo:true,editActionInterval:3,beginEditing:function(cmd){
if(!this._inEditing){
this._inEditing=true;
this._beginEditing(cmd);
}
if(this.editActionInterval>0){
if(this._editTimer){
clearTimeout(this._editTimer);
}
this._editTimer=setTimeout(dojo.hitch(this,this.endEditing),this._editInterval);
}
},_steps:[],_undoedSteps:[],execCommand:function(cmd){
if(this.customUndo&&(cmd=="undo"||cmd=="redo")){
return this[cmd]();
}else{
if(this.customUndo){
this.endEditing();
this._beginEditing();
}
var r;
var _bd7=/copy|cut|paste/.test(cmd);
try{
r=this.inherited(arguments);
if(dojo.isWebKit&&_bd7&&!r){
throw {code:1011};
}
}
catch(e){
if(e.code==1011&&_bd7){
var sub=dojo.string.substitute,_bd8={cut:"X",copy:"C",paste:"V"};
alert(sub(this.commands.systemShortcut,[this.commands[cmd],sub(this.commands[dojo.isMac?"appleKey":"ctrlKey"],[_bd8[cmd]])]));
}
r=false;
}
if(this.customUndo){
this._endEditing();
}
return r;
}
},queryCommandEnabled:function(cmd){
if(this.customUndo&&(cmd=="undo"||cmd=="redo")){
return cmd=="undo"?(this._steps.length>1):(this._undoedSteps.length>0);
}else{
return this.inherited(arguments);
}
},_moveToBookmark:function(b){
var _bd9=b.mark;
var mark=b.mark;
var col=b.isCollapsed;
var r,_bda,_bdb,sel;
if(mark){
if(dojo.isIE<9){
if(dojo.isArray(mark)){
_bd9=[];
dojo.forEach(mark,function(n){
_bd9.push(dijit.range.getNode(n,this.editNode));
},this);
dojo.withGlobal(this.window,"moveToBookmark",dijit,[{mark:_bd9,isCollapsed:col}]);
}else{
if(mark.startContainer&&mark.endContainer){
sel=dijit.range.getSelection(this.window);
if(sel&&sel.removeAllRanges){
sel.removeAllRanges();
r=dijit.range.create(this.window);
_bda=dijit.range.getNode(mark.startContainer,this.editNode);
_bdb=dijit.range.getNode(mark.endContainer,this.editNode);
if(_bda&&_bdb){
r.setStart(_bda,mark.startOffset);
r.setEnd(_bdb,mark.endOffset);
sel.addRange(r);
}
}
}
}
}else{
sel=dijit.range.getSelection(this.window);
if(sel&&sel.removeAllRanges){
sel.removeAllRanges();
r=dijit.range.create(this.window);
_bda=dijit.range.getNode(mark.startContainer,this.editNode);
_bdb=dijit.range.getNode(mark.endContainer,this.editNode);
if(_bda&&_bdb){
r.setStart(_bda,mark.startOffset);
r.setEnd(_bdb,mark.endOffset);
sel.addRange(r);
}
}
}
}
},_changeToStep:function(from,to){
this.setValue(to.text);
var b=to.bookmark;
if(!b){
return;
}
this._moveToBookmark(b);
},undo:function(){
var ret=false;
if(!this._undoRedoActive){
this._undoRedoActive=true;
this.endEditing(true);
var s=this._steps.pop();
if(s&&this._steps.length>0){
this.focus();
this._changeToStep(s,this._steps[this._steps.length-1]);
this._undoedSteps.push(s);
this.onDisplayChanged();
delete this._undoRedoActive;
ret=true;
}
delete this._undoRedoActive;
}
return ret;
},redo:function(){
var ret=false;
if(!this._undoRedoActive){
this._undoRedoActive=true;
this.endEditing(true);
var s=this._undoedSteps.pop();
if(s&&this._steps.length>0){
this.focus();
this._changeToStep(this._steps[this._steps.length-1],s);
this._steps.push(s);
this.onDisplayChanged();
ret=true;
}
delete this._undoRedoActive;
}
return ret;
},endEditing:function(_bdc){
if(this._editTimer){
clearTimeout(this._editTimer);
}
if(this._inEditing){
this._endEditing(_bdc);
this._inEditing=false;
}
},_getBookmark:function(){
var b=dojo.withGlobal(this.window,dijit.getBookmark);
var tmp=[];
if(b&&b.mark){
var mark=b.mark;
if(dojo.isIE<9){
var sel=dijit.range.getSelection(this.window);
if(!dojo.isArray(mark)){
if(sel){
var _bdd;
if(sel.rangeCount){
_bdd=sel.getRangeAt(0);
}
if(_bdd){
b.mark=_bdd.cloneRange();
}else{
b.mark=dojo.withGlobal(this.window,dijit.getBookmark);
}
}
}else{
dojo.forEach(b.mark,function(n){
tmp.push(dijit.range.getIndex(n,this.editNode).o);
},this);
b.mark=tmp;
}
}
try{
if(b.mark&&b.mark.startContainer){
tmp=dijit.range.getIndex(b.mark.startContainer,this.editNode).o;
b.mark={startContainer:tmp,startOffset:b.mark.startOffset,endContainer:b.mark.endContainer===b.mark.startContainer?tmp:dijit.range.getIndex(b.mark.endContainer,this.editNode).o,endOffset:b.mark.endOffset};
}
}
catch(e){
b.mark=null;
}
}
return b;
},_beginEditing:function(cmd){
if(this._steps.length===0){
this._steps.push({"text":dijit._editor.getChildrenHtml(this.editNode),"bookmark":this._getBookmark()});
}
},_endEditing:function(_bde){
var v=dijit._editor.getChildrenHtml(this.editNode);
this._undoedSteps=[];
this._steps.push({text:v,bookmark:this._getBookmark()});
},onKeyDown:function(e){
if(!dojo.isIE&&!this.iframe&&e.keyCode==dojo.keys.TAB&&!this.tabIndent){
this._saveSelection();
}
if(!this.customUndo){
this.inherited(arguments);
return;
}
var k=e.keyCode,ks=dojo.keys;
if(e.ctrlKey&&!e.altKey){
if(k==90||k==122){
dojo.stopEvent(e);
this.undo();
return;
}else{
if(k==89||k==121){
dojo.stopEvent(e);
this.redo();
return;
}
}
}
this.inherited(arguments);
switch(k){
case ks.ENTER:
case ks.BACKSPACE:
case ks.DELETE:
this.beginEditing();
break;
case 88:
case 86:
if(e.ctrlKey&&!e.altKey&&!e.metaKey){
this.endEditing();
if(e.keyCode==88){
this.beginEditing("cut");
setTimeout(dojo.hitch(this,this.endEditing),1);
}else{
this.beginEditing("paste");
setTimeout(dojo.hitch(this,this.endEditing),1);
}
break;
}
default:
if(!e.ctrlKey&&!e.altKey&&!e.metaKey&&(e.keyCode<dojo.keys.F1||e.keyCode>dojo.keys.F15)){
this.beginEditing();
break;
}
case ks.ALT:
this.endEditing();
break;
case ks.UP_ARROW:
case ks.DOWN_ARROW:
case ks.LEFT_ARROW:
case ks.RIGHT_ARROW:
case ks.HOME:
case ks.END:
case ks.PAGE_UP:
case ks.PAGE_DOWN:
this.endEditing(true);
break;
case ks.CTRL:
case ks.SHIFT:
case ks.TAB:
break;
}
},_onBlur:function(){
this.inherited(arguments);
this.endEditing(true);
},_saveSelection:function(){
try{
this._savedSelection=this._getBookmark();
}
catch(e){
}
},_restoreSelection:function(){
if(this._savedSelection){
delete this._cursorToStart;
if(dojo.withGlobal(this.window,"isCollapsed",dijit)){
this._moveToBookmark(this._savedSelection);
}
delete this._savedSelection;
}
},onClick:function(){
this.endEditing(true);
this.inherited(arguments);
},replaceValue:function(html){
if(!this.customUndo){
this.inherited(arguments);
}else{
if(this.isClosed){
this.setValue(html);
}else{
this.beginEditing();
if(!html){
html="&nbsp;";
}
this.setValue(html);
this.endEditing();
}
}
},_setDisabledAttr:function(_bdf){
var _be0=dojo.hitch(this,function(){
if((!this.disabled&&_bdf)||(!this._buttonEnabledPlugins&&_bdf)){
dojo.forEach(this._plugins,function(p){
p.set("disabled",true);
});
}else{
if(this.disabled&&!_bdf){
dojo.forEach(this._plugins,function(p){
p.set("disabled",false);
});
}
}
});
this.setValueDeferred.addCallback(_be0);
this.inherited(arguments);
},_setStateClass:function(){
try{
this.inherited(arguments);
if(this.document&&this.document.body){
dojo.style(this.document.body,"color",dojo.style(this.iframe,"color"));
}
}
catch(e){
}
}});
dojo.subscribe(dijit._scopeName+".Editor.getPlugin",null,function(o){
if(o.plugin){
return;
}
var args=o.args,p;
var _be1=dijit._editor._Plugin;
var name=args.name;
switch(name){
case "undo":
case "redo":
case "cut":
case "copy":
case "paste":
case "insertOrderedList":
case "insertUnorderedList":
case "indent":
case "outdent":
case "justifyCenter":
case "justifyFull":
case "justifyLeft":
case "justifyRight":
case "delete":
case "selectAll":
case "removeFormat":
case "unlink":
case "insertHorizontalRule":
p=new _be1({command:name});
break;
case "bold":
case "italic":
case "underline":
case "strikethrough":
case "subscript":
case "superscript":
p=new _be1({buttonClass:dijit.form.ToggleButton,command:name});
break;
case "|":
p=new _be1({button:new dijit.ToolbarSeparator(),setEditor:function(_be2){
this.editor=_be2;
}});
}
o.plugin=p;
});
}
if(!dojo._hasResource["dojox.grid.cells.dijit"]){
dojo._hasResource["dojox.grid.cells.dijit"]=true;
dojo.provide("dojox.grid.cells.dijit");
(function(){
var dgc=dojox.grid.cells;
dojo.declare("dojox.grid.cells._Widget",dgc._Base,{widgetClass:dijit.form.TextBox,constructor:function(_be3){
this.widget=null;
if(typeof this.widgetClass=="string"){
dojo.deprecated("Passing a string to widgetClass is deprecated","pass the widget class object instead","2.0");
this.widgetClass=dojo.getObject(this.widgetClass);
}
},formatEditing:function(_be4,_be5){
this.needFormatNode(_be4,_be5);
return "<div></div>";
},getValue:function(_be6){
return this.widget.get("value");
},setValue:function(_be7,_be8){
if(this.widget&&this.widget.set){
if(this.widget.onLoadDeferred){
var self=this;
this.widget.onLoadDeferred.addCallback(function(){
self.widget.set("value",_be8===null?"":_be8);
});
}else{
this.widget.set("value",_be8);
}
}else{
this.inherited(arguments);
}
},getWidgetProps:function(_be9){
return dojo.mixin({dir:this.dir,lang:this.lang},this.widgetProps||{},{constraints:dojo.mixin({},this.constraint)||{},value:_be9});
},createWidget:function(_bea,_beb,_bec){
return new this.widgetClass(this.getWidgetProps(_beb),_bea);
},attachWidget:function(_bed,_bee,_bef){
_bed.appendChild(this.widget.domNode);
this.setValue(_bef,_bee);
},formatNode:function(_bf0,_bf1,_bf2){
if(!this.widgetClass){
return _bf1;
}
if(!this.widget){
this.widget=this.createWidget.apply(this,arguments);
}else{
this.attachWidget.apply(this,arguments);
}
this.sizeWidget.apply(this,arguments);
this.grid.views.renormalizeRow(_bf2);
this.grid.scroller.rowHeightChanged(_bf2,true);
this.focus();
return undefined;
},sizeWidget:function(_bf3,_bf4,_bf5){
var p=this.getNode(_bf5),box=dojo.contentBox(p);
dojo.marginBox(this.widget.domNode,{w:box.w});
},focus:function(_bf6,_bf7){
if(this.widget){
setTimeout(dojo.hitch(this.widget,function(){
dojox.grid.util.fire(this,"focus");
}),0);
}
},_finish:function(_bf8){
this.inherited(arguments);
dojox.grid.util.removeNode(this.widget.domNode);
if(dojo.isIE){
dojo.setSelectable(this.widget.domNode,true);
}
}});
dgc._Widget.markupFactory=function(node,cell){
dgc._Base.markupFactory(node,cell);
var d=dojo;
var _bf9=d.trim(d.attr(node,"widgetProps")||"");
var _bfa=d.trim(d.attr(node,"constraint")||"");
var _bfb=d.trim(d.attr(node,"widgetClass")||"");
if(_bf9){
cell.widgetProps=d.fromJson(_bf9);
}
if(_bfa){
cell.constraint=d.fromJson(_bfa);
}
if(_bfb){
cell.widgetClass=d.getObject(_bfb);
}
};
dojo.declare("dojox.grid.cells.ComboBox",dgc._Widget,{widgetClass:dijit.form.ComboBox,getWidgetProps:function(_bfc){
var _bfd=[];
dojo.forEach(this.options,function(o){
_bfd.push({name:o,value:o});
});
var _bfe=new dojo.data.ItemFileReadStore({data:{identifier:"name",items:_bfd}});
return dojo.mixin({},this.widgetProps||{},{value:_bfc,store:_bfe});
},getValue:function(){
var e=this.widget;
e.set("displayedValue",e.get("displayedValue"));
return e.get("value");
}});
dgc.ComboBox.markupFactory=function(node,cell){
dgc._Widget.markupFactory(node,cell);
var d=dojo;
var _bff=d.trim(d.attr(node,"options")||"");
if(_bff){
var o=_bff.split(",");
if(o[0]!=_bff){
cell.options=o;
}
}
};
dojo.declare("dojox.grid.cells.DateTextBox",dgc._Widget,{widgetClass:dijit.form.DateTextBox,setValue:function(_c00,_c01){
if(this.widget){
this.widget.set("value",new Date(_c01));
}else{
this.inherited(arguments);
}
},getWidgetProps:function(_c02){
return dojo.mixin(this.inherited(arguments),{value:new Date(_c02)});
}});
dgc.DateTextBox.markupFactory=function(node,cell){
dgc._Widget.markupFactory(node,cell);
};
dojo.declare("dojox.grid.cells.CheckBox",dgc._Widget,{widgetClass:dijit.form.CheckBox,getValue:function(){
return this.widget.checked;
},setValue:function(_c03,_c04){
if(this.widget&&this.widget.attributeMap.checked){
this.widget.set("checked",_c04);
}else{
this.inherited(arguments);
}
},sizeWidget:function(_c05,_c06,_c07){
return;
}});
dgc.CheckBox.markupFactory=function(node,cell){
dgc._Widget.markupFactory(node,cell);
};
dojo.declare("dojox.grid.cells.Editor",dgc._Widget,{widgetClass:dijit.Editor,getWidgetProps:function(_c08){
return dojo.mixin({},this.widgetProps||{},{height:this.widgetHeight||"100px"});
},createWidget:function(_c09,_c0a,_c0b){
var _c0c=new this.widgetClass(this.getWidgetProps(_c0a),_c09);
dojo.connect(_c0c,"onLoad",dojo.hitch(this,"populateEditor"));
return _c0c;
},formatNode:function(_c0d,_c0e,_c0f){
this.content=_c0e;
this.inherited(arguments);
if(dojo.isMoz){
var e=this.widget;
e.open();
if(this.widgetToolbar){
dojo.place(e.toolbar.domNode,e.editingArea,"before");
}
}
},populateEditor:function(){
this.widget.set("value",this.content);
this.widget.placeCursorAtEnd();
}});
dgc.Editor.markupFactory=function(node,cell){
dgc._Widget.markupFactory(node,cell);
var d=dojo;
var h=dojo.trim(dojo.attr(node,"widgetHeight")||"");
if(h){
if((h!="auto")&&(h.substr(-2)!="em")){
h=parseInt(h,10)+"px";
}
cell.widgetHeight=h;
}
};
})();
}
if(!dojo._hasResource["dojox.html._base"]){
dojo._hasResource["dojox.html._base"]=true;
dojo.provide("dojox.html._base");
(function(){
if(dojo.isIE){
var _c10=/(AlphaImageLoader\([^)]*?src=(['"]))(?![a-z]+:|\/)([^\r\n;}]+?)(\2[^)]*\)\s*[;}]?)/g;
}
var _c11=/(?:(?:@import\s*(['"])(?![a-z]+:|\/)([^\r\n;{]+?)\1)|url\(\s*(['"]?)(?![a-z]+:|\/)([^\r\n;]+?)\3\s*\))([a-z, \s]*[;}]?)/g;
var _c12=dojox.html._adjustCssPaths=function(_c13,_c14){
if(!_c14||!_c13){
return;
}
if(_c10){
_c14=_c14.replace(_c10,function(_c15,pre,_c16,url,post){
return pre+(new dojo._Url(_c13,"./"+url).toString())+post;
});
}
return _c14.replace(_c11,function(_c17,_c18,_c19,_c1a,_c1b,_c1c){
if(_c19){
return "@import \""+(new dojo._Url(_c13,"./"+_c19).toString())+"\""+_c1c;
}else{
return "url("+(new dojo._Url(_c13,"./"+_c1b).toString())+")"+_c1c;
}
});
};
var _c1d=/(<[a-z][a-z0-9]*\s[^>]*)(?:(href|src)=(['"]?)([^>]*?)\3|style=(['"]?)([^>]*?)\5)([^>]*>)/gi;
var _c1e=dojox.html._adjustHtmlPaths=function(_c1f,cont){
var url=_c1f||"./";
return cont.replace(_c1d,function(tag,_c20,name,_c21,_c22,_c23,_c24,end){
return _c20+(name?(name+"="+_c21+(new dojo._Url(url,_c22).toString())+_c21):("style="+_c23+_c12(url,_c24)+_c23))+end;
});
};
var _c25=dojox.html._snarfStyles=function(_c26,cont,_c27){
_c27.attributes=[];
return cont.replace(/(?:<style([^>]*)>([\s\S]*?)<\/style>|<link\s+(?=[^>]*rel=['"]?stylesheet)([^>]*?href=(['"])([^>]*?)\4[^>\/]*)\/?>)/gi,function(_c28,_c29,_c2a,_c2b,_c2c,href){
var i,attr=(_c29||_c2b||"").replace(/^\s*([\s\S]*?)\s*$/i,"$1");
if(_c2a){
i=_c27.push(_c26?_c12(_c26,_c2a):_c2a);
}else{
i=_c27.push("@import \""+href+"\";");
attr=attr.replace(/\s*(?:rel|href)=(['"])?[^\s]*\1\s*/gi,"");
}
if(attr){
attr=attr.split(/\s+/);
var _c2d={},tmp;
for(var j=0,e=attr.length;j<e;j++){
tmp=attr[j].split("=");
_c2d[tmp[0]]=tmp[1].replace(/^\s*['"]?([\s\S]*?)['"]?\s*$/,"$1");
}
_c27.attributes[i-1]=_c2d;
}
return "";
});
};
var _c2e=dojox.html._snarfScripts=function(cont,_c2f){
_c2f.code="";
cont=cont.replace(/<[!][-][-](.|\s)*?[-][-]>/g,function(_c30){
return _c30.replace(/<(\/?)script\b/ig,"&lt;$1Script");
});
function _c31(src){
if(_c2f.downloadRemote){
src=src.replace(/&([a-z0-9#]+);/g,function(m,name){
switch(name){
case "amp":
return "&";
case "gt":
return ">";
case "lt":
return "<";
default:
return name.charAt(0)=="#"?String.fromCharCode(name.substring(1)):"&"+name+";";
}
});
dojo.xhrGet({url:src,sync:true,load:function(code){
_c2f.code+=code+";";
},error:_c2f.errBack});
}
};
return cont.replace(/<script\s*(?![^>]*type=['"]?(?:dojo\/|text\/html\b))(?:[^>]*?(?:src=(['"]?)([^>]*?)\1[^>]*)?)*>([\s\S]*?)<\/script>/gi,function(_c32,_c33,src,code){
if(src){
_c31(src);
}else{
_c2f.code+=code;
}
return "";
});
};
var _c34=dojox.html.evalInGlobal=function(code,_c35){
_c35=_c35||dojo.doc.body;
var n=_c35.ownerDocument.createElement("script");
n.type="text/javascript";
_c35.appendChild(n);
n.text=code;
};
dojo.declare("dojox.html._ContentSetter",[dojo.html._ContentSetter],{adjustPaths:false,referencePath:".",renderStyles:false,executeScripts:false,scriptHasHooks:false,scriptHookReplacement:null,_renderStyles:function(_c36){
this._styleNodes=[];
var st,att,_c37,doc=this.node.ownerDocument;
var head=doc.getElementsByTagName("head")[0];
for(var i=0,e=_c36.length;i<e;i++){
_c37=_c36[i];
att=_c36.attributes[i];
st=doc.createElement("style");
st.setAttribute("type","text/css");
for(var x in att){
st.setAttribute(x,att[x]);
}
this._styleNodes.push(st);
head.appendChild(st);
if(st.styleSheet){
st.styleSheet.cssText=_c37;
}else{
st.appendChild(doc.createTextNode(_c37));
}
}
},empty:function(){
this.inherited("empty",arguments);
this._styles=[];
},onBegin:function(){
this.inherited("onBegin",arguments);
var cont=this.content,node=this.node;
var _c38=this._styles;
if(dojo.isString(cont)){
if(this.adjustPaths&&this.referencePath){
cont=_c1e(this.referencePath,cont);
}
if(this.renderStyles||this.cleanContent){
cont=_c25(this.referencePath,cont,_c38);
}
if(this.executeScripts){
var _c39=this;
var _c3a={downloadRemote:true,errBack:function(e){
_c39._onError.call(_c39,"Exec","Error downloading remote script in \""+_c39.id+"\"",e);
}};
cont=_c2e(cont,_c3a);
this._code=_c3a.code;
}
}
this.content=cont;
},onEnd:function(){
var code=this._code,_c3b=this._styles;
if(this._styleNodes&&this._styleNodes.length){
while(this._styleNodes.length){
dojo.destroy(this._styleNodes.pop());
}
}
if(this.renderStyles&&_c3b&&_c3b.length){
this._renderStyles(_c3b);
}
if(this.executeScripts&&code){
if(this.cleanContent){
code=code.replace(/(<!--|(?:\/\/)?-->|<!\[CDATA\[|\]\]>)/g,"");
}
if(this.scriptHasHooks){
code=code.replace(/_container_(?!\s*=[^=])/g,this.scriptHookReplacement);
}
try{
_c34(code,this.node);
}
catch(e){
this._onError("Exec","Error eval script in "+this.id+", "+e.message,e);
}
}
this.inherited("onEnd",arguments);
},tearDown:function(){
this.inherited(arguments);
delete this._styles;
if(this._styleNodes&&this._styleNodes.length){
while(this._styleNodes.length){
dojo.destroy(this._styleNodes.pop());
}
}
delete this._styleNodes;
dojo.mixin(this,dojo.getObject(this.declaredClass).prototype);
}});
dojox.html.set=function(node,cont,_c3c){
if(!_c3c){
return dojo.html._setNodeContent(node,cont,true);
}else{
var op=new dojox.html._ContentSetter(dojo.mixin(_c3c,{content:cont,node:node}));
return op.set();
}
};
})();
}
if(!dojo._hasResource["dojox.layout.ContentPane"]){
dojo._hasResource["dojox.layout.ContentPane"]=true;
dojo.provide("dojox.layout.ContentPane");
dojo.declare("dojox.layout.ContentPane",dijit.layout.ContentPane,{adjustPaths:false,cleanContent:false,renderStyles:false,executeScripts:true,scriptHasHooks:false,constructor:function(){
this.ioArgs={};
this.ioMethod=dojo.xhrGet;
},onExecError:function(e){
},_setContent:function(cont){
var _c3d=this._contentSetter;
if(!(_c3d&&_c3d instanceof dojox.html._ContentSetter)){
_c3d=this._contentSetter=new dojox.html._ContentSetter({node:this.containerNode,_onError:dojo.hitch(this,this._onError),onContentError:dojo.hitch(this,function(e){
var _c3e=this.onContentError(e);
try{
this.containerNode.innerHTML=_c3e;
}
catch(e){
console.error("Fatal "+this.id+" could not change content due to "+e.message,e);
}
})});
}
this._contentSetterParams={adjustPaths:Boolean(this.adjustPaths&&(this.href||this.referencePath)),referencePath:this.href||this.referencePath,renderStyles:this.renderStyles,executeScripts:this.executeScripts,scriptHasHooks:this.scriptHasHooks,scriptHookReplacement:"dijit.byId('"+this.id+"')"};
this.inherited("_setContent",arguments);
}});
}
if(!dojo._hasResource["dojox.layout.ResizeHandle"]){
dojo._hasResource["dojox.layout.ResizeHandle"]=true;
dojo.provide("dojox.layout.ResizeHandle");
dojo.experimental("dojox.layout.ResizeHandle");
dojo.declare("dojox.layout.ResizeHandle",[dijit._Widget,dijit._Templated],{targetId:"",targetContainer:null,resizeAxis:"xy",activeResize:false,activeResizeClass:"dojoxResizeHandleClone",animateSizing:true,animateMethod:"chain",animateDuration:225,minHeight:100,minWidth:100,constrainMax:false,maxHeight:0,maxWidth:0,fixedAspect:false,intermediateChanges:false,startTopic:"/dojo/resize/start",endTopic:"/dojo/resize/stop",templateString:"<div dojoAttachPoint=\"resizeHandle\" class=\"dojoxResizeHandle\"><div></div></div>",postCreate:function(){
this.connect(this.resizeHandle,"onmousedown","_beginSizing");
if(!this.activeResize){
this._resizeHelper=dijit.byId("dojoxGlobalResizeHelper");
if(!this._resizeHelper){
this._resizeHelper=new dojox.layout._ResizeHelper({id:"dojoxGlobalResizeHelper"}).placeAt(dojo.body());
dojo.addClass(this._resizeHelper.domNode,this.activeResizeClass);
}
}else{
this.animateSizing=false;
}
if(!this.minSize){
this.minSize={w:this.minWidth,h:this.minHeight};
}
if(this.constrainMax){
this.maxSize={w:this.maxWidth,h:this.maxHeight};
}
this._resizeX=this._resizeY=false;
var _c3f=dojo.partial(dojo.addClass,this.resizeHandle);
switch(this.resizeAxis.toLowerCase()){
case "xy":
this._resizeX=this._resizeY=true;
_c3f("dojoxResizeNW");
break;
case "x":
this._resizeX=true;
_c3f("dojoxResizeW");
break;
case "y":
this._resizeY=true;
_c3f("dojoxResizeN");
break;
}
},_beginSizing:function(e){
if(this._isSizing){
return false;
}
dojo.publish(this.startTopic,[this]);
this.targetWidget=dijit.byId(this.targetId);
this.targetDomNode=this.targetWidget?this.targetWidget.domNode:dojo.byId(this.targetId);
if(this.targetContainer){
this.targetDomNode=this.targetContainer;
}
if(!this.targetDomNode){
return false;
}
if(!this.activeResize){
var c=dojo.position(this.targetDomNode,true);
console.log(c);
console.log(dojo.window.getBox());
this._resizeHelper.resize({l:c.x,t:c.y,w:c.w,h:c.h});
this._resizeHelper.show();
}
this._isSizing=true;
this.startPoint={x:e.clientX,y:e.clientY};
var mb=this.targetWidget?dojo.marginBox(this.targetDomNode):dojo.contentBox(this.targetDomNode);
this.startSize={w:mb.w,h:mb.h};
if(this.fixedAspect){
var max,val;
if(mb.w>mb.h){
max="w";
val=mb.w/mb.h;
}else{
max="h";
val=mb.h/mb.w;
}
this._aspect={prop:max};
this._aspect[max]=val;
}
this._pconnects=[];
this._pconnects.push(dojo.connect(dojo.doc,"onmousemove",this,"_updateSizing"));
this._pconnects.push(dojo.connect(dojo.doc,"onmouseup",this,"_endSizing"));
dojo.stopEvent(e);
},_updateSizing:function(e){
if(this.activeResize){
this._changeSizing(e);
}else{
var tmp=this._getNewCoords(e);
if(tmp===false){
return;
}
this._resizeHelper.resize(tmp);
}
e.preventDefault();
},_getNewCoords:function(e){
try{
if(!e.clientX||!e.clientY){
return false;
}
}
catch(e){
return false;
}
this._activeResizeLastEvent=e;
var dx=(this.isLeftToRight()?this.startPoint.x-e.clientX:e.clientX-this.startPoint.x),dy=this.startPoint.y-e.clientY,newW=this.startSize.w-(this._resizeX?dx:0),newH=this.startSize.h-(this._resizeY?dy:0);
return this._checkConstraints(newW,newH);
},_checkConstraints:function(newW,newH){
if(this.minSize){
var tm=this.minSize;
if(newW<tm.w){
newW=tm.w;
}
if(newH<tm.h){
newH=tm.h;
}
}
if(this.constrainMax&&this.maxSize){
var ms=this.maxSize;
if(newW>ms.w){
newW=ms.w;
}
if(newH>ms.h){
newH=ms.h;
}
}
if(this.fixedAspect){
var ta=this._aspect[this._aspect.prop];
if(newW<newH){
newH=newW*ta;
}else{
if(newH<newW){
newW=newH*ta;
}
}
}
return {w:newW,h:newH};
},_changeSizing:function(e){
var tmp=this._getNewCoords(e);
if(tmp===false){
return;
}
if(this.targetWidget&&dojo.isFunction(this.targetWidget.resize)){
this.targetWidget.resize(tmp);
}else{
if(this.animateSizing){
var anim=dojo.fx[this.animateMethod]([dojo.animateProperty({node:this.targetDomNode,properties:{width:{start:this.startSize.w,end:tmp.w}},duration:this.animateDuration}),dojo.animateProperty({node:this.targetDomNode,properties:{height:{start:this.startSize.h,end:tmp.h}},duration:this.animateDuration})]);
anim.play();
}else{
dojo.style(this.targetDomNode,{width:tmp.w+"px",height:tmp.h+"px"});
}
}
if(this.intermediateChanges){
this.onResize(e);
}
},_endSizing:function(e){
dojo.forEach(this._pconnects,dojo.disconnect);
var pub=dojo.partial(dojo.publish,this.endTopic,[this]);
if(!this.activeResize){
this._resizeHelper.hide();
this._changeSizing(e);
setTimeout(pub,this.animateDuration+15);
}else{
pub();
}
this._isSizing=false;
this.onResize(e);
},onResize:function(e){
}});
dojo.declare("dojox.layout._ResizeHelper",dijit._Widget,{show:function(){
dojo.fadeIn({node:this.domNode,duration:120,beforeBegin:function(n){
dojo.style(n,"display","");
}}).play();
},hide:function(){
dojo.fadeOut({node:this.domNode,duration:250,onEnd:function(n){
dojo.style(n,"display","none");
}}).play();
},resize:function(dim){
dojo.marginBox(this.domNode,dim);
}});
}
if(!dojo._hasResource["dojox.layout.FloatingPane"]){
dojo._hasResource["dojox.layout.FloatingPane"]=true;
dojo.provide("dojox.layout.FloatingPane");
dojo.experimental("dojox.layout.FloatingPane");
dojo.declare("dojox.layout.FloatingPane",[dojox.layout.ContentPane,dijit._Templated],{closable:true,dockable:true,resizable:false,maxable:false,resizeAxis:"xy",title:"",dockTo:"",duration:400,contentClass:"dojoxFloatingPaneContent",_showAnim:null,_hideAnim:null,_dockNode:null,_restoreState:{},_allFPs:[],_startZ:100,templateString:dojo.cache("dojox.layout","resources/FloatingPane.html","<div class=\"dojoxFloatingPane\" id=\"${id}\">\r\n\t<div tabindex=\"0\" role=\"button\" class=\"dojoxFloatingPaneTitle\" dojoAttachPoint=\"focusNode\">\r\n\t\t<span dojoAttachPoint=\"closeNode\" dojoAttachEvent=\"onclick: close\" class=\"dojoxFloatingCloseIcon\"></span>\r\n\t\t<span dojoAttachPoint=\"maxNode\" dojoAttachEvent=\"onclick: maximize\" class=\"dojoxFloatingMaximizeIcon\">&thinsp;</span>\r\n\t\t<span dojoAttachPoint=\"restoreNode\" dojoAttachEvent=\"onclick: _restore\" class=\"dojoxFloatingRestoreIcon\">&thinsp;</span>\t\r\n\t\t<span dojoAttachPoint=\"dockNode\" dojoAttachEvent=\"onclick: minimize\" class=\"dojoxFloatingMinimizeIcon\">&thinsp;</span>\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitInline dijitTitleNode\"></span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"canvas\" class=\"dojoxFloatingPaneCanvas\">\r\n\t\t<div dojoAttachPoint=\"containerNode\" role=\"region\" tabindex=\"-1\" class=\"${contentClass}\">\r\n\t\t</div>\r\n\t\t<span dojoAttachPoint=\"resizeHandle\" class=\"dojoxFloatingResizeHandle\"></span>\r\n\t</div>\r\n</div>\r\n"),attributeMap:dojo.delegate(dijit._Widget.prototype.attributeMap,{title:{type:"innerHTML",node:"titleNode"}}),postCreate:function(){
this.inherited(arguments);
new dojo.dnd.Moveable(this.domNode,{handle:this.focusNode});
if(!this.dockable){
this.dockNode.style.display="none";
}
if(!this.closable){
this.closeNode.style.display="none";
}
if(!this.maxable){
this.maxNode.style.display="none";
this.restoreNode.style.display="none";
}
if(!this.resizable){
this.resizeHandle.style.display="none";
}else{
this.domNode.style.width=dojo.marginBox(this.domNode).w+"px";
}
this._allFPs.push(this);
this.domNode.style.position="absolute";
this.bgIframe=new dijit.BackgroundIframe(this.domNode);
this._naturalState=dojo.coords(this.domNode);
},startup:function(){
if(this._started){
return;
}
this.inherited(arguments);
if(this.resizable){
if(dojo.isIE){
this.canvas.style.overflow="auto";
}else{
this.containerNode.style.overflow="auto";
}
this._resizeHandle=new dojox.layout.ResizeHandle({targetId:this.id,resizeAxis:this.resizeAxis},this.resizeHandle);
}
if(this.dockable){
var _c40=this.dockTo;
if(this.dockTo){
this.dockTo=dijit.byId(this.dockTo);
}else{
this.dockTo=dijit.byId("dojoxGlobalFloatingDock");
}
if(!this.dockTo){
var _c41,_c42;
if(_c40){
_c41=_c40;
_c42=dojo.byId(_c40);
}else{
_c42=dojo.create("div",null,dojo.body());
dojo.addClass(_c42,"dojoxFloatingDockDefault");
_c41="dojoxGlobalFloatingDock";
}
this.dockTo=new dojox.layout.Dock({id:_c41,autoPosition:"south"},_c42);
this.dockTo.startup();
}
if((this.domNode.style.display=="none")||(this.domNode.style.visibility=="hidden")){
this.minimize();
}
}
this.connect(this.focusNode,"onmousedown","bringToTop");
this.connect(this.domNode,"onmousedown","bringToTop");
this.resize(dojo.coords(this.domNode));
this._started=true;
},setTitle:function(_c43){
dojo.deprecated("pane.setTitle","Use pane.set('title', someTitle)","2.0");
this.set("title",_c43);
},close:function(){
if(!this.closable){
return;
}
dojo.unsubscribe(this._listener);
this.hide(dojo.hitch(this,function(){
this.destroyRecursive();
}));
},hide:function(_c44){
dojo.fadeOut({node:this.domNode,duration:this.duration,onEnd:dojo.hitch(this,function(){
this.domNode.style.display="none";
this.domNode.style.visibility="hidden";
if(this.dockTo&&this.dockable){
this.dockTo._positionDock(null);
}
if(_c44){
_c44();
}
})}).play();
},show:function(_c45){
var anim=dojo.fadeIn({node:this.domNode,duration:this.duration,beforeBegin:dojo.hitch(this,function(){
this.domNode.style.display="";
this.domNode.style.visibility="visible";
if(this.dockTo&&this.dockable){
this.dockTo._positionDock(null);
}
if(typeof _c45=="function"){
_c45();
}
this._isDocked=false;
if(this._dockNode){
this._dockNode.destroy();
this._dockNode=null;
}
})}).play();
this.resize(dojo.coords(this.domNode));
this._onShow();
},minimize:function(){
if(!this._isDocked){
this.hide(dojo.hitch(this,"_dock"));
}
},maximize:function(){
if(this._maximized){
return;
}
this._naturalState=dojo.position(this.domNode);
if(this._isDocked){
this.show();
setTimeout(dojo.hitch(this,"maximize"),this.duration);
}
dojo.addClass(this.focusNode,"floatingPaneMaximized");
this.resize(dojo.window.getBox());
this._maximized=true;
},_restore:function(){
if(this._maximized){
this.resize(this._naturalState);
dojo.removeClass(this.focusNode,"floatingPaneMaximized");
this._maximized=false;
}
},_dock:function(){
if(!this._isDocked&&this.dockable){
this._dockNode=this.dockTo.addNode(this);
this._isDocked=true;
}
},resize:function(dim){
dim=dim||this._naturalState;
this._currentState=dim;
var dns=this.domNode.style;
if("t" in dim){
dns.top=dim.t+"px";
}
if("l" in dim){
dns.left=dim.l+"px";
}
dns.width=dim.w+"px";
dns.height=dim.h+"px";
var _c46={l:0,t:0,w:dim.w,h:(dim.h-this.focusNode.offsetHeight)};
dojo.marginBox(this.canvas,_c46);
this._checkIfSingleChild();
if(this._singleChild&&this._singleChild.resize){
this._singleChild.resize(_c46);
}
},bringToTop:function(){
var _c47=dojo.filter(this._allFPs,function(i){
return i!==this;
},this);
_c47.sort(function(a,b){
return a.domNode.style.zIndex-b.domNode.style.zIndex;
});
_c47.push(this);
dojo.forEach(_c47,function(w,x){
w.domNode.style.zIndex=this._startZ+(x*2);
dojo.removeClass(w.domNode,"dojoxFloatingPaneFg");
},this);
dojo.addClass(this.domNode,"dojoxFloatingPaneFg");
},destroy:function(){
this._allFPs.splice(dojo.indexOf(this._allFPs,this),1);
if(this._resizeHandle){
this._resizeHandle.destroy();
}
this.inherited(arguments);
}});
dojo.declare("dojox.layout.Dock",[dijit._Widget,dijit._Templated],{templateString:"<div class=\"dojoxDock\"><ul dojoAttachPoint=\"containerNode\" class=\"dojoxDockList\"></ul></div>",_docked:[],_inPositioning:false,autoPosition:false,addNode:function(_c48){
var div=dojo.create("li",null,this.containerNode),node=new dojox.layout._DockNode({title:_c48.title,paneRef:_c48},div);
node.startup();
return node;
},startup:function(){
if(this.id=="dojoxGlobalFloatingDock"||this.isFixedDock){
this.connect(window,"onresize","_positionDock");
this.connect(window,"onscroll","_positionDock");
if(dojo.isIE){
this.connect(this.domNode,"onresize","_positionDock");
}
}
this._positionDock(null);
this.inherited(arguments);
},_positionDock:function(e){
if(!this._inPositioning){
if(this.autoPosition=="south"){
setTimeout(dojo.hitch(this,function(){
this._inPositiononing=true;
var _c49=dojo.window.getBox();
var s=this.domNode.style;
s.left=_c49.l+"px";
s.width=(_c49.w-2)+"px";
s.top=(_c49.h+_c49.t)-this.domNode.offsetHeight+"px";
this._inPositioning=false;
}),125);
}
}
}});
dojo.declare("dojox.layout._DockNode",[dijit._Widget,dijit._Templated],{title:"",paneRef:null,templateString:"<li dojoAttachEvent=\"onclick: restore\" class=\"dojoxDockNode\">"+"<span dojoAttachPoint=\"restoreNode\" class=\"dojoxDockRestoreButton\" dojoAttachEvent=\"onclick: restore\"></span>"+"<span class=\"dojoxDockTitleNode\" dojoAttachPoint=\"titleNode\">${title}</span>"+"</li>",restore:function(){
this.paneRef.show();
this.paneRef.bringToTop();
this.destroy();
}});
}
if(!dojo._hasResource["dojox.xml.DomParser"]){
dojo._hasResource["dojox.xml.DomParser"]=true;
dojo.provide("dojox.xml.DomParser");
dojox.xml.DomParser=new (function(){
var _c4a={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9};
var _c4b=/<([^>\/\s+]*)([^>]*)>([^<]*)/g;
var _c4c=/([^=]*)=(("([^"]*)")|('([^']*)'))/g;
var _c4d=/<!ENTITY\s+([^"]*)\s+"([^"]*)">/g;
var _c4e=/<!\[CDATA\[([\u0001-\uFFFF]*?)\]\]>/g;
var _c4f=/<!--([\u0001-\uFFFF]*?)-->/g;
var trim=/^\s+|\s+$/g;
var _c50=/\s+/g;
var egt=/\&gt;/g;
var elt=/\&lt;/g;
var _c51=/\&quot;/g;
var _c52=/\&apos;/g;
var eamp=/\&amp;/g;
var dNs="_def_";
function _c53(){
return new (function(){
var all={};
this.nodeType=_c4a.DOCUMENT;
this.nodeName="#document";
this.namespaces={};
this._nsPaths={};
this.childNodes=[];
this.documentElement=null;
this._add=function(obj){
if(typeof (obj.id)!="undefined"){
all[obj.id]=obj;
}
};
this._remove=function(id){
if(all[id]){
delete all[id];
}
};
this.byId=this.getElementById=function(id){
return all[id];
};
this.byName=this.getElementsByTagName=_c54;
this.byNameNS=this.getElementsByTagNameNS=_c55;
this.childrenByName=_c56;
this.childrenByNameNS=_c57;
})();
};
function _c54(name){
function _c58(node,name,arr){
dojo.forEach(node.childNodes,function(c){
if(c.nodeType==_c4a.ELEMENT){
if(name=="*"){
arr.push(c);
}else{
if(c.nodeName==name){
arr.push(c);
}
}
_c58(c,name,arr);
}
});
};
var a=[];
_c58(this,name,a);
return a;
};
function _c55(name,ns){
function _c59(node,name,ns,arr){
dojo.forEach(node.childNodes,function(c){
if(c.nodeType==_c4a.ELEMENT){
if(name=="*"&&c.ownerDocument._nsPaths[ns]==c.namespace){
arr.push(c);
}else{
if(c.localName==name&&c.ownerDocument._nsPaths[ns]==c.namespace){
arr.push(c);
}
}
_c59(c,name,ns,arr);
}
});
};
if(!ns){
ns=dNs;
}
var a=[];
_c59(this,name,ns,a);
return a;
};
function _c56(name){
var a=[];
dojo.forEach(this.childNodes,function(c){
if(c.nodeType==_c4a.ELEMENT){
if(name=="*"){
a.push(c);
}else{
if(c.nodeName==name){
a.push(c);
}
}
}
});
return a;
};
function _c57(name,ns){
var a=[];
dojo.forEach(this.childNodes,function(c){
if(c.nodeType==_c4a.ELEMENT){
if(name=="*"&&c.ownerDocument._nsPaths[ns]==c.namespace){
a.push(c);
}else{
if(c.localName==name&&c.ownerDocument._nsPaths[ns]==c.namespace){
a.push(c);
}
}
}
});
return a;
};
function _c5a(v){
return {nodeType:_c4a.TEXT,nodeName:"#text",nodeValue:v.replace(_c50," ").replace(egt,">").replace(elt,"<").replace(_c52,"'").replace(_c51,"\"").replace(eamp,"&")};
};
function _c5b(name){
for(var i=0;i<this.attributes.length;i++){
if(this.attributes[i].nodeName==name){
return this.attributes[i].nodeValue;
}
}
return null;
};
function _c5c(name,ns){
for(var i=0;i<this.attributes.length;i++){
if(this.ownerDocument._nsPaths[ns]==this.attributes[i].namespace&&this.attributes[i].localName==name){
return this.attributes[i].nodeValue;
}
}
return null;
};
function _c5d(name,val){
var old=null;
for(var i=0;i<this.attributes.length;i++){
if(this.attributes[i].nodeName==name){
old=this.attributes[i].nodeValue;
this.attributes[i].nodeValue=val;
break;
}
}
if(name=="id"){
if(old!=null){
this.ownerDocument._remove(old);
}
this.ownerDocument._add(this);
}
};
function _c5e(name,val,ns){
for(var i=0;i<this.attributes.length;i++){
if(this.ownerDocument._nsPaths[ns]==this.attributes[i].namespace&&this.attributes[i].localName==name){
this.attributes[i].nodeValue=val;
return;
}
}
};
function prev(){
var p=this.parentNode;
if(p){
for(var i=0;i<p.childNodes.length;i++){
if(p.childNodes[i]==this&&i>0){
return p.childNodes[i-1];
}
}
}
return null;
};
function next(){
var p=this.parentNode;
if(p){
for(var i=0;i<p.childNodes.length;i++){
if(p.childNodes[i]==this&&(i+1)<p.childNodes.length){
return p.childNodes[i+1];
}
}
}
return null;
};
this.parse=function(str){
var root=_c53();
if(str==null){
return root;
}
if(str.length==0){
return root;
}
if(str.indexOf("<!ENTITY")>0){
var _c5f,eRe=[];
if(_c4d.test(str)){
_c4d.lastIndex=0;
while((_c5f=_c4d.exec(str))!=null){
eRe.push({entity:"&"+_c5f[1].replace(trim,"")+";",expression:_c5f[2]});
}
for(var i=0;i<eRe.length;i++){
str=str.replace(new RegExp(eRe[i].entity,"g"),eRe[i].expression);
}
}
}
var _c60=[],_c61;
while((_c61=_c4e.exec(str))!=null){
_c60.push(_c61[1]);
}
for(var i=0;i<_c60.length;i++){
str=str.replace(_c60[i],i);
}
var _c62=[],_c63;
while((_c63=_c4f.exec(str))!=null){
_c62.push(_c63[1]);
}
for(i=0;i<_c62.length;i++){
str=str.replace(_c62[i],i);
}
var res,obj=root;
while((res=_c4b.exec(str))!=null){
if(res[2].charAt(0)=="/"&&res[2].replace(trim,"").length>1){
if(obj.parentNode){
obj=obj.parentNode;
}
var text=(res[3]||"").replace(trim,"");
if(text.length>0){
obj.childNodes.push(_c5a(text));
}
}else{
if(res[1].length>0){
if(res[1].charAt(0)=="?"){
var name=res[1].substr(1);
var _c64=res[2].substr(0,res[2].length-2);
obj.childNodes.push({nodeType:_c4a.PROCESSING_INSTRUCTION,nodeName:name,nodeValue:_c64});
}else{
if(res[1].charAt(0)=="!"){
if(res[1].indexOf("![CDATA[")==0){
var val=parseInt(res[1].replace("![CDATA[","").replace("]]",""));
obj.childNodes.push({nodeType:_c4a.CDATA_SECTION,nodeName:"#cdata-section",nodeValue:_c60[val]});
}else{
if(res[1].substr(0,3)=="!--"){
var val=parseInt(res[1].replace("!--","").replace("--",""));
obj.childNodes.push({nodeType:_c4a.COMMENT,nodeName:"#comment",nodeValue:_c62[val]});
}
}
}else{
var name=res[1].replace(trim,"");
var o={nodeType:_c4a.ELEMENT,nodeName:name,localName:name,namespace:dNs,ownerDocument:root,attributes:[],parentNode:null,childNodes:[]};
if(name.indexOf(":")>-1){
var t=name.split(":");
o.namespace=t[0];
o.localName=t[1];
}
o.byName=o.getElementsByTagName=_c54;
o.byNameNS=o.getElementsByTagNameNS=_c55;
o.childrenByName=_c56;
o.childrenByNameNS=_c57;
o.getAttribute=_c5b;
o.getAttributeNS=_c5c;
o.setAttribute=_c5d;
o.setAttributeNS=_c5e;
o.previous=o.previousSibling=prev;
o.next=o.nextSibling=next;
var attr;
while((attr=_c4c.exec(res[2]))!=null){
if(attr.length>0){
var name=attr[1].replace(trim,"");
var val=(attr[4]||attr[6]||"").replace(_c50," ").replace(egt,">").replace(elt,"<").replace(_c52,"'").replace(_c51,"\"").replace(eamp,"&");
if(name.indexOf("xmlns")==0){
if(name.indexOf(":")>0){
var ns=name.split(":");
root.namespaces[ns[1]]=val;
root._nsPaths[val]=ns[1];
}else{
root.namespaces[dNs]=val;
root._nsPaths[val]=dNs;
}
}else{
var ln=name;
var ns=dNs;
if(name.indexOf(":")>0){
var t=name.split(":");
ln=t[1];
ns=t[0];
}
o.attributes.push({nodeType:_c4a.ATTRIBUTE,nodeName:name,localName:ln,namespace:ns,nodeValue:val});
if(ln=="id"){
o.id=val;
}
}
}
}
root._add(o);
if(obj){
obj.childNodes.push(o);
o.parentNode=obj;
if(res[2].charAt(res[2].length-1)!="/"){
obj=o;
}
}
var text=res[3];
if(text.length>0){
obj.childNodes.push(_c5a(text));
}
}
}
}
}
}
for(var i=0;i<root.childNodes.length;i++){
var e=root.childNodes[i];
if(e.nodeType==_c4a.ELEMENT){
root.documentElement=e;
break;
}
}
return root;
};
})();
}
if(!dojo._hasResource["dojox.string.Builder"]){
dojo._hasResource["dojox.string.Builder"]=true;
dojo.provide("dojox.string.Builder");
dojox.string.Builder=function(str){
var b="";
this.length=0;
this.append=function(s){
if(arguments.length>1){
var tmp="",l=arguments.length;
switch(l){
case 9:
tmp=""+arguments[8]+tmp;
case 8:
tmp=""+arguments[7]+tmp;
case 7:
tmp=""+arguments[6]+tmp;
case 6:
tmp=""+arguments[5]+tmp;
case 5:
tmp=""+arguments[4]+tmp;
case 4:
tmp=""+arguments[3]+tmp;
case 3:
tmp=""+arguments[2]+tmp;
case 2:
b+=""+arguments[0]+arguments[1]+tmp;
break;
default:
var i=0;
while(i<arguments.length){
tmp+=arguments[i++];
}
b+=tmp;
}
}else{
b+=s;
}
this.length=b.length;
return this;
};
this.concat=function(s){
return this.append.apply(this,arguments);
};
this.appendArray=function(_c65){
return this.append.apply(this,_c65);
};
this.clear=function(){
b="";
this.length=0;
return this;
};
this.replace=function(_c66,_c67){
b=b.replace(_c66,_c67);
this.length=b.length;
return this;
};
this.remove=function(_c68,len){
if(len===undefined){
len=b.length;
}
if(len==0){
return this;
}
b=b.substr(0,_c68)+b.substr(_c68+len);
this.length=b.length;
return this;
};
this.insert=function(_c69,str){
if(_c69==0){
b=str+b;
}else{
b=b.slice(0,_c69)+str+b.slice(_c69);
}
this.length=b.length;
return this;
};
this.toString=function(){
return b;
};
if(str){
this.append(str);
}
};
}
if(!dojo._hasResource["dojox.string.tokenize"]){
dojo._hasResource["dojox.string.tokenize"]=true;
dojo.provide("dojox.string.tokenize");
dojox.string.tokenize=function(str,re,_c6a,_c6b){
var _c6c=[];
var _c6d,_c6e,_c6f=0;
while(_c6d=re.exec(str)){
_c6e=str.slice(_c6f,re.lastIndex-_c6d[0].length);
if(_c6e.length){
_c6c.push(_c6e);
}
if(_c6a){
if(dojo.isOpera){
var copy=_c6d.slice(0);
while(copy.length<_c6d.length){
copy.push(null);
}
_c6d=copy;
}
var _c70=_c6a.apply(_c6b,_c6d.slice(1).concat(_c6c.length));
if(typeof _c70!="undefined"){
_c6c.push(_c70);
}
}
_c6f=re.lastIndex;
}
_c6e=str.slice(_c6f);
if(_c6e.length){
_c6c.push(_c6e);
}
return _c6c;
};
}
if(!dojo._hasResource["dojox.dtl._base"]){
dojo._hasResource["dojox.dtl._base"]=true;
dojo.provide("dojox.dtl._base");
dojo.experimental("dojox.dtl");
(function(){
var dd=dojox.dtl;
dd.TOKEN_BLOCK=-1;
dd.TOKEN_VAR=-2;
dd.TOKEN_COMMENT=-3;
dd.TOKEN_TEXT=3;
dd._Context=dojo.extend(function(dict){
if(dict){
dojo._mixin(this,dict);
if(dict.get){
this._getter=dict.get;
delete this.get;
}
}
},{push:function(){
var last=this;
var _c71=dojo.delegate(this);
_c71.pop=function(){
return last;
};
return _c71;
},pop:function(){
throw new Error("pop() called on empty Context");
},get:function(key,_c72){
var n=this._normalize;
if(this._getter){
var got=this._getter(key);
if(typeof got!="undefined"){
return n(got);
}
}
if(typeof this[key]!="undefined"){
return n(this[key]);
}
return _c72;
},_normalize:function(_c73){
if(_c73 instanceof Date){
_c73.year=_c73.getFullYear();
_c73.month=_c73.getMonth()+1;
_c73.day=_c73.getDate();
_c73.date=_c73.year+"-"+("0"+_c73.month).slice(-2)+"-"+("0"+_c73.day).slice(-2);
_c73.hour=_c73.getHours();
_c73.minute=_c73.getMinutes();
_c73.second=_c73.getSeconds();
_c73.microsecond=_c73.getMilliseconds();
}
return _c73;
},update:function(dict){
var _c74=this.push();
if(dict){
dojo._mixin(this,dict);
}
return _c74;
}});
var _c75=/("(?:[^"\\]*(?:\\.[^"\\]*)*)"|'(?:[^'\\]*(?:\\.[^'\\]*)*)'|[^\s]+)/g;
var _c76=/\s+/g;
var _c77=function(_c78,_c79){
_c78=_c78||_c76;
if(!(_c78 instanceof RegExp)){
_c78=new RegExp(_c78,"g");
}
if(!_c78.global){
throw new Error("You must use a globally flagged RegExp with split "+_c78);
}
_c78.exec("");
var part,_c7a=[],_c7b=0,i=0;
while(part=_c78.exec(this)){
_c7a.push(this.slice(_c7b,_c78.lastIndex-part[0].length));
_c7b=_c78.lastIndex;
if(_c79&&(++i>_c79-1)){
break;
}
}
_c7a.push(this.slice(_c7b));
return _c7a;
};
dd.Token=function(_c7c,_c7d){
this.token_type=_c7c;
this.contents=new String(dojo.trim(_c7d));
this.contents.split=_c77;
this.split=function(){
return String.prototype.split.apply(this.contents,arguments);
};
};
dd.Token.prototype.split_contents=function(_c7e){
var bit,bits=[],i=0;
_c7e=_c7e||999;
while(i++<_c7e&&(bit=_c75.exec(this.contents))){
bit=bit[0];
if(bit.charAt(0)=="\""&&bit.slice(-1)=="\""){
bits.push("\""+bit.slice(1,-1).replace("\\\"","\"").replace("\\\\","\\")+"\"");
}else{
if(bit.charAt(0)=="'"&&bit.slice(-1)=="'"){
bits.push("'"+bit.slice(1,-1).replace("\\'","'").replace("\\\\","\\")+"'");
}else{
bits.push(bit);
}
}
}
return bits;
};
var ddt=dd.text={_get:function(_c7f,name,_c80){
var _c81=dd.register.get(_c7f,name.toLowerCase(),_c80);
if(!_c81){
if(!_c80){
throw new Error("No tag found for "+name);
}
return null;
}
var fn=_c81[1];
var _c82=_c81[2];
var _c83;
if(fn.indexOf(":")!=-1){
_c83=fn.split(":");
fn=_c83.pop();
}
dojo["require"](_c82);
var _c84=dojo.getObject(_c82);
return _c84[fn||name]||_c84[name+"_"]||_c84[fn+"_"];
},getTag:function(name,_c85){
return ddt._get("tag",name,_c85);
},getFilter:function(name,_c86){
return ddt._get("filter",name,_c86);
},getTemplate:function(file){
return new dd.Template(ddt.getTemplateString(file));
},getTemplateString:function(file){
return dojo._getText(file.toString())||"";
},_resolveLazy:function(_c87,sync,json){
if(sync){
if(json){
return dojo.fromJson(dojo._getText(_c87))||{};
}else{
return dd.text.getTemplateString(_c87);
}
}else{
return dojo.xhrGet({handleAs:(json)?"json":"text",url:_c87});
}
},_resolveTemplateArg:function(arg,sync){
if(ddt._isTemplate(arg)){
if(!sync){
var d=new dojo.Deferred();
d.callback(arg);
return d;
}
return arg;
}
return ddt._resolveLazy(arg,sync);
},_isTemplate:function(arg){
return (typeof arg=="undefined")||(typeof arg=="string"&&(arg.match(/^\s*[<{]/)||arg.indexOf(" ")!=-1));
},_resolveContextArg:function(arg,sync){
if(arg.constructor==Object){
if(!sync){
var d=new dojo.Deferred;
d.callback(arg);
return d;
}
return arg;
}
return ddt._resolveLazy(arg,sync,true);
},_re:/(?:\{\{\s*(.+?)\s*\}\}|\{%\s*(load\s*)?(.+?)\s*%\})/g,tokenize:function(str){
return dojox.string.tokenize(str,ddt._re,ddt._parseDelims);
},_parseDelims:function(varr,load,tag){
if(varr){
return [dd.TOKEN_VAR,varr];
}else{
if(load){
var _c88=dojo.trim(tag).split(/\s+/g);
for(var i=0,part;part=_c88[i];i++){
dojo["require"](part);
}
}else{
return [dd.TOKEN_BLOCK,tag];
}
}
}};
dd.Template=dojo.extend(function(_c89,_c8a){
var str=_c8a?_c89:ddt._resolveTemplateArg(_c89,true)||"";
var _c8b=ddt.tokenize(str);
var _c8c=new dd._Parser(_c8b);
this.nodelist=_c8c.parse();
},{update:function(node,_c8d){
return ddt._resolveContextArg(_c8d).addCallback(this,function(_c8e){
var _c8f=this.render(new dd._Context(_c8e));
if(node.forEach){
node.forEach(function(item){
item.innerHTML=_c8f;
});
}else{
dojo.byId(node).innerHTML=_c8f;
}
return this;
});
},render:function(_c90,_c91){
_c91=_c91||this.getBuffer();
_c90=_c90||new dd._Context({});
return this.nodelist.render(_c90,_c91)+"";
},getBuffer:function(){
return new dojox.string.Builder();
}});
var qfRe=/\{\{\s*(.+?)\s*\}\}/g;
dd.quickFilter=function(str){
if(!str){
return new dd._NodeList();
}
if(str.indexOf("{%")==-1){
return new dd._QuickNodeList(dojox.string.tokenize(str,qfRe,function(_c92){
return new dd._Filter(_c92);
}));
}
};
dd._QuickNodeList=dojo.extend(function(_c93){
this.contents=_c93;
},{render:function(_c94,_c95){
for(var i=0,l=this.contents.length;i<l;i++){
if(this.contents[i].resolve){
_c95=_c95.concat(this.contents[i].resolve(_c94));
}else{
_c95=_c95.concat(this.contents[i]);
}
}
return _c95;
},dummyRender:function(_c96){
return this.render(_c96,dd.Template.prototype.getBuffer()).toString();
},clone:function(_c97){
return this;
}});
dd._Filter=dojo.extend(function(_c98){
if(!_c98){
throw new Error("Filter must be called with variable name");
}
this.contents=_c98;
var _c99=this._cache[_c98];
if(_c99){
this.key=_c99[0];
this.filters=_c99[1];
}else{
this.filters=[];
dojox.string.tokenize(_c98,this._re,this._tokenize,this);
this._cache[_c98]=[this.key,this.filters];
}
},{_cache:{},_re:/(?:^_\("([^\\"]*(?:\\.[^\\"])*)"\)|^"([^\\"]*(?:\\.[^\\"]*)*)"|^([a-zA-Z0-9_.]+)|\|(\w+)(?::(?:_\("([^\\"]*(?:\\.[^\\"])*)"\)|"([^\\"]*(?:\\.[^\\"]*)*)"|([a-zA-Z0-9_.]+)|'([^\\']*(?:\\.[^\\']*)*)'))?|^'([^\\']*(?:\\.[^\\']*)*)')/g,_values:{0:"\"",1:"\"",2:"",8:"\""},_args:{4:"\"",5:"\"",6:"",7:"'"},_tokenize:function(){
var pos,arg;
for(var i=0,has=[];i<arguments.length;i++){
has[i]=(typeof arguments[i]!="undefined"&&typeof arguments[i]=="string"&&arguments[i]);
}
if(!this.key){
for(pos in this._values){
if(has[pos]){
this.key=this._values[pos]+arguments[pos]+this._values[pos];
break;
}
}
}else{
for(pos in this._args){
if(has[pos]){
var _c9a=arguments[pos];
if(this._args[pos]=="'"){
_c9a=_c9a.replace(/\\'/g,"'");
}else{
if(this._args[pos]=="\""){
_c9a=_c9a.replace(/\\"/g,"\"");
}
}
arg=[!this._args[pos],_c9a];
break;
}
}
var fn=ddt.getFilter(arguments[3]);
if(!dojo.isFunction(fn)){
throw new Error(arguments[3]+" is not registered as a filter");
}
this.filters.push([fn,arg]);
}
},getExpression:function(){
return this.contents;
},resolve:function(_c9b){
if(typeof this.key=="undefined"){
return "";
}
var str=this.resolvePath(this.key,_c9b);
for(var i=0,_c9c;_c9c=this.filters[i];i++){
if(_c9c[1]){
if(_c9c[1][0]){
str=_c9c[0](str,this.resolvePath(_c9c[1][1],_c9b));
}else{
str=_c9c[0](str,_c9c[1][1]);
}
}else{
str=_c9c[0](str);
}
}
return str;
},resolvePath:function(path,_c9d){
var _c9e,_c9f;
var _ca0=path.charAt(0);
var last=path.slice(-1);
if(!isNaN(parseInt(_ca0))){
_c9e=(path.indexOf(".")==-1)?parseInt(path):parseFloat(path);
}else{
if(_ca0=="\""&&_ca0==last){
_c9e=path.slice(1,-1);
}else{
if(path=="true"){
return true;
}
if(path=="false"){
return false;
}
if(path=="null"||path=="None"){
return null;
}
_c9f=path.split(".");
_c9e=_c9d.get(_c9f[0]);
if(dojo.isFunction(_c9e)){
var self=_c9d.getThis&&_c9d.getThis();
if(_c9e.alters_data){
_c9e="";
}else{
if(self){
_c9e=_c9e.call(self);
}else{
_c9e="";
}
}
}
for(var i=1;i<_c9f.length;i++){
var part=_c9f[i];
if(_c9e){
var base=_c9e;
if(dojo.isObject(_c9e)&&part=="items"&&typeof _c9e[part]=="undefined"){
var _ca1=[];
for(var key in _c9e){
_ca1.push([key,_c9e[key]]);
}
_c9e=_ca1;
continue;
}
if(_c9e.get&&dojo.isFunction(_c9e.get)&&_c9e.get.safe){
_c9e=_c9e.get(part);
}else{
if(typeof _c9e[part]=="undefined"){
_c9e=_c9e[part];
break;
}else{
_c9e=_c9e[part];
}
}
if(dojo.isFunction(_c9e)){
if(_c9e.alters_data){
_c9e="";
}else{
_c9e=_c9e.call(base);
}
}else{
if(_c9e instanceof Date){
_c9e=dd._Context.prototype._normalize(_c9e);
}
}
}else{
return "";
}
}
}
}
return _c9e;
}});
dd._TextNode=dd._Node=dojo.extend(function(obj){
this.contents=obj;
},{set:function(data){
this.contents=data;
return this;
},render:function(_ca2,_ca3){
return _ca3.concat(this.contents);
},isEmpty:function(){
return !dojo.trim(this.contents);
},clone:function(){
return this;
}});
dd._NodeList=dojo.extend(function(_ca4){
this.contents=_ca4||[];
this.last="";
},{push:function(node){
this.contents.push(node);
return this;
},concat:function(_ca5){
this.contents=this.contents.concat(_ca5);
return this;
},render:function(_ca6,_ca7){
for(var i=0;i<this.contents.length;i++){
_ca7=this.contents[i].render(_ca6,_ca7);
if(!_ca7){
throw new Error("Template must return buffer");
}
}
return _ca7;
},dummyRender:function(_ca8){
return this.render(_ca8,dd.Template.prototype.getBuffer()).toString();
},unrender:function(){
return arguments[1];
},clone:function(){
return this;
},rtrim:function(){
while(1){
i=this.contents.length-1;
if(this.contents[i] instanceof dd._TextNode&&this.contents[i].isEmpty()){
this.contents.pop();
}else{
break;
}
}
return this;
}});
dd._VarNode=dojo.extend(function(str){
this.contents=new dd._Filter(str);
},{render:function(_ca9,_caa){
var str=this.contents.resolve(_ca9);
if(!str.safe){
str=dd._base.escape(""+str);
}
return _caa.concat(str);
}});
dd._noOpNode=new function(){
this.render=this.unrender=function(){
return arguments[1];
};
this.clone=function(){
return this;
};
};
dd._Parser=dojo.extend(function(_cab){
this.contents=_cab;
},{i:0,parse:function(_cac){
var _cad={},_cae;
_cac=_cac||[];
for(var i=0;i<_cac.length;i++){
_cad[_cac[i]]=true;
}
var _caf=new dd._NodeList();
while(this.i<this.contents.length){
_cae=this.contents[this.i++];
if(typeof _cae=="string"){
_caf.push(new dd._TextNode(_cae));
}else{
var type=_cae[0];
var text=_cae[1];
if(type==dd.TOKEN_VAR){
_caf.push(new dd._VarNode(text));
}else{
if(type==dd.TOKEN_BLOCK){
if(_cad[text]){
--this.i;
return _caf;
}
var cmd=text.split(/\s+/g);
if(cmd.length){
cmd=cmd[0];
var fn=ddt.getTag(cmd);
if(fn){
_caf.push(fn(this,new dd.Token(type,text)));
}
}
}
}
}
}
if(_cac.length){
throw new Error("Could not find closing tag(s): "+_cac.toString());
}
this.contents.length=0;
return _caf;
},next_token:function(){
var _cb0=this.contents[this.i++];
return new dd.Token(_cb0[0],_cb0[1]);
},delete_first_token:function(){
this.i++;
},skip_past:function(_cb1){
while(this.i<this.contents.length){
var _cb2=this.contents[this.i++];
if(_cb2[0]==dd.TOKEN_BLOCK&&_cb2[1]==_cb1){
return;
}
}
throw new Error("Unclosed tag found when looking for "+_cb1);
},create_variable_node:function(expr){
return new dd._VarNode(expr);
},create_text_node:function(expr){
return new dd._TextNode(expr||"");
},getTemplate:function(file){
return new dd.Template(file);
}});
dd.register={_registry:{attributes:[],tags:[],filters:[]},get:function(_cb3,name){
var _cb4=dd.register._registry[_cb3+"s"];
for(var i=0,_cb5;_cb5=_cb4[i];i++){
if(typeof _cb5[0]=="string"){
if(_cb5[0]==name){
return _cb5;
}
}else{
if(name.match(_cb5[0])){
return _cb5;
}
}
}
},getAttributeTags:function(){
var tags=[];
var _cb6=dd.register._registry.attributes;
for(var i=0,_cb7;_cb7=_cb6[i];i++){
if(_cb7.length==3){
tags.push(_cb7);
}else{
var fn=dojo.getObject(_cb7[1]);
if(fn&&dojo.isFunction(fn)){
_cb7.push(fn);
tags.push(_cb7);
}
}
}
return tags;
},_any:function(type,base,_cb8){
for(var path in _cb8){
for(var i=0,fn;fn=_cb8[path][i];i++){
var key=fn;
if(dojo.isArray(fn)){
key=fn[0];
fn=fn[1];
}
if(typeof key=="string"){
if(key.substr(0,5)=="attr:"){
var attr=fn;
if(attr.substr(0,5)=="attr:"){
attr=attr.slice(5);
}
dd.register._registry.attributes.push([attr.toLowerCase(),base+"."+path+"."+attr]);
}
key=key.toLowerCase();
}
dd.register._registry[type].push([key,fn,base+"."+path]);
}
}
},tags:function(base,_cb9){
dd.register._any("tags",base,_cb9);
},filters:function(base,_cba){
dd.register._any("filters",base,_cba);
}};
var _cbb=/&/g;
var _cbc=/</g;
var _cbd=/>/g;
var _cbe=/'/g;
var _cbf=/"/g;
dd._base.escape=function(_cc0){
return dd.mark_safe(_cc0.replace(_cbb,"&amp;").replace(_cbc,"&lt;").replace(_cbd,"&gt;").replace(_cbf,"&quot;").replace(_cbe,"&#39;"));
};
dd._base.safe=function(_cc1){
if(typeof _cc1=="string"){
_cc1=new String(_cc1);
}
if(typeof _cc1=="object"){
_cc1.safe=true;
}
return _cc1;
};
dd.mark_safe=dd._base.safe;
dd.register.tags("dojox.dtl.tag",{"date":["now"],"logic":["if","for","ifequal","ifnotequal"],"loader":["extends","block","include","load","ssi"],"misc":["comment","debug","filter","firstof","spaceless","templatetag","widthratio","with"],"loop":["cycle","ifchanged","regroup"]});
dd.register.filters("dojox.dtl.filter",{"dates":["date","time","timesince","timeuntil"],"htmlstrings":["linebreaks","linebreaksbr","removetags","striptags"],"integers":["add","get_digit"],"lists":["dictsort","dictsortreversed","first","join","length","length_is","random","slice","unordered_list"],"logic":["default","default_if_none","divisibleby","yesno"],"misc":["filesizeformat","pluralize","phone2numeric","pprint"],"strings":["addslashes","capfirst","center","cut","fix_ampersands","floatformat","iriencode","linenumbers","ljust","lower","make_list","rjust","slugify","stringformat","title","truncatewords","truncatewords_html","upper","urlencode","urlize","urlizetrunc","wordcount","wordwrap"]});
dd.register.filters("dojox.dtl",{"_base":["escape","safe"]});
})();
}
if(!dojo._hasResource["dojox.dtl"]){
dojo._hasResource["dojox.dtl"]=true;
dojo.provide("dojox.dtl");
}
if(!dojo._hasResource["dojox.dtl.filter.htmlstrings"]){
dojo._hasResource["dojox.dtl.filter.htmlstrings"]=true;
dojo.provide("dojox.dtl.filter.htmlstrings");
dojo.mixin(dojox.dtl.filter.htmlstrings,{_linebreaksrn:/(\r\n|\n\r)/g,_linebreaksn:/\n{2,}/g,_linebreakss:/(^\s+|\s+$)/g,_linebreaksbr:/\n/g,_removetagsfind:/[a-z0-9]+/g,_striptags:/<[^>]*?>/g,linebreaks:function(_cc2){
var _cc3=[];
var dh=dojox.dtl.filter.htmlstrings;
_cc2=_cc2.replace(dh._linebreaksrn,"\n");
var _cc4=_cc2.split(dh._linebreaksn);
for(var i=0;i<_cc4.length;i++){
var part=_cc4[i].replace(dh._linebreakss,"").replace(dh._linebreaksbr,"<br />");
_cc3.push("<p>"+part+"</p>");
}
return _cc3.join("\n\n");
},linebreaksbr:function(_cc5){
var dh=dojox.dtl.filter.htmlstrings;
return _cc5.replace(dh._linebreaksrn,"\n").replace(dh._linebreaksbr,"<br />");
},removetags:function(_cc6,arg){
var dh=dojox.dtl.filter.htmlstrings;
var tags=[];
var _cc7;
while(_cc7=dh._removetagsfind.exec(arg)){
tags.push(_cc7[0]);
}
tags="("+tags.join("|")+")";
return _cc6.replace(new RegExp("</?s*"+tags+"s*[^>]*>","gi"),"");
},striptags:function(_cc8){
return _cc8.replace(dojox.dtl.filter.htmlstrings._striptags,"");
}});
}
if(!dojo._hasResource["dojox.string.sprintf"]){
dojo._hasResource["dojox.string.sprintf"]=true;
dojo.provide("dojox.string.sprintf");
dojox.string.sprintf=function(_cc9,_cca){
for(var args=[],i=1;i<arguments.length;i++){
args.push(arguments[i]);
}
var _ccb=new dojox.string.sprintf.Formatter(_cc9);
return _ccb.format.apply(_ccb,args);
};
dojox.string.sprintf.Formatter=function(_ccc){
var _ccd=[];
this._mapped=false;
this._format=_ccc;
this._tokens=dojox.string.tokenize(_ccc,this._re,this._parseDelim,this);
};
dojo.extend(dojox.string.sprintf.Formatter,{_re:/\%(?:\(([\w_]+)\)|([1-9]\d*)\$)?([0 +\-\#]*)(\*|\d+)?(\.)?(\*|\d+)?[hlL]?([\%scdeEfFgGiouxX])/g,_parseDelim:function(_cce,_ccf,_cd0,_cd1,_cd2,_cd3,_cd4){
if(_cce){
this._mapped=true;
}
return {mapping:_cce,intmapping:_ccf,flags:_cd0,_minWidth:_cd1,period:_cd2,_precision:_cd3,specifier:_cd4};
},_specifiers:{b:{base:2,isInt:true},o:{base:8,isInt:true},x:{base:16,isInt:true},X:{extend:["x"],toUpper:true},d:{base:10,isInt:true},i:{extend:["d"]},u:{extend:["d"],isUnsigned:true},c:{setArg:function(_cd5){
if(!isNaN(_cd5.arg)){
var num=parseInt(_cd5.arg);
if(num<0||num>127){
throw new Error("invalid character code passed to %c in sprintf");
}
_cd5.arg=isNaN(num)?""+num:String.fromCharCode(num);
}
}},s:{setMaxWidth:function(_cd6){
_cd6.maxWidth=(_cd6.period==".")?_cd6.precision:-1;
}},e:{isDouble:true,doubleNotation:"e"},E:{extend:["e"],toUpper:true},f:{isDouble:true,doubleNotation:"f"},F:{extend:["f"]},g:{isDouble:true,doubleNotation:"g"},G:{extend:["g"],toUpper:true}},format:function(_cd7){
if(this._mapped&&typeof _cd7!="object"){
throw new Error("format requires a mapping");
}
var str="";
var _cd8=0;
for(var i=0,_cd9;i<this._tokens.length;i++){
_cd9=this._tokens[i];
if(typeof _cd9=="string"){
str+=_cd9;
}else{
if(this._mapped){
if(typeof _cd7[_cd9.mapping]=="undefined"){
throw new Error("missing key "+_cd9.mapping);
}
_cd9.arg=_cd7[_cd9.mapping];
}else{
if(_cd9.intmapping){
var _cd8=parseInt(_cd9.intmapping)-1;
}
if(_cd8>=arguments.length){
throw new Error("got "+arguments.length+" printf arguments, insufficient for '"+this._format+"'");
}
_cd9.arg=arguments[_cd8++];
}
if(!_cd9.compiled){
_cd9.compiled=true;
_cd9.sign="";
_cd9.zeroPad=false;
_cd9.rightJustify=false;
_cd9.alternative=false;
var _cda={};
for(var fi=_cd9.flags.length;fi--;){
var flag=_cd9.flags.charAt(fi);
_cda[flag]=true;
switch(flag){
case " ":
_cd9.sign=" ";
break;
case "+":
_cd9.sign="+";
break;
case "0":
_cd9.zeroPad=(_cda["-"])?false:true;
break;
case "-":
_cd9.rightJustify=true;
_cd9.zeroPad=false;
break;
case "#":
_cd9.alternative=true;
break;
default:
throw Error("bad formatting flag '"+_cd9.flags.charAt(fi)+"'");
}
}
_cd9.minWidth=(_cd9._minWidth)?parseInt(_cd9._minWidth):0;
_cd9.maxWidth=-1;
_cd9.toUpper=false;
_cd9.isUnsigned=false;
_cd9.isInt=false;
_cd9.isDouble=false;
_cd9.precision=1;
if(_cd9.period=="."){
if(_cd9._precision){
_cd9.precision=parseInt(_cd9._precision);
}else{
_cd9.precision=0;
}
}
var _cdb=this._specifiers[_cd9.specifier];
if(typeof _cdb=="undefined"){
throw new Error("unexpected specifier '"+_cd9.specifier+"'");
}
if(_cdb.extend){
dojo.mixin(_cdb,this._specifiers[_cdb.extend]);
delete _cdb.extend;
}
dojo.mixin(_cd9,_cdb);
}
if(typeof _cd9.setArg=="function"){
_cd9.setArg(_cd9);
}
if(typeof _cd9.setMaxWidth=="function"){
_cd9.setMaxWidth(_cd9);
}
if(_cd9._minWidth=="*"){
if(this._mapped){
throw new Error("* width not supported in mapped formats");
}
_cd9.minWidth=parseInt(arguments[_cd8++]);
if(isNaN(_cd9.minWidth)){
throw new Error("the argument for * width at position "+_cd8+" is not a number in "+this._format);
}
if(_cd9.minWidth<0){
_cd9.rightJustify=true;
_cd9.minWidth=-_cd9.minWidth;
}
}
if(_cd9._precision=="*"&&_cd9.period=="."){
if(this._mapped){
throw new Error("* precision not supported in mapped formats");
}
_cd9.precision=parseInt(arguments[_cd8++]);
if(isNaN(_cd9.precision)){
throw Error("the argument for * precision at position "+_cd8+" is not a number in "+this._format);
}
if(_cd9.precision<0){
_cd9.precision=1;
_cd9.period="";
}
}
if(_cd9.isInt){
if(_cd9.period=="."){
_cd9.zeroPad=false;
}
this.formatInt(_cd9);
}else{
if(_cd9.isDouble){
if(_cd9.period!="."){
_cd9.precision=6;
}
this.formatDouble(_cd9);
}
}
this.fitField(_cd9);
str+=""+_cd9.arg;
}
}
return str;
},_zeros10:"0000000000",_spaces10:"          ",formatInt:function(_cdc){
var i=parseInt(_cdc.arg);
if(!isFinite(i)){
if(typeof _cdc.arg!="number"){
throw new Error("format argument '"+_cdc.arg+"' not an integer; parseInt returned "+i);
}
i=0;
}
if(i<0&&(_cdc.isUnsigned||_cdc.base!=10)){
i=4294967295+i+1;
}
if(i<0){
_cdc.arg=(-i).toString(_cdc.base);
this.zeroPad(_cdc);
_cdc.arg="-"+_cdc.arg;
}else{
_cdc.arg=i.toString(_cdc.base);
if(!i&&!_cdc.precision){
_cdc.arg="";
}else{
this.zeroPad(_cdc);
}
if(_cdc.sign){
_cdc.arg=_cdc.sign+_cdc.arg;
}
}
if(_cdc.base==16){
if(_cdc.alternative){
_cdc.arg="0x"+_cdc.arg;
}
_cdc.arg=_cdc.toUpper?_cdc.arg.toUpperCase():_cdc.arg.toLowerCase();
}
if(_cdc.base==8){
if(_cdc.alternative&&_cdc.arg.charAt(0)!="0"){
_cdc.arg="0"+_cdc.arg;
}
}
},formatDouble:function(_cdd){
var f=parseFloat(_cdd.arg);
if(!isFinite(f)){
if(typeof _cdd.arg!="number"){
throw new Error("format argument '"+_cdd.arg+"' not a float; parseFloat returned "+f);
}
f=0;
}
switch(_cdd.doubleNotation){
case "e":
_cdd.arg=f.toExponential(_cdd.precision);
break;
case "f":
_cdd.arg=f.toFixed(_cdd.precision);
break;
case "g":
if(Math.abs(f)<0.0001){
_cdd.arg=f.toExponential(_cdd.precision>0?_cdd.precision-1:_cdd.precision);
}else{
_cdd.arg=f.toPrecision(_cdd.precision);
}
if(!_cdd.alternative){
_cdd.arg=_cdd.arg.replace(/(\..*[^0])0*/,"$1");
_cdd.arg=_cdd.arg.replace(/\.0*e/,"e").replace(/\.0$/,"");
}
break;
default:
throw new Error("unexpected double notation '"+_cdd.doubleNotation+"'");
}
_cdd.arg=_cdd.arg.replace(/e\+(\d)$/,"e+0$1").replace(/e\-(\d)$/,"e-0$1");
if(dojo.isOpera){
_cdd.arg=_cdd.arg.replace(/^\./,"0.");
}
if(_cdd.alternative){
_cdd.arg=_cdd.arg.replace(/^(\d+)$/,"$1.");
_cdd.arg=_cdd.arg.replace(/^(\d+)e/,"$1.e");
}
if(f>=0&&_cdd.sign){
_cdd.arg=_cdd.sign+_cdd.arg;
}
_cdd.arg=_cdd.toUpper?_cdd.arg.toUpperCase():_cdd.arg.toLowerCase();
},zeroPad:function(_cde,_cdf){
_cdf=(arguments.length==2)?_cdf:_cde.precision;
if(typeof _cde.arg!="string"){
_cde.arg=""+_cde.arg;
}
var _ce0=_cdf-10;
while(_cde.arg.length<_ce0){
_cde.arg=(_cde.rightJustify)?_cde.arg+this._zeros10:this._zeros10+_cde.arg;
}
var pad=_cdf-_cde.arg.length;
_cde.arg=(_cde.rightJustify)?_cde.arg+this._zeros10.substring(0,pad):this._zeros10.substring(0,pad)+_cde.arg;
},fitField:function(_ce1){
if(_ce1.maxWidth>=0&&_ce1.arg.length>_ce1.maxWidth){
return _ce1.arg.substring(0,_ce1.maxWidth);
}
if(_ce1.zeroPad){
this.zeroPad(_ce1,_ce1.minWidth);
return;
}
this.spacePad(_ce1);
},spacePad:function(_ce2,_ce3){
_ce3=(arguments.length==2)?_ce3:_ce2.minWidth;
if(typeof _ce2.arg!="string"){
_ce2.arg=""+_ce2.arg;
}
var _ce4=_ce3-10;
while(_ce2.arg.length<_ce4){
_ce2.arg=(_ce2.rightJustify)?_ce2.arg+this._spaces10:this._spaces10+_ce2.arg;
}
var pad=_ce3-_ce2.arg.length;
_ce2.arg=(_ce2.rightJustify)?_ce2.arg+this._spaces10.substring(0,pad):this._spaces10.substring(0,pad)+_ce2.arg;
}});
}
if(!dojo._hasResource["dojox.dtl.filter.strings"]){
dojo._hasResource["dojox.dtl.filter.strings"]=true;
dojo.provide("dojox.dtl.filter.strings");
dojo.mixin(dojox.dtl.filter.strings,{_urlquote:function(url,safe){
if(!safe){
safe="/";
}
return dojox.string.tokenize(url,/([^\w-_.])/g,function(_ce5){
if(safe.indexOf(_ce5)==-1){
if(_ce5==" "){
return "+";
}else{
return "%"+_ce5.charCodeAt(0).toString(16).toUpperCase();
}
}
return _ce5;
}).join("");
},addslashes:function(_ce6){
return _ce6.replace(/\\/g,"\\\\").replace(/"/g,"\\\"").replace(/'/g,"\\'");
},capfirst:function(_ce7){
_ce7=""+_ce7;
return _ce7.charAt(0).toUpperCase()+_ce7.substring(1);
},center:function(_ce8,arg){
arg=arg||_ce8.length;
_ce8=_ce8+"";
var diff=arg-_ce8.length;
if(diff%2){
_ce8=_ce8+" ";
diff-=1;
}
for(var i=0;i<diff;i+=2){
_ce8=" "+_ce8+" ";
}
return _ce8;
},cut:function(_ce9,arg){
arg=arg+""||"";
_ce9=_ce9+"";
return _ce9.replace(new RegExp(arg,"g"),"");
},_fix_ampersands:/&(?!(\w+|#\d+);)/g,fix_ampersands:function(_cea){
return _cea.replace(dojox.dtl.filter.strings._fix_ampersands,"&amp;");
},floatformat:function(_ceb,arg){
arg=parseInt(arg||-1,10);
_ceb=parseFloat(_ceb);
var m=_ceb-_ceb.toFixed(0);
if(!m&&arg<0){
return _ceb.toFixed();
}
_ceb=_ceb.toFixed(Math.abs(arg));
return (arg<0)?parseFloat(_ceb)+"":_ceb;
},iriencode:function(_cec){
return dojox.dtl.filter.strings._urlquote(_cec,"/#%[]=:;$&()+,!");
},linenumbers:function(_ced){
var df=dojox.dtl.filter;
var _cee=_ced.split("\n");
var _cef=[];
var _cf0=(_cee.length+"").length;
for(var i=0,line;i<_cee.length;i++){
line=_cee[i];
_cef.push(df.strings.ljust(i+1,_cf0)+". "+dojox.dtl._base.escape(line));
}
return _cef.join("\n");
},ljust:function(_cf1,arg){
_cf1=_cf1+"";
arg=parseInt(arg,10);
while(_cf1.length<arg){
_cf1=_cf1+" ";
}
return _cf1;
},lower:function(_cf2){
return (_cf2+"").toLowerCase();
},make_list:function(_cf3){
var _cf4=[];
if(typeof _cf3=="number"){
_cf3=_cf3+"";
}
if(_cf3.charAt){
for(var i=0;i<_cf3.length;i++){
_cf4.push(_cf3.charAt(i));
}
return _cf4;
}
if(typeof _cf3=="object"){
for(var key in _cf3){
_cf4.push(_cf3[key]);
}
return _cf4;
}
return [];
},rjust:function(_cf5,arg){
_cf5=_cf5+"";
arg=parseInt(arg,10);
while(_cf5.length<arg){
_cf5=" "+_cf5;
}
return _cf5;
},slugify:function(_cf6){
_cf6=_cf6.replace(/[^\w\s-]/g,"").toLowerCase();
return _cf6.replace(/[\-\s]+/g,"-");
},_strings:{},stringformat:function(_cf7,arg){
arg=""+arg;
var _cf8=dojox.dtl.filter.strings._strings;
if(!_cf8[arg]){
_cf8[arg]=new dojox.string.sprintf.Formatter("%"+arg);
}
return _cf8[arg].format(_cf7);
},title:function(_cf9){
var last,_cfa="";
for(var i=0,_cfb;i<_cf9.length;i++){
_cfb=_cf9.charAt(i);
if(last==" "||last=="\n"||last=="\t"||!last){
_cfa+=_cfb.toUpperCase();
}else{
_cfa+=_cfb.toLowerCase();
}
last=_cfb;
}
return _cfa;
},_truncatewords:/[ \n\r\t]/,truncatewords:function(_cfc,arg){
arg=parseInt(arg,10);
if(!arg){
return _cfc;
}
for(var i=0,j=_cfc.length,_cfd=0,_cfe,last;i<_cfc.length;i++){
_cfe=_cfc.charAt(i);
if(dojox.dtl.filter.strings._truncatewords.test(last)){
if(!dojox.dtl.filter.strings._truncatewords.test(_cfe)){
++_cfd;
if(_cfd==arg){
return _cfc.substring(0,j+1);
}
}
}else{
if(!dojox.dtl.filter.strings._truncatewords.test(_cfe)){
j=i;
}
}
last=_cfe;
}
return _cfc;
},_truncate_words:/(&.*?;|<.*?>|(\w[\w\-]*))/g,_truncate_tag:/<(\/)?([^ ]+?)(?: (\/)| .*?)?>/,_truncate_singlets:{br:true,col:true,link:true,base:true,img:true,param:true,area:true,hr:true,input:true},truncatewords_html:function(_cff,arg){
arg=parseInt(arg,10);
if(arg<=0){
return "";
}
var _d00=dojox.dtl.filter.strings;
var _d01=0;
var open=[];
var _d02=dojox.string.tokenize(_cff,_d00._truncate_words,function(all,word){
if(word){
++_d01;
if(_d01<arg){
return word;
}else{
if(_d01==arg){
return word+" ...";
}
}
}
var tag=all.match(_d00._truncate_tag);
if(!tag||_d01>=arg){
return;
}
var _d03=tag[1];
var _d04=tag[2].toLowerCase();
var _d05=tag[3];
if(_d03||_d00._truncate_singlets[_d04]){
}else{
if(_d03){
var i=dojo.indexOf(open,_d04);
if(i!=-1){
open=open.slice(i+1);
}
}else{
open.unshift(_d04);
}
}
return all;
}).join("");
_d02=_d02.replace(/\s+$/g,"");
for(var i=0,tag;tag=open[i];i++){
_d02+="</"+tag+">";
}
return _d02;
},upper:function(_d06){
return _d06.toUpperCase();
},urlencode:function(_d07){
return dojox.dtl.filter.strings._urlquote(_d07);
},_urlize:/^((?:[(>]|&lt;)*)(.*?)((?:[.,)>\n]|&gt;)*)$/,_urlize2:/^\S+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+$/,urlize:function(_d08){
return dojox.dtl.filter.strings.urlizetrunc(_d08);
},urlizetrunc:function(_d09,arg){
arg=parseInt(arg);
return dojox.string.tokenize(_d09,/(\S+)/g,function(word){
var _d0a=dojox.dtl.filter.strings._urlize.exec(word);
if(!_d0a){
return word;
}
var lead=_d0a[1];
var _d0b=_d0a[2];
var _d0c=_d0a[3];
var _d0d=_d0b.indexOf("www.")==0;
var _d0e=_d0b.indexOf("@")!=-1;
var _d0f=_d0b.indexOf(":")!=-1;
var _d10=_d0b.indexOf("http://")==0;
var _d11=_d0b.indexOf("https://")==0;
var _d12=/[a-zA-Z0-9]/.test(_d0b.charAt(0));
var _d13=_d0b.substring(_d0b.length-4);
var _d14=_d0b;
if(arg>3){
_d14=_d14.substring(0,arg-3)+"...";
}
if(_d0d||(!_d0e&&!_d10&&_d0b.length&&_d12&&(_d13==".org"||_d13==".net"||_d13==".com"))){
return "<a href=\"http://"+_d0b+"\" rel=\"nofollow\">"+_d14+"</a>";
}else{
if(_d10||_d11){
return "<a href=\""+_d0b+"\" rel=\"nofollow\">"+_d14+"</a>";
}else{
if(_d0e&&!_d0d&&!_d0f&&dojox.dtl.filter.strings._urlize2.test(_d0b)){
return "<a href=\"mailto:"+_d0b+"\">"+_d0b+"</a>";
}
}
}
return word;
}).join("");
},wordcount:function(_d15){
_d15=dojo.trim(_d15);
if(!_d15){
return 0;
}
return _d15.split(/\s+/g).length;
},wordwrap:function(_d16,arg){
arg=parseInt(arg);
var _d17=[];
var _d18=_d16.split(/\s+/g);
if(_d18.length){
var word=_d18.shift();
_d17.push(word);
var pos=word.length-word.lastIndexOf("\n")-1;
for(var i=0;i<_d18.length;i++){
word=_d18[i];
if(word.indexOf("\n")!=-1){
var _d19=word.split(/\n/g);
}else{
var _d19=[word];
}
pos+=_d19[0].length+1;
if(arg&&pos>arg){
_d17.push("\n");
pos=_d19[_d19.length-1].length;
}else{
_d17.push(" ");
if(_d19.length>1){
pos=_d19[_d19.length-1].length;
}
}
_d17.push(word);
}
}
return _d17.join("");
}});
}
if(!dojo._hasResource["dojox.widget.Wizard"]){
dojo._hasResource["dojox.widget.Wizard"]=true;
dojo.provide("dojox.widget.Wizard");
dojo.declare("dojox.widget.Wizard",[dijit.layout.StackContainer,dijit._Templated],{widgetsInTemplate:true,templateString:dojo.cache("dojox.widget","Wizard/Wizard.html","<div class=\"dojoxWizard\" dojoAttachPoint=\"wizardNode\">\r\n    <div class=\"dojoxWizardContainer\" dojoAttachPoint=\"containerNode\"></div>\r\n    <div class=\"dojoxWizardButtons\" dojoAttachPoint=\"wizardNav\">\r\n        <button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachPoint=\"previousButton\">${previousButtonLabel}</button>\r\n        <button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachPoint=\"nextButton\">${nextButtonLabel}</button>\r\n        <button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachPoint=\"doneButton\" style=\"display:none\">${doneButtonLabel}</button>\r\n        <button dojoType=\"dijit.form.Button\" type=\"button\" dojoAttachPoint=\"cancelButton\">${cancelButtonLabel}</button>\r\n    </div>\r\n</div>\r\n"),nextButtonLabel:"",previousButtonLabel:"",cancelButtonLabel:"",doneButtonLabel:"",cancelFunction:null,hideDisabled:false,postMixInProperties:function(){
this.inherited(arguments);
var _d1a=dojo.mixin({cancel:dojo.i18n.getLocalization("dijit","common",this.lang).buttonCancel},dojo.i18n.getLocalization("dojox.widget","Wizard",this.lang));
var prop;
for(prop in _d1a){
if(!this[prop+"ButtonLabel"]){
this[prop+"ButtonLabel"]=_d1a[prop];
}
}
},startup:function(){
if(this._started){
return;
}
this.inherited(arguments);
this.connect(this.nextButton,"onClick","_forward");
this.connect(this.previousButton,"onClick","back");
if(this.cancelFunction){
if(dojo.isString(this.cancelFunction)){
this.cancelFunction=dojo.getObject(this.cancelFunction);
}
this.connect(this.cancelButton,"onClick",this.cancelFunction);
}else{
this.cancelButton.domNode.style.display="none";
}
this.connect(this.doneButton,"onClick","done");
this._subscription=dojo.subscribe(this.id+"-selectChild",dojo.hitch(this,"_checkButtons"));
this._started=true;
},resize:function(){
this.inherited(arguments);
this._checkButtons();
},_checkButtons:function(){
var sw=this.selectedChildWidget;
var _d1b=sw.isLastChild;
this.nextButton.set("disabled",_d1b);
this._setButtonClass(this.nextButton);
if(sw.doneFunction){
this.doneButton.domNode.style.display="";
if(_d1b){
this.nextButton.domNode.style.display="none";
}
}else{
this.doneButton.domNode.style.display="none";
}
this.previousButton.set("disabled",!this.selectedChildWidget.canGoBack);
this._setButtonClass(this.previousButton);
},_setButtonClass:function(_d1c){
_d1c.domNode.style.display=(this.hideDisabled&&_d1c.disabled)?"none":"";
},_forward:function(){
if(this.selectedChildWidget._checkPass()){
this.forward();
}
},done:function(){
this.selectedChildWidget.done();
},destroy:function(){
dojo.unsubscribe(this._subscription);
this.inherited(arguments);
}});
dojo.declare("dojox.widget.WizardPane",dijit.layout.ContentPane,{canGoBack:true,passFunction:null,doneFunction:null,startup:function(){
this.inherited(arguments);
if(this.isFirstChild){
this.canGoBack=false;
}
if(dojo.isString(this.passFunction)){
this.passFunction=dojo.getObject(this.passFunction);
}
if(dojo.isString(this.doneFunction)&&this.doneFunction){
this.doneFunction=dojo.getObject(this.doneFunction);
}
},_onShow:function(){
if(this.isFirstChild){
this.canGoBack=false;
}
this.inherited(arguments);
},_checkPass:function(){
var r=true;
if(this.passFunction&&dojo.isFunction(this.passFunction)){
var _d1d=this.passFunction();
switch(typeof _d1d){
case "boolean":
r=_d1d;
break;
case "string":
alert(_d1d);
r=false;
break;
}
}
return r;
},done:function(){
if(this.doneFunction&&dojo.isFunction(this.doneFunction)){
this.doneFunction();
}
}});
}
if(!dojo._hasResource["dojox.widget.Standby"]){
dojo._hasResource["dojox.widget.Standby"]=true;
dojo.provide("dojox.widget.Standby");
dojo.experimental("dojox.widget.Standby");
dojo.declare("dojox.widget.Standby",[dijit._Widget,dijit._Templated],{templateString:"<div>"+"<div style=\"display: none; opacity: 0; z-index: 9999; "+"position: absolute; cursor:wait;\" dojoAttachPoint=\"_underlayNode\"></div>"+"<img src=\"${image}\" style=\"opacity: 0; display: none; z-index: -10000; "+"position: absolute; top: 0px; left: 0px; cursor:wait;\" "+"dojoAttachPoint=\"_imageNode\">"+"<div style=\"opacity: 0; display: none; z-index: -10000; position: absolute; "+"top: 0px;\" dojoAttachPoint=\"_textNode\"></div>"+"</div>",_underlayNode:null,_imageNode:null,_textNode:null,_centerNode:null,image:dojo.moduleUrl("dojox","widget/Standby/images/loading.gif").toString(),imageText:"Please Wait...",text:"Please wait...",centerIndicator:"image",_displayed:false,_resizeCheck:null,target:"",color:"#C0C0C0",duration:500,_started:false,_parent:null,zIndex:"auto",startup:function(args){
if(!this._started){
if(typeof this.target==="string"){
var w=dijit.byId(this.target);
if(w){
this.target=w.domNode;
}else{
this.target=dojo.byId(this.target);
}
}
if(this.text){
this._textNode.innerHTML=this.text;
}
if(this.centerIndicator==="image"){
this._centerNode=this._imageNode;
dojo.attr(this._imageNode,"src",this.image);
dojo.attr(this._imageNode,"alt",this.imageText);
}else{
this._centerNode=this._textNode;
}
dojo.style(this._underlayNode,{display:"none",backgroundColor:this.color});
dojo.style(this._centerNode,"display","none");
this.connect(this._underlayNode,"onclick","_ignore");
if(this.domNode.parentNode&&this.domNode.parentNode!=dojo.body()){
dojo.body().appendChild(this.domNode);
}
if(dojo.isIE==7){
this._ieFixNode=dojo.doc.createElement("div");
dojo.style(this._ieFixNode,{opacity:"0",zIndex:"-1000",position:"absolute",top:"-1000px"});
dojo.body().appendChild(this._ieFixNode);
}
}
},show:function(){
if(!this._displayed){
if(this._anim){
this._anim.stop();
delete this._anim;
}
this._displayed=true;
this._size();
this._disableOverflow();
this._fadeIn();
}
},hide:function(){
if(this._displayed){
if(this._anim){
this._anim.stop();
delete this._anim;
}
this._size();
this._fadeOut();
this._displayed=false;
if(this._resizeCheck!==null){
clearInterval(this._resizeCheck);
this._resizeCheck=null;
}
}
},isVisible:function(){
return this._displayed;
},onShow:function(){
},onHide:function(){
},uninitialize:function(){
this._displayed=false;
if(this._resizeCheck){
clearInterval(this._resizeCheck);
}
dojo.style(this._centerNode,"display","none");
dojo.style(this._underlayNode,"display","none");
if(dojo.isIE==7){
dojo.body().removeChild(this._ieFixNode);
delete this._ieFixNode;
}
if(this._anim){
this._anim.stop();
delete this._anim;
}
this.target=null;
this._imageNode=null;
this._textNode=null;
this._centerNode=null;
this.inherited(arguments);
},_size:function(){
if(this._displayed){
var dir=dojo.attr(dojo.body(),"dir");
if(dir){
dir=dir.toLowerCase();
}
var _d1e;
var _d1f=this._scrollerWidths();
var _d20=this.target;
var _d21=dojo.style(this._centerNode,"display");
dojo.style(this._centerNode,"display","block");
var box=dojo.position(_d20,true);
if(_d20===dojo.body()||_d20===dojo.doc){
box=dojo.window.getBox();
box.x=box.l;
box.y=box.t;
}
var _d22=dojo.marginBox(this._centerNode);
dojo.style(this._centerNode,"display",_d21);
if(this._ieFixNode){
_d1e=-this._ieFixNode.offsetTop/1000;
box.x=Math.floor((box.x+0.9)/_d1e);
box.y=Math.floor((box.y+0.9)/_d1e);
box.w=Math.floor((box.w+0.9)/_d1e);
box.h=Math.floor((box.h+0.9)/_d1e);
}
var zi=dojo.style(_d20,"zIndex");
var ziUl=zi;
var ziIn=zi;
if(this.zIndex==="auto"){
if(zi!="auto"){
ziUl=parseInt(ziUl,10)+1;
ziIn=parseInt(ziIn,10)+2;
}else{
var _d23=_d20.parentNode;
var _d24=-100000;
while(_d23&&_d23!==dojo.body()){
zi=dojo.style(_d23,"zIndex");
if(!zi||zi==="auto"){
_d23=_d23.parentNode;
}else{
var _d25=parseInt(zi,10);
if(_d24<_d25){
_d24=_d25;
ziUl=_d25+1;
ziIn=_d25+2;
}
_d23=_d23.parentNode;
}
}
}
}else{
ziUl=parseInt(this.zIndex,10)+1;
ziIn=parseInt(this.zIndex,10)+2;
}
dojo.style(this._centerNode,"zIndex",ziIn);
dojo.style(this._underlayNode,"zIndex",ziUl);
var pn=_d20.parentNode;
if(pn&&pn!==dojo.body()&&_d20!==dojo.body()&&_d20!==dojo.doc){
var obh=box.h;
var obw=box.w;
var _d26=dojo.position(pn,true);
if(this._ieFixNode){
_d1e=-this._ieFixNode.offsetTop/1000;
_d26.x=Math.floor((_d26.x+0.9)/_d1e);
_d26.y=Math.floor((_d26.y+0.9)/_d1e);
_d26.w=Math.floor((_d26.w+0.9)/_d1e);
_d26.h=Math.floor((_d26.h+0.9)/_d1e);
}
_d26.w-=pn.scrollHeight>pn.clientHeight&&pn.clientHeight>0?_d1f.v:0;
_d26.h-=pn.scrollWidth>pn.clientWidth&&pn.clientWidth>0?_d1f.h:0;
if(dir==="rtl"){
if(dojo.isOpera){
box.x+=pn.scrollHeight>pn.clientHeight&&pn.clientHeight>0?_d1f.v:0;
_d26.x+=pn.scrollHeight>pn.clientHeight&&pn.clientHeight>0?_d1f.v:0;
}else{
if(dojo.isIE){
_d26.x+=pn.scrollHeight>pn.clientHeight&&pn.clientHeight>0?_d1f.v:0;
}else{
if(dojo.isWebKit){
}
}
}
}
if(_d26.w<box.w){
box.w=box.w-_d26.w;
}
if(_d26.h<box.h){
box.h=box.h-_d26.h;
}
var _d27=_d26.y;
var _d28=_d26.y+_d26.h;
var bTop=box.y;
var _d29=box.y+obh;
var _d2a=_d26.x;
var _d2b=_d26.x+_d26.w;
var _d2c=box.x;
var _d2d=box.x+obw;
var _d2e;
if(_d29>_d27&&bTop<_d27){
box.y=_d26.y;
_d2e=_d27-bTop;
var _d2f=obh-_d2e;
if(_d2f<_d26.h){
box.h=_d2f;
}else{
box.h-=2*(pn.scrollWidth>pn.clientWidth&&pn.clientWidth>0?_d1f.h:0);
}
}else{
if(bTop<_d28&&_d29>_d28){
box.h=_d28-bTop;
}else{
if(_d29<=_d27||bTop>=_d28){
box.h=0;
}
}
}
if(_d2d>_d2a&&_d2c<_d2a){
box.x=_d26.x;
_d2e=_d2a-_d2c;
var _d30=obw-_d2e;
if(_d30<_d26.w){
box.w=_d30;
}else{
box.w-=2*(pn.scrollHeight>pn.clientHeight&&pn.clientHeight>0?_d1f.w:0);
}
}else{
if(_d2c<_d2b&&_d2d>_d2b){
box.w=_d2b-_d2c;
}else{
if(_d2d<=_d2a||_d2c>=_d2b){
box.w=0;
}
}
}
}
if(box.h>0&&box.w>0){
dojo.style(this._underlayNode,{display:"block",width:box.w+"px",height:box.h+"px",top:box.y+"px",left:box.x+"px"});
var _d31=["borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"];
this._cloneStyles(_d31);
if(!dojo.isIE){
_d31=["MozBorderRadius","MozBorderRadiusTopleft","MozBorderRadiusTopright","MozBorderRadiusBottomleft","MozBorderRadiusBottomright","WebkitBorderRadius","WebkitBorderTopLeftRadius","WebkitBorderTopRightRadius","WebkitBorderBottomLeftRadius","WebkitBorderBottomRightRadius"];
this._cloneStyles(_d31,this);
}
var _d32=(box.h/2)-(_d22.h/2);
var _d33=(box.w/2)-(_d22.w/2);
if(box.h>=_d22.h&&box.w>=_d22.w){
dojo.style(this._centerNode,{top:(_d32+box.y)+"px",left:(_d33+box.x)+"px",display:"block"});
}else{
dojo.style(this._centerNode,"display","none");
}
}else{
dojo.style(this._underlayNode,"display","none");
dojo.style(this._centerNode,"display","none");
}
if(this._resizeCheck===null){
var self=this;
this._resizeCheck=setInterval(function(){
self._size();
},100);
}
}
},_cloneStyles:function(list){
dojo.forEach(list,function(_d34){
dojo.style(this._underlayNode,_d34,dojo.style(this.target,_d34));
},this);
},_fadeIn:function(){
var self=this;
var _d35=dojo.animateProperty({duration:self.duration,node:self._underlayNode,properties:{opacity:{start:0,end:0.75}}});
var _d36=dojo.animateProperty({duration:self.duration,node:self._centerNode,properties:{opacity:{start:0,end:1}},onEnd:function(){
self.onShow();
delete self._anim;
}});
this._anim=dojo.fx.combine([_d35,_d36]);
this._anim.play();
},_fadeOut:function(){
var self=this;
var _d37=dojo.animateProperty({duration:self.duration,node:self._underlayNode,properties:{opacity:{start:0.75,end:0}},onEnd:function(){
dojo.style(this.node,{"display":"none","zIndex":"-1000"});
}});
var _d38=dojo.animateProperty({duration:self.duration,node:self._centerNode,properties:{opacity:{start:1,end:0}},onEnd:function(){
dojo.style(this.node,{"display":"none","zIndex":"-1000"});
self.onHide();
self._enableOverflow();
delete self._anim;
}});
this._anim=dojo.fx.combine([_d37,_d38]);
this._anim.play();
},_ignore:function(_d39){
if(_d39){
dojo.stopEvent(_d39);
}
},_scrollerWidths:function(){
var div=dojo.doc.createElement("div");
dojo.style(div,{position:"absolute",opacity:0,overflow:"hidden",width:"50px",height:"50px",zIndex:"-100",top:"-200px",left:"-200px",padding:"0px",margin:"0px"});
var iDiv=dojo.doc.createElement("div");
dojo.style(iDiv,{width:"200px",height:"10px"});
div.appendChild(iDiv);
dojo.body().appendChild(div);
var b=dojo.contentBox(div);
dojo.style(div,"overflow","scroll");
var a=dojo.contentBox(div);
dojo.body().removeChild(div);
return {v:b.w-a.w,h:b.h-a.h};
},_setTextAttr:function(text){
this._textNode.innerHTML=text;
this.text=text;
},_setColorAttr:function(c){
dojo.style(this._underlayNode,"backgroundColor",c);
this.color=c;
},_setImageTextAttr:function(text){
dojo.attr(this._imageNode,"alt",text);
this.imageText=text;
},_setImageAttr:function(url){
dojo.attr(this._imageNode,"src",url);
this.image=url;
},_setCenterIndicatorAttr:function(_d3a){
this.centerIndicator=_d3a;
if(_d3a==="image"){
this._centerNode=this._imageNode;
dojo.style(this._textNode,"display","none");
}else{
this._centerNode=this._textNode;
dojo.style(this._imageNode,"display","none");
}
},_disableOverflow:function(){
if(this.target===dojo.body()||this.target===dojo.doc){
this._overflowDisabled=true;
var body=dojo.body();
if(body.style&&body.style.overflow){
this._oldOverflow=dojo.style(body,"overflow");
}else{
this._oldOverflow="";
}
if(dojo.isIE&&!dojo.isQuirks){
if(body.parentNode&&body.parentNode.style&&body.parentNode.style.overflow){
this._oldBodyParentOverflow=body.parentNode.style.overflow;
}else{
try{
this._oldBodyParentOverflow=dojo.style(body.parentNode,"overflow");
}
catch(e){
this._oldBodyParentOverflow="scroll";
}
}
dojo.style(body.parentNode,"overflow","hidden");
}
dojo.style(body,"overflow","hidden");
}
},_enableOverflow:function(){
if(this._overflowDisabled){
delete this._overflowDisabled;
var body=dojo.body();
if(dojo.isIE&&!dojo.isQuirks){
body.parentNode.style.overflow=this._oldBodyParentOverflow;
delete this._oldBodyParentOverflow;
}
dojo.style(body,"overflow",this._oldOverflow);
if(dojo.isWebKit){
var div=dojo.create("div",{style:{height:"2px"}});
body.appendChild(div);
setTimeout(function(){
body.removeChild(div);
},0);
}
delete this._oldOverflow;
}
}});
}
if(!dojo._hasResource["dijit.form.RadioButton"]){
dojo._hasResource["dijit.form.RadioButton"]=true;
dojo.provide("dijit.form.RadioButton");
}
if(!dojo._hasResource["pion._base.error"]){
dojo._hasResource["pion._base.error"]=true;
dojo.provide("pion._base.error");
dojo.declare("pion._base.error.ServerErrorDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog pion_server_error_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Pion Server Error</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\">\r\n\t\t<p class=\"message_text_area\"></p>\r\n\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t<button dojoType=dijit.form.Button class=\"open_kb\" dojoAttachEvent=\"onClick: openKB\">Open Pion Knowledge Base</button>\r\n\t\t\t<button dojoType=dijit.form.Button class=\"ok\" dojoAttachEvent=\"onClick: onCancel\">OK</button>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",widgetsInTemplate:true,postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},postCreate:function(){
this.inherited("postCreate",arguments);
var _d3b=this;
dojo.query("p.message_text_area",this.domNode).forEach(function(n){
n.innerHTML=_d3b.response_text.replace(/</g,"&lt;").replace(/>/g,"&gt;");
});
},openKB:function(){
var _d3c=this.response_text.split(":")[0];
var _d3d=encodeURIComponent("\""+_d3c+"\"");
window.open("http://pion.org/search/node/"+_d3d+"%20type%3Akb");
this.onCancel();
}});
dojo.declare("pion._base.error.ServerResponseErrorDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog pion_server_error_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Pion Server Response Error</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\">\r\n\t\t<p class=\"status_code\"></p>\r\n\t\t<p class=\"url\"></p>\r\n\t\t<p><label>Response Text:</label></p>\r\n\t\t<div dojoType=\"dijit.layout.ContentPane\" dojoAttachPoint=\"response_pane\" style=\"border: 1px solid; padding: 8px; margin-bottom: 10px\" >\"\r\n\t\t</div>\r\n\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t<span dojoAttachPoint=\"kb_button\" class=\"hidden\">\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"open_kb\" dojoAttachEvent=\"onClick: openKB\">Open Pion Knowledge Base</button>\r\n\t\t\t</span>\r\n\t\t\t<button dojoType=dijit.form.Button class=\"ok\" dojoAttachEvent=\"onClick: onCancel\">OK</button>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",widgetsInTemplate:true,postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},postCreate:function(){
this.inherited("postCreate",arguments);
var _d3e=this;
dojo.query("p.status_code",this.domNode).forEach(function(n){
n.innerHTML="<label>Status Code: </label> "+_d3e.status_code;
});
dojo.query("p.url",this.domNode).forEach(function(n){
n.innerHTML="<label>URL:</label> "+_d3e.url;
});
var _d3f=this.response_text.match(/<strong>\n*([\w\W]*)<\/strong>/m);
if(_d3f){
dojo.removeClass(this.kb_button,"hidden");
this.kb_string=_d3f[1].replace(/\n/g," ").replace(/\s+/g," ");
}
this.response_pane.set("content",this.response_text);
},openKB:function(){
var _d40=this.kb_string.split(":")[0];
var _d41=encodeURIComponent("\""+_d40+"\"");
window.open("http://pion.org/search/node/"+_d41+"%20type%3Akb");
this.onCancel();
}});
pion.handleXhrError=function(_d42,_d43,_d44,_d45){
console.error("In pion.handleXhrError: response = ",_d42,", ioArgs.args = ",_d43.args);
if(_d43.xhr.status==401){
if(pion.login.login_pending){
var h=dojo.connect(pion.login,"onLoginSuccess",function(){
dojo.disconnect(h);
_d44(_d43.args);
});
}else{
if(!dojo.cookie("logged_in")){
if(window.location.search){
location.replace("login.html"+window.location.search+"&pathname="+window.location.pathname);
}else{
location.replace("login.html"+"?pathname="+window.location.pathname);
}
}
pion.login.doLoginDialog({success_callback:function(){
_d44(_d43.args);
}});
}
return;
}else{
if(_d43.xhr.status==500){
var _d46=new pion._base.error.ServerErrorDialog({response_text:_d42.responseText});
_d46.show();
}else{
var _d46=new pion._base.error.ServerResponseErrorDialog({status_code:_d43.xhr.status,url:_d43.url,response_text:_d42.responseText});
_d46.show();
}
if(_d45){
_d45();
}
}
return _d42;
};
pion.handleXhrGetError=function(_d47,_d48){
console.error("In pion.handleXhrGetError: response = ",_d47,", ioArgs.args = ",_d48.args);
return pion.handleXhrError(_d47,_d48,dojo.xhrGet);
};
pion.getXhrErrorHandler=function(_d49,_d4a,_d4b){
return function(_d4c,_d4d){
dojo.mixin(_d4d.args,_d4a);
return pion.handleXhrError(_d4c,_d4d,_d49,_d4b);
};
};
pion.handleFetchError=function(_d4e,_d4f){
console.debug("In pion.handleFetchError: request = ",_d4f,", errorData = "+_d4e);
if(_d4e.status==401){
if(pion.login.login_pending){
var h=dojo.connect(pion.login,"onLoginSuccess",function(){
dojo.disconnect(h);
_d4f.store.fetch(_d4f);
});
}else{
if(!dojo.cookie("logged_in")){
if(window.location.search){
location.replace("login.html"+window.location.search+"&pathname="+window.location.pathname);
}else{
location.replace("login.html"+"?pathname="+window.location.pathname);
}
}
pion.login.doLoginDialog({success_callback:function(){
_d4f.store.fetch(_d4f);
}});
}
return;
}
};
pion.getFetchErrorHandler=function(msg){
return function(_d50,_d51){
console.error(msg);
return pion.handleFetchError(_d50,_d51);
};
};
}
if(!dojo._hasResource["pion._base.format"]){
dojo._hasResource["pion._base.format"]=true;
dojo.provide("pion._base.format");
pion.grid_cell_padding=8;
pion.scrollbar_width=20;
pion.datetime_cell_width=125;
pion.time_cell_width=65;
pion.escapeXml=function(_d52){
if(_d52===false||_d52===0){
return _d52.toString();
}else{
if(_d52){
return _d52.toString().replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;");
}else{
return "";
}
}
};
pion.unescapeXml=function(_d53){
if(_d53===false||_d53===0){
return _d53.toString();
}else{
if(_d53){
return _d53.toString().replace(/&amp;/g,"&").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&quot;/g,"\"").replace(/&#39;/g,"'");
}else{
return "";
}
}
};
pion.makeXmlLeafElement=function(_d54,_d55){
return "<"+_d54+">"+pion.escapeXml(_d55)+"</"+_d54+">";
};
pion.makeXmlLeafElementFromItem=function(_d56,item,_d57,_d58){
if(_d56.hasAttribute(item,_d57)){
var _d59=_d56.getValue(item,_d57);
if(_d59.toString()==""){
return "";
}else{
return pion.makeXmlLeafElement(_d57,_d59);
}
}else{
if(_d58!==undefined){
return pion.makeXmlLeafElement(_d57,_d58);
}else{
return "";
}
}
};
pion.makeObjectFromItem=function(_d5a,item){
var obj={};
dojo.forEach(_d5a.getAttributes(item),function(attr){
if(attr!="tagName"&&attr!="childNodes"){
obj[attr]=_d5a.getValue(item,attr).toString();
}
});
return obj;
};
pion.xmlCellFormatter=function(d){
if(d==""){
return "";
}
if(d&&d.toString()){
return pion.escapeXml(d);
}else{
return this.defaultValue;
}
};
pion.xmlCellFormatter2=function(d){
if(d==""){
return "";
}
if(d&&d.toString()){
if(d.toString().substr(0,8)=="<button "){
return d;
}
return pion.escapeXml(d);
}else{
return this.defaultValue;
}
};
pion.datetimeCellFormatter=function(t){
return Date(t*1000).toLocaleString();
};
pion.utcDatetimeCellFormatter=function(t){
var d=new Date(t*1000);
var _d5b=d.getUTCMonth()+1;
var date=d.getUTCDate();
var hour=d.getUTCHours();
var min=d.getUTCMinutes();
var sec=d.getUTCSeconds();
if(_d5b<10){
_d5b="0"+_d5b;
}
if(date<10){
date="0"+date;
}
if(hour<10){
hour="0"+hour;
}
if(min<10){
min="0"+min;
}
if(sec<10){
sec="0"+sec;
}
return d.getUTCFullYear()+"-"+_d5b+"-"+date+" "+hour+":"+min+":"+sec;
};
pion.localDatetimeCellFormatter=function(t){
var d=new Date(t*1000);
var _d5c=d.getMonth()+1;
var date=d.getDate();
var hour=d.getHours();
var min=d.getMinutes();
var sec=d.getSeconds();
if(_d5c<10){
_d5c="0"+_d5c;
}
if(date<10){
date="0"+date;
}
if(hour<10){
hour="0"+hour;
}
if(min<10){
min="0"+min;
}
if(sec<10){
sec="0"+sec;
}
return d.getFullYear()+"-"+_d5c+"-"+date+" "+hour+":"+min+":"+sec;
};
pion.utcTimeCellFormatter=function(t){
var d=new Date(t*1000);
var hour=d.getUTCHours();
var min=d.getUTCMinutes();
var sec=d.getUTCSeconds();
if(hour<10){
hour="0"+hour;
}
if(min<10){
min="0"+min;
}
if(sec<10){
sec="0"+sec;
}
return hour+":"+min+":"+sec;
};
pion.localTimeCellFormatter=function(t){
var d=new Date(t*1000);
var hour=d.getHours();
var min=d.getMinutes();
var sec=d.getSeconds();
if(hour<10){
hour="0"+hour;
}
if(min<10){
min="0"+min;
}
if(sec<10){
sec="0"+sec;
}
return hour+":"+min+":"+sec;
};
pion.makeDeleteButton=function(){
return "<button dojoType=dijit.form.Button class=\"delete_row\"></button>";
};
pion.makeEditButton=function(){
return "<button dojoType=dijit.form.Button class=\"edit_icon\"></button>";
};
pion.makeInsertAboveButton=function(){
return "<button dojoType=dijit.form.Button class=\"insert_row\"></button>";
};
pion.makeSearchButton=function(){
return "<button dojoType=dijit.form.Button class=\"search\"></button>";
};
}
if(!dojo._hasResource["pion._base.load"]){
dojo._hasResource["pion._base.load"]=true;
dojo.provide("pion._base.load");
pion.loadCss=function(href){
var _d5d=document.createElement("link");
_d5d.href=href;
_d5d.rel="stylesheet";
_d5d.type="text/css";
var _d5e=document.getElementsByTagName("head");
if(_d5e){
_d5e=_d5e[0];
}
if(!_d5e){
_d5e=document.getElementsByTagName("html")[0];
}
if(dojo.isIE){
window.setTimeout(function(){
_d5e.appendChild(_d5d);
},0);
}else{
_d5e.appendChild(_d5d);
}
};
}
if(!dojo._hasResource["pion._base"]){
dojo._hasResource["pion._base"]=true;
dojo.provide("pion._base");
}
if(!dojo._hasResource["pion.login"]){
dojo._hasResource["pion.login"]=true;
dojo.provide("pion.login");
pion.login.logout=function(){
dojo.cookie("logged_in","",{expires:-1});
dojo.xhrGet({url:"/logout",preventCache:true,handleAs:"xml",timeout:5000,load:function(_d5f,_d60){
location.replace("/login.html");
console.debug("logout response: ",_d5f);
return _d5f;
},error:function(_d61,_d62){
console.error("logout error: HTTP status code = ",_d62.xhr.status);
return _d61;
}});
};
pion.login.expire=function(){
dojo.xhrGet({url:"/logout",preventCache:true,handleAs:"xml",timeout:5000,load:function(_d63,_d64){
console.debug("logout response: ",_d63);
return _d63;
},error:function(_d65,_d66){
console.error("logout error: HTTP status code = ",_d66.xhr.status);
return _d65;
}});
};
dojo.declare("pion.login.LoginDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog database_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Session Expired</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\"\r\n\t\t>Your session has timed out.  Please login again.<table\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Username:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" type=\"text\" name=\"Username\" tabindex=\"3\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Password:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" type=\"password\" name=\"Password\" tabindex=\"1\"/></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t</div>\r\n\t<div>\r\n\t\t<button dojoType=dijit.form.Button class=\"content_button\" type=\"submit\" tabindex=\"2\">Submit</button>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true});
pion.login.ops_temporarily_suppressed=false;
pion.login.login_pending=false;
pion.login.onLoginSuccess=function(){
dojo.cookie("logged_in","true",{expires:1});
pion.last_logged_in_user=dojo.cookie("user");
dojo.byId("current_user_menu_section").style.visibility="visible";
dojo.byId("current_user").innerHTML=dojo.cookie("user");
};
pion.login.doLoginDialog=function(_d67){
dojo.byId("current_user_menu_section").style.visibility="hidden";
pion.login.login_pending=true;
var _d68=dijit.byId("ops_toggle_button");
if(_d68&&!_d68.checked){
_d68.attr("checked",true);
pion.login.ops_temporarily_suppressed=true;
}
var _d69=new pion.login.LoginDialog({});
_d69.attr("value",{Username:dojo.cookie("user")});
dojo.connect(_d69.domNode,"onkeypress",function(_d6a){
if(_d6a.keyCode==dojo.keys.ENTER){
_d69.execute(_d69.attr("value"));
_d69.destroyRecursive();
}
});
_d69.show();
_d69.execute=function(_d6b){
document.cookie="user="+encodeURIComponent(_d6b.Username);
dojo.xhrGet({url:"/login?user="+_d6b.Username+"&pass="+_d6b.Password,preventCache:true,handleAs:"xml",load:function(_d6c,_d6d){
if(_d6b.Username!=pion.last_logged_in_user){
location.replace(window.location.pathname+window.location.search);
}
pion.login.login_pending=false;
pion.login.onLoginSuccess();
console.debug("login response: ioArgs.xhr = ",_d6d.xhr);
if(pion.login.ops_temporarily_suppressed){
_d68.attr("checked",false);
pion.login.ops_temporarily_suppressed=false;
}
if(_d67.success_callback){
_d67.success_callback();
}
return _d6c;
},error:function(_d6e,_d6f){
pion.login.login_pending=false;
if(_d6f.xhr.status==401){
pion.login.doLoginDialog(_d67);
return;
}
console.error("login error: HTTP status code = ",_d6f.xhr.status);
console.error("ioArgs = ",_d6f);
return _d6e;
}});
};
};
}
if(!dojo._hasResource["pion.plugins"]){
dojo._hasResource["pion.plugins"]=true;
dojo.provide("pion.plugins");
pion.plugins.initAvailablePluginList=function(){
var d=new dojo.Deferred();
if(pion.plugins.available_plugins){
d.callback();
}else{
dojo.xhrGet({url:"/config/plugins",handleAs:"xml",timeout:5000,load:function(_d70,_d71){
pion.plugins.available_plugins=[];
var _d72=_d70.getElementsByTagName("Plugin");
dojo.forEach(_d72,function(n){
pion.plugins.available_plugins.push(dojo.isIE?n.childNodes[0].nodeValue:n.textContent);
});
d.callback();
return _d70;
},error:pion.handleXhrGetError});
}
return d;
};
pion.plugins.getPluginPrototype=function(_d73,_d74,_d75){
var _d76=_d73+"."+_d74;
var _d77=dojo.getObject(_d76);
if(!_d77){
var path=_d75+"/"+_d74+"/"+_d74;
dojo.registerModulePath(_d76,path);
dojo.requireIf(true,_d76);
_d77=dojo.getObject(_d76);
}
return _d77;
};
pion.plugins.getPermissions=function(){
var dfd=new dojo.Deferred();
dojo.xhrGet({url:"/query/permissions",preventCache:true,handleAs:"xml",timeout:5000,load:function(_d78,_d79){
var _d7a=_d78.getElementsByTagName("Permission");
pion.permissions_object={};
dojo.forEach(_d7a,function(node){
var type=node.getAttribute("type");
pion.permissions_object[type]=node;
});
dfd.callback();
return _d78;
},error:pion.handleXhrGetError});
return dfd;
};
}
if(!dojo._hasResource["pion.widgets.CrossWorkspaceConnection"]){
dojo._hasResource["pion.widgets.CrossWorkspaceConnection"]=true;
dojo.provide("pion.widgets.CrossWorkspaceConnection");
dojo.declare("pion.widgets.CrossWorkspaceConnection",[dijit._Widget],{postCreate:function(){
this.inherited("postCreate",arguments);
var _d7b=pion.reactors.workspace_box.my_content_pane;
dijit.byId("mainTabContainer").selectChild(this.source_reactor.workspace.my_content_pane);
var _d7c=document.createElement("div");
this.source_reactor.workspace.node.appendChild(_d7c);
this.sink=new pion.widgets.SinkReactorProxy({local_reactor:this.source_reactor,external_reactor:this.sink_reactor,connection_id:this.connection_id,cross_workspace_connection:this},_d7c);
pion.reactors.updateConnectionLine(this.sink.line,this.source_reactor.domNode,this.sink.domNode);
dijit.byId("mainTabContainer").selectChild(this.sink_reactor.workspace.my_content_pane);
var _d7d=document.createElement("div");
this.sink_reactor.workspace.node.appendChild(_d7d);
this.source=new pion.widgets.SourceReactorProxy({local_reactor:this.sink_reactor,external_reactor:this.source_reactor,connection_id:this.connection_id,cross_workspace_connection:this},_d7d);
pion.reactors.updateConnectionLine(this.source.line,this.source.domNode,this.sink_reactor.domNode);
dijit.byId("mainTabContainer").selectChild(_d7b);
},deleteConnection:function(){
var _d7e=this;
pion.reactors.doConnectionChangeIfAllowed(this.source_reactor,this.sink_reactor,function(){
dojo.xhrDelete({url:"/config/connections/"+_d7e.connection_id,handleAs:"xml",timeout:5000,load:function(_d7f,_d80){
for(var j=0;j<_d7e.source_reactor.reactor_outputs.length;++j){
if(_d7e.source_reactor.reactor_outputs[j].id==_d7e.connection_id){
_d7e.source_reactor.reactor_outputs.splice(j,1);
break;
}
}
for(var j=0;j<_d7e.sink_reactor.reactor_inputs.length;++j){
if(_d7e.sink_reactor.reactor_inputs[j].id==_d7e.connection_id){
_d7e.sink_reactor.reactor_inputs.splice(j,1);
break;
}
}
_d7e.destroy();
return _d7f;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
});
},destroy:function(){
this.sink.destroy();
this.source.destroy();
this.inherited(arguments);
}});
pion.widgets.CrossWorkspaceConnection.default_x_offset=40;
pion.widgets.CrossWorkspaceConnection.default_y_offset=40;
pion.widgets.CrossWorkspaceConnection.icon_width=30;
pion.widgets.CrossWorkspaceConnection.icon_height=30;
pion.widgets.CrossWorkspaceConnection.reactor_width=150;
pion.widgets.CrossWorkspaceConnection.reactor_height=50;
dojo.declare("pion.widgets.ReactorProxy",[dijit._Widget],{postCreate:function(){
this.inherited("postCreate",arguments);
this.local_workspace=this.local_reactor.workspace;
this.external_workspace=this.external_reactor.workspace.my_content_pane;
this.config={Name:"["+this.external_workspace.title+"] "+this.external_reactor.config.Name};
dojo.addClass(this.domNode,"reactor_proxy");
var _d81=pion.reactors.categories[this.external_reactor.config.Plugin];
dojo.addClass(this.domNode,_d81);
this.moveable_box=new dojo.dnd.move.parentConstrainedMoveable(this.domNode,{area:"padding",within:true});
this.proxy_x_tag="Proxy_X_"+this.connection_id;
this.proxy_y_tag="Proxy_Y_"+this.connection_id;
this.initCoords();
this.domNode.style.left=this.config.X+"px";
this.domNode.style.top=this.config.Y+"px";
this.domNode.style.position="absolute";
this.domNode.style.background="url(../plugins/reactors/"+_d81+"/"+this.external_reactor.config.Plugin+"/proxy.png) repeat-x";
this.domNode.style.zIndex=300;
var line=this.local_workspace.my_surface.createPolyline().setStroke("black");
line.div1=document.createElement("div");
line.div1.style.position="absolute";
this.local_workspace.node.appendChild(line.div1);
line.div2=document.createElement("div");
line.div2.style.position="absolute";
this.local_workspace.node.appendChild(line.div2);
this.line=line;
var _d82=this;
var menu=new dijit.Menu({targetNodeIds:[this.domNode]});
menu.addChild(new dijit.MenuItem({label:"Switch to workspace "+this.external_workspace.title,onClick:function(){
dijit.byId("mainTabContainer").selectChild(_d82.external_workspace);
}}));
menu.addChild(new dijit.MenuItem({label:"Delete connection",onClick:function(){
_d82.cross_workspace_connection.deleteConnection();
}}));
},initCoords:function(){
if(this.proxy_x_tag in this.external_reactor.config){
this.config.X=this.external_reactor.config[this.proxy_x_tag];
this.config.Y=this.external_reactor.config[this.proxy_y_tag];
}else{
this.computeInitialCoords();
this.external_reactor.config[this.proxy_x_tag]=this.config.X;
this.external_reactor.config[this.proxy_y_tag]=this.config.Y;
this.updateExternalReactorConfig();
}
},makeTooltip:function(_d83){
var _d84=_d83+"<b>"+this.external_reactor.config.Name+"</b>"+" in workspace <b>"+this.external_workspace.title+"</b>";
new dijit.Tooltip({label:_d84,connectId:[this.id]});
},handleMoveStop:function(_d85){
if(this.config.X==_d85.host.node.offsetLeft&&this.config.Y==_d85.host.node.offsetTop){
return;
}
this.config.X=_d85.host.node.offsetLeft;
this.config.Y=_d85.host.node.offsetTop;
this.external_reactor.config[this.proxy_x_tag]=this.config.X;
this.external_reactor.config[this.proxy_y_tag]=this.config.Y;
this.updateExternalReactorConfig();
},updateExternalReactorConfig:function(){
var _d86="<PionConfig><Reactor>";
for(var tag in this.external_reactor.config){
if(dojo.indexOf(this.external_reactor.special_config_elements,tag)==-1){
_d86+=pion.makeXmlLeafElement(tag,this.external_reactor.config[tag]);
}
}
if(this.external_reactor._insertCustomData){
this.external_reactor._insertCustomData();
}
_d86+="</Reactor></PionConfig>";
dojo.rawXhrPut({url:"/config/reactors/"+this.external_reactor.config["@id"]+"/move",contentType:"text/xml",handleAs:"xml",putData:_d86,load:function(_d87){
},error:pion.getXhrErrorHandler(dojo.rawXhrPut,{putData:_d86})});
},destroy:function(){
if(this.external_reactor.config["@id"] in pion.reactors.reactors_by_id){
delete this.external_reactor.config[this.proxy_x_tag];
delete this.external_reactor.config[this.proxy_y_tag];
this.updateExternalReactorConfig();
}
this.local_workspace.node.removeChild(this.domNode);
var _d88=pion.reactors.workspace_box.my_content_pane;
dijit.byId("mainTabContainer").selectChild(this.local_workspace.my_content_pane);
pion.reactors.removeLine(this.line);
dijit.byId("mainTabContainer").selectChild(_d88);
this.inherited(arguments);
}});
dojo.declare("pion.widgets.SinkReactorProxy",[pion.widgets.ReactorProxy],{postCreate:function(){
this.inherited("postCreate",arguments);
this.makeTooltip("Connection to Reactor ");
var _d89=this;
this.moveable_box.onMove=function(_d8a,_d8b){
var _d8c=pion.reactors.getNearbyGridPointInBox(this.constraintBox,_d8b);
dojo.marginBox(_d8a.node,_d8c);
pion.reactors.updateConnectionLine(_d89.line,_d89.local_reactor.domNode,_d89.domNode);
};
dojo.connect(this.moveable_box,"onMoveStop",this,this.handleMoveStop);
},computeInitialCoords:function(){
var _d8d=-1;
var _d8e=-1;
for(var j=0;j<this.local_reactor.reactor_outputs.length;++j){
if(this.local_reactor.reactor_outputs[j].cross_workspace_connection){
var _d8f=this.local_reactor.reactor_outputs[j].sink.config;
_d8d=Math.max(_d8f.X,_d8d);
_d8e=Math.max(_d8f.Y,_d8e);
}
}
if(_d8d>=0){
this.config.X=_d8d+10;
this.config.Y=_d8e+10;
}else{
var pwc=pion.widgets.CrossWorkspaceConnection;
this.config.X=parseInt(this.local_reactor.config.X)+pwc.reactor_width+pwc.default_x_offset;
this.config.Y=parseInt(this.local_reactor.config.Y)+(pwc.reactor_height-pwc.icon_height)/2;
}
}});
dojo.declare("pion.widgets.SourceReactorProxy",[pion.widgets.ReactorProxy],{postCreate:function(){
this.inherited("postCreate",arguments);
this.makeTooltip("Connection from Reactor ");
var _d90=this;
this.moveable_box.onMove=function(_d91,_d92){
var _d93=pion.reactors.getNearbyGridPointInBox(this.constraintBox,_d92);
dojo.marginBox(_d91.node,_d93);
pion.reactors.updateConnectionLine(_d90.line,_d90.domNode,_d90.local_reactor.domNode);
};
dojo.connect(this.moveable_box,"onMoveStop",this,this.handleMoveStop);
},computeInitialCoords:function(){
var _d94=-1;
var _d95=-1;
for(var j=0;j<this.local_reactor.reactor_inputs.length;++j){
if(this.local_reactor.reactor_inputs[j].cross_workspace_connection){
var _d96=this.local_reactor.reactor_inputs[j].source.config;
_d94=Math.max(_d96.X,_d94);
_d95=Math.max(_d96.Y,_d95);
}
}
if(_d94>=0){
this.config.X=_d94+10;
this.config.Y=_d95+10;
}else{
var pwc=pion.widgets.CrossWorkspaceConnection;
this.config.X=parseInt(this.local_reactor.config.X)-pwc.default_x_offset-pwc.icon_width;
if(this.config.X>=0){
this.config.Y=parseInt(this.local_reactor.config.Y)+(pwc.reactor_height-pwc.icon_height)/2;
}else{
this.config.X=parseInt(this.local_reactor.config.X);
this.config.Y=parseInt(this.local_reactor.config.Y)-pwc.default_y_offset-pwc.icon_height;
if(this.config.Y<0){
this.config.Y=parseInt(this.local_reactor.config.Y)+pwc.reactor_height+pwc.default_y_offset;
}
}
}
}});
}
if(!dojo._hasResource["pion.widgets.LicenseKey"]){
dojo._hasResource["pion.widgets.LicenseKey"]=true;
dojo.provide("pion.widgets.LicenseKey");
dojo.declare("pion.widgets.LicenseKeyDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog license_key_dialog\" style=\"width: 600px\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">${title}</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\">\r\n\t\t<form dojoAttachPoint=\"form\" dojoType=\"dijit.form.Form\">\r\n\t\t\t<div>\r\n\t\t\t\t<textarea dojoAttachPoint=\"license_key_text_area\" style=\"width: 100%\" rows=\"8\" dojoAttachEvent=\"oninput: enableSubmit, onkeydown: enableSubmit\"></textarea>\r\n\t\t\t</div>\r\n\t\t\t<p><big><strong>\r\n\t\t\t\t<span id=\"result_of_submitting_key_2\" dojoAttachPoint=\"result_of_submitting_key_2\"></span>\r\n\t\t\t</strong></big></p>\r\n\t\t\t<div dojoAttachPoint=\"license_section\">\r\n\t\t\t\t<div dojoType=\"dijit.layout.ContentPane\" style=\"width:400px; border:1px solid #b7b7b7; background:#fff; padding:8px; margin:0 auto; height:200px; overflow:auto; \"\r\n\t\t\t\t\thref=\"licenses/atomic_enterprise.html\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<p>\r\n\t\t\t\t\t<input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"checkboxes\" value=\"accept\" /> I agree to the license.\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t<button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick: submitKey\"\r\n\t\t\t\t\tdojoAttachPoint=\"apply_button\" disabled=\"true\">Submit</button>\r\n\t\t\t<button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: onCancel\">Cancel</button>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",widgetsInTemplate:true,postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},postCreate:function(){
this.inherited("postCreate",arguments);
var _d97=this;
dojo.connect(this,"onCancel",function(){
if(_d97.callback){
_d97.callback(false);
}
});
if(this.include_license==false){
dojo.addClass(this.license_section,"hidden");
}
},include_license:true,enableSubmit:function(){
this.apply_button.attr("disabled",false);
},submitKey:function(){
if(this.include_license){
var _d98=this.form.attr("value");
if(dojo.indexOf(_d98.checkboxes,"accept")==-1){
this.result_of_submitting_key_2.innerHTML="You must agree to the license before submitting the key.";
return false;
}
}
var key=this.license_key_text_area.value;
var _d99=this;
dojo.rawXhrPut({url:"/key",contentType:"text/plain",handleAs:"xml",putData:key,load:function(_d9a){
pion.key_service_running=true;
pion.about.checkKeyStatusDfd().addCallback(function(_d9b){
if(_d9b=="invalid"){
_d99.result_of_submitting_key_2.innerHTML="Invalid license key (may have expired).";
}else{
var _d9c=dojo.map(_d9a.getElementsByTagName("Product"),function(p){
return dojox.xml.parser.textContent(p);
});
if(_d99.requested_product){
if(dojo.indexOf(_d9c,_d99.requested_product)==-1){
_d99.result_of_submitting_key_2.innerHTML="Error: Key not valid for "+_d99.requested_product+".";
return _d9a;
}
}
if(dojo.indexOf(_d9c,"Pion Replay")!=-1){
pion.updateLicenseState("replay");
}else{
if(dojo.indexOf(_d9c,"Pion Enterprise")!=-1){
pion.updateLicenseState("enterprise");
}else{
pion.updateLicenseState("lite");
}
}
if(_d99.callback){
_d99.callback(true);
}
_d99.hide();
}
});
return _d9a;
},error:function(_d9d,_d9e){
_d99.result_of_submitting_key_2.innerHTML="Error: Key not accepted.";
return _d9d;
}});
}});
}
if(!dojo._hasResource["plugins.reactors.Reactor"]){
dojo._hasResource["plugins.reactors.Reactor"]=true;
dojo.provide("plugins.reactors.Reactor");
dojo.declare("plugins.reactors.Reactor",[dijit._Widget],{postCreate:function(){
this.inherited("postCreate",arguments);
this.special_config_elements=["@id","options"];
this.reactor_inputs=[];
this.reactor_outputs=[];
this.prev_events_in=0;
this.class_info=plugins.reactors[this.config.Plugin];
if("init_defaults" in this.class_info){
this.class_info.init_defaults();
}
if("option_defaults" in this.class_info){
this._initOptions(this.config,this.class_info.option_defaults);
}
this.requires_license="edition" in this.class_info&&this.class_info.edition=="Enterprise";
var _d9f=new pion.reactors.OverlappableTarget(this.domNode,{accept:["connector"]});
dojo.connect(_d9f,"onDrop",function(){
pion.reactors.handleDropOnReactor(_d9f);
});
this.name_div=document.createElement("div");
this.name_div.innerHTML=pion.escapeXml(this.config.Name);
dojo.addClass(this.name_div,"name");
this.domNode.appendChild(this.name_div);
var _da0=this;
this.run_button=new dijit.form.ToggleButton();
var _da1=this.run_button.domNode;
dojo.connect(_da1,"click",function(){
dojo.xhrPut({url:"/config/reactors/"+_da0.config["@id"]+(_da0.run_button.checked?"/start":"/stop"),load:function(){
_da0.config.Running=_da0.run_button.checked;
},error:function(_da2,_da3){
pion.handleXhrError(_da2,_da3,dojo.xhrPut,pion.reactors.updateRunButtons);
}});
});
this.domNode.appendChild(_da1);
this.ops_per_sec=document.createElement("span");
dojo.addClass(this.ops_per_sec,"ops_per_sec");
this.ops_per_sec.innerHTML="0";
this.domNode.appendChild(this.ops_per_sec);
this.domNode.setAttribute("reactor_type",this.config.Plugin);
var _da4=pion.reactors.categories[this.config.Plugin];
dojo.addClass(this.domNode,_da4);
if(_da4!="collection"){
this.run_button.set("checked",true);
}
dojo.addClass(this.domNode,"reactor");
dojo.addClass(this.domNode,this.config.Plugin);
var m5=new dojo.dnd.move.parentConstrainedMoveable(this.domNode,{area:"padding",within:true});
var c=m5.constraints();
c.r=c.l+c.w-this.offsetWidth;
c.b=c.t+c.h-this.offsetHeight;
var _da5={l:this.config.X,t:this.config.Y};
console.debug("mouseLeftTop: ",_da5);
var _da6=pion.reactors.getNearbyGridPointInBox(c,_da5);
this.domNode.style.top=_da6.t+"px";
this.domNode.style.left=_da6.l+"px";
this.domNode.style.position="absolute";
this.domNode.style.background="url(../plugins/reactors/"+_da4+"/"+this.config.Plugin+"/bg-moveable.png) repeat-x";
this.domNode.style.zIndex=300;
this.context_menu=new dijit.Menu({targetNodeIds:[this.domNode]});
var menu=this.context_menu;
menu.addChild(new dijit.MenuItem({label:"Edit reactor configuration",onClick:function(){
pion.reactors.showReactorConfigDialog(_da0);
}}));
menu.addChild(new dijit.MenuItem({label:"Edit reactor connections",onClick:function(){
pion.reactors.showReactorConnectionsDialog(_da0);
}}));
menu.addChild(new dijit.MenuItem({label:"Show configuration",onClick:function(){
pion.reactors.showConfigInNewTab(_da0);
}}));
menu.addChild(new dijit.MenuItem({label:"Show stats",onClick:function(){
_da0.showQueryResult();
}}));
menu.addChild(new dijit.MenuItem({label:"Delete reactor",onClick:function(){
pion.reactors.deleteReactorIfConfirmed(_da0);
}}));
menu.addChild(new dijit.MenuItem({label:"Copy reactor",onClick:function(){
pion.reactors.copyReactor(_da0);
}}));
dojo.connect(this.domNode,"dblclick",function(_da7){
_da7.stopPropagation();
if(_da7.shiftKey){
_da0.showQueryResult();
}else{
pion.reactors.showReactorConfigDialog(_da0);
}
});
m5.onMove=function(_da8,_da9){
var _daa=pion.reactors.getNearbyGridPointInBox(this.constraintBox,_da9);
dojo.marginBox(_da8.node,_daa);
for(var i=0;i<_da0.reactor_inputs.length;++i){
pion.reactors.updateConnectionLine(_da0.reactor_inputs[i].line,_da0.reactor_inputs[i].source.domNode,_da0.domNode);
}
for(var i=0;i<_da0.reactor_outputs.length;++i){
pion.reactors.updateConnectionLine(_da0.reactor_outputs[i].line,_da0.domNode,_da0.reactor_outputs[i].sink.domNode);
}
};
dojo.connect(m5,"onMoveStop",this,this.handleMoveStop);
dojo.publish("AddReactor",[this]);
},getConfigItem:function(){
var dfd=new dojo.Deferred();
if(this.config_item){
dfd.callback(this.config_item);
}else{
if(!this.pending_fetch_dfd){
this.pending_fetch_dfd=new dojo.Deferred();
var _dab=pion.reactors.config_store;
var _dac=this;
_dab.fetch({query:{"@id":this.config["@id"]},onComplete:function(_dad){
if(_dad.length==0){
throw new Error("No configuration was found for the specified Reactor: "+_dac.config["@id"]);
}
_dac.config_item=_dad[0];
_dac.pending_fetch_dfd.callback(_dac.config_item);
delete _dac.pending_fetch_dfd;
},onError:pion.handleFetchError});
}
this.pending_fetch_dfd.addCallback(function(_dae){
dfd.callback(_dae);
});
}
return dfd;
},_initOptions:function(_daf,_db0){
var _db1=pion.reactors.config_store;
this.getConfigItem().addCallback(function(_db2){
_daf.options=[];
for(var _db3 in _db0){
_daf[_db3]=_db0[_db3];
if(_db1.hasAttribute(_db2,_db3)){
_daf[_db3]=(_db1.getValue(_db2,_db3).toString()=="true");
}
if(_daf[_db3]){
_daf.options.push(_db3);
}
}
});
},showQueryResult:function(){
window.open("/query/reactors/"+this.config["@id"]);
},handleMoveStop:function(_db4){
if(this.config.X==_db4.host.node.offsetLeft&&this.config.Y==_db4.host.node.offsetTop){
return;
}
this.config.X=_db4.host.node.offsetLeft;
this.config.Y=_db4.host.node.offsetTop;
this.put_data="<PionConfig><Reactor>";
for(var tag in this.config){
if(dojo.indexOf(this.special_config_elements,tag)==-1&&tag[0]!="_"){
console.debug("this.config[",tag,"] = ",this.config[tag]);
this.put_data+=pion.makeXmlLeafElement(tag,this.config[tag]);
}
}
if(this._insertCustomData){
this._insertCustomData();
}
this.put_data+="</Reactor></PionConfig>";
console.debug("put_data: ",this.put_data);
dojo.rawXhrPut({url:"/config/reactors/"+this.config["@id"]+"/move",contentType:"text/xml",handleAs:"xml",putData:this.put_data,load:function(_db5){
console.debug("response: ",_db5);
},error:pion.getXhrErrorHandler(dojo.rawXhrPut,{putData:this.put_data})});
},getOptionalBool:function(_db6,item,_db7){
var temp=_db6.getValue(item,_db7);
if(temp!==undefined&&temp!==null){
return _db6.getValue(item,_db7).toString()=="true";
}else{
return plugins.reactors[this.config.Plugin].grid_option_defaults[_db7];
}
}});
dojo.declare("plugins.reactors.ReactorIcon",[],{});
dojo.declare("plugins.reactors.ReactorInitDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog reactor_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">${title}</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\">\r\n\t\t<table>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>Name:</label></td>\r\n\t\t\t\t<td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>Comments:</label></td>\r\n\t\t\t\t<td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t</div>\r\n\t<div class=\"save_cancel_delete\">\r\n\t\t<button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick: tryConfig\">Save</button>\r\n\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t</div>\r\n\t<span dojoAttachPoint=\"tabEnd\" tabindex=\"0\"></span>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
this.class_info=plugins.reactors[this.plugin];
if("init_defaults" in this.class_info){
this.class_info.init_defaults();
}
if("option_defaults" in this.class_info){
var _db8=[];
for(var _db9 in this.class_info.option_defaults){
if(this.class_info.option_defaults[_db9]){
_db8.push(_db9);
}
}
this.set("value",{options:_db8});
}
if("value_defaults" in this.class_info){
this.set("value",this.class_info.value_defaults);
}
},tryConfig:function(){
var _dba=this.get("value");
console.debug(_dba);
console.debug("this.plugin = ",this.plugin);
var _dbb=pion.reactors.workspace_box;
var dc=dojo.coords(_dbb.node);
var X=Math.floor(pion.reactors.last_x-dc.x);
var Y=Math.floor(pion.reactors.last_y-dc.y);
this.post_data="<PionConfig><Reactor>"+pion.makeXmlLeafElement("Plugin",this.plugin)+pion.makeXmlLeafElement("Workspace",_dbb.my_content_pane.uuid)+"<X>"+X+"</X><Y>"+Y+"</Y>";
for(var tag in _dba){
if(tag!="options"&&tag[0]!="_"){
console.debug("dialogFields[",tag,"] = ",_dba[tag]);
this.post_data+=pion.makeXmlLeafElement(tag,_dba[tag]);
}
}
if("options" in _dba&&plugins.reactors[this.plugin].option_defaults){
for(var _dbc in plugins.reactors[this.plugin].option_defaults){
this.post_data+="<"+_dbc+">";
this.post_data+=(dojo.indexOf(_dba.options,_dbc)!=-1);
this.post_data+="</"+_dbc+">";
}
}
if(this._insertCustomData){
this._insertCustomData(_dba);
}
var _dbd=plugins.reactors[this.plugin].other_defaults;
if(_dbd){
for(var key in _dbd){
this.post_data+="<"+key+">"+_dbd[key]+"</"+key+">";
}
}
this.post_data+="</Reactor></PionConfig>";
console.debug("post_data: ",this.post_data);
var _dbe=this;
dojo.rawXhrPost({url:"/config/reactors",contentType:"text/xml",handleAs:"xml",postData:this.post_data,load:function(_dbf){
var node=_dbf.getElementsByTagName("Reactor")[0];
var _dc0={"@id":node.getAttribute("id")};
var _dc1=node.childNodes;
for(var i=0;i<_dc1.length;++i){
if(_dc1[i].firstChild){
_dc0[_dc1[i].tagName]=_dc1[i].firstChild.nodeValue;
}
}
var _dc2=document.createElement("div");
_dbb.node.replaceChild(_dc2,_dbb.node.lastChild);
var _dc3=pion.reactors.createReactor(_dc0,_dc2);
pion.reactors.updateRunButtons();
pion.reactors.reactors_by_id[_dc0["@id"]]=_dc3;
_dc3.workspace=_dbb;
_dbb.reactors.push(_dc3);
_dbe.hide();
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:this.post_data})});
}});
dojo.declare("plugins.reactors.ReactorDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog reactor_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">${title}</span>\r\n\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: onCancel\">\r\n\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\"\r\n\t\t><table\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>ID:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" class=\"id_text_box\" disabled=\"true\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t</div>\r\n\t<div class=\"save_cancel_delete\">\r\n\t\t<button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button>\r\n\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
delete this.reactor.config_item;
if("option_defaults" in this.reactor.class_info){
this.reactor._initOptions(this.reactor.config,this.reactor.class_info.option_defaults);
}
if("value_defaults" in this.reactor.class_info){
this.set("value",this.reactor.class_info.value_defaults);
}
},reactor:"",execute:function(_dc4){
dojo.mixin(this.reactor.config,_dc4);
this.reactor.name_div.innerHTML=pion.escapeXml(_dc4.Name);
if("options" in _dc4&&plugins.reactors[this.reactor.config.Plugin].option_defaults){
for(var _dc5 in plugins.reactors[this.reactor.config.Plugin].option_defaults){
var _dc6=(dojo.indexOf(_dc4.options,_dc5)!=-1);
this.reactor.config[_dc5]=_dc6;
}
}
this.put_data="<PionConfig><Reactor>";
for(var tag in this.reactor.config){
if(dojo.indexOf(this.reactor.special_config_elements,tag)==-1&&tag[0]!="_"){
this.put_data+=pion.makeXmlLeafElement(tag,this.reactor.config[tag]);
}
}
if(this._insertCustomData){
this._insertCustomData(_dc4);
}
this.put_data+="</Reactor></PionConfig>";
console.debug("put_data: ",this.put_data);
var _dc7=this;
dojo.rawXhrPut({url:"/config/reactors/"+this.reactor.config["@id"],contentType:"text/xml",handleAs:"xml",putData:this.put_data,load:function(_dc8){
console.debug("response: ",_dc8);
if(_dc7.reactor._updateCustomData){
_dc7.reactor._updateCustomData();
}
},error:pion.getXhrErrorHandler(dojo.rawXhrPut,{putData:this.put_data})});
}});
dojo.declare("plugins.reactors.ReactorBoilerplate",[dijit._Widget,dijit._Templated],{label:"???",name:"???",category:"???",description:"???",help_label:"",templateString:"<div>\r\n\t<div class=\"reactor_name\">\r\n\t\t<img src=\"${icon}\" width=\"17\" height=\"17\" border=\"0\" />\r\n\t\t&nbsp; ${label}\r\n\t</div>\r\n\t<div class=\"reactor_cat\">\r\n\t\t<strong>Name:</strong> ${name}\r\n\t\t&nbsp;&nbsp;&nbsp;\r\n\t\t<strong>Category:</strong> ${category}\r\n\t\t&nbsp;&nbsp;&nbsp;\r\n\t\t<a class=\"help\" href=\"http://pion.org/plugins/${name}\" target=\"_blank\">${help_label}</a>\r\n\t</div>\r\n\t<div style=\"clear: both;\"></div>\r\n\t<p>${description}</p>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
dojo.mixin(this,dojo.i18n.getLocalization("pion","general"));
if(this.help_label.length==0){
this.help_label=this.default_reactor_help_label;
}
this.icon="/plugins/reactors/"+this.category.toLowerCase()+"/"+this.name+"/dialog-icon.png";
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
this.disabled=true;
}});
dojo.declare("plugins.reactors.ReactorConnectionsDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog reactor_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Reactor Connections</span>\r\n\t\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: onCancel\">\r\n\t\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\">\r\n\t\t<div dojoType=plugins.reactors.ReactorConnections class=\"reactor_connections_dialog\" dojoAttachPoint=\"reactor_connections\">\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
},reactor:"",execute:function(_dc9){
}});
dojo.declare("plugins.reactors.ReactorConnections",[dijit.layout.ContentPane,dijit._Templated],{templateString:"<div>\r\n\t<div class=\"reactor_grid_block\">\r\n\t\t<h2 style=\"float: left\">\r\n\t\t\tInput Connections\r\n\t\t</h2>\r\n\t\t<div style=\"float: right\">\r\n\t\t\t<button dojoType=\"dijit.form.DropDownButton\" class=\"add_new_row above_grid\">\r\n\t\t\t\t<span>ADD NEW INPUT CONNECTION</span>\r\n\t\t\t\t<div dojoType=\"dijit.Menu\" dojoAttachPoint=\"add_input_reactor_menu\"></div>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t\t<div style=\"clear: both\"></div>\r\n\t\r\n\t\t<div class=\"reactor_dialog_grid\" dojoAttachPoint=\"reactor_inputs_grid_node\"></div>\r\n\t</div>\r\n\t<br />\r\n\t<div class=\"reactor_grid_block\">\r\n\t\t<h2 style=\"float: left\">\r\n\t\t\tOutput Connections\r\n\t\t</h2>\r\n\t\t<div style=\"float: right\">\r\n\t\t\t<button dojoType=\"dijit.form.DropDownButton\" class=\"add_new_row above_grid\">\r\n\t\t\t\t<span>ADD NEW OUTPUT CONNECTION</span>\r\n\t\t\t\t<div dojoType=\"dijit.Menu\" dojoAttachPoint=\"add_output_reactor_menu\"></div>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t\t<div style=\"clear: both\"></div>\r\n\t\r\n\t\t<div class=\"reactor_dialog_grid\" dojoAttachPoint=\"reactor_outputs_grid_node\"></div>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
},makeMenuOfInputs:function(_dca){
var _dcb={};
for(var uuid in pion.reactors.workspaces_by_id){
var _dcc=pion.reactors.workspaces_by_id[uuid].config.Name;
_dcb[uuid]=new dijit.Menu({parentMenu:this.add_input_reactor_menu});
this.add_input_reactor_menu.addChild(new dijit.PopupMenuItem({label:_dcc,popup:_dcb[uuid]}));
}
var _dcd=[];
for(var i=0;i<_dca.reactor_inputs.length;++i){
var _dce=_dca.reactor_inputs[i];
var _dcf="cross_workspace_connection" in _dce;
_dcd.push(_dcf?_dce.source.external_reactor:_dce.source);
}
for(var uuid in pion.reactors.reactors_by_id){
var _dd0=pion.reactors.reactors_by_id[uuid];
var _dd1=new dijit.MenuItem({label:_dd0.config.Name});
if(_dd0==_dca||dojo.indexOf(_dcd,_dd0)!=-1){
_dd1.set("disabled",true);
}else{
_dd1.set("onClick",this.makeCallback(_dd0,_dca,"input"));
}
var _dd2=_dd0.workspace.my_content_pane.uuid;
_dcb[_dd2].addChild(_dd1);
}
},makeMenuOfOutputs:function(_dd3){
var _dd4={};
for(var uuid in pion.reactors.workspaces_by_id){
var _dd5=pion.reactors.workspaces_by_id[uuid].config.Name;
_dd4[uuid]=new dijit.Menu({parentMenu:this.add_output_reactor_menu});
this.add_output_reactor_menu.addChild(new dijit.PopupMenuItem({label:_dd5,popup:_dd4[uuid]}));
}
var _dd6=[];
for(var i=0;i<_dd3.reactor_outputs.length;++i){
var _dd7=_dd3.reactor_outputs[i];
var _dd8="cross_workspace_connection" in _dd7;
_dd6.push(_dd8?_dd7.sink.external_reactor:_dd7.sink);
}
for(var uuid in pion.reactors.reactors_by_id){
var _dd9=pion.reactors.reactors_by_id[uuid];
var _dda=new dijit.MenuItem({label:_dd9.config.Name});
if(_dd3==_dd9||dojo.indexOf(_dd6,_dd9)!=-1){
_dda.set("disabled",true);
}else{
_dda.set("onClick",this.makeCallback(_dd3,_dd9,"output"));
}
var _ddb=_dd9.workspace.my_content_pane.uuid;
_dd4[_ddb].addChild(_dda);
}
},makeCallback:function(_ddc,_ddd,_dde){
var _ddf=this;
return function(){
var _de0=this;
pion.reactors.doConnectionChangeIfAllowed(_ddc,_ddd,function(){
var _de1="<PionConfig><Connection><Type>reactor</Type>"+"<From>"+_ddc.config["@id"]+"</From>"+"<To>"+_ddd.config["@id"]+"</To>"+"</Connection></PionConfig>";
dojo.rawXhrPost({url:"/config/connections",contentType:"text/xml",handleAs:"xml",postData:_de1,load:function(_de2){
var node=_de2.getElementsByTagName("Connection")[0];
var id=node.getAttribute("id");
pion.reactors.createConnection(_ddc,_ddd,id);
if(_dde=="input"){
pion.reactors.addInputConnectionItem(_ddf.reactor_inputs_store,id);
}else{
pion.reactors.addOutputConnectionItem(_ddf.reactor_outputs_store,id);
}
_de0.set("disabled",true);
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_de1})});
});
};
}});
}
if(!dojo._hasResource["pion.widgets.SimpleSelect"]){
dojo._hasResource["pion.widgets.SimpleSelect"]=true;
dojo.provide("pion.widgets.SimpleSelect");
dojo.declare("pion.widgets.SimpleSelect",dijit.form._FormWidget,{templateString:"<select name='${name}' dojoAttachPoint='containerNode,focusNode' dojoAttachEvent='onchange: _onChange'></select>",store:null,query:{},keyAttr:"",searchAttr:"",doneAddingOptions:false,attributeMap:dojo.mixin(dojo.clone(dijit.form._FormWidget.prototype.attributeMap),{size:"focusNode"}),reset:function(){
this._hasBeenBlurred=false;
this._setValueAttr(this._resetValue,true);
},_getValueAttr:function(){
return this.containerNode.value;
},_setValueAttr:function(_de3){
if(this.doneAddingOptions){
if(_de3===null){
this.containerNode.selectedIndex=-1;
}else{
this.containerNode.value=_de3;
if(this.containerNode.value!=_de3){
if(dojo.some(this.containerNode.options,function(opt){
return opt.value==_de3;
})){
this.onError(new Error("SimpleSelect error: value could not be set to '"+_de3+"'."));
}else{
this.onError(new Error("SimpleSelect error: '"+_de3+"' is not one of the current options."));
}
return;
}
}
this._handleOnChange(_de3,true);
}else{
this.pendingSetValue=true;
var h=this.connect(this,"_onDoneAddingOptions",function(){
this.pendingSetValue=false;
this.disconnect(h);
if(_de3===null){
this.containerNode.selectedIndex=-1;
}else{
this.containerNode.value=_de3;
if(this.containerNode.value!=_de3){
if(dojo.some(this.containerNode.options,function(opt){
return opt.value==_de3;
})){
this.onError(new Error("SimpleSelect error: value could not be set to '"+_de3+"'."));
}else{
this.onError(new Error("SimpleSelect error: '"+_de3+"' is not one of the current options."));
}
return;
}
}
this._handleOnChange(_de3,true);
});
}
},deferredSet:function(v){
var dfd=new dojo.Deferred();
this.focus();
if(this._lastValueReported==v){
dfd.callback(v);
return dfd;
}
var h1=dojo.connect(this,"onChangeDone",function(e){
dojo.disconnect(h1);
dojo.disconnect(h2);
dfd.callback(e);
});
var h2=dojo.connect(this,"onError",function(e){
dojo.disconnect(h1);
dojo.disconnect(h2);
dfd.errback(e);
});
this.set("value",v);
return dfd;
},onChangeDone:function(e){
},onError:function(e){
},_onChange:function(e){
this._handleOnChange(this.get("value"),true);
},resize:function(size){
if(size){
dojo.marginBox(this.domNode,size);
}
},setQuery:function(_de4){
this.query=_de4;
this.makeOptionList();
},makeOptionList:function(){
this.doneAddingOptions=false;
this.containerNode.options.length=0;
var _de5=this;
this.first_option=null;
this.store.fetch({query:_de5.query,onItem:function(item){
var key=_de5.keyAttr?_de5.store.getValue(item,_de5.keyAttr):_de5.store.getIdentity(item);
var _de6=_de5.searchAttr?_de5.store.getValue(item,_de5.searchAttr):key;
if(dojo.isIE){
_de5.containerNode.add(new Option(_de6,key));
}else{
_de5.containerNode.add(new Option(_de6,key),null);
}
if(_de5.first_option==null){
_de5.first_option=key;
}
},onComplete:function(){
_de5._onDoneAddingOptions(_de5.first_option);
},onError:pion.handleFetchError});
},postCreate:function(){
if(this.store){
this.makeOptionList();
}else{
this.doneAddingOptions=true;
this._onChange();
}
},_onDoneAddingOptions:function(){
this.doneAddingOptions=true;
if(!this.pendingSetValue){
this._onChange();
}
}});
}
if(!dojo._hasResource["plugins.reactors.LogInputReactor"]){
dojo._hasResource["plugins.reactors.LogInputReactor"]=true;
dojo.provide("plugins.reactors.LogInputReactor");
dojo.declare("plugins.reactors.LogInputReactor",[plugins.reactors.Reactor],{postCreate:function(){
this.config.Plugin="LogInputReactor";
this.inherited("postCreate",arguments);
}});
plugins.reactors.LogInputReactor.label="Log File Input Reactor";
dojo.declare("plugins.reactors.LogInputReactorInitDialog",[plugins.reactors.ReactorInitDialog],{templateString:"<div class=\"dijitDialog reactor_dialog\" tabindex=\"-1\" waiRole=\"dialog\" waiState=\"labelledby-${id}_title\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Log File Input Reactor Initialization</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\">\r\n\t\t<table>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>Name:</label></td>\r\n\t\t\t\t<td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>Comments:</label></td>\r\n\t\t\t\t<td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>Codec:</label></td>\r\n\t\t\t\t<td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"Codec\" store=\"pion.codecs.config_store\" searchAttr=\"Name\"/></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>Directory:</label></td>\r\n\t\t\t\t<td><input dojoType=\"dijit.form.TextBox\" name=\"Directory\"/></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>Filename Regex:</label></td>\r\n\t\t\t\t<td><input dojoType=\"dijit.form.TextBox\" name=\"Filename\"/></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>Frequency (in seconds):</label></td>\r\n\t\t\t\t<td><input dojoType=\"dijit.form.ValidationTextBox\" type=\"text\" name=\"Frequency\" regExp=\"[1-9][0-9]*\"></td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t\t<table\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Just One</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"JustOne\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Tail</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"TailF\"/></td\r\n\t\t\t></tr\r\n\t\t></table>\r\n\t</div>\r\n\t<div class=\"save_cancel_delete\">\r\n\t\t<button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick: tryConfig\">Save</button>\r\n\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
}});
dojo.declare("plugins.reactors.LogInputReactorDialog",[plugins.reactors.ReactorDialog],{templateString:"<div class=\"dijitDialog reactor_dialog\" tabindex=\"-1\" waiRole=\"dialog\" waiState=\"labelledby-${id}_title\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Log Input Reactor Configuration</span>\r\n\t\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: onCancel\">\r\n\t\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent collection\">\r\n\t\t<!--start div to set padding for top half of dialog-->\r\n\t\t<div class=\"reactor_dialog_top\">\r\n\r\n\t\t\t<div dojoType=plugins.reactors.ReactorBoilerplate\r\n\t\t\t\t label=\"Log Input Reactor\" name=\"LogInputReactor\" category=\"Collection\"\r\n\t\t\t\t description=\"Read structured log files from disk.\">\r\n\t\t\t</div>\r\n\r\n\t\t\t <!--start reactor settings-->\r\n\t\t\t<div style=\"float:left; margin-right: 25px;\">\r\n\t\t\t\t<table\r\n\t\t\t\t\t><tr\r\n\t\t\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>ID:</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" class=\"id_text_box\" disabled=\"true\"/></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t\t\t></tr\r\n\t\t\t\t></table>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"float:left;\">\r\n\t\t\t\t<table\r\n\t\t\t\t\t><tr\r\n\t\t\t\t\t\t><td><label>Codec:</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"Codec\" store=\"pion.codecs.config_store\" searchAttr=\"Name\"/></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>Directory:</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Directory\"/></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>Filename Regex:</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Filename\"/></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>Frequency (in seconds):</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.ValidationTextBox\" type=\"text\" name=\"Frequency\" regExp=\"[1-9][0-9]*\"></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>Just One</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"JustOne\"/></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>Tail</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"TailF\"/></td\r\n\t\t\t\t\t></tr\r\n\t\t\t\t></table>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"clear:both;\"></div>\r\n\t\t\t<!--end reactor settings-->\r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for top half of dialog-->\r\n\r\n\t\t<!--start div to set padding for bottom half of dialog-->\r\n\t\t<div class=\"reactor_dialog_bottom\">\r\n\r\n\t\t\t<!--start buttons--> \r\n\t\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t\t<!--end buttons--> \r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for bottom half of dialog-->\r\n\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
}});
plugins.reactors.LogInputReactor.option_defaults={JustOne:false,TailF:false};
}
if(!dojo._hasResource["pion.widgets.ConfigAccordion"]){
dojo._hasResource["pion.widgets.ConfigAccordion"]=true;
dojo.provide("pion.widgets.ConfigAccordion");
dojo.declare("pion.widgets.ConfigAccordion",[dijit.layout.AccordionContainer],{widgetsInTemplate:true,createNewPaneFromItem:function(item,_de7){
var _de8=this.title_attribute||"Name";
var _de9=pion.escapeXml(_de7.getValue(item,_de8));
var pane=new dijit.layout.ContentPane({title:_de9,content:"loading..."});
pane.config_item=item;
pane.uuid=_de7.getValue(item,"@id");
this.addChild(pane);
return pane;
},createPanesFromAllItems:function(_dea,_deb){
for(var i=0;i<_dea.length;++i){
this.createNewPaneFromItem(_dea[i],_deb);
}
var _dec=this.getChildren()[0];
this.removeChild(_dec);
var _ded=this;
var _dee=dojo.filter(this.domNode.childNodes,"return item.nodeType == 3;");
dojo.forEach(_dee,function(item){
_ded.domNode.removeChild(item);
});
var _def=this._borderBox;
function _df0(){
if(_ded._borderBox==_def){
setTimeout(_df0,1000);
}else{
_ded.resize({h:_ded._borderBox.h});
}
};
_df0();
}});
dojo.declare("pion.widgets.ConfigAccordionPluginType",[dijit._Widget,dijit._Templated],{plugin_type:"???",help_label:"",templateString:"<div class=\"plugin_type\">"+"<input dojoType=\"dijit.form.TextBox\" name=\"Plugin\" disabled=\"true\" />"+"<a class=\"help\" href=\"http://pion.org/plugins/${plugin_type}\" target=\"_blank\">${help_label}</a>"+"</div>",widgetsInTemplate:true,postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
dojo.mixin(this,dojo.i18n.getLocalization("pion","general"));
if(this.help_label.length==0){
this.help_label=this.default_small_help_label;
}
if(this.templatePath){
this.templateString="";
}
},postCreate:function(){
this.inherited("postCreate",arguments);
}});
}
if(!dojo._hasResource["pion.widgets.TermSelector"]){
dojo._hasResource["pion.widgets.TermSelector"]=true;
dojo.provide("pion.widgets.TermSelector");
dojo.declare("pion.widgets.TermSelector",[dijit._Widget,dijit._Templated],{templateString:"<table cellspacing=\"0\" cellpadding=\"0\" class=\"termSelectorContainer\">\r\n\t<thead>\r\n\t\t<tr class=\"dijitReset termSelectorHead\" valign=\"top\">\r\n\t\t\t<th>\r\n\t\t\t\tVocabulary\r\n\t\t\t</th>\r\n\t\t\t<th>\r\n\t\t\t\tTerm\r\n\t\t\t</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody class=\"dijitReset termSelectorBody\">\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<select dojoAttachPoint=\"vocab_select\" size=9 style=\"width: 100%\">\r\n\t\t\t\t</select>\r\n\t\t\t</td><td>\r\n\t\t\t\t<select dojoAttachPoint=\"term_select\" dojoAttachEvent=\"ondblclick: _handleDoubleClick\" size=9 style=\"width: 100%\">\r\n\t\t\t\t</select>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t\t<div style=\"width: 230px; height: 1px\" />\r\n\t\t\t</td><td>\r\n\t\t\t\t<div style=\"width: 230px; height: 1px\" />\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n\t<tfoot class=\"dijitReset\">\r\n\t\t<tr>\r\n\t\t\t<td colspan=\"2\">\r\n\t\t\t\t<input dojoAttachPoint=\"term_comment\" disabled=\"true\" style=\"width: 99%; margin-top:5px; margin-bottom:5px;\" />\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td class='dijitReset' valign=\"top\" colspan=\"2\">\r\n\t\t\t\t<button class=\"add_new\" dojoAttachEvent=\"onclick: _handleAddNewVocabulary\" style=\"width: 180px\">Add new vocabulary</button>\r\n\t\t\t\t<button class=\"add_new disabled\" dojoAttachEvent=\"onclick: _handleAddNewTerm\"\r\n\t\t\t\t\t\tdojoAttachPoint=\"add_new_term_button\" disabled=true style=\"width: 140px\">Add new term</button>\r\n\t\t\t\t<button class=\"save disabled\" dojoAttachEvent=\"onclick: _handleSelectTerm\"\r\n\t\t\t\t\t\tdojoAttachPoint=\"select_term_button\" disabled=true style=\"width: 125px\">Select term</button>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tfoot>\r\n</table>\r\n",_handleAddNewVocabulary:function(e){
pion.vocabularies.addNewVocabulary();
},_handleAddNewTerm:function(e){
var _df1=new plugins.vocabularies.TermInitDialog({vocabulary:this.vocabulary});
var _df2=this;
_df1.onNewTermSaved=function(_df3){
_df2.value=_df3;
_df2.onValueSelected(_df3);
};
setTimeout(function(){
dojo.query("input",_df1.domNode)[0].select();
},500);
_df1.show();
},_handleSelectTerm:function(e){
this.value=this.term_select.value;
this.onValueSelected(this.value);
},_handleDoubleClick:function(e){
this.value=this.term_select.value;
this.onValueSelected(this.value);
},_setText:function(node,text){
while(node.firstChild){
node.removeChild(node.firstChild);
}
node.appendChild(dojo.doc.createTextNode(text));
},postCreate:function(){
this.inherited(arguments);
var _df4=this;
var _df5=this.initial_term?this.initial_term.toString().split("#")[0]:"";
pion.vocabularies.vocabularies_by_id={};
var _df6=0;
var _df7=0;
pion.vocabularies.config_store.fetch({sort:[{attribute:"@id"}],onItem:function(item){
var id=pion.vocabularies.config_store.getValue(item,"@id");
if(id==_df5){
_df7=_df6;
}
var _df8=id.split(":")[2];
if(dojo.isIE){
_df4.vocab_select.add(new Option(_df8,id));
}else{
_df4.vocab_select.add(new Option(_df8,id),null);
}
pion.vocabularies.vocabularies_by_id[id]=new plugins.vocabularies.Vocabulary({"@id":id});
++_df6;
},onComplete:function(){
_df4.vocab_select.focus();
_df4.vocab_select.selectedIndex=_df7;
_df4.vocab_select.onchange();
},onError:pion.handleFetchError});
this.vocab_select.onchange=function(){
var id=_df4.vocab_select.value;
_df4.vocabulary=pion.vocabularies.vocabularies_by_id[id];
var h=dojo.connect(_df4.vocabulary,"onDoneLoadingTerms",function(){
dojo.disconnect(h);
_df4.add_new_term_button.disabled=_df4.vocabulary.config.Locked;
if(_df4.vocabulary.config.Locked){
dojo.addClass(_df4.add_new_term_button,"disabled");
}else{
dojo.removeClass(_df4.add_new_term_button,"disabled");
}
var _df9=id.split(":")[2];
var _dfa=_df4.vocabulary.config.Locked?_df9+" (L)":_df9;
_df4.vocab_select.options[_df4.vocab_select.selectedIndex].text=_dfa;
_df4.term_select.options.length=0;
_df4.term_comments_by_id={};
var _dfb=0;
var _dfc=0;
_df4.vocabulary.vocab_term_store.fetch({sort:[{attribute:"ID"}],onItem:function(item){
var _dfd=_df4.vocabulary.vocab_term_store.getValue(item,"full_id");
var _dfe=true;
if(_df4.query&&_df4.query.category){
_dfe=(pion.terms.categories_by_id[_dfd]==_df4.query.category);
}else{
if(_df4.query&&_df4.query.type){
var type=_df4.vocabulary.vocab_term_store.getValue(item,"Type");
_dfe=(type==_df4.query.type);
}
}
if(_dfe){
if(_df4.initial_term&&_df4.initial_term.toString()==_dfd){
_dfc=_dfb;
}
_df4.term_comments_by_id[_dfd]=_df4.vocabulary.vocab_term_store.getValue(item,"Comment");
var id=_df4.vocabulary.vocab_term_store.getValue(item,"ID");
if(dojo.isIE){
_df4.term_select.add(new Option(id,_dfd));
}else{
_df4.term_select.add(new Option(id,_dfd),null);
}
++_dfb;
}
},onComplete:function(){
_df4.term_select.selectedIndex=_dfc;
_df4.term_select.onchange();
},onError:pion.handleFetchError});
});
_df4.vocabulary.populateFromServerVocabStore();
_df4.select_term_button.disabled=true;
dojo.addClass(_df4.select_term_button,"disabled");
};
this.term_select.onchange=function(){
_df4.select_term_button.disabled=false;
dojo.removeClass(_df4.select_term_button,"disabled");
_df4.term_comment.value=_df4.term_comments_by_id[_df4.term_select.value];
};
this.connect(this.vocab_select,"keyup",function(e){
if(e.keyCode==dojo.keys.ENTER){
this.term_select.focus();
}
});
this.connect(this.term_select,"keyup",function(e){
if(e.keyCode==dojo.keys.ENTER){
this.value=this.term_select.value;
this.onValueSelected(this.value);
}
});
},onChange:function(_dff){
}});
}
if(!dojo._hasResource["pion.widgets.TermTextBox"]){
dojo._hasResource["pion.widgets.TermTextBox"]=true;
dojo.provide("pion.widgets.TermTextBox");
dojo.declare("pion.widgets._TermTextBox",dijit.form.ValidationTextBox,{popupClass:"",postMixInProperties:function(){
this.inherited(arguments);
if(!this.value||this.value.toString()==""){
this.value=null;
}
},validator:function(_e00,_e01){
if(_e00 in pion.terms.categories_by_id){
if("category" in this.query){
if(pion.terms.categories_by_id[_e00]==this.query.category){
return true;
}else{
this.invalidMessage="term must have a "+this.query.category+" type";
return false;
}
}else{
if("type" in this.query){
if(pion.terms.types_by_id[_e00]==this.query.type){
return true;
}else{
this.invalidMessage="term must have type '"+this.query.type+"'";
return false;
}
}else{
return true;
}
}
}else{
if(!_e00&&!this.required){
return true;
}else{
this.invalidMessage="unknown term";
return false;
}
}
},_onFocus:function(evt){
this._open();
},_setValueAttr:function(_e02,_e03,_e04){
this.inherited(arguments);
if(this._picker){
if(!_e02){
_e02="";
}
this._picker.attr("value",_e02);
}
},_open:function(){
if(this.disabled||this.readOnly||!this.popupClass){
return;
}
var _e05=this;
if(!this._picker){
var _e06=dojo.getObject(this.popupClass,false);
this._picker=new _e06({onValueSelected:function(_e07){
if(_e05._tabbingAway){
delete _e05._tabbingAway;
}else{
_e05.focus();
}
setTimeout(dojo.hitch(_e05,"_close"),1);
pion.widgets._TermTextBox.superclass._setValueAttr.call(_e05,_e07,true);
},initial_term:_e05.value,query:_e05.query,lang:_e05.lang,constraints:_e05.constraints});
}
if(!this._opened){
dijit.popup.open({parent:this,popup:this._picker,around:this.domNode,onCancel:dojo.hitch(this,this._close),onClose:function(){
_e05._opened=false;
}});
this._opened=true;
}
dojo.marginBox(this._picker.domNode,{w:this.domNode.offsetWidth});
},_close:function(){
if(this._opened){
dijit.popup.close(this._picker);
this._opened=false;
}
},_onBlur:function(){
this._close();
if(this._picker){
this._picker.destroy();
delete this._picker;
}
this.inherited(arguments);
},_getDisplayedValueAttr:function(){
return this.textbox.value;
},_setDisplayedValueAttr:function(_e08,_e09){
this._setValueAttr(this.parse(_e08,this.constraints),_e09,_e08);
},destroy:function(){
if(this._picker){
this._picker.destroy();
delete this._picker;
}
this.inherited(arguments);
},_onKeyPress:function(e){
var p=this._picker,dk=dojo.keys;
if(p&&this._opened&&p.handleKey){
if(p.handleKey(e)===false){
return;
}
}
if(this._opened&&e.charOrCode==dk.ESCAPE&&!e.shiftKey&&!e.ctrlKey&&!e.altKey){
this._close();
dojo.stopEvent(e);
}else{
if(!this._opened&&e.charOrCode==dk.DOWN_ARROW){
this._open();
dojo.stopEvent(e);
}else{
if(pion.widgets._TermTextBox.superclass._onKeyPress.apply(this,arguments)){
if(e.charOrCode===dk.TAB){
this._tabbingAway=true;
}else{
if(this._opened&&(e.keyChar||e.charOrCode===dk.BACKSPACE||e.charOrCode==dk.DELETE)){
setTimeout(dojo.hitch(this,function(){
dijit.placeOnScreenAroundElement(p.domNode.parentNode,this.domNode,{"BL":"TL","TL":"BL"},p.orient?dojo.hitch(p,"orient"):null);
}),1);
}
}
}
}
}
}});
dojo.declare("pion.widgets.TermTextBox",pion.widgets._TermTextBox,{query:{},baseClass:"dijitTextBox",popupClass:"pion.widgets.TermSelector"});
dojo.declare("pion.widgets.TermTextCell",dojox.grid.cells._Widget,{widgetClass:pion.widgets.TermTextBox,getWidgetProps:function(_e0a){
return dojo.mixin(this.inherited(arguments),{value:_e0a});
}});
}
if(!dojo._hasResource["plugins.codecs.Codec"]){
dojo._hasResource["plugins.codecs.Codec"]=true;
dojo.provide("plugins.codecs.Codec");
dojo.declare("plugins.codecs.CodecInitDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog codec_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Codec Initialization</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\"\r\n\t\t><table\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Plugin&nbsp;Type</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"Plugin\" \r\n\t\t\t\t\t\tstore=\"pion.codecs.plugin_data_store\" searchAttr=\"label\" \r\n\t\t\t\t\t\tstyle=\"width: 100%;\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Event&nbsp;Type</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"EventType\" query=\"{Type: 'object'}\" \r\n\t\t\t\t\t\tstore=\"pion.terms.store\" searchAttr=\"id\" /></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><div class=\"save_cancel_delete\"\r\n\t\t\t><button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: hide\">Cancel</button\r\n\t\t></div\r\n\t></div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true});
dojo.declare("plugins.codecs.CodecPane",[dijit.layout.ContentPane,dijit._Templated],{templateString:"<div class='codec_pane' dojoAttachPoint='containerNode'\r\n\t><form dojoAttachPoint=\"form\" dojoType=\"dijit.form.Form\"\r\n\t\t><br/\r\n\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" width=\"100%\"\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name</label></td\r\n\t\t\t\t><td><input dojoAttachPoint=\"name\" dojoType=\"dijit.form.TextBox\" name=\"Name\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td rowspan=\"4\" valign=\"top\" width=\"20\">&nbsp;</td\r\n\t\t\t\t><td rowspan=\"1\"><label>Comments</label></td\r\n\t\t\t\t><td rowspan=\"4\" valign=\"top\"><textarea dojoType=\"dijit.form.SimpleTextarea\" name=\"Comment\" rows=\"4\"  class=\"comment\"></textarea></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>ID</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" disabled=\"true\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td rowspan=\"3\">&nbsp;</td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Plugin&nbsp;Type</label></td\r\n\t\t\t\t><td><div dojoType=pion.widgets.ConfigAccordionPluginType plugin_type=${plugin_type}></div></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Event&nbsp;Type</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"EventType\"\r\n\t\t\t\t\t\tstore=\"pion.terms.store\" searchAttr=\"id\" query=\"{Type: 'object'}\" /></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><br/\r\n\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" style=\"border: 1px solid #999999;\" width=\"99%\"\r\n\t\t\t><tr\r\n\t\t\t\t><td class=\"matrixMainHeader\">Map Field Names to Terms</td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td style=\"background-color: #f1f1f1;\"\r\n\t\t\t\t\t><div class=\"codec_grid plugin_pane_grid\" dojoAttachPoint=\"field_mapping_grid_node\"></div\r\n\t\t\t\t\t><button dojoType=dijit.form.Button class=\"add_new_row\" dojoAttachEvent=\"onClick: _handleAddNewField\">ADD NEW ROW</button\r\n\t\t\t\t></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><hr noshade=\"noshade\" size=\"1\" color=\"#999999\"\r\n\t\t><div class=\"save_cancel_delete\"\r\n\t\t\t><button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick: save\">Save Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: cancel\">Cancel Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"delete\" dojoAttachEvent=\"onClick: delete2\">Delete Codec</button\r\n\t\t></div\r\n\t></form\r\n\t><div dojoAttachPoint=\"pane_end\" class=\"zero_height_end_marker\"></div\r\n></div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
this.special_config_elements=["Field","tagName","childNodes"];
var _e0b=this;
this.field_mapping_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
this.field_mapping_store.next_id=0;
this._initFieldMappingGridLayout();
this.field_mapping_grid=new dojox.grid.DataGrid({store:this.field_mapping_store,structure:this.field_mapping_grid_layout,escapeHTMLInData:false,singleClickEdit:true},document.createElement("div"));
this.field_mapping_grid_node.appendChild(this.field_mapping_grid.domNode);
this.field_mapping_grid.startup();
this.field_mapping_grid.connect(this.field_mapping_grid,"onCellClick",function(e){
if(e.cell.name=="Delete"){
this.store.deleteItem(this.getItem(e.rowIndex));
_e0b.markAsChanged();
dojo.stopEvent(e);
}
});
this.connect(this.field_mapping_grid,"onApplyCellEdit",_e0b._handleCellEdit);
dojo.query("input",this.domNode).forEach(function(n){
dojo.connect(n,"change",_e0b,_e0b.markAsChanged);
});
dojo.query("textarea",this.domNode).forEach(function(n){
dojo.connect(n,"change",_e0b,_e0b.markAsChanged);
});
dojo.query("select",this.domNode).forEach(function(n){
dojo.connect(n,"change",_e0b,_e0b.markAsChanged);
});
this.populateWithDefaults();
},populateWithDefaults:function(){
},_initFieldMappingGridLayout:function(){
this.field_mapping_grid_layout=[{defaultCell:{editable:true,type:dojox.grid.cells._Widget,styles:"text-align: left;"},rows:[{field:"FieldName",name:"Field Name",width:15,formatter:pion.xmlCellFormatter},{field:"Term",name:"Term",relWidth:1,type:pion.widgets.TermTextCell},{name:"Delete",classes:"delete button",editable:false,formatter:pion.makeDeleteButton}]}];
},getHeight:function(){
return this.pane_end.offsetTop;
},populateFromConfigItem:function(item){
this.populateWithDefaults();
var _e0c=pion.codecs.config_store;
var _e0d={};
var _e0e=_e0c.getAttributes(item);
for(var i=0;i<_e0e.length;++i){
if(dojo.indexOf(this.special_config_elements,_e0e[i])==-1){
_e0d[_e0e[i]]=_e0c.getValue(item,_e0e[i]).toString();
}
}
if(this._addCustomConfigValues){
this._addCustomConfigValues(_e0d,item);
}
this.form.set("value",_e0d);
this._reloadFieldMappingStore(item);
var node=this.domNode;
setTimeout(function(){
dojo.removeClass(node,"unsaved_changes");
},500);
},_reloadFieldMappingStore:function(_e0f){
var _e10=this;
this.field_mapping_store.fetch({onItem:function(_e11){
_e10.field_mapping_store.deleteItem(_e11);
},onComplete:function(){
_e10._repopulateFieldMappingStore(_e0f);
},onError:pion.handleFetchError});
},_repopulateFieldMappingStore:function(_e12){
var _e13=this;
var _e14=pion.codecs.config_store;
dojo.forEach(_e14.getValues(_e12,"Field"),function(_e15){
var _e16={ID:_e13.field_mapping_store.next_id++,FieldName:_e14.getValue(_e15,"text()"),Term:_e14.getValue(_e15,"@term")};
_e13.field_mapping_store.newItem(_e16);
});
},_handleCellEdit:function(_e17,_e18,_e19){
console.debug("CodecPane._handleCellEdit inValue = ",_e17,", inRowIndex = ",_e18,", inFieldIndex = ",_e19);
dojo.addClass(this.domNode,"unsaved_changes");
},_handleAddNewField:function(){
this.markAsChanged();
this.field_mapping_store.newItem({ID:this.field_mapping_store.next_id++});
var h=this.field_mapping_grid.connect(this.field_mapping_grid,"endUpdate",function(){
this.focus.setFocusIndex(this.rowCount-1,0);
this.disconnect(h);
});
},onFieldMappingPutDataReady:function(){
},save:function(){
var _e1a=this;
this.field_mapping_store.fetch({onComplete:function(_e1b){
dojo.removeClass(_e1a.domNode,"unsaved_changes");
_e1a.field_mapping_put_data=_e1a._makeFieldElements(_e1b);
_e1a.doPutRequest();
},onError:pion.handleFetchError});
},_makeFieldElements:function(_e1c){
var _e1d="";
var _e1e=this.field_mapping_store;
dojo.forEach(_e1c,function(item){
_e1d+="<Field term=\""+_e1e.getValue(item,"Term")+"\">";
_e1d+=pion.escapeXml(_e1e.getValue(item,"FieldName"))+"</Field>";
});
return _e1d;
},doPutRequest:function(){
var _e1f=this.form.get("value");
var _e20="<PionConfig><Codec>";
for(var tag in _e1f){
if(tag.charAt(0)!="@"&&tag!="options"){
console.debug("config[",tag,"] = ",_e1f[tag]);
_e20+=pion.makeXmlLeafElement(tag,_e1f[tag]);
}
}
if(this._makeCustomElements){
_e20+=this._makeCustomElements(_e1f);
}
_e20+=this.field_mapping_put_data;
_e20+="</Codec></PionConfig>";
console.debug("put_data: ",_e20);
_this=this;
dojo.rawXhrPut({url:"/config/codecs/"+this.uuid,contentType:"text/xml",handleAs:"xml",putData:_e20,load:function(_e21){
console.debug("response: ",_e21);
pion.codecs.config_store.fetch({query:{"@id":_this.uuid},onItem:function(item){
_this.config_item=item;
_this.populateFromConfigItem(item);
},onError:pion.handleFetchError});
},error:pion.getXhrErrorHandler(dojo.rawXhrPut,{putData:_e20})});
},cancel:function(){
dojo.removeClass(this.domNode,"unsaved_changes");
this.populateFromConfigItem(this.config_item);
},delete2:function(){
dojo.removeClass(this.domNode,"unsaved_changes");
console.debug("delete2: selected codec is ",this.title);
_this=this;
dojo.xhrDelete({url:"/config/codecs/"+this.uuid,handleAs:"xml",timeout:5000,load:function(_e22,_e23){
console.debug("xhrDelete for url = /config/codecs/"+this.uuid,"; HTTP status code: ",_e23.xhr.status);
dijit.byId("codec_config_accordion").forward();
dijit.byId("codec_config_accordion").removeChild(_this);
pion.codecs._adjustAccordionSize();
return _e22;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
},markAsChanged:function(e){
console.debug("markAsChanged: e = ",e);
dojo.addClass(this.domNode,"unsaved_changes");
},codec:""});
}
if(!dojo._hasResource["plugins.codecs.LogCodec"]){
dojo._hasResource["plugins.codecs.LogCodec"]=true;
dojo.provide("plugins.codecs.LogCodec");
plugins.codecs.LogCodec={custom_post_data:"<Flush>false</Flush><Headers>false</Headers>"+"<Events split=\"\\r\\n\" join=\"\\n\" comment=\"#\"/>"+"<Fields split=\" \\t\" join=\"\\_\" consume=\"true\"/>"};
dojo.declare("plugins.codecs.LogCodecPane",[plugins.codecs.CodecPane],{templateString:"<div class='codec_pane' dojoAttachPoint='containerNode'\r\n\t><form dojoAttachPoint=\"form\" dojoType=\"dijit.form.Form\"\r\n\t\t><br/\r\n\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" width=\"100%\"\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name</label></td\r\n\t\t\t\t><td><input dojoAttachPoint=\"name\" dojoType=\"dijit.form.TextBox\" name=\"Name\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td rowspan=\"4\" valign=\"top\" width=\"20\">&nbsp;</td\r\n\t\t\t\t><td rowspan=\"1\"><label>Comments</label></td\r\n\t\t\t\t><td rowspan=\"3\" valign=\"top\"><textarea dojoType=\"dijit.form.SimpleTextarea\" name=\"Comment\" rows=\"4\"  class=\"comment\"></textarea></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>ID</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" disabled=\"true\" style=\"width: 100%;\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Plugin&nbsp;Type</label></td\r\n\t\t\t\t><td><div dojoType=pion.widgets.ConfigAccordionPluginType plugin_type=${plugin_type}></div></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Event&nbsp;Type</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"EventType\"\r\n\t\t\t\t\t\tstore=\"pion.terms.store\" searchAttr=\"id\" query=\"{Type: 'object'}\" /></td\r\n\t\t\t\t><td><label>Time&nbsp;Offset&nbsp;(minutes)</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"TimeOffset\" style=\"width: 50px;\"/></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"Flush\"/\r\n\t\t><label>Flush output stream after each write</label\r\n\t\t><br/\r\n\t\t><input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"Headers\" dojoAttachEvent=\"onClick: updateDisabling\"/\r\n\t\t><label>Extended Log Format</label\r\n\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" width=\"100%\" dojoAttachPoint=\"separators\"\r\n\t\t\t><tr\r\n\t\t\t\t><th width=\"120px\"></th\r\n\t\t\t\t><th>Record Separators</th\r\n\t\t\t\t><th rowspan=\"4\" valign=\"top\" width=\"20\">&nbsp;</th\r\n\t\t\t\t><th width=\"120px\"></th\r\n\t\t\t\t><th>Field Separators</th\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Split&nbsp;Set</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@event_split_set\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td><label class=\"disable_for_ELF\">Split&nbsp;Set</label></td\r\n\t\t\t\t><td><input class=\"disable_for_ELF\" dojoType=\"dijit.form.TextBox\" name=\"@field_split_set\" style=\"width: 95%;\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Join&nbsp;String</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@event_join_string\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td><label class=\"disable_for_ELF\">Join&nbsp;String</label></td\r\n\t\t\t\t><td><input class=\"disable_for_ELF\" dojoType=\"dijit.form.TextBox\" name=\"@field_join_string\" style=\"width: 95%;\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Comment&nbsp;Char</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.ValidationTextBox\" regExp=\".?\" name=\"@comment_prefix\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td><label class=\"disable_for_ELF\">Consecutive&nbsp;Delimiters</label></td\r\n\t\t\t\t><td\r\n\t\t\t\t\t ><select dojoType=\"pion.widgets.SimpleSelect\" style=\"width: 95%;\" name=\"@consec_field_delims\"\r\n\t\t\t\t\t\t><option value=\"true\">equivalent to single delimiter</option\r\n\t\t\t\t\t\t><option value=\"false\">indicate empty fields</option\r\n\t\t\t\t\t></select\r\n\t\t\t\t></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" style=\"border: 1px solid #999999;\" width=\"99%\"\r\n\t\t\t><tr\r\n\t\t\t\t><td class=\"matrixMainHeader\">Map Field Names to Terms</td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td style=\"background-color: #f1f1f1;\"\r\n\t\t\t\t\t><div class=\"codec_grid plugin_pane_grid\" dojoAttachPoint=\"field_mapping_grid_node\"></div\r\n\t\t\t\t\t><button dojoType=dijit.form.Button class=\"add_new_row\" dojoAttachEvent=\"onClick: _handleAddNewField\">ADD NEW ROW</button\r\n\t\t\t\t></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><hr noshade=\"noshade\" size=\"1\" color=\"#999999\"\r\n\t\t><div class=\"save_cancel_delete\"\r\n\t\t\t><button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick: save\">Save Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: cancel\">Cancel Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"delete\" dojoAttachEvent=\"onClick: delete2\">Delete Codec</button\r\n\t\t></div\r\n\t></form\r\n\t><div dojoAttachPoint=\"pane_end\" class=\"zero_height_end_marker\"></div\r\n></div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
this.special_config_elements.push("Events");
this.special_config_elements.push("Fields");
this.populateWithDefaults();
},populateWithDefaults:function(){
this.inherited("populateWithDefaults",arguments);
this.form.set("value",{TimeOffset:0});
this.form.set("value",{"@event_split_set":"","@event_join_string":"","@comment_prefix":"","@field_split_set":"","@field_join_string":"","@consec_field_delims":"true"});
},_initFieldMappingGridLayout:function(){
this.field_mapping_grid_layout=[{defaultCell:{editable:true,type:dojox.grid.cells._Widget,styles:"text-align: left;"},rows:[{field:"FieldName",name:"Field Name",relWidth:1,formatter:pion.xmlCellFormatter},{field:"Term",name:"Term",relWidth:2,type:pion.widgets.TermTextCell},{field:"StartChar",name:"Start Char",styles:"text-align: center;",width:3,formatter:pion.xmlCellFormatter},{field:"EndChar",name:"End Char",styles:"text-align: center;",width:3,formatter:pion.xmlCellFormatter},{field:"StartEndOptional",name:"Start/End Optional",width:4,classes:"bool",type:dojox.grid.cells.Bool},{field:"URLEncode",name:"URL Encode",width:4,classes:"bool",type:dojox.grid.cells.Bool},{field:"EscapeChar",name:"Escape Char",styles:"text-align: center;",width:4,formatter:pion.xmlCellFormatter},{field:"EmptyString",name:"Empty String",styles:"text-align: center;",width:4,formatter:pion.xmlCellFormatter},{field:"Order",name:"Order",styles:"text-align: center;",width:4,widgetClass:dijit.form.NumberSpinner},{name:"Delete",classes:"delete button",editable:false,formatter:pion.makeDeleteButton}]}];
},getHeight:function(){
return this.pane_end.offsetTop;
},_addCustomConfigValues:function(_e24,item){
var _e25=pion.codecs.config_store;
_e24.options=[];
if(_e25.hasAttribute(item,"Flush")){
if(_e25.getValue(item,"Flush").toString()=="true"){
_e24.options.push("Flush");
}
}
var _e26=false;
if(_e25.hasAttribute(item,"Headers")){
if(_e25.getValue(item,"Headers").toString()=="true"){
_e24.options.push("Headers");
this.disableAndClearFieldSeparatorFields();
_e26=true;
}
}
var _e27=_e25.getValue(item,"Events");
if(_e27){
_e24["@event_split_set"]=_e25.getValue(_e27,"@split");
_e24["@event_join_string"]=_e25.getValue(_e27,"@join");
_e24["@comment_prefix"]=_e25.getValue(_e27,"@comment");
}
if(!_e26){
var _e28=_e25.getValue(item,"Fields");
if(_e28){
_e24["@field_split_set"]=_e25.getValue(_e28,"@split");
_e24["@field_join_string"]=_e25.getValue(_e28,"@join");
_e24["@consec_field_delims"]=_e25.getValue(_e28,"@consume");
}
}
},_makeCustomElements:function(_e29){
var _e2a="<Flush>";
_e2a+=(dojo.indexOf(_e29.options,"Flush")!=-1);
_e2a+="</Flush><Headers>";
_e2a+=(dojo.indexOf(_e29.options,"Headers")!=-1);
_e2a+="</Headers><Events";
if(_e29["@event_split_set"]){
_e2a+=" split=\""+pion.escapeXml(_e29["@event_split_set"])+"\"";
}
if(_e29["@event_join_string"]){
_e2a+=" join=\""+pion.escapeXml(_e29["@event_join_string"])+"\"";
}
if(_e29["@comment_prefix"]){
_e2a+=" comment=\""+pion.escapeXml(_e29["@comment_prefix"])+"\"";
}
_e2a+="/><Fields";
if(_e29["@field_split_set"]){
_e2a+=" split=\""+pion.escapeXml(_e29["@field_split_set"])+"\"";
}
if(_e29["@field_join_string"]){
_e2a+=" join=\""+pion.escapeXml(_e29["@field_join_string"])+"\"";
}
if(_e29["@consec_field_delims"]){
_e2a+=" consume=\""+pion.escapeXml(_e29["@consec_field_delims"])+"\"";
}
_e2a+="/>";
return _e2a;
},_repopulateFieldMappingStore:function(_e2b){
var _e2c=this;
var _e2d=pion.codecs.config_store;
_e2c.order_map=[];
var _e2e=1;
dojo.forEach(_e2d.getValues(_e2b,"Field"),function(_e2f){
var _e30={ID:_e2c.field_mapping_store.next_id++,FieldName:_e2d.getValue(_e2f,"text()"),Term:_e2d.getValue(_e2f,"@term"),StartChar:_e2d.getValue(_e2f,"@start"),EndChar:_e2d.getValue(_e2f,"@end"),StartEndOptional:_e2d.getValue(_e2f,"@optional"),URLEncode:_e2d.getValue(_e2f,"@urlencode"),EscapeChar:_e2d.getValue(_e2f,"@escape"),EmptyString:_e2d.getValue(_e2f,"@empty"),Order:_e2e};
_e2c.field_mapping_store.newItem(_e30);
_e2c.order_map.push(_e2e++);
});
},_handleCellEdit:function(_e31,_e32,_e33){
console.debug("LogCodecPane._handleCellEdit inValue = ",_e31,", inRowIndex = ",_e32,", attr_name = ",_e33);
dojo.addClass(this.domNode,"unsaved_changes");
if(_e33=="Order"){
var _e34=this.order_map[_e32];
var _e35=this.order_map;
console.debug("1: order_map = ",_e35);
_e35[_e32]=_e31;
if(_e31>_e34){
for(var i=0;i<_e35.length;++i){
if(_e35[i]>_e34&&_e35[i]<=_e31&&i!=_e32){
_e35[i]--;
}
}
}else{
for(var i=0;i<_e35.length;++i){
if(_e35[i]>=_e31&&_e35[i]<_e34&&i!=_e32){
_e35[i]++;
}
}
}
console.debug("2: order_map = ",_e35);
for(var i=0;i<_e35.length;++i){
var item=this.field_mapping_grid.getItem(i);
this.field_mapping_store.setValue(item,"Order",_e35[i]);
}
}
},_makeFieldElements:function(_e36){
var _e37=_e36.length;
var _e38=[];
for(var i=0;i<_e37;++i){
if(this.order_map.length==_e37){
_e38[this.order_map[i]-1]=i;
}else{
_e38[i]=i;
}
}
console.debug("this.order_map = ",this.order_map);
console.debug("inverse_order_map = ",_e38);
var _e39="";
var _e3a=this.field_mapping_store;
for(var i=0;i<_e37;++i){
var item=_e36[_e38[i]];
_e39+="<Field term=\""+_e3a.getValue(item,"Term")+"\"";
if(_e3a.getValue(item,"StartChar")){
_e39+=" start=\""+pion.escapeXml(_e3a.getValue(item,"StartChar"))+"\"";
}
if(_e3a.getValue(item,"EndChar")){
_e39+=" end=\""+pion.escapeXml(_e3a.getValue(item,"EndChar"))+"\"";
}
if(_e3a.getValue(item,"StartEndOptional")){
_e39+=" optional=\"true\"";
}
if(_e3a.getValue(item,"URLEncode")){
_e39+=" urlencode=\"true\"";
}
if(_e3a.getValue(item,"EscapeChar")){
_e39+=" escape=\""+pion.escapeXml(_e3a.getValue(item,"EscapeChar"))+"\"";
}
if(_e3a.getValue(item,"EmptyString")){
_e39+=" empty=\""+pion.escapeXml(_e3a.getValue(item,"EmptyString"))+"\"";
}
_e39+=">"+pion.escapeXml(_e3a.getValue(item,"FieldName"))+"</Field>";
}
return _e39;
},disableAndClearFieldSeparatorFields:function(){
dojo.query("input.disable_for_ELF",this.separators).forEach(function(n){
n.setAttribute("disabled",true);
});
dojo.query("select",this.separators).forEach(function(n){
dijit.byNode(n).attr("disabled",true);
dijit.byNode(n).attr("value",null);
});
dojo.query("label.disable_for_ELF",this.separators).forEach(function(n){
dojo.addClass(n,"disabled");
});
var _e3b=this.form.attr("value");
_e3b["@field_split_set"]="";
_e3b["@field_join_string"]="";
this.form.attr("value",_e3b);
},updateDisabling:function(e){
if(e.target.checked){
this.disableAndClearFieldSeparatorFields();
}else{
dojo.query("input.disable_for_ELF",this.separators).forEach(function(n){
n.removeAttribute("disabled");
});
dojo.query("select",this.separators).forEach(function(n){
dijit.byNode(n).attr("disabled",false);
});
dojo.query("label.disable_for_ELF",this.separators).forEach(function(n){
dojo.removeClass(n,"disabled");
});
}
}});
}
if(!dojo._hasResource["plugins.codecs.XMLCodec"]){
dojo._hasResource["plugins.codecs.XMLCodec"]=true;
dojo.provide("plugins.codecs.XMLCodec");
dojo.declare("plugins.codecs.XMLCodecPane",[plugins.codecs.CodecPane],{templateString:"<div class='codec_pane' dojoAttachPoint='containerNode'\r\n\t><form dojoAttachPoint=\"form\" dojoType=\"dijit.form.Form\"\r\n\t\t><br/\r\n\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" width=\"100%\"\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name</label></td\r\n\t\t\t\t><td><input dojoAttachPoint=\"name\" dojoType=\"dijit.form.TextBox\" name=\"Name\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td rowspan=\"4\" valign=\"top\" width=\"20\">&nbsp;</td\r\n\t\t\t\t><td rowspan=\"1\"><label>Comments</label></td\r\n\t\t\t\t><td rowspan=\"4\" valign=\"top\"><textarea dojoType=\"dijit.form.SimpleTextarea\" name=\"Comment\" rows=\"4\"  class=\"comment\"></textarea></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>ID</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" disabled=\"true\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td rowspan=\"3\">&nbsp;</td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Plugin&nbsp;Type</label></td\r\n\t\t\t\t><td><div dojoType=pion.widgets.ConfigAccordionPluginType plugin_type=${plugin_type}></div></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Event&nbsp;Type</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"EventType\"\r\n\t\t\t\t\t\tstore=\"pion.terms.store\" searchAttr=\"id\" query=\"{Type: 'object'}\" /></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Event&nbsp;Tag</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"EventTag\" style=\"width: 100%;\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Event&nbsp;Container&nbsp;Tag</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"EventContainerTag\" style=\"width: 100%;\"/></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><br/\r\n\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" style=\"border: 1px solid #999999;\" width=\"99%\"\r\n\t\t\t><tr\r\n\t\t\t\t><td class=\"matrixMainHeader\">Map Field Names to Terms</td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td style=\"background-color: #f1f1f1;\"\r\n\t\t\t\t\t><div class=\"codec_grid plugin_pane_grid\" dojoAttachPoint=\"field_mapping_grid_node\"></div\r\n\t\t\t\t\t><button dojoType=dijit.form.Button class=\"add_new_row\" dojoAttachEvent=\"onClick: _handleAddNewField\">ADD NEW ROW</button\r\n\t\t\t\t></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><hr noshade=\"noshade\" size=\"1\" color=\"#999999\"\r\n\t\t><div class=\"save_cancel_delete\"\r\n\t\t\t><button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick: save\">Save Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: cancel\">Cancel Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"delete\" dojoAttachEvent=\"onClick: delete2\">Delete Codec</button\r\n\t\t></div\r\n\t></form\r\n\t><div dojoAttachPoint=\"pane_end\" class=\"zero_height_end_marker\"></div\r\n></div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
this.populateWithDefaults();
},populateWithDefaults:function(){
this.inherited("populateWithDefaults",arguments);
this.form.attr("value",{EventTag:"Event",EventContainerTag:"Events"});
},getHeight:function(){
return this.pane_end.offsetTop;
}});
}
if(!dojo._hasResource["pion.codecs"]){
dojo._hasResource["pion.codecs"]=true;
dojo.provide("pion.codecs");
pion.codecs.getHeight=function(){
return pion.codecs.codec_config_height;
};
pion.codecs.config_store=new dojox.data.XmlStore({url:"/config/codecs"});
pion.codecs.config_store.fetchItemByIdentity=function(_e3c){
pion.codecs.config_store.fetch({query:{"@id":_e3c.identity},onItem:_e3c.onItem,onError:pion.handleFetchError});
};
pion.codecs.config_store.getIdentity=function(item){
return pion.codecs.config_store.getValue(item,"@id");
};
pion.codecs.init=function(){
pion.codecs.selected_pane=null;
pion.codecs.config_accordion=dijit.byId("codec_config_accordion");
var url=dojo.moduleUrl("plugins","codecs.json");
pion.codecs.plugin_data_store=new dojo.data.ItemFileReadStore({url:url});
dojo.subscribe("codec_config_accordion-selectChild",codecPaneSelected);
dojo.subscribe("codec_config_accordion-addChild",codecPaneAdded);
dojo.subscribe("codec_config_accordion-removeChild",codecPaneRemoved);
pion.codecs.createNewPaneFromStore=function(id,_e3d){
pion.codecs.config_store.fetch({query:{"@id":id},onItem:function(item){
var _e3e=pion.codecs.config_accordion.createNewPaneFromItem(item,pion.codecs.config_store);
if(_e3d){
pion.codecs._adjustAccordionSize();
dijit.byId("codec_config_accordion").selectChild(_e3e);
}
},onError:pion.getFetchErrorHandler("fetch() called by pion.codecs.createNewPaneFromStore()")});
};
function _e3f(_e40,_e41){
pion.codecs.config_accordion.createPanesFromAllItems(_e40,pion.codecs.config_store);
};
pion.codecs.config_store.fetch({onComplete:_e3f,onError:pion.getFetchErrorHandler("fetch() called by pion.codecs.init()")});
dijit.byId("codec_config").button.onClick=addNewCodec;
};
function addNewCodec(){
var _e42=new plugins.codecs.CodecInitDialog({title:"Add New Codec"});
_e42.show();
_e42.execute=function(_e43){
console.debug(_e43);
var _e44="<PionConfig><Codec>";
for(var tag in _e43){
console.debug("dialogFields[",tag,"] = ",_e43[tag]);
_e44+=pion.makeXmlLeafElement(tag,_e43[tag]);
}
if(plugins.codecs[_e43.Plugin]&&plugins.codecs[_e43.Plugin].custom_post_data){
_e44+=plugins.codecs[_e43.Plugin].custom_post_data;
}
_e44+="</Codec></PionConfig>";
console.debug("post_data: ",_e44);
dojo.rawXhrPost({url:"/config/codecs",contentType:"text/xml",handleAs:"xml",postData:_e44,load:function(_e45){
var node=_e45.getElementsByTagName("Codec")[0];
var id=node.getAttribute("id");
console.debug("id (from server): ",id);
pion.codecs.createNewPaneFromStore(id,true);
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_e44})});
};
};
pion.codecs._adjustAccordionSize=function(){
var _e46=dijit.byId("codec_config_accordion");
var _e47=pion.codecs.selected_pane.getHeight();
dojo.forEach(_e46.getChildren(),function(pane){
_e47+=pane._buttonWidget.getTitleHeight();
});
_e46.resize({h:_e47});
pion.codecs.codec_config_height=dojo.byId("codec_config_end").offsetTop;
dijit.byId("main_stack_container").resize({h:pion.codecs.codec_config_height});
};
function replaceCodecAccordionPane(_e48){
var _e49=pion.codecs.config_store.getValue(_e48.config_item,"Plugin");
var _e4a="plugins.codecs."+_e49+"Pane";
var _e4b=dojo.getObject(_e4a);
if(_e4b){
console.debug("found class ",_e4a);
var _e4c=new _e4b({title:_e48.title,plugin_type:_e49});
}else{
console.debug("class ",_e4a," not found; using plugins.codecs.CodecPane instead.");
var _e4c=new plugins.codecs.CodecPane({title:_e48.title,plugin_type:_e49});
}
_e4c.uuid=_e48.uuid;
_e4c.config_item=_e48.config_item;
_e4c.initialized=true;
var _e4d=dijit.byId("codec_config_accordion");
var idx=_e4d.getIndexOfChild(_e48);
_e4d.pendingSelection=_e4c;
_e4d.pendingRemoval=_e48;
_e4d.addChild(_e4c,idx);
};
function updateCodecPane(pane){
console.debug("Fetching item ",pane.uuid);
var _e4e=pion.codecs.config_store;
_e4e.fetch({query:{"@id":pane.uuid},onComplete:function(_e4f){
if(_e4f.length>0){
pane.populateFromConfigItem(_e4f[0]);
}
},onError:pion.getFetchErrorHandler("fetch() called by codecPaneSelected()")});
pion.codecs._adjustAccordionSize();
dojo.style(pane.containerNode,"overflow","hidden");
};
function codecPaneSelected(pane){
console.debug("Selected "+pane.title);
var _e50=pion.codecs.selected_pane;
if(pane==_e50){
return;
}
var _e51=dijit.byId("codec_config_accordion");
if(_e50&&dojo.hasClass(_e50.domNode,"unsaved_changes")){
var _e52=new dijit.Dialog({title:"Warning: unsaved changes"});
_e52.attr("content","Please save or cancel unsaved changes before selecting another Codec.");
_e52.show();
setTimeout(function(){
_e51.selectChild(_e50);
},500);
return;
}
setTimeout(function(){
if(_e51.pendingRemoval){
_e51.removeChild(_e51.pendingRemoval);
_e51.pendingRemoval=false;
}
if(!pane.initialized){
replaceCodecAccordionPane(pane);
}else{
pion.codecs.selected_pane=pane;
updateCodecPane(pane);
}
},_e51.duration+100);
};
function codecPaneAdded(pane){
console.debug("Added "+pane.title);
var _e53=dijit.byId("codec_config_accordion");
setTimeout(function(){
if(_e53.pendingSelection){
_e53.selectChild(_e53.pendingSelection);
_e53.pendingSelection=false;
}
},_e53.duration);
};
function codecPaneRemoved(pane){
console.debug("Removed "+pane.title);
};
}
if(!dojo._hasResource["plugins.reactors.LogOutputReactor"]){
dojo._hasResource["plugins.reactors.LogOutputReactor"]=true;
dojo.provide("plugins.reactors.LogOutputReactor");
dojo.declare("plugins.reactors.LogOutputReactor",[plugins.reactors.Reactor],{postCreate:function(){
this.config.Plugin="LogOutputReactor";
this.inherited("postCreate",arguments);
}});
plugins.reactors.LogOutputReactor.label="Log File Output Reactor";
dojo.declare("plugins.reactors.LogOutputReactorInitDialog",[plugins.reactors.ReactorInitDialog],{templateString:"<div class=\"dijitDialog reactor_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Log File Output Reactor Initialization</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\">\r\n\t\t<table>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>Name:</label></td>\r\n\t\t\t\t<td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>Comments:</label></td>\r\n\t\t\t\t<td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>Codec:</label></td>\r\n\t\t\t\t<td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"Codec\" store=\"pion.codecs.config_store\" searchAttr=\"Name\"/></td>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<td><label>Filename:</label></td>\r\n\t\t\t\t<td><input dojoType=\"dijit.form.TextBox\" name=\"Filename\"/></td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\t</div>\r\n\t<div class=\"save_cancel_delete\">\r\n\t\t<button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick: tryConfig\">Save</button>\r\n\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
}});
dojo.declare("plugins.reactors.LogOutputReactorDialog",[plugins.reactors.ReactorDialog],{templateString:"<div class=\"dijitDialog reactor_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Log Output Reactor Configuration</span>\r\n\t\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: onCancel\">\r\n\t\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent storage\">\r\n\t\t<!--start div to set padding for top half of dialog-->\r\n\t\t<div class=\"reactor_dialog_top\">\r\n\r\n\t\t\t<div dojoType=plugins.reactors.ReactorBoilerplate\r\n\t\t\t\t label=\"Log Output Reactor\" name=\"LogOutputReactor\" category=\"Storage\"\r\n\t\t\t\t description=\"Write real-time data out to a structured file.\">\r\n\t\t\t</div>\r\n\r\n\t\t\t<!--start reactor settings-->\r\n\t\t\t<table\r\n\t\t\t\t><tr\r\n\t\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>ID:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" class=\"id_text_box\" disabled=\"true\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Codec:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"Codec\" store=\"pion.codecs.config_store\" searchAttr=\"Name\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Filename:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Filename\"/></td\r\n\t\t\t\t></tr\r\n\t\t\t></table>\r\n\t\t\t<!--end reactor settings-->\r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for top half of dialog-->\r\n\r\n\t\t<!--start div to set padding for bottom half of dialog-->\r\n\t\t<div class=\"reactor_dialog_bottom\">\r\n\r\n\t\t\t<!--start buttons-->\r\n\t\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t\t<!--end buttons--> \r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for bottom half of dialog-->\r\n\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true});
}
if(!dojo._hasResource["pion.terms"]){
dojo._hasResource["pion.terms"]=true;
dojo.provide("pion.terms");
pion.terms.store=new dojox.data.XmlStore({url:"/config/terms",rootItem:"Term",attributeMap:{"Term.id":"@id"}});
pion.terms.store.fetchItemByIdentity=function(_e54){
pion.terms.store.fetch({query:{"@id":_e54.identity},onItem:_e54.onItem,onError:pion.handleFetchError});
};
pion.terms.store.getIdentity=function(item){
return pion.terms.store.getValue(item,"@id");
};
pion.terms.type_store=new dojo.data.ItemFileReadStore({url:"/resources/termTypes.json"});
pion.terms.init=function(){
pion.terms.initTermTypeLookups();
};
pion.terms.initTermTypeLookups=function(){
pion.terms.types_by_description={};
pion.terms.type_descriptions_by_name={};
pion.terms.categories_by_type={};
var _e55=pion.terms.type_store;
_e55.fetch({onItem:function(item,_e56){
pion.terms.types_by_description[_e55.getValue(item,"description")]=_e55.getValue(item,"name");
pion.terms.type_descriptions_by_name[_e55.getValue(item,"name")]=_e55.getValue(item,"description");
pion.terms.categories_by_type[_e55.getValue(item,"name")]=_e55.getValue(item,"category");
},onComplete:pion.terms.buildMapOfCategoriesByTerm,onError:pion.handleFetchError});
};
pion.terms.buildMapOfCategoriesByTerm=function(){
pion.terms.types_by_id={};
pion.terms.categories_by_id={};
pion.terms.term_comments_by_id={};
pion.terms.store.fetch({onItem:function(item){
var type=pion.terms.store.getValue(item,"Type").toString();
var id=pion.terms.store.getIdentity(item);
pion.terms.types_by_id[id]=pion.terms.type_descriptions_by_name[type];
pion.terms.categories_by_id[id]=pion.terms.categories_by_type[type];
if(pion.terms.store.hasAttribute(item,"Comment")){
pion.terms.term_comments_by_id[id]=pion.terms.store.getValue(item,"Comment");
}
},onError:pion.handleFetchError});
};
}
if(!dojo._hasResource["plugins.reactors.FilterReactor"]){
dojo._hasResource["plugins.reactors.FilterReactor"]=true;
dojo.provide("plugins.reactors.FilterReactor");
dojo.declare("plugins.reactors.FilterReactor",[plugins.reactors.Reactor],{postCreate:function(){
this.config.Plugin="FilterReactor";
this.inherited("postCreate",arguments);
this.special_config_elements.push("Comparison");
this.comparison_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
this.comparison_store.next_id=0;
this._populateComparisonStore();
},reloadComparisonStore:function(){
var _e57=this;
this.comparison_store.fetch({onItem:function(item){
_e57.comparison_store.deleteItem(item);
},onComplete:function(){
_e57._populateComparisonStore();
},onError:pion.handleFetchError});
},onDonePopulatingComparisonStore:function(){
},_populateComparisonStore:function(){
var _e58=this;
var _e59=pion.reactors.config_store;
this.getConfigItem().addCallback(function(_e5a){
var _e5b=_e59.getValues(_e5a,"Comparison");
for(var i=0;i<_e5b.length;++i){
var _e5c={ID:_e58.comparison_store.next_id++,Term:_e59.getValue(_e5b[i],"Term"),Type:_e59.getValue(_e5b[i],"Type"),MatchAllValues:plugins.reactors.FilterReactor.getBool(_e59,_e5b[i],"MatchAllValues")};
if(_e59.hasAttribute(_e5b[i],"Value")){
_e5c.Value=_e59.getValue(_e5b[i],"Value");
}
_e58.comparison_store.newItem(_e5c);
}
_e58.updateNamedCustomPutData("custom_put_data_from_config");
_e58.onDonePopulatingComparisonStore();
});
},_updateCustomData:function(){
this.custom_put_data_from_config=this.custom_put_data_from_comparison_store;
},_insertCustomData:function(){
this.put_data+=this.custom_put_data_from_config;
},updateNamedCustomPutData:function(_e5d){
var _e5e="";
var _e5f=this;
var _e60=this.comparison_store;
_e60.fetch({onItem:function(item){
_e5e+="<Comparison>";
_e5e+="<Term>"+_e60.getValue(item,"Term")+"</Term>";
_e5e+="<Type>"+_e60.getValue(item,"Type")+"</Type>";
if(_e60.hasAttribute(item,"Value")){
_e5e+=pion.makeXmlLeafElement("Value",_e60.getValue(item,"Value"));
}
_e5e+="<MatchAllValues>"+_e60.getValue(item,"MatchAllValues")+"</MatchAllValues>";
_e5e+="</Comparison>";
},onComplete:function(){
_e5f[_e5d]=_e5e;
},onError:pion.handleFetchError});
}});
plugins.reactors.FilterReactor.label="Filter Reactor";
dojo.declare("plugins.reactors.FilterReactorDialog",[plugins.reactors.ReactorDialog],{templateString:"<div class=\"dijitDialog reactor_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Filter Reactor Configuration</span>\r\n\t\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: onCancel\">\r\n\t\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent processing\">\r\n\t\t<!--start div to set padding for top half of dialog-->\r\n\t\t<div class=\"reactor_dialog_top\">\r\n\r\n\t\t\t<div dojoType=plugins.reactors.ReactorBoilerplate\r\n\t\t\t\t label=\"Filter Reactor\" name=\"FilterReactor\" category=\"Processing\"\r\n\t\t\t\t description=\"Include or exclude events based on user-defined criteria.\">\r\n\t\t\t</div>\r\n\r\n\t\t\t<!--start reactor settings-->\r\n\t\t\t<table cellpadding=\"0\" cellspacing=\"5\" border=\"0\"\r\n\t\t\t\t><tr\r\n\t\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>ID:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" class=\"id_text_box\" disabled=\"true\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t\t></tr\r\n\t\t\t></table>\r\n\t\t\t<!--end reactor settings-->\r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for top half of dialog-->\r\n\r\n\t\t<!--start div to set padding for bottom half of dialog-->\r\n\t\t<div class=\"reactor_dialog_bottom\">\r\n\r\n\t\t\t<!--start comparisons-->\r\n\t\t\t<div class=\"reactor_grid_block\">\r\n\t\t\t\t<div dojoType=\"pion.widgets.ReactorGridHeader\" title=\"Comparisons\" help=\"docs/comparisons\"></div>\r\n\t\t\t\t<input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"MatchAllComparisons\"/>\r\n\t\t\t\t<label>Match All Comparisons</label>\r\n\t\t\t\t<div class=\"reactor_dialog_grid\" dojoAttachPoint=\"comparison_grid_node\"></div>\r\n\t\t\t\t<button dojoAttachPoint=\"add_new_comparison_button\" dojoType=dijit.form.Button dojoAttachEvent=\"onClick:_handleAddNewComparison\" class=\"add_new_row\">ADD NEW COMPARISON</button>\r\n\t\t\t</div>\r\n\t\t\t<!--end comparisons-->\r\n\r\n\t\t\t<!--start buttons-->\r\n\t\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t\t<!--end buttons-->\r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for bottom half of dialog-->\r\n\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
var _e61=this;
var h=dojo.connect(this.reactor,"onDonePopulatingComparisonStore",function(){
_e61._updateCustomPutDataFromComparisonStore();
_e61.connect(_e61.reactor.comparison_store,"onSet","_updateCustomPutDataFromComparisonStore");
_e61.connect(_e61.reactor.comparison_store,"onDelete","_updateCustomPutDataFromComparisonStore");
dojo.disconnect(h);
});
this.reactor.reloadComparisonStore();
this.comparison_grid_layout=[{defaultCell:{width:8,editable:true,type:dojox.grid.cells._Widget,styles:"text-align: right;"},rows:[{field:"Term",name:"Term",relWidth:2,type:pion.widgets.TermTextCell},{field:"Type",name:"Comparison",relWidth:1,widgetClass:pion.widgets.SimpleSelect,widgetProps:{store:pion.reactors.comparison_type_store,query:{category:"generic"}}},{field:"Value",name:"Value",relWidth:2,formatter:pion.xmlCellFormatter},{field:"MatchAllValues",name:"Match&nbsp;All",classes:"match_all bool",type:dojox.grid.cells.Bool},{name:"Delete",classes:"delete button",editable:false,formatter:pion.makeDeleteButton}]}];
this.comparison_grid=new dojox.grid.DataGrid({store:this.reactor.comparison_store,structure:this.comparison_grid_layout,escapeHTMLInData:false,singleClickEdit:true,autoHeight:true},document.createElement("div"));
this.comparison_grid._prev_term_type_category=this.comparison_grid.structure[0].rows[1].widgetProps.query.category;
this.comparison_grid_node.appendChild(this.comparison_grid.domNode);
this.comparison_grid.startup();
this.comparison_grid.connect(this.comparison_grid,"onCellClick",_e61._handleCellClick);
this.comparison_grid.canEdit=function(cell,_e62){
switch(cell.field){
case "Value":
var item=this.getItem(_e62);
var type=this.store.getValue(item,"Type").toString();
return pion.reactors.arity_by_comparison_name[type]>1;
default:
return true;
}
};
this.connect(this,"onCancel",function(){
this.destroyRecursive(false);
});
this.connect(this,"execute",function(){
this.destroyRecursive(false);
});
},uninitialize:function(){
this.inherited("uninitialize",arguments);
if(this.comparison_grid.domNode){
this.comparison_grid.destroy();
}
},_updateCustomPutDataFromComparisonStore:function(){
this.reactor.updateNamedCustomPutData("custom_put_data_from_comparison_store");
},_insertCustomData:function(){
this.put_data+=this.reactor.custom_put_data_from_comparison_store;
},_handleCellClick:function(e){
console.debug("e.rowIndex = ",e.rowIndex,", e.cellIndex = ",e.cellIndex);
if(e.cellIndex==1){
var item=this.getItem(e.rowIndex);
var term=this.store.getValue(item,"Term").toString();
console.debug("term = ",term,", pion.terms.categories_by_id[term] = ",pion.terms.categories_by_id[term]);
if(pion.terms.categories_by_id[term]!=this._prev_term_type_category){
this._prev_term_type_category=pion.terms.categories_by_id[term];
if(e.cell.widget){
e.cell.widget.setQuery({category:pion.terms.categories_by_id[term]});
}else{
this.structure[0].rows[1].widgetProps.query.category=pion.terms.categories_by_id[term];
}
}
}else{
if(e.cellIndex==4){
console.debug("Removing row ",e.rowIndex);
this.store.deleteItem(this.getItem(e.rowIndex));
}
}
},_handleAddNewComparison:function(){
this.reactor.comparison_store.newItem({ID:this.reactor.comparison_store.next_id++,MatchAllValues:false});
}});
plugins.reactors.FilterReactor.option_defaults={MatchAllComparisons:false};
plugins.reactors.FilterReactor.grid_option_defaults={MatchAllValues:false};
plugins.reactors.FilterReactor.getBool=function(_e63,item,_e64){
if(_e63.hasAttribute(item,_e64)){
return _e63.getValue(item,_e64).toString()=="true";
}else{
return plugins.reactors.FilterReactor.grid_option_defaults[_e64];
}
};
}
if(!dojo._hasResource["plugins.reactors.TransformReactor"]){
dojo._hasResource["plugins.reactors.TransformReactor"]=true;
dojo.provide("plugins.reactors.TransformReactor");
dojo.declare("plugins.reactors.TransformReactor",[plugins.reactors.Reactor],{postCreate:function(){
this.config.Plugin="TransformReactor";
this.inherited("postCreate",arguments);
this.special_config_elements.push("Transformation");
this.transformation_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
this.transformation_store.next_id=0;
this.prepareToHandleLoadNotification();
this._populateTransformationStore();
},prepareToHandleLoadNotification:function(){
this.transformation_store_is_ready=false;
var h=this.connect(this,"onDonePopulatingTransformationStore",function(){
this.disconnect(h);
this._updatePutDataIfGridStoresReady();
});
},_updatePutDataIfGridStoresReady:function(){
if(this.transformation_store_is_ready){
this.updateNamedCustomPutData("custom_put_data_from_config");
this.transformation_store_is_ready=false;
this.onDonePopulatingGridStores();
}
},onDonePopulatingGridStores:function(){
},reloadGridStores:function(){
delete this.transformation_store;
this.transformation_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
this.transformation_store.next_id=0;
this.prepareToHandleLoadNotification();
this._populateTransformationStore();
},_populateTransformationStore:function(){
var _e65=this;
var _e66=pion.reactors.config_store;
this.getConfigItem().addCallback(function(_e67){
dojo.forEach(_e66.getValues(_e67,"Transformation"),function(_e68){
var _e69={ID:_e65.transformation_store.next_id++,Term:_e66.getValue(_e68,"Term"),Type:_e66.getValue(_e68,"Type")};
if(_e69.Type=="Lookup"){
_e69.Value="<button dojoType=dijit.form.Button class=\"edit\">edit Lookup</button>";
_e69.LookupTerm=_e66.getValue(_e68,"LookupTerm");
pion.initOptionalValue(_e66,_e68,_e69,"Match");
pion.initOptionalValue(_e66,_e68,_e69,"Format");
pion.initOptionalValue(_e66,_e68,_e69,"DefaultAction","leave-undefined");
pion.initOptionalValue(_e66,_e68,_e69,"DefaultValue");
_e69.Lookup=dojo.map(_e66.getValues(_e68,"Lookup"),function(_e6a){
var _e6b={Key:_e66.getValue(_e6a,"@key").toString(),Value:_e66.getValue(_e6a,"text()").toString()};
return _e6b;
});
}else{
if(_e69.Type=="Rules"){
_e69.Value="<button dojoType=dijit.form.Button class=\"edit\">edit Rules</button>";
_e69.StopOnFirstMatch=plugins.reactors.TransformReactor.getBool(_e66,_e68,"StopOnFirstMatch");
_e69.Rule=dojo.map(_e66.getValues(_e68,"Rule"),function(rule){
var _e6c={Term:_e66.getValue(rule,"Term").toString(),Type:_e66.getValue(rule,"Type").toString(),SetValue:_e66.getValue(rule,"SetValue").toString()};
if(_e66.hasAttribute(rule,"Value")){
_e6c.Value=_e66.getValue(rule,"Value").toString();
}
return _e6c;
});
}else{
if(_e69.Type=="Regex"){
_e69.Value="<button dojoType=dijit.form.Button class=\"edit\">edit Regex</button>";
_e69.SourceTerm=_e66.getValue(_e68,"SourceTerm");
_e69.Regex=dojo.map(_e66.getValues(_e68,"Regex"),function(_e6d){
var _e6e={Format:_e66.getValue(_e6d,"text()").toString(),Exp:_e66.getValue(_e6d,"@exp").toString()};
return _e6e;
});
}else{
if(_e69.Type=="JoinTerm"){
var _e6f=_e66.getValue(_e68,"Value");
_e69.Value=_e6f;
_e69.Sep=_e66.getValue(_e6f,"@sep");
if(_e66.getValue(_e6f,"@uniq")=="true"){
_e69.Type="JoinTerm (unique)";
}
}else{
if(_e69.Type=="SplitTerm"){
var _e6f=_e66.getValue(_e68,"Value");
_e69.Value=_e6f;
_e69.Sep=_e66.getValue(_e6f,"@sep");
}else{
_e69.Value=_e66.getValue(_e68,"Value");
}
}
}
}
}
_e65.transformation_store.newItem(_e69);
});
_e65.transformation_store_is_ready=true;
_e65.onDonePopulatingTransformationStore();
});
},onDonePopulatingTransformationStore:function(){
},_updateCustomData:function(){
this.custom_put_data_from_config=this.custom_put_data_from_grid_stores;
},_insertCustomData:function(){
this.put_data+=this.custom_put_data_from_config;
},updateNamedCustomPutData:function(_e70){
var _e71="";
var _e72=this;
var _e73=this.transformation_store;
_e73.fetch({onItem:function(item){
_e71+="<Transformation>";
_e71+="<Term>"+_e73.getValue(item,"Term")+"</Term>";
var type=_e73.getValue(item,"Type");
if(type=="Lookup"){
_e71+="<Type>Lookup</Type>";
_e71+=pion.makeXmlLeafElementFromItem(_e73,item,"LookupTerm");
_e71+=pion.makeXmlLeafElementFromItem(_e73,item,"Match");
_e71+=pion.makeXmlLeafElementFromItem(_e73,item,"Format");
_e71+=pion.makeXmlLeafElementFromItem(_e73,item,"DefaultAction");
_e71+=pion.makeXmlLeafElementFromItem(_e73,item,"DefaultValue");
dojo.forEach(_e73.getValues(item,"Lookup"),function(_e74){
_e71+="<Lookup key=\""+pion.escapeXml(_e74.Key)+"\">"+pion.escapeXml(_e74.Value)+"</Lookup>";
});
}else{
if(type=="Rules"){
_e71+="<Type>Rules</Type>";
_e71+=pion.makeXmlLeafElement("StopOnFirstMatch",plugins.reactors.TransformReactor.getBool(_e73,item,"StopOnFirstMatch").toString());
dojo.forEach(_e73.getValues(item,"Rule"),function(rule){
_e71+="<Rule>";
_e71+=pion.makeXmlLeafElement("Term",rule.Term);
_e71+=pion.makeXmlLeafElement("Type",rule.Type);
if("Value" in rule){
_e71+=pion.makeXmlLeafElement("Value",rule.Value);
}
_e71+=pion.makeXmlLeafElement("SetValue",rule.SetValue);
_e71+="</Rule>";
});
}else{
if(type=="Regex"){
_e71+="<Type>Regex</Type>";
_e71+=pion.makeXmlLeafElement("SourceTerm",_e73.getValue(item,"SourceTerm"));
dojo.forEach(_e73.getValues(item,"Regex"),function(_e75){
_e71+="<Regex exp=\""+pion.escapeXml(_e75.Exp)+"\">"+pion.escapeXml(_e75.Format)+"</Regex>";
});
}else{
if(type=="JoinTerm"){
_e71+="<Type>JoinTerm</Type>";
_e71+="<Value sep=\""+pion.escapeXml(_e73.getValue(item,"Sep"))+"\">"+pion.escapeXml(_e73.getValue(item,"Value"))+"</Value>";
}else{
if(type=="JoinTerm (unique)"){
_e71+="<Type>JoinTerm</Type>";
_e71+="<Value sep=\""+pion.escapeXml(_e73.getValue(item,"Sep"))+"\" uniq=\"true\">"+pion.escapeXml(_e73.getValue(item,"Value"))+"</Value>";
}else{
if(type=="SplitTerm"){
_e71+="<Type>SplitTerm</Type>";
_e71+="<Value sep=\""+pion.escapeXml(_e73.getValue(item,"Sep"))+"\">"+pion.escapeXml(_e73.getValue(item,"Value"))+"</Value>";
}else{
_e71+="<Type>"+type+"</Type>";
_e71+=pion.makeXmlLeafElement("Value",_e73.getValue(item,"Value"));
}
}
}
}
}
}
_e71+="</Transformation>";
},onComplete:function(){
_e72[_e70]=_e71;
},onError:pion.handleFetchError});
}});
plugins.reactors.TransformReactor.label="Transformation Reactor";
dojo.declare("plugins.reactors.TransformReactorDialog",[plugins.reactors.ReactorDialog],{templateString:"<div class=\"dijitDialog reactor_dialog transform_reactor_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Transform Reactor Configuration</span>\r\n\t\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: onCancel\">\r\n\t\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent processing\">\r\n\t\t<!--start div to set padding for top half of dialog-->\r\n\t\t <div class=\"reactor_dialog_top\">\r\n\r\n\t\t\t<div dojoType=plugins.reactors.ReactorBoilerplate\r\n\t\t\t\t label=\"Transform Reactor\" name=\"TransformReactor\" category=\"Processing\"\r\n\t\t\t\t description=\"Selectively change data content, structure, format and values based on user-defined criteria.\">\r\n\t\t\t</div>\r\n\r\n\t\t\t<!--start reactor settings-->\r\n\t\t\t<table\r\n\t\t\t\t><tr\r\n\t\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>ID:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" class=\"id_text_box\" disabled=\"true\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Outgoing&nbsp;Event&nbsp;Type:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"OutgoingEvent\" dojoAttachPoint=\"outgoing_event_select\"\r\n\t\t\t\t\t\t\tstore=\"plugins.reactors.TransformReactor.outgoing_event_type_store\" searchAttr=\"id\" /></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Copy&nbsp;From&nbsp;Original</label></td\r\n\t\t\t\t\t><td\r\n\t\t\t\t\t\t><input type=\"radio\" name=\"CopyOriginal\" value=\"if-not-defined\" dojoType=\"dijit.form.RadioButton\" /><label>terms with no transformation defined </label\r\n\t\t\t\t\t\t><input type=\"radio\" name=\"CopyOriginal\" value=\"none\" dojoType=\"dijit.form.RadioButton\" /><label>no terms</label\r\n\t\t\t\t\t></td\r\n\t\t\t\t ></tr\r\n\t\t\t></table>\r\n\t\t\t<!--end reactor settings-->\r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for top half of dialog-->\r\n\r\n\t\t<!--start div to set padding for bottom half of dialog-->\r\n\t\t<div class=\"reactor_dialog_bottom\">\r\n\r\n\t\t\t<!--start transformations-->\r\n\t\t\t<div class=\"reactor_grid_block\">\r\n\t\t\t\t<h2>Transformations</h2>\r\n\t\t\t\t<div class=\"transformation_grid reactor_dialog_grid\" dojoAttachPoint=\"transformation_grid_node\"></div>\r\n\t\t\t\t<button dojoAttachPoint=\"add_new_transformation_button\" dojoType=dijit.form.Button dojoAttachEvent=\"onClick:_handleAddNewTransformation\" class=\"add_new_row\">ADD NEW TRANSFORMATION</button>\r\n\t\t\t</div>\r\n\t\t\t<!--end transformations-->\r\n\r\n\t\t\t<!--start buttons-->\r\n\t\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t\t<!--end buttons--> \r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for bottom half of dialog-->\r\n\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
plugins.reactors.TransformReactor.outgoing_event_type_store=new dojo.data.ItemFileWriteStore({data:{identifier:"id",items:[{id:"Same as input event"}]}});
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
this.attr("value",{CopyOriginal:"if-not-defined",OutgoingEvent:"Same as input event"});
var _e76=this;
pion.terms.store.fetch({query:{Type:"object"},onItem:function(item){
plugins.reactors.TransformReactor.outgoing_event_type_store.newItem({id:pion.terms.store.getIdentity(item)});
},onComplete:function(){
_e76.outgoing_event_select.makeOptionList();
if(_e76.reactor.config.OutgoingEvent){
_e76.attr("value",{OutgoingEvent:_e76.reactor.config.OutgoingEvent});
}
}});
var h=dojo.connect(this.reactor,"onDonePopulatingGridStores",function(){
_e76._updateCustomPutDataFromGridStores();
_e76.connect(_e76.reactor.transformation_store,"onSet","_updateCustomPutDataFromGridStores");
_e76.connect(_e76.reactor.transformation_store,"onDelete","_updateCustomPutDataFromGridStores");
dojo.disconnect(h);
});
this.reactor.reloadGridStores();
this.transformation_grid_layout=[{defaultCell:{width:8,editable:true,type:dojox.grid.cells._Widget,styles:"text-align: right;"},rows:[{field:"Term",name:"Term",width:20,type:pion.widgets.TermTextCell},{field:"Type",name:"Transformation Type",width:10,type:dojox.grid.cells.Select,options:["AssignTerm","AssignValue","JoinTerm","JoinTerm (unique)","Lookup","Regex","Rules","SplitTerm","URLDecode","URLEncode"]},{field:"Value",name:"Value",relWidth:1,formatter:pion.xmlCellFormatter2},{field:"Value",name:"Value",relWidth:1,type:pion.widgets.TermTextCell},{field:"Sep",name:"Sep",width:"28px",formatter:pion.xmlCellFormatter},{name:"Delete",classes:"delete button",editable:false,formatter:pion.makeDeleteButton}]}];
this.transformation_grid=new dojox.grid.DataGrid({store:this.reactor.transformation_store,structure:this.transformation_grid_layout,autoHeight:5,escapeHTMLInData:false,singleClickEdit:true},document.createElement("div"));
this.transformation_grid.term_column_index=0;
this.transformation_grid.value_text_column_index=2;
this.transformation_grid.value_term_column_index=3;
this.transformation_grid.layout.setColumnVisibility(this.transformation_grid.value_term_column_index,false);
this.transformation_grid_node.appendChild(this.transformation_grid.domNode);
this.transformation_grid.startup();
this.transformation_grid.connect(this.transformation_grid,"onCellClick",function(e){
if(e.cell.name=="Delete"){
this.store.deleteItem(this.getItem(e.rowIndex));
}else{
if(e.cell.field=="Value"){
var type=this.store.getValue(this.getItem(e.rowIndex),"Type").toString();
if(type=="Lookup"){
var _e77=new plugins.reactors.TransformReactor.LookupConfigurationDialog({reactor:_e76.reactor,transformation_store:this.store,transformation_item:this.getItem(e.rowIndex),autofocus:false});
_e77.show();
_e77.lookup_grid._refresh();
setTimeout(function(){
_e77.lookup_grid.resize();
},0);
_e77.cancel_button.focus();
_e77.save_button.onClick=function(){
return _e77.isValid();
};
}else{
if(type=="Rules"){
var _e77=new plugins.reactors.TransformReactor.RulesConfigurationDialog({reactor:_e76.reactor,transformation_store:this.store,transformation_item:this.getItem(e.rowIndex)});
_e77.show();
_e77.save_button.onClick=function(){
return _e77.isValid();
};
}else{
if(type=="Regex"){
var _e77=new plugins.reactors.TransformReactor.RegexConfigurationDialog({reactor:_e76.reactor,transformation_store:this.store,transformation_item:this.getItem(e.rowIndex),autofocus:false});
_e77.show();
_e77.regex_grid._refresh();
setTimeout(function(){
_e77.regex_grid.resize();
},0);
_e77.cancel_button.focus();
_e77.save_button.onClick=function(){
return _e77.isValid();
};
}
}
}
}
}
});
this.transformation_grid.connect(this.transformation_grid,"onCellFocus",function(cell,_e78){
if(cell.field=="Type"){
var _e79=this;
this.connect(cell.getEditNode(_e78),"change",function(){
_e79.edit.apply();
});
}
});
this.transformation_grid.connect(this.transformation_grid,"onStartEdit",function(cell,_e7a){
switch(cell.field){
case "Type":
this.pre_edit_type=this.store.getValue(this.getItem(_e7a),"Type");
break;
default:
}
});
this.transformation_grid.connect(this.transformation_grid,"onApplyCellEdit",function(_e7b,_e7c,_e7d){
switch(_e7d){
case "Type":
if(_e7b!=this.pre_edit_type){
var _e7e=(_e7b=="AssignTerm");
this.layout.setColumnVisibility(this.value_text_column_index,!_e7e);
this.layout.setColumnVisibility(this.value_term_column_index,_e7e);
var _e7f=(_e7b=="Lookup"||_e7b=="Rules"||_e7b=="Regex");
if(_e7f){
this.store.setValue(this.getItem(_e7c),"Value","<button dojoType=dijit.form.Button class=\"edit\">edit "+_e7b+"</button>");
}else{
this.store.unsetAttribute(this.getItem(_e7c),"Value");
}
}
break;
default:
}
});
var _e80=this.transformation_grid;
var h2=_e80.connect(_e80.layout.cells[_e80.term_column_index],"sizeWidget",function(){
this.connect(this.layout.cells[_e80.term_column_index].widget,"_close",function(_e81){
_e80.edit.apply();
});
this.disconnect(h2);
});
var h3=_e80.connect(_e80.layout.cells[_e80.value_term_column_index],"sizeWidget",function(){
this.connect(this.layout.cells[_e80.value_term_column_index].widget,"_close",function(_e82){
_e80.edit.apply();
});
this.disconnect(h3);
});
this.transformation_grid.canEdit=function(cell,_e83){
switch(cell.field){
case "Value":
var item=this.getItem(_e83);
var type=this.store.getValue(item,"Type").toString();
if(type=="AssignValue"){
if(this.layout.cells[this.value_text_column_index].hidden){
this.layout.setColumnVisibility(this.value_text_column_index,true);
this.layout.setColumnVisibility(this.value_term_column_index,false);
return false;
}else{
return true;
}
}else{
if(type=="AssignTerm"||type=="JoinTerm"||type=="JoinTerm (unique)"||type=="SplitTerm"||type=="URLEncode"||type=="URLDecode"){
if(this.layout.cells[this.value_term_column_index].hidden){
this.layout.setColumnVisibility(this.value_text_column_index,false);
this.layout.setColumnVisibility(this.value_term_column_index,true);
return false;
}else{
return true;
}
}else{
return false;
}
}
case "Sep":
var item=this.getItem(_e83);
var type=this.store.getValue(item,"Type").toString();
return (type=="JoinTerm"||type=="JoinTerm (unique)"||type=="SplitTerm");
default:
return true;
}
};
var _e84=function(e){
if(e.cell.name=="Sep"){
dijit.showTooltip("For type SplitTerm, a set of separator characters, and for type JoinTerm, a separator string.",e.cellNode);
}
};
var _e85=function(e){
dijit.hideTooltip(e.cellNode);
dijit._masterTT._onDeck=null;
};
dojo.connect(this.transformation_grid,"onHeaderCellMouseOver",_e84);
dojo.connect(this.transformation_grid,"onHeaderCellMouseOut",_e85);
},_handleAddNewTransformation:function(){
this.reactor.transformation_store.newItem({ID:this.reactor.transformation_store.next_id++,MatchAllValues:false,Type:"AssignValue",InPlace:true});
var h=this.transformation_grid.connect(this.transformation_grid,"endUpdate",function(){
this.focus.setFocusIndex(this.rowCount-1,0);
this.disconnect(h);
});
},_updateCustomPutDataFromGridStores:function(){
this.reactor.updateNamedCustomPutData("custom_put_data_from_grid_stores");
},_insertCustomData:function(){
this.put_data+=this.reactor.custom_put_data_from_grid_stores;
}});
plugins.reactors.TransformReactor.option_defaults={};
plugins.reactors.TransformReactor.grid_option_defaults={StopOnFirstMatch:true,InPlace:false,MatchAllValues:false};
plugins.reactors.TransformReactor.getBool=function(_e86,item,_e87){
if(_e86.hasAttribute(item,_e87)){
return _e86.getValue(item,_e87).toString()=="true";
}else{
return plugins.reactors.TransformReactor.grid_option_defaults[_e87];
}
};
dojo.declare("plugins.reactors.TransformReactor.KeyValuePairImportDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog XML_import_dialog\" style=\"width: 600px\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">${title}</span>\r\n\t</div>\r\n\t<div style=\"padding: 10px\">\r\n\t\t${instructions}\r\n\t\t<pre>\r\n${example}\r\n\t\t</pre>\r\n\t</div>\r\n\t<div class=\"dijitDialogPaneContent\">\r\n\t\t<textarea dojoAttachPoint=\"XML_text_area\" style=\"width: 100%\" rows=\"8\" dojoAttachEvent=\"oninput: enableApply, onkeydown: enableApply\"></textarea>\r\n\t</div>\r\n\t<div class=\"save_cancel_delete\">\r\n\t\t<button dojoType=dijit.form.Button class=\"save\" dojoAttachPoint=\"apply_button\" disabled=\"true\" type=\"submit\">Import</button>\r\n\t\t<button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: onCancel\">Cancel</button>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},enableApply:function(){
this.apply_button.attr("disabled",false);
},widgetsInTemplate:true});
dojo.declare("plugins.reactors.TransformReactor.LookupConfigurationDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog reactor_dialog wide\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Lookup Configuration</span>\r\n\t\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: onCancel\">\r\n\t\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent processing\"\r\n\t\t><div class=\"reactor_dialog_top extra_padding_right\"\r\n\t\t\t><table style=\"width: 100%\"\r\n\t\t\t\t><tr\r\n\t\t\t\t\t><td><label>Lookup Term:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"pion.widgets.TermTextBox\" name=\"LookupTerm\" style=\"width: 100%;\" /></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Regular expression:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Match\" style=\"width: 100%;\" dojoAttachEvent=\"onChange: _regexChanged\" /></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Format:</label></td\r\n\t\t\t\t\t><td><input dojoAttachPoint=\"format_text_box\" dojoType=\"dijit.form.TextBox\" name=\"Format\" style=\"width: 100%;\" disabled=\"true\" /></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Default</label></td\r\n\t\t\t\t\t><td\r\n\t\t\t\t\t\t><input type=\"radio\" name=\"DefaultAction\" value=\"leave-undefined\" dojoType=\"dijit.form.RadioButton\" dojoAttachEvent=\"onClick: _onDefaultActionChanged\" /><label>leave undefined </label\r\n\t\t\t\t\t\t><input type=\"radio\" name=\"DefaultAction\" value=\"src-term\" dojoType=\"dijit.form.RadioButton\" dojoAttachEvent=\"onClick: _onDefaultActionChanged\" /><label>use lookup term </label\r\n\t\t\t\t\t\t><input dojoAttachPoint=\"output_radio_button\" disabled=\"true\"\r\n\t\t\t\t\t\t\t\ttype=\"radio\" name=\"DefaultAction\" value=\"output\" dojoType=\"dijit.form.RadioButton\" dojoAttachEvent=\"onClick: _onDefaultActionChanged\" /><label>use regex replaced value </label\r\n\t\t\t\t\t\t><input type=\"radio\" name=\"DefaultAction\" value=\"fixedvalue\" dojoType=\"dijit.form.RadioButton\" dojoAttachEvent=\"onClick: _onDefaultActionChanged\" /><label>use fixed value:</label\r\n\t\t\t\t\t\t><input dojoAttachPoint=\"default_value\" dojoType=\"dijit.form.TextBox\" name=\"DefaultValue\" style=\"width: 145px; margin-left: 2px; margin-right: -11px; visibility: hidden\" disabled=\"true\" /\r\n\t\t\t\t\t></td\r\n\t\t\t\t></tr\r\n\t\t\t></table\r\n\t\t></div\r\n\t\t><div class=\"reactor_dialog_bottom\"\r\n\t\t\t><div class=\"reactor_grid_block\">\r\n\t\t\t\t<h2>Key Value Pairs</h2>\r\n\t\t\t\t<div class=\"lookup_grid reactor_dialog_grid\" dojoAttachPoint=\"lookup_grid_node\"></div>\r\n\t\t\t\t<button dojoType=dijit.form.Button dojoAttachEvent=\"onClick: _handleAddNewLookup\" class=\"add_new_row\">ADD NEW PAIR</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"import\" dojoAttachEvent=\"onClick: _onImportXmlKeyValuePairs\">\r\n\t\t\t\t\tImport XML</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"export\" dojoAttachEvent=\"onClick: _onExportXmlKeyValuePairs\" dojoAttachPoint=\"export_xml_button\" disabled=\"true\">\r\n\t\t\t\t\tExport XML</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"import\" dojoAttachEvent=\"onClick: _onImportCsvKeyValuePairs\">\r\n\t\t\t\t\tImport CSV</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"export\" dojoAttachEvent=\"onClick: _onExportCsvKeyValuePairs\" dojoAttachPoint=\"export_csv_button\" disabled=\"true\">\r\n\t\t\t\t\tExport CSV</button>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"save\" dojoAttachPoint=\"save_button\" type=\"submit\">Save</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"cancel\" dojoAttachPoint=\"cancel_button\" dojoAttachEvent=\"onClick: onCancel\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
if(!this.transformation_item.DefaultAction){
this.transformation_item.DefaultAction="leave-undefined";
}
if(this.transformation_item.DefaultAction=="fixedvalue"){
this.default_value.attr("disabled",false);
this.default_value.domNode.style.visibility="visible";
}
this.attr("value",this.transformation_item);
this.lookup_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
this.lookup_store.next_id=0;
this.connect(this.lookup_store,"onNew",function(){
this.export_xml_button.attr("disabled",false);
this.export_csv_button.attr("disabled",false);
});
this._populateLookupStore();
this.lookup_grid_layout=[{defaultCell:{width:8,editable:true,type:dojox.grid.cells._Widget,styles:"text-align: right;"},rows:[{field:"Key",name:"Key",width:14,formatter:pion.xmlCellFormatter},{field:"Value",name:"Value",relWidth:1,formatter:pion.xmlCellFormatter},{name:"Delete",classes:"delete button",editable:false,formatter:pion.makeDeleteButton}]}];
this.lookup_grid=new dojox.grid.DataGrid({store:this.lookup_store,structure:this.lookup_grid_layout,escapeHTMLInData:false,autoHeight:8,singleClickEdit:true},document.createElement("div"));
this.lookup_grid_node.appendChild(this.lookup_grid.domNode);
this.lookup_grid.startup();
this.lookup_grid.connect(this.lookup_grid,"onCellClick",function(e){
if(e.cell.name=="Delete"){
this.store.deleteItem(this.getItem(e.rowIndex));
}
});
},execute:function(_e88){
var _e89=this.transformation_store;
var _e8a=this.transformation_item;
var _e8b=this.lookup_store;
var _e8c=[];
for(var i=0;i<this.lookup_grid.rowCount;++i){
var item=this.lookup_grid.getItem(i);
var _e8d={Key:_e8b.getValue(item,"Key"),Value:_e8b.getValue(item,"Value")};
_e8c.push(_e8d);
}
_e89.setValues(_e8a,"Lookup",_e8c);
for(var tag in _e88){
_e89.setValue(_e8a,tag,_e88[tag]);
}
this.reactor.updateNamedCustomPutData("custom_put_data_from_grid_stores");
},_populateLookupStore:function(){
var _e8e=this;
dojo.forEach(this.transformation_store.getValues(this.transformation_item,"Lookup"),function(_e8f){
_e8e.lookup_store.newItem(dojo.mixin(_e8f,{ID:_e8e.lookup_store.next_id++}));
});
},_regexChanged:function(_e90){
if(_e90){
this.format_text_box.attr("disabled",false);
this.output_radio_button.attr("disabled",false);
}else{
this.format_text_box.attr("disabled",true);
this.format_text_box.attr("value","");
this.output_radio_button.attr("disabled",true);
this.attr("value",{DefaultAction:"leave-undefined"});
}
},_onDefaultActionChanged:function(e){
if(e.target.value=="fixedvalue"){
this.default_value.attr("disabled",false);
this.default_value.domNode.style.visibility="visible";
}else{
this.default_value.attr("disabled",true);
this.default_value.attr("value","");
this.default_value.domNode.style.visibility="hidden";
}
},_onImportXmlKeyValuePairs:function(e){
var _e91=this;
var _e92=new plugins.reactors.TransformReactor.KeyValuePairImportDialog({title:"Key Value Pairs in XML Format to Import",instructions:"Enter key value pairs in the following format, using standard escape sequences:",example:"&lt;Lookup key=\"index-1\"&gt;NASDAQ&lt;/Lookup&gt\n...\n&lt;Lookup key=\"index-n\"&gt;S&amp;amp;P 500&lt;/Lookup&gt"});
_e92.show();
_e92.execute=function(_e93){
var _e94="<PionConfig>"+this.XML_text_area.value+"</PionConfig>";
var _e95=_e94.replace(/>\s*/g,">");
if(dojo.isIE){
var _e96=dojox.data.dom.createDocument();
_e96.loadXML(_e95);
}else{
var _e97=new DOMParser();
var _e96=_e97.parseFromString(_e95,"text/xml");
}
dojo.forEach(_e96.getElementsByTagName("Lookup"),function(_e98){
var _e99=_e98.getAttribute("key");
var _e9a=dojo.isIE?_e98.childNodes[0].nodeValue:_e98.textContent;
_e91.lookup_store.newItem({ID:_e91.lookup_store.next_id++,Key:_e99,Value:_e9a});
});
};
},_onExportXmlKeyValuePairs:function(){
var _e9b=this.lookup_store;
var _e9c="";
for(var i=0;i<this.lookup_grid.rowCount;++i){
var item=this.lookup_grid.getItem(i);
var key=_e9b.getValue(item,"Key");
var _e9d=_e9b.getValue(item,"Value");
var _e9e="<Lookup key=\""+pion.escapeXml(key)+"\">"+pion.escapeXml(_e9d)+"</Lookup>";
_e9c+=pion.escapeXml(_e9e)+"<br />";
}
var _e9f=new dijit.Dialog({title:"Exported Key Value Pairs in XML Format",style:"width: 600px"});
_e9f.attr("content",_e9c);
_e9f.show();
},_onImportCsvKeyValuePairs:function(e){
var _ea0=this;
var _ea1=new plugins.reactors.TransformReactor.KeyValuePairImportDialog({title:"Key Value Pairs in CSV Format to Import",instructions:"Enter key value pairs in CSV format.  Example:",example:"A,yes & no\nB,\"X, Y and Z\"\nC,\"the one with a \"\"D\"\" in it\"\nD,\" quoting optional here \"\n..."});
_ea1.show();
_ea1.execute=function(_ea2){
var _ea3=this.XML_text_area.value.split("\n");
dojo.forEach(_ea3,function(line){
if(results=line.match(/^"(.*)","(.*)"$/)){
var _ea4=results[1].replace(/""/g,"\"");
var _ea5=results[2].replace(/""/g,"\"");
}else{
if(results=line.match(/^([^,"]*),"(.*)"$/)){
var _ea4=results[1];
var _ea5=results[2].replace(/""/g,"\"");
}else{
if(results=line.match(/^"(.*)",([^,"]*)$/)){
var _ea4=results[1].replace(/""/g,"\"");
var _ea5=results[2];
}else{
if(results=line.match(/^([^,"]*),([^,"]*)$/)){
var _ea4=results[1];
var _ea5=results[2];
}else{
return;
}
}
}
}
_ea0.lookup_store.newItem({ID:_ea0.lookup_store.next_id++,Key:_ea4,Value:_ea5});
});
};
},_onExportCsvKeyValuePairs:function(){
var _ea6=this.lookup_store;
var _ea7="";
for(var i=0;i<this.lookup_grid.rowCount;++i){
var item=this.lookup_grid.getItem(i);
var key=_ea6.getValue(item,"Key").toString();
var _ea8=_ea6.getValue(item,"Value").toString();
var _ea9="\""+key.replace(/"/g,"\"\"")+"\",\""+_ea8.replace(/"/g,"\"\"")+"\"";
_ea7+=pion.escapeXml(_ea9)+"<br />";
}
var _eaa=new dijit.Dialog({title:"Exported Key Value Pairs in CSV Format",style:"width: 600px"});
_eaa.attr("content",_ea7);
_eaa.show();
},_handleAddNewLookup:function(){
this.lookup_store.newItem({ID:this.lookup_store.next_id++});
}});
dojo.declare("plugins.reactors.TransformReactor.RulesConfigurationDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog reactor_dialog wide\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Rules Configuration</span>\r\n\t\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: onCancel\">\r\n\t\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent processing\">\r\n\t\t<div class=\"reactor_dialog_top\">\r\n\t\t\t<input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"StopOnFirstMatch\"/>\r\n\t\t\t<label>Stop after first matching rule</label>\r\n\t\t</div>\r\n\t\t<div class=\"reactor_dialog_bottom\">\r\n\t\t\t<div class=\"reactor_grid_block\">\r\n\t\t\t\t<h2>Rules</h2>\r\n\t\t\t\t<div class=\"rule_grid reactor_dialog_grid\" dojoAttachPoint=\"rule_grid_node\"></div>\r\n\t\t\t\t<button dojoType=dijit.form.Button dojoAttachEvent=\"onClick: _handleAddNewRule\" class=\"add_new_row\">ADD NEW RULE</button>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"save\" dojoAttachPoint=\"save_button\" type=\"submit\">Save</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: onCancel\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
if(plugins.reactors.TransformReactor.getBool(this.transformation_store,this.transformation_item,"StopOnFirstMatch")){
this.attr("value",{options:["StopOnFirstMatch"]});
}
this.rule_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
this.rule_store.next_id=0;
this._populateRuleStore();
this.rule_grid_layout=[{defaultCell:{width:8,editable:true,type:dojox.grid.cells._Widget,styles:"text-align: right;"},rows:[{field:"Term",name:"Term",width:20,type:pion.widgets.TermTextCell},{field:"Type",name:"Comparison",width:10,widgetClass:pion.widgets.SimpleSelect,widgetProps:{store:pion.reactors.comparison_type_store,query:{category:"generic"}}},{field:"Value",name:"Value",relWidth:1,formatter:pion.xmlCellFormatter},{field:"SetValue",name:"Set Value",relWidth:1,formatter:pion.xmlCellFormatter},{name:"Insert Above",classes:"insert button",editable:false,formatter:pion.makeInsertAboveButton},{name:"Delete",classes:"delete button",editable:false,formatter:pion.makeDeleteButton}]}];
this.rule_grid=new dojox.grid.DataGrid({store:this.rule_store,structure:this.rule_grid_layout,escapeHTMLInData:false,autoHeight:true,singleClickEdit:true},document.createElement("div"));
this.rule_grid._prev_term_type_category=this.rule_grid.structure[0].rows[1].widgetProps.query.category;
this.rule_grid.term_column_index=0;
this.rule_grid_node.appendChild(this.rule_grid.domNode);
this.rule_grid.startup();
this.rule_grid.connect(this.rule_grid,"onCellClick",function(e){
if(e.cell.name=="Delete"){
this.store.deleteItem(this.getItem(e.rowIndex));
}else{
if(e.cell.name=="Insert Above"){
var _eab=[];
var _eac=[];
for(var i=e.rowIndex;i<this.rowCount;++i){
var item=this.getItem(i);
var _ead={Term:this.store.getValue(item,"Term"),Type:this.store.getValue(item,"Type"),SetValue:this.store.getValue(item,"SetValue")};
if(this.store.hasAttribute(item,"Value")){
_ead.Value=this.store.getValue(item,"Value");
}
_eab.push(_ead);
_eac.push(item);
}
var _eae=this;
dojo.forEach(_eac,function(item){
_eae.store.deleteItem(item);
});
this.store.newItem({ID:this.store.next_id++});
dojo.forEach(_eab,function(item){
_eae.store.newItem(dojo.mixin(item,{ID:_eae.store.next_id++}));
});
}else{
if(e.cell.field=="Type"){
var item=this.getItem(e.rowIndex);
var term=this.store.getValue(item,"Term").toString();
if(pion.terms.categories_by_id[term]!=this._prev_term_type_category){
this._prev_term_type_category=pion.terms.categories_by_id[term];
if(e.cell.widget){
e.cell.widget.setQuery({category:pion.terms.categories_by_id[term]});
}else{
this.structure[0].rows[e.cell.index].widgetProps.query.category=pion.terms.categories_by_id[term];
}
}
}
}
}
});
var _eaf=this.rule_grid;
var h=_eaf.connect(_eaf.layout.cells[_eaf.term_column_index],"sizeWidget",function(){
this.connect(this.layout.cells[_eaf.term_column_index].widget,"_close",function(_eb0){
_eaf.edit.apply();
});
this.disconnect(h);
});
},execute:function(_eb1){
var _eb2=this.transformation_store;
var _eb3=this.transformation_item;
var _eb4=this.rule_store;
var _eb5=[];
for(var i=0;i<this.rule_grid.rowCount;++i){
var item=this.rule_grid.getItem(i);
var _eb6={Term:_eb4.getValue(item,"Term"),Type:_eb4.getValue(item,"Type"),SetValue:_eb4.getValue(item,"SetValue")};
pion.initOptionalValue(_eb4,item,_eb6,"Value");
_eb5.push(_eb6);
}
_eb2.setValue(_eb3,"StopOnFirstMatch",dojo.indexOf(_eb1.options,"StopOnFirstMatch")!=-1);
_eb2.setValues(_eb3,"Rule",_eb5);
this.reactor.updateNamedCustomPutData("custom_put_data_from_grid_stores");
},_populateRuleStore:function(){
var _eb7=this;
dojo.forEach(this.transformation_store.getValues(this.transformation_item,"Rule"),function(rule){
_eb7.rule_store.newItem(dojo.mixin(rule,{ID:_eb7.rule_store.next_id++}));
});
},_handleAddNewRule:function(){
this.rule_store.newItem({ID:this.rule_store.next_id++});
}});
dojo.declare("plugins.reactors.TransformReactor.RegexConfigurationDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog reactor_dialog wide\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Composite Regular Expression Configuration</span>\r\n\t\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: onCancel\">\r\n\t\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent processing\">\r\n\t\t<div class=\"reactor_dialog_top\">\r\n\t\t\t<label>Source Term:</label>\r\n\t\t\t<input dojoType=\"pion.widgets.TermTextBox\" name=\"SourceTerm\" style=\"width: 400px\" />\r\n\t\t</div>\r\n\t\t<div class=\"reactor_dialog_bottom\">\r\n\t\t\t<div class=\"reactor_grid_block\">\r\n\t\t\t\t<h2>Regular Expressions</h2>\r\n\t\t\t\t<div class=\"regex_grid reactor_dialog_grid\" dojoAttachPoint=\"regex_grid_node\"></div>\r\n\t\t\t\t<button dojoType=dijit.form.Button dojoAttachEvent=\"onClick: _handleAddNewRegex\" class=\"add_new_row\">ADD NEW REGEX</button>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"save\" dojoAttachPoint=\"save_button\" type=\"submit\">Save</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"cancel\" dojoAttachPoint=\"cancel_button\" dojoAttachEvent=\"onClick: onCancel\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
this.attr("value",{SourceTerm:this.transformation_item.SourceTerm});
this.regex_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
this.regex_store.next_id=0;
this._populateRegexStore();
this.regex_grid_layout=[{defaultCell:{width:8,editable:true,type:dojox.grid.cells._Widget,styles:"text-align: right;"},rows:[{field:"Exp",name:"Regex",relWidth:1,formatter:pion.xmlCellFormatter},{field:"Format",name:"Format",relWidth:1,formatter:pion.xmlCellFormatter},{name:"Insert Above",classes:"insert button",editable:false,formatter:pion.makeInsertAboveButton},{name:"Delete",classes:"delete button",editable:false,formatter:pion.makeDeleteButton}]}];
this.regex_grid=new dojox.grid.DataGrid({store:this.regex_store,structure:this.regex_grid_layout,escapeHTMLInData:false,autoHeight:8,singleClickEdit:true},document.createElement("div"));
this.regex_grid_node.appendChild(this.regex_grid.domNode);
this.regex_grid.startup();
this.regex_grid.connect(this.regex_grid,"onCellClick",function(e){
if(e.cell.name=="Delete"){
this.store.deleteItem(this.getItem(e.rowIndex));
}else{
if(e.cell.name=="Insert Above"){
var _eb8=[];
var _eb9=[];
for(var i=e.rowIndex;i<this.rowCount;++i){
var item=this.getItem(i);
var _eba={Exp:this.store.getValue(item,"Exp"),Format:this.store.getValue(item,"Format")};
_eb8.push(_eba);
_eb9.push(item);
}
var _ebb=this;
dojo.forEach(_eb9,function(item){
_ebb.store.deleteItem(item);
});
this.store.newItem({ID:this.store.next_id++});
dojo.forEach(_eb8,function(item){
_ebb.store.newItem(dojo.mixin(item,{ID:_ebb.store.next_id++}));
});
}
}
});
},execute:function(_ebc){
var _ebd=this.transformation_store;
var _ebe=this.transformation_item;
var _ebf=this.regex_store;
var _ec0=[];
for(var i=0;i<this.regex_grid.rowCount;++i){
var item=this.regex_grid.getItem(i);
var _ec1={Exp:_ebf.getValue(item,"Exp"),Format:_ebf.getValue(item,"Format")};
_ec0.push(_ec1);
}
_ebd.setValue(_ebe,"SourceTerm",_ebc.SourceTerm);
_ebd.setValues(_ebe,"Regex",_ec0);
this.reactor.updateNamedCustomPutData("custom_put_data_from_grid_stores");
},_populateRegexStore:function(){
var _ec2=this;
dojo.forEach(this.transformation_store.getValues(this.transformation_item,"Regex"),function(_ec3){
_ec2.regex_store.newItem(dojo.mixin(_ec3,{ID:_ec2.regex_store.next_id++}));
});
},_handleAddNewRegex:function(){
this.regex_store.newItem({ID:this.regex_store.next_id++});
}});
}
if(!dojo._hasResource["plugins.reactors.ScriptReactor"]){
dojo._hasResource["plugins.reactors.ScriptReactor"]=true;
dojo.provide("plugins.reactors.ScriptReactor");
dojo.declare("plugins.reactors.ScriptReactor",[plugins.reactors.Reactor],{postCreate:function(){
this.config.Plugin="ScriptReactor";
this.inherited("postCreate",arguments);
}});
plugins.reactors.ScriptReactor.label="Script Reactor";
dojo.declare("plugins.reactors.ScriptReactorInitDialog",[plugins.reactors.ReactorInitDialog],{templateString:"<div class=\"dijitDialog reactor_dialog\" tabindex=\"-1\" waiRole=\"dialog\" waiState=\"labelledby-${id}_title\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Script Reactor Initialization</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\">\r\n\t\t<table\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Codec to use for writing events to the script:</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"InputCodec\" store=\"pion.codecs.config_store\" searchAttr=\"Name\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Codec to use for reading events from the script:</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"OutputCodec\" store=\"pion.codecs.config_store\" searchAttr=\"Name\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Script or command to execute:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Command\"/></td\r\n\t\t\t></tr\r\n\t\t></table>\r\n\t</div>\r\n\t<div class=\"save_cancel_delete\">\r\n\t\t<button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick: tryConfig\">Save</button>\r\n\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
}});
dojo.declare("plugins.reactors.ScriptReactorDialog",[plugins.reactors.ReactorDialog],{templateString:"<div class=\"dijitDialog reactor_dialog\" tabindex=\"-1\" waiRole=\"dialog\" waiState=\"labelledby-${id}_title\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Script Reactor Configuration</span>\r\n\t\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: onCancel\">\r\n\t\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent processing\">\r\n\t\t<!--start div to set padding for top half of dialog-->\r\n\t\t<div class=\"reactor_dialog_top\">\r\n\r\n\t\t\t<div dojoType=plugins.reactors.ReactorBoilerplate\r\n\t\t\t\t label=\"Script Reactor\" name=\"ScriptReactor\" category=\"Processing\"\r\n\t\t\t\t description=\"Retrieve, store or process events using an external script or program.\">\r\n\t\t\t</div>\r\n\r\n\t\t\t <!--start reactor settings-->\r\n\t\t\t<div style=\"float:left; margin-right: 25px;\">\r\n\t\t\t\t<table\r\n\t\t\t\t\t><tr\r\n\t\t\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>ID:</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" class=\"id_text_box\" disabled=\"true\"/></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t\t\t></tr\r\n\t\t\t\t></table>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"float:left;\">\r\n\t\t\t\t<table\r\n\t\t\t\t\t><tr\r\n\t\t\t\t\t\t><td><label>Codec to use for writing events to the script:</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"InputCodec\" store=\"pion.codecs.config_store\" searchAttr=\"Name\"/></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>Codec to use for reading events from the script:</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"OutputCodec\" store=\"pion.codecs.config_store\" searchAttr=\"Name\"/></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>Script or command to execute:</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Command\"/></td\r\n\t\t\t\t\t></tr\r\n\t\t\t\t></table>\r\n\t\t\t</div>\r\n\t\t\t<div style=\"clear:both;\"></div>\r\n\t\t\t<!--end reactor settings-->\r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for top half of dialog-->\r\n\r\n\t\t<!--start div to set padding for bottom half of dialog-->\r\n\t\t<div class=\"reactor_dialog_bottom\">\r\n\r\n\t\t\t<!--start buttons--> \r\n\t\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t\t<!--end buttons--> \r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for bottom half of dialog-->\r\n\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
}});
}
if(!dojo._hasResource["plugins.databases.Database"]){
dojo._hasResource["plugins.databases.Database"]=true;
dojo.provide("plugins.databases.Database");
dojo.declare("plugins.databases.SelectPluginDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog database_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">${title}</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\"\r\n\t\t><table\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Plugin&nbsp;Type:</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"Plugin\" \r\n\t\t\t\t\t\tstore=\"pion.databases.plugin_data_store\" searchAttr=\"label\" \r\n\t\t\t\t\t\tstyle=\"width: 100%;\"/></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t</div>\r\n\t<div class=\"save_cancel_delete\">\r\n\t\t<button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Continue</button>\r\n\t\t<button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: onCancel\">Cancel</button>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true});
dojo.declare("plugins.databases.DatabaseInitDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog database_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">${title}</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\"\r\n\t\t><table\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Plugin&nbsp;Type:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Plugin\" style=\"width: 100%;\"\r\n\t\t\t\t\t\treadonly=\"true\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Filename:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Filename\" style=\"width: 100%;\"/></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t</div>\r\n\t<div class=\"save_cancel_delete\">\r\n\t\t<button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button>\r\n\t\t<button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: onCancel\">Cancel</button>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true});
dojo.declare("plugins.databases.DatabasePane",[dijit.layout.ContentPane,dijit._Templated],{templateString:"<div class='database_pane' dojoAttachPoint='containerNode'\r\n\t><form dojoAttachPoint=\"form\" dojoType=\"dijit.form.Form\"\r\n\t\t><br /><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" width=\"100%\"\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name</label></td\r\n\t\t\t\t><td><input dojoAttachPoint=\"name\" dojoType=\"dijit.form.TextBox\" name=\"Name\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td rowspan=\"4\" valign=\"top\" width=\"20\">&nbsp;</td\r\n\t\t\t\t><td rowspan=\"1\"><label>Comments</label></td\r\n\t\t\t\t><td rowspan=\"4\" valign=\"top\"><textarea dojoType=\"dijit.form.SimpleTextarea\" name=\"Comment\" rows=\"4\"  class=\"comment\" dojoAttachEvent=\"onChange: markAsChanged\"></textarea></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>ID</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" disabled=\"true\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td rowspan=\"3\">&nbsp;</td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Plugin&nbsp;Type</label></td\r\n\t\t\t\t><td><div dojoType=pion.widgets.ConfigAccordionPluginType plugin_type=${plugin_type}></div></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Filename</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Filename\" style=\"width: 100%;\"/></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><hr noshade=\"noshade\" size=\"1\" color=\"#999999\"\r\n\t\t><div class=\"save_cancel_delete\"\r\n\t\t\t><button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick: save\">Save Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: cancel\">Cancel Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"delete\" dojoAttachEvent=\"onClick: delete2\">Delete Database</button\r\n\t\t></div\r\n\t></form\r\n\t><div dojoAttachPoint=\"pane_end\" class=\"zero_height_end_marker\"></div\r\n></div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
},getHeight:function(){
return this.pane_end.offsetTop;
},populateFromConfigItem:function(item){
var _ec4=pion.databases.config_store;
var _ec5={};
var _ec6=_ec4.getAttributes(item);
for(var i=0;i<_ec6.length;++i){
if(_ec6[i]!="tagName"&&_ec6[i]!="childNodes"){
_ec5[_ec6[i]]=_ec4.getValue(item,_ec6[i]).toString();
}
}
console.dir(_ec5);
this.form.set("value",_ec5);
var node=this.domNode;
setTimeout(function(){
dojo.removeClass(node,"unsaved_changes");
},500);
},setUnsavedChangesTrue:function(){
dojo.addClass(this.domNode,"unsaved_changes");
},setUnsavedChangesFalse:function(){
console.debug("removeClass");
dojo.removeClass(this.domNode,"unsaved_changes");
},save:function(){
dojo.removeClass(this.domNode,"unsaved_changes");
var _ec7=this.form.get("value");
this.put_data="<PionConfig><Database>";
for(var tag in _ec7){
if(tag!="@id"){
console.debug("config[",tag,"] = ",_ec7[tag]);
this.put_data+=pion.makeXmlLeafElement(tag,_ec7[tag]);
}
}
if(this._insertCustomData){
this._insertCustomData();
}
this.put_data+="</Database></PionConfig>";
console.debug("put_data: ",this.put_data);
_this=this;
dojo.rawXhrPut({url:"/config/databases/"+this.uuid,contentType:"text/xml",handleAs:"xml",putData:this.put_data,load:function(_ec8){
console.debug("response: ",_ec8);
pion.databases.config_store.fetch({query:{"@id":_this.uuid},onItem:function(item){
_this.config_item=item;
_this.populateFromConfigItem(item);
},onError:pion.handleFetchError});
},error:pion.getXhrErrorHandler(dojo.rawXhrPut,{putData:this.put_data})});
},cancel:function(){
dojo.removeClass(this.domNode,"unsaved_changes");
this.populateFromConfigItem(this.config_item);
},delete2:function(){
dojo.removeClass(this.domNode,"unsaved_changes");
console.debug("delete2: selected database is ",this.title);
_this=this;
dojo.xhrDelete({url:"/config/databases/"+this.uuid,handleAs:"xml",timeout:5000,load:function(_ec9,_eca){
console.debug("xhrDelete for url = /config/databases/"+this.uuid,"; HTTP status code: ",_eca.xhr.status);
dijit.byId("database_config_accordion").forward();
dijit.byId("database_config_accordion").removeChild(_this);
pion.databases._adjustAccordionSize();
return _ec9;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
},markAsChanged:function(){
console.debug("markAsChanged");
dojo.addClass(this.domNode,"unsaved_changes");
},database:""});
}
if(!dojo._hasResource["plugins.databases.SQLiteDatabase"]){
dojo._hasResource["plugins.databases.SQLiteDatabase"]=true;
dojo.provide("plugins.databases.SQLiteDatabase");
plugins.databases.SQLiteDatabase.label="SQLite Database";
dojo.declare("plugins.databases.SQLiteDatabasePane",[plugins.databases.DatabasePane],{widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
},getHeight:function(){
return this.pane_end.offsetTop;
}});
}
if(!dojo._hasResource["pion.databases"]){
dojo._hasResource["pion.databases"]=true;
dojo.provide("pion.databases");
pion.databases.getHeight=function(){
return pion.databases.database_config_height;
};
pion.databases.config_store=new dojox.data.XmlStore({url:"/config/databases"});
pion.databases.config_store.fetchItemByIdentity=function(_ecb){
pion.databases.config_store.fetch({query:{"@id":_ecb.identity},onItem:_ecb.onItem,onError:pion.handleFetchError});
};
pion.databases.config_store.getIdentity=function(item){
return pion.databases.config_store.getValue(item,"@id");
};
pion.databases._adjustAccordionSize=function(){
var _ecc=dijit.byId("database_config_accordion");
var _ecd=pion.databases.selected_pane.getHeight();
dojo.forEach(_ecc.getChildren(),function(pane){
_ecd+=pane._buttonWidget.getTitleHeight();
});
_ecc.resize({h:_ecd});
pion.databases.database_config_height=dojo.byId("database_config_end").offsetTop;
dijit.byId("main_stack_container").resize({h:pion.databases.database_config_height});
};
pion.databases.init=function(){
pion.databases.selected_pane=null;
pion.databases.config_accordion=dijit.byId("database_config_accordion");
pion.databases.getAllDatabasesInUIDirectory=function(){
var d=new dojo.Deferred();
var _ece=new dojox.data.XmlStore({url:"/config/databases/plugins"});
_ece.fetch({onComplete:function(_ecf){
var _ed0=dojo.map(_ecf,function(item){
return _ece.getValue(item,"Plugin").toString();
});
d.callback(_ed0);
}});
return d;
};
var _ed1=function(_ed2){
var d=new dojo.Deferred();
plugin_data_store_items=[];
dojo.forEach(_ed2,function(_ed3){
if(dojo.indexOf(pion.plugins.available_plugins,_ed3)!=-1){
var _ed4=pion.plugins.getPluginPrototype("plugins.databases",_ed3,"/plugins/databases");
plugin_data_store_items.push({plugin:_ed3,label:_ed4.label});
}
pion.databases.plugin_data_store=new dojo.data.ItemFileWriteStore({data:{identifier:"plugin",items:plugin_data_store_items}});
});
d.callback();
return d;
};
var _ed5=function(){
pion.databases.config_store.fetch({onComplete:function(_ed6,_ed7){
pion.databases.config_accordion.createPanesFromAllItems(_ed6,pion.databases.config_store);
},onError:pion.handleFetchError});
};
pion.plugins.initAvailablePluginList().addCallback(pion.databases.getAllDatabasesInUIDirectory).addCallback(_ed1).addCallback(_ed5);
pion.databases._replaceAccordionPane=function(_ed8){
var _ed9=pion.databases.config_store.getValue(_ed8.config_item,"Plugin");
var _eda="plugins.databases."+_ed9+"Pane";
var _edb=dojo.getObject(_eda);
if(_edb){
console.debug("found class ",_eda);
var _edc=new _edb({title:_ed8.title,plugin_type:_ed9});
}else{
console.debug("class ",_eda," not found; using plugins.databases.DatabasePane instead.");
var _edc=new plugins.databases.DatabasePane({title:_ed8.title,plugin_type:_ed9});
}
_edc.uuid=_ed8.uuid;
_edc.config_item=_ed8.config_item;
_edc.initialized=true;
var _edd=dijit.byId("database_config_accordion");
var idx=_edd.getIndexOfChild(_ed8);
_edd.pendingSelection=_edc;
_edd.pendingRemoval=_ed8;
_edd.addChild(_edc,idx);
};
pion.databases._updatePane=function(pane){
console.debug("Fetching item ",pane.uuid);
var _ede=pion.databases.config_store;
_ede.fetch({query:{"@id":pane.uuid},onItem:function(item){
console.debug("item: ",item);
pane.populateFromConfigItem(item);
},onError:pion.handleFetchError});
pion.databases._adjustAccordionSize();
dojo.style(pane.containerNode,"overflow","hidden");
};
function _edf(pane){
console.debug("Selected "+pane.title);
var _ee0=pion.databases.selected_pane;
if(pane==_ee0){
return;
}
var _ee1=dijit.byId("database_config_accordion");
if(_ee0&&dojo.hasClass(_ee0.domNode,"unsaved_changes")){
var _ee2=new dijit.Dialog({title:"Warning: unsaved changes"});
_ee2.attr("content","Please save or cancel unsaved changes before selecting another Database.");
_ee2.show();
setTimeout(function(){
_ee1.selectChild(_ee0);
},500);
return;
}
setTimeout(function(){
if(_ee1.pendingRemoval){
_ee1.removeChild(_ee1.pendingRemoval);
_ee1.pendingRemoval=false;
}
if(!pane.initialized){
pion.databases._replaceAccordionPane(pane);
}else{
pion.databases.selected_pane=pane;
pion.databases._updatePane(pane);
}
},_ee1.duration+100);
};
function _ee3(pane){
var _ee4=dijit.byId("database_config_accordion");
setTimeout(function(){
if(_ee4.pendingSelection){
_ee4.selectChild(_ee4.pendingSelection);
_ee4.pendingSelection=false;
}
},_ee4.duration);
};
function _ee5(pane){
};
dojo.subscribe("database_config_accordion-selectChild",_edf);
dojo.subscribe("database_config_accordion-addChild",_ee3);
dojo.subscribe("database_config_accordion-removeChild",_ee5);
pion.databases.createNewPaneFromStore=function(id,_ee6){
pion.databases.config_store.fetch({query:{"@id":id},onItem:function(item){
var _ee7=pion.databases.config_accordion.createNewPaneFromItem(item,pion.databases.config_store);
if(_ee6){
pion.databases._adjustAccordionSize();
dijit.byId("database_config_accordion").selectChild(_ee7);
}
},onError:pion.handleFetchError});
};
function _ee8(id){
var _ee9=dijit.byId("database_config_accordion").getChildren();
for(var i=0;i<_ee9.length;++i){
if(pion.databases.config_store.getValue(_ee9[i].config_item,"@id")==id){
return true;
}
}
return false;
};
function _eea(name){
var _eeb=dijit.byId("database_config_accordion").getChildren();
for(var i=0;i<_eeb.length;++i){
if(_eeb[i].title==name){
return true;
}
}
return false;
};
function _eec(){
var _eed=new plugins.databases.SelectPluginDialog({title:"Select Database Plugin"});
_eed.show();
_eed.execute=function(_eee){
_eef(_eee.Plugin);
};
};
function _eef(_ef0){
var _ef1="Add New "+_ef0;
var _ef2="plugins.databases."+_ef0+"InitDialog";
var _ef3=dojo.getObject(_ef2);
if(_ef3){
console.debug("found class ",_ef2);
var _ef4=new _ef3({title:_ef1});
}else{
console.debug("class ",_ef2," not found; using plugins.databases.DatabaseInitDialog instead.");
var _ef4=new plugins.databases.DatabaseInitDialog({title:_ef1});
}
_ef4.attr("value",{Plugin:_ef0});
setTimeout(function(){
dojo.query("input",_ef4.domNode)[0].select();
},500);
_ef4.show();
_ef4.execute=function(_ef5){
console.debug(_ef5);
var _ef6="<PionConfig><Database>";
for(var tag in _ef5){
console.debug("dialogFields[",tag,"] = ",_ef5[tag]);
_ef6+=pion.makeXmlLeafElement(tag,_ef5[tag]);
}
if(this._insertCustomData){
this._insertCustomData();
}
_ef6+="</Database></PionConfig>";
console.debug("post_data: ",_ef6);
dojo.rawXhrPost({url:"/config/databases",contentType:"text/xml",handleAs:"xml",postData:_ef6,load:function(_ef7){
var node=_ef7.getElementsByTagName("Database")[0];
var id=node.getAttribute("id");
console.debug("id (from server): ",id);
pion.databases.createNewPaneFromStore(id,true);
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_ef6})});
};
};
dijit.byId("database_config").button.onClick=_eec;
};
}
if(!dojo._hasResource["plugins.reactors.DatabaseOutputReactor"]){
dojo._hasResource["plugins.reactors.DatabaseOutputReactor"]=true;
dojo.provide("plugins.reactors.DatabaseOutputReactor");
dojo.declare("plugins.reactors.DatabaseOutputReactor",[plugins.reactors.Reactor],{postCreate:function(){
this.config.Plugin="DatabaseOutputReactor";
this.inherited("postCreate",arguments);
this.special_config_elements.push("Comparison","Field");
this.field_mapping_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
this.field_mapping_store.next_id=0;
this.comparison_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
this.comparison_store.next_id=0;
this.prepareToHandleLoadNotification();
this._populateComparisonStore();
this._populateFieldMappingStore();
},prepareToHandleLoadNotification:function(){
this.comparison_store_is_ready=false;
this.field_mapping_store_is_ready=false;
var h1=this.connect(this,"onDonePopulatingComparisonStore",function(){
this.disconnect(h1);
this._updatePutDataIfGridStoresReady();
});
var h2=this.connect(this,"onDonePopulatingFieldMappingStore",function(){
this.disconnect(h2);
this._updatePutDataIfGridStoresReady();
});
},_updatePutDataIfGridStoresReady:function(){
if(this.comparison_store_is_ready&&this.field_mapping_store_is_ready){
this.updateNamedCustomPutData("custom_put_data_from_config");
this.comparison_store_is_ready=false;
this.field_mapping_store_is_ready=false;
this.onDonePopulatingGridStores();
}
},onDonePopulatingGridStores:function(){
},reloadGridStores:function(){
var _ef8=this;
this.comparison_store.fetch({onItem:function(item){
_ef8.comparison_store.deleteItem(item);
},onComplete:function(){
_ef8._populateComparisonStore();
},onError:pion.handleFetchError});
this.field_mapping_store.fetch({onItem:function(item){
_ef8.field_mapping_store.deleteItem(item);
},onComplete:function(){
_ef8._populateFieldMappingStore();
},onError:pion.handleFetchError});
this.prepareToHandleLoadNotification();
},_populateComparisonStore:function(){
var _ef9=this;
var _efa=pion.reactors.config_store;
_efa.fetch({query:{"@id":this.config["@id"]},onItem:function(item){
dojo.forEach(_efa.getValues(item,"Comparison"),function(comp){
var _efb={ID:_ef9.comparison_store.next_id++};
dojo.forEach(_efa.getAttributes(comp),function(attr){
_efb[attr]=(attr in plugins.reactors.DatabaseOutputReactor.grid_option_defaults)?_ef9.getOptionalBool(_efa,comp,attr):_efa.getValue(comp,attr).toString();
});
_ef9.comparison_store.newItem(_efb);
});
},onComplete:function(){
_ef9.comparison_store_is_ready=true;
_ef9.onDonePopulatingComparisonStore();
},onError:pion.handleFetchError});
},onDonePopulatingComparisonStore:function(){
},_populateFieldMappingStore:function(){
var _efc=this;
var _efd=pion.reactors.config_store;
_efd.fetch({query:{"@id":this.config["@id"]},onItem:function(item){
dojo.forEach(_efd.getValues(item,"Field"),function(_efe){
var _eff=_efd.getValue(_efe,"@index");
var _f00=(_eff!==undefined&&_eff!==null);
var _f01=_efd.getValue(_efe,"@sql");
var _f02=(_f01!==undefined&&_f01!==null);
var _f03={ID:_efc.field_mapping_store.next_id++,Field:_efd.getValue(_efe,"text()"),Term:_efd.getValue(_efe,"@term")};
if(_f00){
if(_eff=="false"||_eff=="true"||_eff=="unique"){
_f03.IndexOption=_eff;
}else{
_f03.IndexOption="custom";
}
_f03.Index=_eff;
}else{
_f03.IndexOption="false";
}
if(_f02){
_f03.SqlType=_f01;
}
_efc.field_mapping_store.newItem(_f03);
});
},onComplete:function(){
_efc.field_mapping_store_is_ready=true;
_efc.onDonePopulatingFieldMappingStore();
},onError:pion.handleFetchError});
},onDonePopulatingFieldMappingStore:function(){
},_updateCustomData:function(){
this.custom_put_data_from_config=this.custom_put_data_from_grid_stores;
},_insertCustomData:function(){
this.put_data+=this.custom_put_data_from_config;
},updateNamedCustomPutData:function(_f04){
var _f05="";
var _f06=this;
var _f07=this.comparison_store;
var _f08=this.field_mapping_store;
_f07.fetch({onItem:function(item){
_f05+="<Comparison>";
_f05+="<Term>"+_f07.getValue(item,"Term")+"</Term>";
_f05+="<Type>"+_f07.getValue(item,"Type")+"</Type>";
if(_f07.hasAttribute(item,"Value")){
_f05+=pion.makeXmlLeafElement("Value",_f07.getValue(item,"Value"));
}
_f05+="<MatchAllValues>"+_f07.getValue(item,"MatchAllValues")+"</MatchAllValues>";
_f05+="</Comparison>";
},onComplete:function(){
_f08.fetch({onItem:function(item){
_f05+="<Field term=\""+_f08.getValue(item,"Term")+"\"";
var _f09=_f08.getValue(item,"Index");
var _f0a=_f08.getValue(item,"IndexOption");
if(_f0a=="custom"){
_f05+=" index=\""+_f09+"\"";
}else{
if(_f0a=="false"){
if(_f09=="false"){
_f05+=" index=\"false\"";
}
}else{
_f05+=" index=\""+_f0a+"\"";
}
}
if(_f08.hasAttribute(item,"SqlType")){
_f05+=" sql=\""+_f08.getValue(item,"SqlType")+"\"";
}
_f05+=">";
_f05+=pion.escapeXml(_f08.getValue(item,"Field"));
_f05+="</Field>";
},onComplete:function(){
_f06[_f04]=_f05;
},onError:pion.handleFetchError});
},onError:pion.handleFetchError});
}});
plugins.reactors.DatabaseOutputReactor.label="Embedded Storage Reactor";
plugins.reactors.DatabaseOutputReactor.option_defaults={IgnoreInsert:false,MatchAllComparisons:false};
plugins.reactors.DatabaseOutputReactor.grid_option_defaults={MatchAllValues:false};
dojo.declare("plugins.reactors.DatabaseOutputReactorInitDialog",[plugins.reactors.ReactorInitDialog],{templateString:"<div class=\"dijitDialog reactor_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Database Output Reactor Initialization</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent storage\">\r\n\t\t<div class=\"reactor_dialog_top\">\r\n\t\t\t<table\r\n\t\t\t\t><tr\r\n\t\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t\t></tr\r\n\t\t\t\t><tr\r\n\t\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t\t></tr\r\n\t\t\t\t><tr\r\n\t\t\t\t\t><td><label>Database:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"Database\" store=\"pion.databases.config_store\" searchAttr=\"Name\"/></td\r\n\t\t\t\t></tr\r\n\t\t\t\t><tr\r\n\t\t\t\t\t><td><label>Table:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Table\"/></td\r\n\t\t\t\t></tr\r\n\t\t\t></table>\r\n\t\t</div>\r\n\t\t<div class=\"reactor_dialog_bottom\">\r\n\t\t\t<div class=\"reactor_grid_block\">\r\n\t\t\t\t<h2>Field Mappings</h2>\r\n\t\t\t\t<div class=\"reactor_dialog_grid\" dojoAttachPoint=\"field_mapping_grid_node\"></div>\r\n\t\t\t\t<button dojoType=dijit.form.Button dojoAttachEvent=\"onClick: _handleAddNewMapping\" class=\"add_new_row\">ADD NEW MAPPING</button>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick: tryConfig\">Save</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
this.field_mapping_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
this.field_mapping_store.next_id=0;
this.custom_post_data_from_field_mapping_store="";
this.connect(this.field_mapping_store,"onSet","_updateCustomPostDataFromFieldMappingStore");
this.connect(this.field_mapping_store,"onDelete","_updateCustomPostDataFromFieldMappingStore");
var _f0b=new dojox.grid.DataGrid({store:this.field_mapping_store,structure:plugins.reactors.DatabaseOutputReactorDialog.grid_layout,singleClickEdit:true,autoHeight:true},document.createElement("div"));
this.field_mapping_grid_node.appendChild(_f0b.domNode);
_f0b.startup();
_f0b.connect(_f0b,"onCellClick",function(e){
if(e.cell.name=="Delete"){
this.store.deleteItem(this.getItem(e.rowIndex));
}
});
},_updateCustomPostDataFromFieldMappingStore:function(){
var _f0c="";
var _f0d=this;
var _f0e=this.field_mapping_store;
_f0e.fetch({onItem:function(item){
_f0c+="<Field term=\""+_f0e.getValue(item,"Term")+"\"";
var _f0f=_f0e.getValue(item,"IndexOption");
if(_f0f!="false"){
_f0c+=" index=\""+_f0f+"\"";
}
_f0c+=">";
_f0c+=pion.escapeXml(_f0e.getValue(item,"Field"));
_f0c+="</Field>";
},onComplete:function(){
_f0d.custom_post_data_from_field_mapping_store=_f0c;
},onError:pion.handleFetchError});
},_insertCustomData:function(){
this.post_data+=this.custom_post_data_from_field_mapping_store;
},_handleAddNewMapping:function(){
this.field_mapping_store.newItem({ID:this.field_mapping_store.next_id++,IndexOption:"false"});
}});
dojo.declare("plugins.reactors.DatabaseOutputReactorDialog",[plugins.reactors.ReactorDialog],{templateString:"<div class=\"dijitDialog reactor_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Database Output Reactor Configuration</span>\r\n\t\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: onCancel\">\r\n\t\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent storage\">\r\n\t\t<!--start div to set padding for top half of dialog-->\r\n\t\t <div class=\"reactor_dialog_top\">\r\n\r\n\t\t\t<div dojoType=plugins.reactors.ReactorBoilerplate\r\n\t\t\t\t label=\"Database Output Reactor\" name=\"DatabaseOutputReactor\" category=\"Storage\"\r\n\t\t\t\t description=\"Send real-time data into a database or data warehouse.\">\r\n\t\t\t</div>\r\n\r\n\t\t\t<!--start reactor settings-->\r\n\t\t\t <table\r\n\t\t\t\t><tr\r\n\t\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>ID:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" class=\"id_text_box\" disabled=\"true\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Database:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"Database\" store=\"pion.databases.config_store\" searchAttr=\"Name\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Table:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Table\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Queue Size:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.NumberTextBox\" type=\"text\" name=\"QueueSize\" constraints=\"{min: 1}\" /></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Queue Timeout:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.NumberTextBox\" type=\"text\" name=\"QueueTimeout\" constraints=\"{min: 1}\" /></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Number of Inserters:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.NumberTextBox\" type=\"text\" name=\"NumInserters\" constraints=\"{min: 1}\" /></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Ignore Insert Errors</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"IgnoreInsert\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label dojoAttachPoint=\"key_cache_max_age_label\">Key Cache Max Age:</label></td\r\n\t\t\t\t\t><td><input dojoAttachPoint=\"key_cache_max_age\" dojoType=\"dijit.form.TextBox\" name=\"KeyCacheMaxAge\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label dojoAttachPoint=\"key_cache_age_term_label\">Key Cache Age Term:</label></td\r\n\t\t\t\t\t><td><input dojoAttachPoint=\"key_cache_age_term\" dojoType=\"pion.widgets.TermTextBox\" name=\"KeyCacheAgeTerm\" style=\"width: 100%;\" /></td\r\n\t\t\t\t></tr\r\n\t\t\t ></table>\r\n\t\t\t<!--end reactor settings-->\r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for top half of dialog-->\r\n\r\n\t\t<!--start div to set padding for bottom half of dialog-->\r\n\t\t<div class=\"reactor_dialog_bottom\">\r\n\r\n\t\t\t<div class=\"reactor_grid_block\">\r\n\t\t\t\t<div dojoType=\"pion.widgets.ReactorGridHeader\" title=\"Inclusion Conditions\" help=\"docs/comparisons\"></div>\r\n\t\t\t\t<input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"MatchAllComparisons\" dojoAttachEvent=\"onClick: _onUpdateMatchAllComparisons\" />\r\n\t\t\t\t<label>Match All Comparisons</label>\r\n\t\t\t\t<div class=\"reactor_dialog_grid\" dojoAttachPoint=\"comparison_grid_node\"></div>\r\n\t\t\t\t<button dojoAttachPoint=\"add_new_comparison_button\" dojoType=dijit.form.Button dojoAttachEvent=\"onClick: _handleAddNewComparison\" class=\"add_new_row\">ADD NEW COMPARISON</button>\r\n\t\t\t</div>\r\n\r\n\t\t\t<br />\r\n\r\n\t\t\t<!--start field mappings-->\r\n\t\t\t<div class=\"reactor_grid_block\">\r\n\t\t\t\t<h2>Field Mappings</h2>\r\n\t\t\t\t<div class=\"field_mapping_grid reactor_dialog_grid\" dojoAttachPoint=\"field_mapping_grid_node\"></div>\r\n\t\t\t\t<button dojoType=dijit.form.Button dojoAttachEvent=\"onClick: _handleAddNewMapping\" class=\"add_new_row\">ADD NEW MAPPING</button>\r\n\t\t\t</div>\r\n\t\t\t<!--end field mappings-->\r\n\r\n\t\t\t<!--start buttons-->\r\n\t\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t\t<!--end buttons--> \r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for bottom half of dialog-->\r\n\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
var _f10=this;
var h=dojo.connect(this.reactor,"onDonePopulatingGridStores",function(){
_f10._updateCustomPutDataFromGridStores();
_f10._checkForUniqueIndex();
_f10.connect(_f10.reactor.comparison_store,"onSet","_updateCustomPutDataFromGridStores");
_f10.connect(_f10.reactor.comparison_store,"onDelete","_updateCustomPutDataFromGridStores");
_f10.connect(_f10.reactor.field_mapping_store,"onSet","_updateCustomPutDataFromGridStores");
_f10.connect(_f10.reactor.field_mapping_store,"onDelete","_updateCustomPutDataFromGridStores");
_f10.connect(_f10.reactor.field_mapping_store,"onSet","_checkForUniqueIndex");
_f10.connect(_f10.reactor.field_mapping_store,"onDelete","_checkForUniqueIndex");
dojo.disconnect(h);
});
this.reactor.reloadGridStores();
this.comparison_grid_layout=[{defaultCell:{width:8,editable:true,type:dojox.grid.cells._Widget,styles:"text-align: right;"},rows:[{field:"Term",name:"Term",relWidth:2,type:pion.widgets.TermTextCell},{field:"Type",name:"Comparison",relWidth:1,widgetClass:pion.widgets.SimpleSelect,widgetProps:{store:pion.reactors.comparison_type_store,query:{category:"generic"}}},{field:"Value",name:"Value",relWidth:2,formatter:pion.xmlCellFormatter},{field:"MatchAllValues",name:"Match&nbsp;All",classes:"match_all bool",type:dojox.grid.cells.Bool},{name:"Delete",classes:"delete button",editable:false,formatter:pion.makeDeleteButton}]}];
this.comparison_grid=new dojox.grid.DataGrid({store:this.reactor.comparison_store,structure:this.comparison_grid_layout,escapeHTMLInData:false,singleClickEdit:true,autoHeight:5},document.createElement("div"));
this.comparison_grid._prev_term_type_category=this.comparison_grid.structure[0].rows[1].widgetProps.query.category;
this.comparison_grid_node.appendChild(this.comparison_grid.domNode);
this.comparison_grid.startup();
this.comparison_grid.connect(this.comparison_grid,"onCellClick",function(e){
if(e.cell.name=="Comparison"){
var item=this.getItem(e.rowIndex);
var term=this.store.getValue(item,"Term").toString();
if(pion.terms.categories_by_id[term]!=this._prev_term_type_category){
this._prev_term_type_category=pion.terms.categories_by_id[term];
if(e.cell.widget){
e.cell.widget.setQuery({category:pion.terms.categories_by_id[term]});
}else{
this.structure[0].rows[1].widgetProps.query.category=pion.terms.categories_by_id[term];
}
}
}else{
if(e.cell.name=="Delete"){
this.store.deleteItem(this.getItem(e.rowIndex));
}
}
});
var _f11=new dojox.grid.DataGrid({store:this.reactor.field_mapping_store,structure:plugins.reactors.DatabaseOutputReactorDialog.grid_layout,autoHeight:5,singleClickEdit:true},document.createElement("div"));
this.field_mapping_grid_node.appendChild(_f11.domNode);
_f11.startup();
_f11.connect(_f11,"onCellClick",function(e){
if(e.cell.name=="Delete"){
this.store.deleteItem(this.getItem(e.rowIndex));
}
});
_f11.canEdit=function(cell,_f12){
switch(cell.name){
case "Index":
var item=this.getItem(_f12);
var _f13=this.store.getValue(item,"IndexOption").toString();
return _f13!="custom";
default:
return true;
}
};
this.connect(this,"onCancel",function(){
this.destroyRecursive(false);
});
this.connect(this,"execute",function(){
this.destroyRecursive(false);
});
},_onUpdateMatchAllComparisons:function(e){
this.reactor.comparison_store.match_all_comparisons=e.target.checked;
this.reactor.updateNamedCustomPutData("custom_put_data_from_grid_stores");
},_updateCustomPutDataFromGridStores:function(){
this.reactor.updateNamedCustomPutData("custom_put_data_from_grid_stores");
},_checkForUniqueIndex:function(){
var _f14=this;
var _f15=false;
var _f16=this.reactor.field_mapping_store;
_f16.fetch({onItem:function(item){
var _f17=_f16.getValue(item,"Index");
var _f18=_f16.getValue(item,"IndexOption");
if(_f18=="unique"||_f18=="custom"){
_f15=true;
}
},onComplete:function(){
if(_f15){
dojo.removeClass(_f14.key_cache_max_age_label,"disabled");
_f14.key_cache_max_age.attr("disabled",false);
dojo.removeClass(_f14.key_cache_age_term_label,"disabled");
_f14.key_cache_age_term.attr("disabled",false);
}else{
dojo.addClass(_f14.key_cache_max_age_label,"disabled");
_f14.key_cache_max_age.attr("disabled",true);
_f14.key_cache_max_age.attr("value","");
dojo.addClass(_f14.key_cache_age_term_label,"disabled");
_f14.key_cache_age_term.attr("disabled",true);
_f14.key_cache_age_term.attr("value","");
}
},onError:pion.handleFetchError});
},_insertCustomData:function(){
this.put_data+=this.reactor.custom_put_data_from_grid_stores;
},_handleAddNewComparison:function(){
this.reactor.comparison_store.newItem({ID:this.reactor.comparison_store.next_id++,MatchAllValues:false});
},_handleAddNewMapping:function(){
this.reactor.field_mapping_store.newItem({ID:this.reactor.field_mapping_store.next_id++,IndexOption:"false"});
}});
plugins.reactors.DatabaseOutputReactorDialog.grid_layout=[{defaultCell:{editable:true,type:dojox.grid.cells._Widget},rows:[{field:"Field",name:"Database Column Name",relWidth:1,widgetClass:dijit.form.ValidationTextBox,widgetProps:{regExp:"[a-zA-Z][\\w]*",required:"true",invalidMessage:"Illegal database column name"}},{field:"Term",name:"Term",relWidth:2,type:pion.widgets.TermTextCell},{field:"IndexOption",name:"Index",styles:"text-align: center;",width:4,type:dojox.grid.cells.Select,options:["true","false","unique"]},{name:"Delete",classes:"delete button",editable:false,formatter:function(){
return pion.makeDeleteButton();
}}]}];
}
if(!dojo._hasResource["plugins.reactors.FissionReactor"]){
dojo._hasResource["plugins.reactors.FissionReactor"]=true;
dojo.provide("plugins.reactors.FissionReactor");
dojo.declare("plugins.reactors.FissionReactor",[plugins.reactors.Reactor],{postCreate:function(){
this.config.Plugin="FissionReactor";
this.inherited("postCreate",arguments);
this.special_config_elements.push("CopyTerm");
this.copy_term_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
this.copy_term_store.next_id=0;
this._populateCopyTermStore();
},reloadCopyTermStore:function(){
var _f19=this;
this.copy_term_store.fetch({onItem:function(item){
_f19.copy_term_store.deleteItem(item);
},onComplete:function(){
_f19._populateCopyTermStore();
},onError:pion.handleFetchError});
},onDonePopulatingCopyTermStore:function(){
},_populateCopyTermStore:function(){
var _f1a=this;
var _f1b=pion.reactors.config_store;
_f1b.fetch({query:{"@id":this.config["@id"]},onItem:function(item){
var _f1c=_f1b.getValues(item,"CopyTerm");
for(var i=0;i<_f1c.length;++i){
var _f1d={ID:_f1a.copy_term_store.next_id++,Term:_f1c[i]};
_f1a.copy_term_store.newItem(_f1d);
}
},onComplete:function(){
_f1a.updateNamedCustomPutData("custom_put_data_from_config");
_f1a.onDonePopulatingCopyTermStore();
},onError:pion.handleFetchError});
},_updateCustomData:function(){
this.custom_put_data_from_config=this.custom_put_data_from_copy_term_store;
},_insertCustomData:function(){
this.put_data+=this.custom_put_data_from_config;
},updateNamedCustomPutData:function(_f1e){
var _f1f="";
var _f20=this;
var _f21=this.copy_term_store;
_f21.fetch({onItem:function(item){
_f1f+=pion.makeXmlLeafElement("CopyTerm",_f21.getValue(item,"Term"));
},onComplete:function(){
_f20[_f1e]=_f1f;
},onError:pion.handleFetchError});
}});
plugins.reactors.FissionReactor.label="Fission Reactor";
plugins.reactors.FissionReactor.option_defaults={CopyAllTerms:false};
dojo.declare("plugins.reactors.FissionReactorInitDialog",[plugins.reactors.ReactorInitDialog],{templateString:"<div class=\"dijitDialog reactor_dialog\" tabindex=\"-1\" waiRole=\"dialog\" waiState=\"labelledby-${id}_title\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Fission Reactor Initialization</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\">\r\n\t\t<table\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Input&nbsp;Event&nbsp;Type:</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.TermTextBox\" name=\"InputEventType\" query=\"{type: 'event type'}\" style=\"width: 100%;\" /></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Input&nbsp;Event&nbsp;Term:</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.TermTextBox\" name=\"InputEventTerm\" query=\"{category: 'string'}\" style=\"width: 100%;\" /></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Codec:</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"Codec\" store=\"pion.codecs.config_store\" searchAttr=\"Name\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Copy all terms from original event</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"CopyAllTerms\" /></td\r\n\t\t\t></tr\r\n\t\t></table>\r\n\t</div>\r\n\t<div class=\"save_cancel_delete\">\r\n\t\t<button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick: tryConfig\">Save</button>\r\n\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
}});
dojo.declare("plugins.reactors.FissionReactorDialog",[plugins.reactors.ReactorDialog],{templateString:"<div class=\"dijitDialog reactor_dialog\" tabindex=\"-1\" waiRole=\"dialog\" waiState=\"labelledby-${id}_title\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Fission Reactor Configuration</span>\r\n\t\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: onCancel\">\r\n\t\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent processing\">\r\n\t\t<!--start div to set padding for top half of dialog-->\r\n\t\t<div class=\"reactor_dialog_top\">\r\n\r\n\t\t\t<div dojoType=plugins.reactors.ReactorBoilerplate\r\n\t\t\t\t label=\"Fission Reactor\" name=\"FissionReactor\" category=\"Processing\"\r\n\t\t\t\t description=\"Split each input event into a collection of output events.\">\r\n\t\t\t</div>\r\n\r\n\t\t\t <!--start reactor settings-->\r\n\t\t\t<table cellpadding=\"0\" cellspacing=\"5\" border=\"0\"\r\n\t\t\t\t><tr\r\n\t\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>ID:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" class=\"id_text_box\" disabled=\"true\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Input&nbsp;Event&nbsp;Type:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"pion.widgets.TermTextBox\" name=\"InputEventType\" query=\"{type: 'event type'}\" style=\"width: 100%;\" /></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Input&nbsp;Event&nbsp;Term:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"pion.widgets.TermTextBox\" name=\"InputEventTerm\" query=\"{category: 'string'}\" style=\"width: 100%;\" /></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Codec:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"Codec\" store=\"pion.codecs.config_store\" searchAttr=\"Name\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Copy all terms from original event</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"CopyAllTerms\" /></td\r\n\t\t\t\t></tr\r\n\t\t\t></table>\r\n\t\t\t<div style=\"clear:both;\"></div>\r\n\t\t\t<!--end reactor settings-->\r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for top half of dialog-->\r\n\r\n\t\t<!--start div to set padding for bottom half of dialog-->\r\n\t\t<div class=\"reactor_dialog_bottom\">\r\n\r\n\t\t\t<!--start copy terms-->\r\n\t\t\t<div class=\"reactor_grid_block\">\r\n\t\t\t\t<h2>Terms to copy (optional)</h2>\r\n\t\t\t\t<h4>For each input event, these terms will be copied to every resulting output event.</h4>\r\n\t\t\t\t<div class=\"reactor_dialog_grid\" dojoAttachPoint=\"copy_term_grid_node\"></div>\r\n\t\t\t\t<button dojoType=dijit.form.Button dojoAttachEvent=\"onClick: _handleAddNewCopyTerm\" class=\"add_new_row\">ADD NEW TERM TO COPY</button>\r\n\t\t\t</div>\r\n\t\t\t<!--end copy terms-->\r\n\r\n\t\t\t<!--start buttons--> \r\n\t\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t\t<!--end buttons--> \r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for bottom half of dialog-->\r\n\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
var _f22=this;
var h=dojo.connect(this.reactor,"onDonePopulatingCopyTermStore",function(){
_f22._updateCustomPutDataFromCopyTermStore();
_f22.connect(_f22.reactor.copy_term_store,"onSet","_updateCustomPutDataFromCopyTermStore");
_f22.connect(_f22.reactor.copy_term_store,"onDelete","_updateCustomPutDataFromCopyTermStore");
dojo.disconnect(h);
});
this.reactor.reloadCopyTermStore();
this.copy_term_grid_layout=[{rows:[{field:"Term",name:"Term",relWidth:1,editable:true,type:pion.widgets.TermTextCell},{name:"Delete",classes:"delete button",formatter:pion.makeDeleteButton}]}];
this.copy_term_grid=new dojox.grid.DataGrid({store:this.reactor.copy_term_store,structure:this.copy_term_grid_layout,singleClickEdit:true,autoHeight:true},document.createElement("div"));
this.copy_term_grid_node.appendChild(this.copy_term_grid.domNode);
this.copy_term_grid.startup();
this.copy_term_grid.connect(this.copy_term_grid,"onCellClick",function(e){
if(e.cell.name=="Delete"){
this.store.deleteItem(this.getItem(e.rowIndex));
}
});
},_updateCustomPutDataFromCopyTermStore:function(){
this.reactor.updateNamedCustomPutData("custom_put_data_from_copy_term_store");
},_insertCustomData:function(){
this.put_data+=this.reactor.custom_put_data_from_copy_term_store;
},_handleAddNewCopyTerm:function(){
this.reactor.copy_term_store.newItem({ID:this.reactor.copy_term_store.next_id++});
}});
}
if(!dojo._hasResource["plugins.reactors.PythonReactor"]){
dojo._hasResource["plugins.reactors.PythonReactor"]=true;
dojo.provide("plugins.reactors.PythonReactor");
dojo.declare("plugins.reactors.PythonReactor",[plugins.reactors.Reactor],{postCreate:function(){
this.config.Plugin="PythonReactor";
this.inherited("postCreate",arguments);
this.special_config_elements.push("PythonSource");
var _f23=this;
var _f24=pion.reactors.config_store;
_f24.fetch({query:{"@id":this.config["@id"]},onItem:function(item){
if(_f24.hasAttribute(item,"PythonSource")){
var _f25=_f24.getValue(item,"PythonSource");
var _f26=pion.makeXmlLeafElement("PythonSource",_f25);
_f23.custom_put_data_from_config=_f26;
}else{
_f23.custom_put_data_from_config="";
}
},onError:pion.handleFetchError});
},_insertCustomData:function(){
this.put_data+=this.custom_put_data_from_config;
}});
plugins.reactors.PythonReactor.label="Python Reactor";
dojo.declare("plugins.reactors.PythonReactorDialog",[plugins.reactors.ReactorDialog],{templateString:"<div class=\"dijitDialog reactor_dialog python_reactor_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Python Reactor Configuration</span>\r\n\t\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: onCancel\">\r\n\t\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent processing\"\r\n\t\t><!--start div to set padding for top half of dialog-->\r\n\t\t<div class=\"reactor_dialog_top\">\r\n\r\n\t\t\t<div dojoType=plugins.reactors.ReactorBoilerplate\r\n\t\t\t\t label=\"Python Reactor\" name=\"PythonReactor\" category=\"Processing\"\r\n\t\t\t\t description=\"Manipulate events using the Python programming language.\">\r\n\t\t\t</div>\r\n\r\n\t\t\t<!--start reactor settings-->\r\n\t\t\t<table cellpadding=\"0\" cellspacing=\"5\" border=\"0\"\r\n\t\t\t\t><tr\r\n\t\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>ID:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" class=\"id_text_box\" disabled=\"true\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t\t></tr><tr\r\n\t\t\t\t\t><td><label>Filename:</label></td\r\n\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Filename\" style=\"width: 100%;\"/></td\r\n\t\t\t\t></tr\r\n\t\t\t></table>\r\n\t\t\t<!--end reactor settings-->\r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for top half of dialog-->\r\n\r\n\t\t<!--start div to set padding for bottom half of dialog-->\r\n\t\t<div class=\"reactor_dialog_bottom\">\r\n\r\n\t\t\t<label>Python Code:</label>\r\n\t\t\t<br />\r\n\t\t\t<textarea dojoAttachPoint=\"python_text_area\" style=\"width: 100%\" rows=\"8\"></textarea>\r\n\r\n\t\t\t<!--start buttons-->\r\n\t\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button>\r\n\t\t\t\t<button dojoType=dijit.form.Button class=\"cancel\">Cancel</button>\r\n\t\t\t</div>\r\n\t\t\t<!--end buttons-->\r\n\r\n\t\t</div>\r\n\t\t<!--end div to set padding for bottom half of dialog-->\r\n\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
var _f27=this;
var _f28=pion.reactors.config_store;
_f28.fetch({query:{"@id":this.reactor.config["@id"]},onItem:function(item){
if(_f28.hasAttribute(item,"Filename")){
_f27.attr("value",{Filename:_f28.getValue(item,"Filename")});
}
if(_f28.hasAttribute(item,"PythonSource")){
_f27.python_text_area.value=_f28.getValue(item,"PythonSource");
}
},onError:pion.handleFetchError});
this.connect(this.python_text_area,"onkeydown",function(e){
if(e.keyCode===dojo.keys.TAB){
if(dojo.isIE){
var _f29=document.selection.createRange();
var _f2a=_f29.duplicate();
_f2a.moveToElementText(this.python_text_area);
_f2a.setEndPoint("EndToEnd",_f29);
var p1=_f2a.text.length-_f29.text.length;
if(_f29.text.length==0){
var _f2b=this.python_text_area.createTextRange();
if(_f29.boundingLeft==_f2b.boundingLeft){
p1+=2;
}
}
var p2=p1+_f29.text.length;
this.python_text_area.value=this.python_text_area.value.substring(0,p1)+"\t"+this.python_text_area.value.substring(p2);
with(_f29){
var _f2c=this.python_text_area.value.substring(0,p1+1);
var _f2d=_f2c.replace(/\r/g,"").length+1;
var _f2e=_f2d;
moveStart("character",_f2e);
var temp=this.python_text_area.value.replace(/\r/g,"");
var _f2f=(_f2e-temp.length)-1;
moveEnd("character",_f2f);
select();
}
}else{
var p1=this.python_text_area.selectionStart;
var p2=this.python_text_area.selectionEnd;
this.python_text_area.value=this.python_text_area.value.substring(0,p1)+"\t"+this.python_text_area.value.substring(p2);
this.python_text_area.setSelectionRange(p1+1,p1+1);
}
dojo.stopEvent(e);
}
});
},uninitialize:function(){
this.inherited("uninitialize",arguments);
},_insertCustomData:function(_f30){
var _f31=this.python_text_area.value;
var _f32=pion.makeXmlLeafElement("PythonSource",_f31);
this.put_data+=_f32;
this.reactor.custom_put_data_from_config=_f32;
}});
}
if(!dojo._hasResource["pion.reactors"]){
dojo._hasResource["pion.reactors"]=true;
dojo.provide("pion.reactors");
var STEP=10;
var minimum_workspace_width=2000;
var minimum_workspace_height=2000;
var workspace_boxes=[];
var surface=null;
pion.reactors.workspace_box=null;
pion.reactors.workspaces_by_id={};
pion.reactors.reactors_by_id={};
pion.reactors.connections_by_id={};
pion.reactors.comparison_type_store=new dojo.data.ItemFileWriteStore({data:{identifier:"name",items:[]}});
pion.reactors.comparison_type_xml_store=new dojox.data.XmlStore({url:"/config/comparisons"});
pion.reactors.arity_by_comparison_name={};
pion.reactors.categories={};
pion.reactors.isTracking=false;
pion.reactors.getHeight=function(){
return pion.getMaxMainStackContainerHeightWithoutScroll();
};
pion.reactors.init=function(){
dijit.byId("main_stack_container").resize({h:pion.reactors.getHeight()});
var _f33=dijit.byId("ops_toggle_button");
dojo.connect(_f33.domNode,"click",function(){
if(_f33.checked){
dojo.addClass(dojo.byId("counterBackground"),"mostly_hidden");
}else{
dojo.removeClass(dojo.byId("counterBackground"),"mostly_hidden");
}
});
var _f34=function(item,hint){
var node=dojo.doc.createElement("div");
node.id=dojo.dnd.getUniqueId();
node.className="dojoDndItem";
node.setAttribute("reactor_type",item.reactor_type);
var _f35=dojo.doc.createElement("img");
node.appendChild(_f35);
_f35.setAttribute("src",item.src.toString());
_f35.setAttribute("width",148);
_f35.setAttribute("height",25);
_f35.setAttribute("alt",item.alt);
return {node:node,data:item,type:["reactor"]};
};
var _f36={collection:collectionReactors,processing:processingReactors,storage:storageReactors};
for(var _f37 in _f36){
_f36[_f37].creator=_f34;
}
var _f38=dojo.query(".dijitAccordionTitle",dojo.byId("sidebarMain")).map(dijit.byNode);
dojo.forEach(_f38,function(_f39){
dojo.addClass(_f39.domNode,_f39.contentWidget["class"]+"Header");
});
var _f3a=pion.reactors.comparison_type_store;
var _f3b=pion.reactors.comparison_type_xml_store;
_f3b.fetch({onItem:function(item){
var _f3c={name:_f3b.getValue(item,"@id").toString(),arity:parseInt(_f3b.getValue(item,"Arity"))};
pion.reactors.arity_by_comparison_name[_f3c.name]=_f3c.arity;
var _f3d=_f3b.getValues(item,"Category");
_f3c.category=dojo.map(_f3d,function(e){
return e.toString();
});
_f3a.newItem(_f3c);
}});
pion.reactors.getAllReactorsInUIDirectory=function(){
var d=new dojo.Deferred();
var _f3e=new dojox.data.XmlStore({url:"/config/reactors/plugins"});
_f3e.fetch({onComplete:function(_f3f){
var _f40=dojo.map(_f3f,function(item){
var _f41=_f3e.getValue(item,"Plugin").toString();
var _f42=_f3e.getValue(item,"ReactorType").toString();
return {plugin:_f41,category:_f42};
});
d.callback(_f40);
}});
return d;
};
var _f43=function(_f44){
var d=new dojo.Deferred();
dojo.forEach(_f44,function(_f45){
var _f46=_f45.plugin;
if(dojo.indexOf(pion.plugins.available_plugins,_f46)!=-1){
var _f47=pion.plugins.getPluginPrototype("plugins.reactors",_f46,"/plugins/reactors/"+_f45.category);
pion.reactors.categories[_f46]=_f45.category;
var icon=_f45.category+"/"+_f46+"/icon.png";
var _f48=dojo.moduleUrl("plugins.reactors",icon);
console.debug("icon_url = ",_f48);
_f36[_f45.category].insertNodes(false,[{reactor_type:_f46,src:_f48,alt:_f47["label"]}]);
}
});
d.callback();
return d;
};
pion.plugins.initAvailablePluginList().addCallback(pion.reactors.getAllReactorsInUIDirectory).addCallback(_f43).addCallback(pion.reactors._initConfiguredWorkspaces).addCallback(pion.reactors._initConfiguredReactors);
dojo.query(".dijitTabListWrapper .dijitTab","mainTabContainer").addClass("create_new_tab");
dojo.connect(window,"onresize",expandWorkspaceIfNeeded);
dojo.connect(document,"onkeypress",handleKeyPress);
var _f49=0;
var _f4a=0;
setInterval(function(){
if(!_f33.checked&&pion.current_page.id=="reactor_config"){
dojo.xhrGet({url:"/config/reactors/stats",preventCache:true,handleAs:"xml",timeout:1000,load:function(_f4b,_f4c){
var node=_f4b.getElementsByTagName("TotalOps")[0];
var _f4d=parseInt(dojo.isIE?node.xml.match(/.*>(\d*)<.*/)[1]:node.textContent);
var _f4e=_f4d-_f49;
dojo.byId("global_ops").innerHTML=_f4e>0?_f4e:0;
_f49=_f4d;
var _f4f=0;
var _f50=_f4b.getElementsByTagName("Reactor");
dojo.forEach(_f50,function(n){
var id=n.getAttribute("id");
var _f51=pion.reactors.reactors_by_id[id];
if(_f51){
if(_f51.workspace==pion.reactors.workspace_box){
var _f52=n.getElementsByTagName("EventsIn")[0];
var _f53=dojo.isIE?_f52.xml.match(/.*>(\d*)<.*/)[1]:_f52.textContent;
var _f54=parseInt(_f53);
_f51.ops_per_sec.innerHTML=_f54-_f51.prev_events_in;
_f51.prev_events_in=_f54;
_f4f+=_f54;
}
var _f55=n.getElementsByTagName("Running")[0];
var _f56=dojo.isIE?_f55.xml.match(/.*>(\w*)<.*/)[1]:_f55.textContent;
var _f57=(_f56=="true");
_f51.run_button.set("checked",_f57);
_f51.config.Running=_f57;
}
});
_f4e=_f4f-_f4a;
dojo.byId("workspace_ops").innerHTML=_f4e>0?_f4e:0;
_f4a=_f4f;
return _f4b;
},error:pion.handleXhrGetError});
}
},1000);
};
pion.reactors.updateRunButtons=function(){
if(dijit.byId("ops_toggle_button").checked){
dojo.xhrGet({url:"/config/reactors/stats",preventCache:true,handleAs:"xml",timeout:1000,load:function(_f58,_f59){
var _f5a=_f58.getElementsByTagName("Reactor");
dojo.forEach(_f5a,function(n){
var id=n.getAttribute("id");
var _f5b=pion.reactors.reactors_by_id[id];
if(_f5b){
var _f5c=n.getElementsByTagName("Running")[0];
var _f5d=dojo.isIE?_f5c.xml.match(/.*>(\w*)<.*/)[1]:_f5c.textContent;
var _f5e=(_f5d=="true");
_f5b.run_button.set("checked",_f5e);
_f5b.config.Running=_f5e;
}
});
return _f58;
},error:pion.handleXhrGetError});
}
};
pion.reactors._initConfiguredWorkspaces=function(){
var dfd=new dojo.Deferred();
var _f5f=false;
if(!("Admin" in pion.permissions_object)){
var _f60=pion.permissions_object.Reactors;
if(_f60.getElementsByTagName("Unrestricted").length==0){
_f5f=true;
var _f61=_f60.getElementsByTagName("Workspace");
}
}
pion.reactors.workspace_store=new dojox.data.XmlStore({url:"/config/workspaces"});
var _f62=pion.reactors.workspace_store;
var _f63=false;
_f62.fetch({onItem:function(item,_f64){
_f63=true;
var _f65={};
dojo.forEach(_f62.getAttributes(item),function(attr){
if(attr!="tagName"&&attr!="childNodes"){
_f65[attr]=_f62.getValue(item,attr).toString();
}
});
if(_f5f){
var _f66=dojo.some(_f61,function(node){
return dojox.xml.parser.textContent(node)==_f65["@id"];
});
}
if(!_f5f||_f66){
addWorkspace(_f65);
}
},onComplete:function(_f67,_f68){
if(!_f63){
var _f69="No Workspaces were found.  The Reactors configuration file on the server may need to be converted to a newer format.";
var _f6a=new pion._base.error.ServerErrorDialog({response_text:_f69});
_f6a.show();
}
if(_f5f){
dijit.byId("mainTabContainer").removeChild(dijit.byId("new_workspace_tab"));
}
if(workspace_boxes.length==0){
dijit.byId("main_stack_container").removeChild(dijit.byId("reactor_config"));
}
dfd.callback();
},onError:pion.handleFetchError});
return dfd;
};
pion.reactors._initConfiguredReactors=function(){
pion.reactors.config_store=new dojox.data.XmlStore({url:"/config/reactors"});
var _f6b=pion.reactors.config_store;
_f6b._getFetchUrl=function(_f6c){
if(_f6c&&_f6c.query&&"@id" in _f6c.query){
return this.url+"/"+_f6c.query["@id"];
}else{
return this.url;
}
};
_f6b.fetch({query:{tagName:"Reactor"},onItem:function(item,_f6d){
console.debug("fetched Reactor with id = ",_f6b.getValue(item,"@id"));
var _f6e={};
var _f6f=_f6b.getAttributes(item);
for(var i=0;i<_f6f.length;++i){
if(_f6f[i]!="tagName"&&_f6f[i]!="childNodes"){
_f6e[_f6f[i]]=_f6b.getValue(item,_f6f[i]).toString();
}
}
pion.reactors.createReactorInConfiguredWorkspace(_f6e);
},onComplete:function(_f70,_f71){
console.debug("done fetching Reactors");
pion.reactors.updateRunButtons();
_f6b.fetch({query:{tagName:"Connection"},onItem:function(item,_f72){
var _f73=pion.reactors.reactors_by_id[_f6b.getValue(item,"From")];
var _f74=pion.reactors.reactors_by_id[_f6b.getValue(item,"To")];
if(!_f73||!_f74){
return;
}
pion.reactors.workspace_box=_f73.workspace;
surface=pion.reactors.workspace_box.my_surface;
dijit.byId("mainTabContainer").selectChild(pion.reactors.workspace_box.my_content_pane);
var _f75=_f6b.getValue(item,"@id").toString();
pion.reactors.createConnection(_f73,_f74,_f75);
},onComplete:function(_f76,_f77){
console.debug("done fetching Connections");
pion.reactors.workspace_box=workspace_boxes[0];
surface=pion.reactors.workspace_box.my_surface;
dijit.byId("mainTabContainer").selectChild(pion.reactors.workspace_box.my_content_pane);
},onError:pion.handleFetchError});
},onError:pion.handleFetchError});
pion.reactors.connection_store=new dojox.data.XmlStore({url:"/config/connections"});
};
pion.reactors.createReactorInConfiguredWorkspace=function(_f78){
if(!(_f78.Workspace in pion.reactors.workspaces_by_id)){
return;
}
pion.reactors.workspace_box=pion.reactors.workspaces_by_id[_f78.Workspace];
var _f79=pion.reactors.workspace_box;
dijit.byId("mainTabContainer").selectChild(_f79.my_content_pane);
var _f7a=document.createElement("div");
_f79.node.appendChild(_f7a);
var _f7b=pion.reactors.createReactor(_f78,_f7a);
pion.reactors.reactors_by_id[_f78["@id"]]=_f7b;
_f7b.workspace=_f79;
_f79.reactors.push(_f7b);
};
pion.reactors.createConnection=function(_f7c,_f7d,_f7e){
pion.reactors.connections_by_id[_f7e]={source_reactor:_f7c,sink_reactor:_f7d};
if(_f7c.workspace!=_f7d.workspace){
var cwc=new pion.widgets.CrossWorkspaceConnection({source_reactor:_f7c,sink_reactor:_f7d,connection_id:_f7e});
_f7c.reactor_outputs.push({sink:cwc.sink,line:cwc.sink.line,id:_f7e,cross_workspace_connection:cwc});
_f7d.reactor_inputs.push({source:cwc.source,line:cwc.source.line,id:_f7e,cross_workspace_connection:cwc});
}else{
var line=surface.createPolyline().setStroke("black");
var _f7f=function(){
pion.reactors.doConnectionChangeIfAllowed(_f7c,_f7d,function(){
dojo.xhrDelete({url:"/config/connections/"+_f7e,handleAs:"xml",timeout:5000,load:function(_f80,_f81){
for(var i1=0;i1<_f7c.reactor_outputs.length;++i1){
if(_f7c.reactor_outputs[i1].id==_f7e){
break;
}
}
for(var i2=0;i2<_f7d.reactor_inputs.length;++i2){
if(_f7d.reactor_inputs[i2].id==_f7e){
break;
}
}
var line=_f7c.reactor_outputs[i1].line;
pion.reactors.removeLine(line);
_f7c.reactor_outputs.splice(i1,1);
_f7d.reactor_inputs.splice(i2,1);
return _f80;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
});
};
line.div1=document.createElement("div");
line.div1.style.position="absolute";
line.div1.onclick=function(){
pion.doDeleteConfirmationDialog("Delete this connection?",_f7f);
};
line.div1.onmouseover=function(){
line.div1.className="glowing_horiz";
line.div2.className="glowing_vert";
};
line.div1.onmouseout=function(){
line.div1.className="normal";
line.div2.className="normal";
};
pion.reactors.workspace_box.node.appendChild(line.div1);
line.div2=document.createElement("div");
line.div2.style.position="absolute";
line.div2.onclick=function(){
pion.doDeleteConfirmationDialog("Delete this connection?",_f7f);
};
line.div2.onmouseover=function(){
line.div1.className="glowing_horiz";
line.div2.className="glowing_vert";
};
line.div2.onmouseout=function(){
line.div1.className="normal";
line.div2.className="normal";
};
pion.reactors.workspace_box.node.appendChild(line.div2);
pion.reactors.updateConnectionLine(line,_f7c.domNode,_f7d.domNode);
_f7c.reactor_outputs.push({sink:_f7d,line:line,id:_f7e});
_f7d.reactor_inputs.push({source:_f7c,line:line,id:_f7e});
}
};
pion.reactors.removeLine=function(line){
pion.reactors.workspace_box.node.removeChild(line.div1);
pion.reactors.workspace_box.node.removeChild(line.div2);
line.removeShape();
};
pion.reactors.reselectCurrentWorkspace=function(){
if(pion.reactors.workspace_box){
dijit.byId("mainTabContainer").selectedChildWidget=undefined;
dijit.byId("mainTabContainer").selectChild(pion.reactors.workspace_box.my_content_pane);
}
};
function addWorkspace(_f82){
var i=workspace_boxes.length;
var _f83=new dijit.layout.ContentPane({"class":"workspacePane",title:_f82.Name,style:"overflow: auto"});
_f83.uuid=_f82["@id"];
var _f84=dijit.byId("mainTabContainer");
var _f85=dojo.marginBox(_f84.domNode);
console.debug("margin_box = dojo.marginBox(tab_container.domNode) = ",_f85);
var shim=document.createElement("div");
if(_f85.w<minimum_workspace_width){
shim.style.width=minimum_workspace_width+"px";
}else{
shim.style.width=(_f85.w-4)+"px";
}
if(_f85.h<minimum_workspace_height){
shim.style.height=minimum_workspace_height+"px";
}
_f83.domNode.appendChild(shim);
_f84.addChild(_f83,i);
var _f86=new pion.reactors.OverlappableTarget(shim,{accept:["reactor"]});
dojo.addClass(_f86.node,"workspaceTarget");
dojo.connect(_f86,"onDrop",pion.reactors.handleDropOnWorkspace);
dojo.connect(_f86.node,"onmouseup",updateLatestMouseUpEvent);
_f86.config=_f82;
_f86.my_content_pane=_f83;
_f83.my_workspace_box=_f86;
pion.reactors.workspaces_by_id[_f82["@id"]]=_f86;
workspace_boxes[i]=_f86;
_f84.selectChild(_f83);
_f86.node.style.width=_f86.node.offsetWidth+"px";
var _f87=dojo.marginBox(_f86.node);
_f87.h-=6;
console.debug("surface_box = ",_f87);
_f86.my_surface=dojox.gfx.createSurface(_f86.node,_f87.w,_f87.h);
_f86.reactors=[];
var menu=new dijit.Menu({targetNodeIds:[_f83.controlButton.domNode,_f86.node]});
menu.addChild(new dijit.MenuItem({label:"Edit workspace configuration",onClick:function(){
showWorkspaceConfigDialog(_f83);
}}));
menu.addChild(new dijit.MenuItem({label:"Delete workspace",onClick:function(){
deleteWorkspaceIfConfirmed(_f83);
}}));
_f86.node.ondblclick=function(){
showWorkspaceConfigDialog(_f83);
};
_f83.controlButton.domNode.ondblclick=function(){
showWorkspaceConfigDialog(_f83);
};
};
function makeScrollHandler(_f88){
var _f89=_f88;
var _f8a=_f88.domNode;
return function(){
if(_f89.isScrolling){
return;
}
_f89.isScrolling=true;
var _f8b=function(){
_f89.isScrolling=false;
if(_f8a.scrollLeft>_f89.prevScrollLeft){
_f8a.scrollLeft+=STEP-_f8a.scrollLeft%STEP;
}else{
_f8a.scrollLeft-=_f8a.scrollLeft%STEP;
}
if(_f89.prevScrollTop>_f8a.scrollTop){
_f8a.scrollTop+=STEP-_f8a.scrollTop%STEP;
}else{
if(_f8a.scrollTop<=STEP){
_f8a.scrollTop=0;
}else{
_f8a.scrollTop-=_f8a.scrollTop%STEP;
}
}
_f89.prevScrollLeft=_f8a.scrollLeft;
_f89.prevScrollTop=_f8a.scrollTop;
};
setTimeout(_f8b,0);
};
};
function updateLatestMouseUpEvent(e){
pion.reactors.last_x=e.clientX;
pion.reactors.last_y=e.clientY;
};
pion.reactors.getNearbyGridPointInBox=function(_f8c,_f8d){
var c=_f8c;
c.l+=STEP-1;
c.l-=c.l%STEP;
c.t+=STEP-1;
c.t-=c.t%STEP;
var _f8e={};
_f8e.l=_f8d.l<c.l?c.l:c.r<_f8d.l?c.r:_f8d.l;
_f8e.t=_f8d.t<c.t?c.t:c.b<_f8d.t?c.b:_f8d.t;
_f8e.l-=_f8e.l%STEP;
_f8e.t-=_f8e.t%STEP;
return _f8e;
};
pion.reactors.updateConnectionLine=function(poly,_f8f,_f90){
var x1=_f8f.offsetLeft+_f8f.offsetWidth/2;
var y1=_f8f.offsetTop+_f8f.offsetHeight/2;
if(_f90.offsetTop>y1){
var x2=_f90.offsetLeft+_f90.offsetWidth/2;
var y2=_f90.offsetTop;
var a1={x:x2-5,y:y2-5};
var a2={x:x2+5,y:y2-5};
}else{
if(_f90.offsetTop+_f90.offsetHeight<y1){
var x2=_f90.offsetLeft+_f90.offsetWidth/2;
var y2=_f90.offsetTop+_f90.offsetHeight;
var a1={x:x2-5,y:y2+5};
var a2={x:x2+5,y:y2+5};
}else{
if(_f90.offsetLeft>x1){
var x2=_f90.offsetLeft;
var y2=y1;
var a1={x:x2-5,y:y2-5};
var a2={x:x2-5,y:y2+5};
}else{
var x2=_f90.offsetLeft+_f90.offsetWidth;
var y2=y1;
var a1={x:x2+5,y:y2-5};
var a2={x:x2+5,y:y2+5};
}
}
}
poly.setShape([{x:x1,y:y1},{x:x2,y:y1},{x:x2,y:y2},a1,{x:x2,y:y2},a2]).setStroke("black");
var _f91=6;
poly.div1.style.top=(y1-_f91)+"px";
poly.div1.style.height=(2*_f91)+"px";
if(x1<x2){
poly.div1.style.left=x1+"px";
poly.div1.style.width=(x2-x1)+"px";
}else{
poly.div1.style.left=x2+"px";
poly.div1.style.width=(x1-x2)+"px";
}
poly.div2.style.left=(x2-_f91)+"px";
poly.div2.style.width=(2*_f91)+"px";
if(y1<y2){
poly.div2.style.top=y1+"px";
poly.div2.style.height=(y2-y1)+"px";
}else{
poly.div2.style.top=y2+"px";
poly.div2.style.height=(y1-y2)+"px";
}
};
pion.reactors.createReactor=function(_f92,node){
plugin_class_name="plugins.reactors."+_f92.Plugin;
var _f93=dojo.getObject(plugin_class_name);
if(_f93){
console.debug("found class ",plugin_class_name);
var _f94=new _f93({config:_f92},node);
}else{
console.debug("class ",plugin_class_name," not found; using plugins.reactors.Reactor instead.");
var _f94=new plugins.reactors.Reactor({config:_f92},node);
}
return _f94;
};
pion.reactors.handleDropOnWorkspace=function(_f95,_f96,copy){
var _f97=_f96[0].getAttribute("reactor_type");
pion.reactors.showReactorInitDialog(_f97);
};
pion.reactors.showReactorInitDialog=function(_f98){
pion.reactors._showReactorInitDialog(_f98);
};
pion.reactors._showReactorInitDialog=function(_f99){
var _f9a="plugins.reactors."+_f99+"InitDialog";
console.debug("dialog_class_name: ",_f9a);
var _f9b=dojo.getObject(_f9a);
if(_f9b){
var _f9c=new _f9b({plugin:_f99});
}else{
var _f9c=new plugins.reactors.ReactorInitDialog({title:plugins.reactors[_f99].label+" Initialization",plugin:_f99});
}
setTimeout(function(){
dojo.query("input",_f9c.domNode)[0].select();
},500);
dojo.query(".dijitButton.cancel",_f9c.domNode).forEach(function(n){
dojo.connect(n,"click",_f9c,"onCancel");
});
_f9c.show();
};
pion.reactors.handleDropOnReactor=function(_f9d){
dojo.query(".dojoDndItem",_f9d.node).forEach(function(n){
_f9d.node.removeChild(n);
});
if(pion.reactors.isTracking){
return;
}
pion.reactors.isTracking=true;
var _f9e=_f9d.node.offsetLeft+_f9d.node.offsetWidth/2;
var _f9f=_f9d.node.offsetTop+_f9d.node.offsetHeight/2;
var _fa0=dojo.position(pion.reactors.workspace_box.node,false);
var _fa1=pion.reactors.last_x-_fa0.x;
var _fa2=pion.reactors.last_y-_fa0.y;
pion.reactors.trackLine=surface.createPolyline([{x:_f9e,y:_f9f},{x:_fa1,y:_f9f},{x:_fa1,y:_fa2}]).setStroke("black");
var _fa3=pion.reactors.workspace_box.my_content_pane;
pion.reactors.mouse_connection=dojo.connect(dojo.byId("mainTabContainer"),"onmousemove",function(_fa4){
var _fa5=_fa4.clientX-_fa0.x;
var _fa6=_fa4.clientY-_fa0.y;
if(pion.reactors.workspace_box.my_content_pane!=_fa3){
pion.reactors.trackLine.setShape([{x:0,y:100},{x:_fa5,y:100},{x:_fa5,y:_fa6}]);
}else{
pion.reactors.trackLine.setShape([{x:_f9e,y:_f9f},{x:_fa5,y:_f9f},{x:_fa5,y:_fa6}]);
}
});
pion.reactors.mouse_connection.starting_pane=_fa3;
wrapperWithStartpoint=function(_fa7){
pion.reactors.stopTracking();
handleSelectionOfConnectorEndpoint(_fa7,_f9d.node);
};
dojo.addClass(_f9d.node,"disabled");
dojo.query(".reactor").filter(function(n){
return n!=_f9d.node;
}).forEach("item.onClickHandler = dojo.connect(item, 'click', wrapperWithStartpoint)");
};
pion.reactors.stopTracking=function(){
dojo.disconnect(pion.reactors.mouse_connection);
pion.reactors.trackLine.removeShape();
pion.reactors.isTracking=false;
dojo.query(".reactor").forEach("dojo.disconnect(item.onClickHandler); dojo.removeClass(item, 'disabled');");
};
function handleSelectionOfConnectorEndpoint(_fa8,_fa9){
var _faa=dijit.byNode(_fa9);
var _fab=dijit.byNode(_fa8.target);
if(!_fab){
_fab=dijit.byNode(_fa8.target.parentNode);
}
if(_faa.workspace!=_fab.workspace){
dijit.byId("mainTabContainer").selectChild(_faa.workspace.my_content_pane);
}
pion.reactors.doConnectionChangeIfAllowed(_faa,_fab,function(){
var _fac="<PionConfig><Connection><Type>reactor</Type>"+"<From>"+_faa.config["@id"]+"</From>"+"<To>"+_fab.config["@id"]+"</To>"+"</Connection></PionConfig>";
dojo.rawXhrPost({url:"/config/connections",contentType:"text/xml",handleAs:"xml",postData:_fac,load:function(_fad){
var node=_fad.getElementsByTagName("Connection")[0];
var id=node.getAttribute("id");
console.debug("connection id (from server): ",id);
pion.reactors.createConnection(_faa,_fab,id);
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_fac})});
});
};
pion.reactors.doLicenseKeyDialog=function(){
pion.reactors.action_not_allowed_dialog.hide();
var _fae="Please enter your license key";
var _faf=new pion.widgets.LicenseKeyDialog({title:_fae});
_faf.show();
return false;
};
pion.reactors.doConnectionChangeIfAllowed=function(_fb0,_fb1,_fb2){
if(pion.license_state=="lite"&&(_fb0.requires_license||_fb1.requires_license)){
pion.about.checkKeyStatusDfd().addCallback(function(){
if(pion.license_state=="lite"){
var _fb3=_fb0.requires_license?_fb0.class_info.label:_fb1.class_info.label;
pion.reactors.action_not_allowed_dialog=new dijit.Dialog({title:"Action Not Allowed"});
var _fb4="You must have a commercial license to modify the connections of a "+_fb3+".<br/>"+"<a href=\"http://www.atomiclabs.com/pion/trial-license.php\" target=\"_blank\" class=\"link\">"+"Click here to obtain a free trial license.</a><br />"+"If you already have a commercial license but have not yet installed the key, you can do so "+"<a href=\"#\" onclick=\"pion.reactors.doLicenseKeyDialog();\" class=\"link\">here.</a>";
pion.reactors.action_not_allowed_dialog.set("content",_fb4);
pion.reactors.action_not_allowed_dialog.show();
}else{
_fb2();
}
});
}else{
_fb2();
}
};
pion.reactors.showReactorConfigDialog=function(_fb5){
pion.reactors._showReactorConfigDialog(_fb5);
};
pion.reactors._showReactorConfigDialog=function(_fb6){
var _fb7="plugins.reactors."+_fb6.config.Plugin+"Dialog";
console.debug("dialog_class_name = ",_fb7);
var _fb8=dojo.getObject(_fb7);
if(_fb8){
var _fb9=new _fb8({reactor:_fb6});
}else{
var _fb9=new plugins.reactors.ReactorDialog({title:_fb6.config.Plugin+" Configuration",reactor:_fb6});
}
_fb9.set("value",_fb6.config);
dojo.query(".dijitButton.cancel",_fb9.domNode).forEach(function(n){
dijit.byNode(n).onClick=function(){
return _fb9.onCancel();
};
});
dojo.query(".dijitButton.save",_fb9.domNode).forEach(function(n){
dijit.byNode(n).onClick=function(){
return _fb9.isValid();
};
});
setTimeout(function(){
dojo.query("input",_fb9.domNode)[0].select();
},500);
_fb9.show();
};
pion.reactors.showReactorConnectionsDialog=function(_fba){
var _fbb=new plugins.reactors.ReactorConnectionsDialog({reactor:_fba,title:"Connections for Reactor <i>"+_fba.config.Name+"</i>"});
var _fbc=pion.reactors.categories[_fba.config.Plugin];
dojo.addClass(_fbb.reactor_connections.domNode,_fbc);
var _fbd=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
dojo.forEach(_fba.reactor_inputs,function(_fbe){
pion.reactors.addInputConnectionItem(_fbd,_fbe.id);
});
pion.reactors.connection_store.fetch({query:{"To":_fba.config["@id"],"Type":"input"},onItem:function(item){
var _fbf=pion.reactors.connection_store.getValue(item,"From");
var _fc0=pion.reactors.connection_store.getValue(item,"@id");
_fbd.newItem({ID:_fc0,Source:_fbf});
},onError:pion.handleFetchError});
var _fc1=function(v){
if(v=="yes"){
return "<button dojoType=dijit.form.Button class=\"delete_row\"></button>";
}else{
return "";
}
};
var _fc2=[{rows:[{field:"Source",name:"From",styles:"",relWidth:1},{field:"ID",name:"Connection ID",styles:"",relWidth:1},{field:"DeleteButton",name:"Delete",classes:"delete button",formatter:_fc1}]}];
var _fc3=new dojox.grid.DataGrid({store:_fbd,structure:_fc2,singleClickEdit:true,autoHeight:true},document.createElement("div"));
_fbb.reactor_connections.reactor_inputs_grid_node.appendChild(_fc3.domNode);
_fbb.reactor_connections.reactor_inputs_store=_fbd;
_fc3.startup();
_fc3.connect(_fc3,"onCellClick",function(e){
if(e.cell.name=="Delete"){
var _fc4=_fba.reactor_inputs[e.rowIndex];
var _fc5="cross_workspace_connection" in _fc4;
var _fc6=_fc5?_fc4.source.external_reactor:_fc4.source;
var _fc7=this;
pion.reactors.doConnectionChangeIfAllowed(_fc6,_fba,function(){
var item=_fc7.getItem(e.rowIndex);
if(_fc7.store.hasAttribute(item,"DeleteButton")){
_fc7.store.deleteItem(item);
dojo.xhrDelete({url:"/config/connections/"+_fc4.id,handleAs:"xml",timeout:5000,load:function(_fc8,_fc9){
_fba.reactor_inputs.splice(e.rowIndex,1);
for(var j=0;j<_fc6.reactor_outputs.length;++j){
if(_fc6.reactor_outputs[j].id==_fc4.id){
_fc6.reactor_outputs.splice(j,1);
break;
}
}
if(_fc5){
_fc4.cross_workspace_connection.destroy();
}else{
pion.reactors.removeLine(_fc4.line);
}
return _fc8;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
}
});
}
});
var _fca=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
dojo.forEach(_fba.reactor_outputs,function(_fcb){
pion.reactors.addOutputConnectionItem(_fca,_fcb.id);
});
pion.reactors.connection_store.fetch({query:{"From":_fba.config["@id"],"Type":"output"},onItem:function(item){
var sink=pion.reactors.connection_store.getValue(item,"To");
var _fcc=pion.reactors.connection_store.getValue(item,"@id");
_fca.newItem({ID:_fcc,Sink:sink});
},onError:pion.handleFetchError});
var _fcd=[{rows:[{field:"Sink",name:"To",styles:"",relWidth:1},{field:"ID",name:"Connection ID",styles:"",relWidth:1},{field:"DeleteButton",name:"Delete",classes:"delete button",formatter:_fc1}]}];
var _fce=new dojox.grid.DataGrid({store:_fca,structure:_fcd,singleClickEdit:true,autoHeight:true},document.createElement("div"));
_fbb.reactor_connections.reactor_outputs_grid_node.appendChild(_fce.domNode);
_fbb.reactor_connections.reactor_outputs_store=_fca;
_fce.startup();
_fce.connect(_fce,"onCellClick",function(e){
if(e.cell.name=="Delete"){
var _fcf=_fba.reactor_outputs[e.rowIndex];
var _fd0="cross_workspace_connection" in _fcf;
var _fd1=_fd0?_fcf.sink.external_reactor:_fcf.sink;
var _fd2=this;
pion.reactors.doConnectionChangeIfAllowed(_fba,_fd1,function(){
var item=_fd2.getItem(e.rowIndex);
if(_fd2.store.hasAttribute(item,"DeleteButton")){
_fd2.store.deleteItem(item);
dojo.xhrDelete({url:"/config/connections/"+_fcf.id,handleAs:"xml",timeout:5000,load:function(_fd3,_fd4){
_fba.reactor_outputs.splice(e.rowIndex,1);
for(var j=0;j<_fd1.reactor_inputs.length;++j){
if(_fd1.reactor_inputs[j].id==_fcf.id){
_fd1.reactor_inputs.splice(j,1);
break;
}
}
if(_fd0){
_fcf.cross_workspace_connection.destroy();
}else{
pion.reactors.removeLine(_fcf.line);
}
return _fd3;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
}
});
}
});
_fbb.reactor_connections.makeMenuOfInputs(_fba);
_fbb.reactor_connections.makeMenuOfOutputs(_fba);
_fbb.show();
};
pion.reactors.addInputConnectionItem=function(_fd5,_fd6){
var _fd7=pion.reactors.connections_by_id[_fd6];
if(_fd7.source_reactor.workspace==_fd7.sink_reactor.workspace){
var _fd8=_fd7.source_reactor.config.Name;
}else{
var _fd8="["+_fd7.source_reactor.workspace.my_content_pane.title+"] "+_fd7.source_reactor.config.Name;
}
_fd5.newItem({ID:_fd6,Source:_fd8,DeleteButton:"yes"});
};
pion.reactors.addOutputConnectionItem=function(_fd9,_fda){
var _fdb=pion.reactors.connections_by_id[_fda];
if(_fdb.source_reactor.workspace==_fdb.sink_reactor.workspace){
var _fdc=_fdb.sink_reactor.config.Name;
}else{
var _fdc="["+_fdb.sink_reactor.workspace.my_content_pane.title+"] "+_fdb.sink_reactor.config.Name;
}
_fd9.newItem({ID:_fda,Sink:_fdc,DeleteButton:"yes"});
};
pion.reactors.showConfigInNewTab=function(_fdd){
window.open("/config/reactors/"+_fdd.config["@id"]);
};
pion.reactors.deleteReactorIfConfirmed=function(_fde){
pion.doDeleteConfirmationDialog("Are you sure you want to delete this reactor?",deleteReactor,_fde);
};
function deleteReactor(_fdf){
dojo.xhrDelete({url:"/config/reactors/"+_fdf.config["@id"],handleAs:"xml",timeout:5000,load:function(_fe0,_fe1){
console.debug("xhrDelete for url = /config/reactors/",_fdf.config["@id"],"; HTTP status code: ",_fe1.xhr.status);
deleteReactorFromUI(_fdf);
return _fe0;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
};
function deleteReactorFromUI(_fe2){
delete pion.reactors.reactors_by_id[_fe2.config["@id"]];
for(var i=0;i<_fe2.reactor_inputs.length;++i){
var _fe3=_fe2.reactor_inputs[i];
var _fe4="cross_workspace_connection" in _fe3;
var _fe5=_fe4?_fe3.source.external_reactor:_fe3.source;
for(var j=0;j<_fe5.reactor_outputs.length;++j){
if(_fe5.reactor_outputs[j].id==_fe3.id){
_fe5.reactor_outputs.splice(j,1);
}
}
if(_fe4){
_fe3.cross_workspace_connection.destroy();
}else{
pion.reactors.removeLine(_fe3.line);
}
}
for(var i=0;i<_fe2.reactor_outputs.length;++i){
var _fe6=_fe2.reactor_outputs[i];
var _fe4="cross_workspace_connection" in _fe6;
var _fe7=_fe4?_fe6.sink.external_reactor:_fe6.sink;
for(var j=0;j<_fe7.reactor_inputs.length;++j){
if(_fe7.reactor_inputs[j].id==_fe6.id){
_fe7.reactor_inputs.splice(j,1);
}
}
if(_fe4){
_fe6.cross_workspace_connection.destroy();
}else{
pion.reactors.removeLine(_fe6.line);
}
}
var _fe8=_fe2.workspace;
_fe8.node.removeChild(_fe2.domNode);
for(var j=0;j<_fe8.reactors.length;++j){
if(_fe8.reactors[j]==_fe2){
_fe8.reactors.splice(j,1);
}
}
};
pion.reactors.copyReactor=function(_fe9){
var url="/config/reactors/"+_fe9.config["@id"];
dojo.xhrGet({url:url,handleAs:"text",timeout:5000,load:function(_fea){
var _feb=_fea.match(/<X>(\d+)<\/X>\s*<Y>(\d+)<\/Y>/);
var X=parseInt(_feb[1])+20;
var Y=parseInt(_feb[2])+20;
var _fec=_fea.replace(/<?.*>\s*<PionConfig.*>\s*<Reactor id="[^"]*">/,"<PionConfig><Reactor>");
_fec=_fec.replace(/<Name>(.*)<\/Name>/,"<Name>Copy of $1</Name>");
_fec=_fec.replace(/<X>\d+<\/X>/,"<X>"+X+"</X>");
_fec=_fec.replace(/<Y>\d+<\/Y>/,"<Y>"+Y+"</Y>");
dojo.rawXhrPost({url:"/config/reactors",contentType:"text/xml",handleAs:"xml",postData:_fec,load:function(_fed){
var node=_fed.getElementsByTagName("Reactor")[0];
var _fee=node.getAttribute("id");
var _fef={"@id":_fee};
var _ff0=node.childNodes;
for(var i=0;i<_ff0.length;++i){
if(_ff0[i].firstChild){
_fef[_ff0[i].tagName]=_ff0[i].firstChild.nodeValue;
}
}
pion.reactors.createReactorInConfiguredWorkspace(_fef);
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_fec})});
},error:pion.handleXhrGetError});
};
function selected(page){
if(page.title=="Add new workspace"){
var i=workspace_boxes.length;
var _ff1="Workspace "+(i+1);
for(var j=i+2;isDuplicateWorkspaceName(null,_ff1);++j){
_ff1="Workspace "+j;
}
var _ff2="<PionConfig><Workspace><Name>"+_ff1+"</Name></Workspace></PionConfig>";
dojo.rawXhrPost({url:"/config/workspaces",contentType:"text/xml",handleAs:"xml",postData:_ff2,load:function(_ff3){
var _ff4=_ff3.getElementsByTagName("Workspace")[0];
var _ff5={"@id":_ff4.getAttribute("id")};
dojo.forEach(_ff4.childNodes,function(node){
if(node.firstChild){
_ff5[node.tagName]=node.firstChild.nodeValue;
}
});
addWorkspace(_ff5);
return _ff3;
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_ff2})});
return;
}
pion.reactors.workspace_box=page.my_workspace_box;
surface=pion.reactors.workspace_box.my_surface;
if(pion.reactors.isTracking){
pion.reactors.trackLine.removeShape();
var x1=0;
var y1=100;
pion.reactors.trackLine=surface.createPolyline([{x:x1,y:y1},{x:x1+20,y:y1},{x:x1+15,y:y1-5},{x:x1+20,y:y1},{x:x1+15,y:y1+5}]).setStroke("black");
}
expandWorkspaceIfNeeded();
};
dojo.subscribe("mainTabContainer-selectChild",selected);
function expandWorkspaceIfNeeded(){
if(!surface){
return;
}
var _ff6=pion.reactors.workspace_box;
var _ff7=_ff6.my_content_pane.domNode.offsetWidth;
var _ff8=_ff6.my_content_pane.domNode.offsetHeight;
_ff7-=2;
_ff8-=6;
var _ff9=surface.getDimensions();
var _ffa=parseInt(_ff9.width);
var _ffb=parseInt(_ff9.height);
console.debug("old_width = ",_ffa,", new_width = ",_ff7,", old_height = ",_ffb,", new_height = ",_ff8);
if(_ff7>_ffa){
console.debug("expanding workspace width to ",_ff7,"px");
_ff6.node.style.width=_ff7+"px";
_ff9.width=_ff7;
}
if(_ff8>_ffb){
console.debug("expanding workspace height to ",_ff8,"px");
_ff6.node.style.height=_ff8+"px";
_ff9.height=_ff8;
}
if(_ff7>_ffa||_ff8>_ffb){
surface.setDimensions(parseInt(_ff9.width)+"px",parseInt(_ff9.height)+"px");
}
};
function handleKeyPress(e){
var _ffc=pion.reactors.workspace_box;
if(e.keyCode==dojo.keys.ESCAPE){
if(pion.reactors.isTracking){
var _ffd=pion.reactors.mouse_connection.starting_pane;
pion.reactors.stopTracking();
if(_ffc.my_content_pane!=_ffd){
dijit.byId("mainTabContainer").selectChild(_ffd);
}
}
}
};
function showWorkspaceConfigDialog(_ffe){
dialog=new pion.reactors.WorkspaceDialog({title:"Workspace Configuration",workspace_pane:_ffe});
dialog.workspace_name.isValid=function(_fff){
if(!this.validator(this.textbox.value,this.constraints)){
this.invalidMessage="Invalid Workspace name";
console.debug("validationTextBox.isValid returned false");
return false;
}
return true;
};
dialog.save_button.onClick=function(){
return dialog.isValid();
};
setTimeout(function(){
dojo.query("input",dialog.domNode)[0].select();
},500);
dialog.show();
dialog.execute=function(_1000){
updateWorkspaceConfig(_1000,_ffe);
};
};
function updateWorkspaceConfig(_1001,_1002){
var _1003=_1001.Name;
var _1004="<PionConfig><Workspace><Name>"+_1003+"</Name>";
if(_1001.Comment){
_1004+="<Comment>"+_1001.Comment+"</Comment>";
}
_1004+="</Workspace></PionConfig>";
dojo.rawXhrPut({url:"/config/workspaces/"+_1002.uuid,contentType:"text/xml",handleAs:"xml",putData:_1004,load:function(_1005){
_1002.title=_1003;
dojo.byId(_1002.controlButton.id).innerHTML=_1003;
pion.reactors.workspaces_by_id[_1002.uuid].config=_1001;
},error:pion.getXhrErrorHandler(dojo.rawXhrPut,{putData:_1004})});
};
function isDuplicateWorkspaceName(_1006,name){
return dojo.some(workspace_boxes,function(box){
return box.my_content_pane!=_1006&&box.my_content_pane.title==name;
});
};
function deleteWorkspaceIfConfirmed(_1007){
if(_1007.my_workspace_box.reactors.length==0){
pion.reactors.deleteEmptyWorkspace(_1007);
return;
}
pion.doDeleteConfirmationDialog("Are you sure you want to delete workspace '"+_1007.title+"' and all the reactors it contains?",deleteWorkspace,_1007);
};
function deleteWorkspace(_1008){
dojo.xhrDelete({url:"/config/reactors/"+_1008.uuid,handleAs:"xml",timeout:20000,load:function(_1009,_100a){
pion.reactors.deleteEmptyWorkspace(_1008);
return _1009;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
};
pion.reactors.deleteEmptyWorkspace=function(_100b){
dojo.xhrDelete({url:"/config/workspaces/"+_100b.uuid,handleAs:"xml",timeout:5000,load:function(_100c,_100d){
deleteWorkspaceFromUI(_100b);
return _100c;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
};
function deleteWorkspaceFromUI(_100e){
var _100f=[];
for(var i=0;i<_100e.my_workspace_box.reactors.length;++i){
_100f[i]=_100e.my_workspace_box.reactors[i];
}
for(i=0;i<_100f.length;++i){
deleteReactorFromUI(_100f[i]);
}
delete pion.reactors.workspaces_by_id[_100e.uuid];
workspace_boxes=dojo.filter(workspace_boxes,function(box){
return box!=_100e.my_workspace_box;
});
dijit.byId("mainTabContainer").removeChild(_100e);
};
pion.reactors.deleteAllWorkspaces=function(){
var dfd=new dojo.Deferred();
dojo.xhrGet({url:"/config/workspaces",preventCache:true,handleAs:"xml",timeout:5000,load:function(_1010,_1011){
var _1012=_1010.getElementsByTagName("Workspace");
if(_1012.length==0){
dfd.callback();
}else{
num_workspaces_deleted=0;
dojo.forEach(_1012,function(_1013){
var id=_1013.getAttribute("id");
dojo.xhrDelete({url:"/config/workspaces/"+id,handleAs:"xml",timeout:5000,load:function(_1014,_1015){
if(++num_workspaces_deleted==_1012.length){
dfd.callback();
}
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
});
}
},error:pion.handleXhrGetError});
return dfd;
};
dojo.declare("pion.reactors.WorkspaceDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog database_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Workspace Configuration</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\"\r\n\t\t><table\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.ValidationTextBox\" dojoAttachPoint=\"workspace_name\" type=\"text\" name=\"Name\"\r\n\t\t\t\t\t regExp=\".+\" required=\"true\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>ID:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" class=\"id_text_box\" disabled=\"true\"/></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><div class=\"save_cancel_delete\"\r\n\t\t\t><button dojoType=dijit.form.Button class=\"save\" dojoAttachPoint=\"save_button\" type=\"submit\">Save</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: onCancel\">Cancel</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"delete\" dojoAttachEvent=\"onClick: _handleDelete\">Delete</button\r\n\t\t></div\r\n\t></div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
var _1016=this;
var store=pion.reactors.workspace_store;
store.fetch({query:{"@id":this.workspace_pane.uuid},onItem:function(item){
var _1017={};
dojo.forEach(store.getAttributes(item),function(attr){
if(attr!="tagName"&&attr!="childNodes"){
_1017[attr]=store.getValue(item,attr).toString();
}
});
_1016.set("value",_1017);
},onError:pion.handleFetchError});
},_handleDelete:function(){
this.onCancel();
deleteWorkspaceIfConfirmed(this.workspace_pane);
}});
dojo.declare("pion.reactors.OverlappableTarget",[dojo.dnd.Target],{onOverEvent:function(){
if(this.targetState!="Disabled"){
this.inherited("onOverEvent",arguments);
}
},onOutEvent:function(){
if(this.targetState!="Disabled"){
this.inherited("onOutEvent",arguments);
}
}});
}
if(!dojo._hasResource["plugins.vocabularies.Vocabulary"]){
dojo._hasResource["plugins.vocabularies.Vocabulary"]=true;
dojo.provide("plugins.vocabularies.Vocabulary");
dojo.declare("plugins.vocabularies.Vocabulary",[],{constructor:function(_1018,args){
this.config=_1018;
dojo.mixin(this,args);
this.url="/config/vocabularies/"+this.config["@id"];
this.server_vocab_store=new dojox.data.XmlStore({url:this.url,attributeMap:{"Vocabulary.id":"@id"}});
this.server_vocab_term_store=new dojox.data.XmlStore({url:this.url,rootItem:"Term",attributeMap:{"Term.id":"@id"}});
this.vocab_term_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
this.vocab_term_store._saveCustom=this._getSaveCustomFunction();
},saveChangedTerms:function(){
var h=dojo.connect(this,"onSaveComplete",function(){
dojo.disconnect(h);
pion.terms.buildMapOfCategoriesByTerm();
});
this.vocab_term_store.save({});
},populateFromServerVocabStore:function(){
var _1019=this;
this.server_vocab_store.fetch({query:{"tagName":"Vocabulary"},onComplete:function(items,_101a){
console.debug("server_vocab_store.fetch.onComplete: items.length = ",items.length);
_1019.vocab_item=items[0];
_1019.populateFromServerVocabItem();
},onError:pion.handleFetchError});
},populateFromServerVocabItem:function(){
var name=this.server_vocab_store.getValue(this.vocab_item,"Name");
if(name){
this.config.Name=name.toString();
}
var _101b=this.server_vocab_store.getValue(this.vocab_item,"Comment");
if(_101b){
this.config.Comment=_101b.toString();
}
var _101c=this.server_vocab_store.getValue(this.vocab_item,"Locked");
this.config.Locked=(typeof _101c!=="undefined")&&_101c.toString()=="true";
console.dir(this.config);
var store=this.server_vocab_term_store;
var items=[];
var _101d=this;
store.fetch({onItem:function(item){
var _101e={full_id:store.getValue(item,"@id"),ID:store.getValue(item,"@id").split("#")[1]};
var type=store.getValue(item,"Type");
_101e.Type=pion.terms.type_descriptions_by_name[type.toString()];
_101e.Format=store.getValue(type,"@format");
_101e.Size=store.getValue(type,"@size");
var _101f=store.getValue(item,"Comment");
if(_101f){
_101e.Comment=_101f.toString();
}
items.push(_101e);
},onComplete:function(){
_101d.vocab_term_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:items}});
_101d.vocab_term_store._saveCustom=_101d._getSaveCustomFunction();
_101d.onDoneLoadingTerms();
},onError:pion.handleFetchError});
},onDoneLoadingTerms:function(){
},_getSaveCustomFunction:function(){
var _1020=this;
return function(_1021,_1022){
var store=this;
var _1023=0,_1024=0;
var ID,url;
for(ID in this._pending._modifiedItems){
if(this._pending._newItems[ID]||this._pending._deletedItems[ID]){
continue;
}
url=dojox.dtl.filter.strings.urlencode("/config/terms/"+_1020.config["@id"]+"#"+ID);
console.debug("_saveCustom: url = ",url);
this.fetchItemByIdentity({identity:ID,onItem:function(item){
var _1025="<PionConfig><Term><Type";
var _1026=store.getValue(item,"Format");
if(_1026&&_1026!="-"){
_1025+=" format=\""+pion.escapeXml(_1026)+"\"";
}
var size=store.getValue(item,"Size");
if(size&&size!="-"){
_1025+=" size=\""+pion.escapeXml(size)+"\"";
}
_1025+=">"+pion.terms.types_by_description[store.getValue(item,"Type")]+"</Type>";
if(store.getValue(item,"Comment")){
_1025+=pion.makeXmlLeafElement("Comment",store.getValue(item,"Comment"));
}
_1025+="</Term></PionConfig>";
console.debug("put_data = ",_1025);
_1023++;
dojo.rawXhrPut({url:url,handleAs:"xml",timeout:5000,contentType:"text/xml",putData:_1025,load:function(_1027,_1028){
console.debug("rawXhrPut for url = "+this.url,"; HTTP status code: ",_1028.xhr.status);
if(++_1024==_1023){
_1020.onSaveComplete();
}
return _1027;
},error:pion.getXhrErrorHandler(dojo.rawXhrPut,{putData:_1025})});
},onError:pion.handleFetchError});
}
for(ID in this._pending._newItems){
url=dojox.dtl.filter.strings.urlencode("/config/terms/"+_1020.config["@id"]+"#"+ID);
console.debug("_saveCustom: url = ",url);
var item=this._pending._newItems[ID];
var _1029="<PionConfig><Term><Type";
var _102a=store.getValue(item,"Format");
if(_102a&&_102a!="-"){
_1029+=" format=\""+pion.escapeXml(_102a)+"\"";
}
var size=store.getValue(item,"Size");
if(size&&size!="-"){
_1029+=" size=\""+pion.escapeXml(size)+"\"";
}
_1029+=">"+pion.terms.types_by_description[store.getValue(item,"Type")]+"</Type>";
if(store.getValue(item,"Comment")){
_1029+=pion.makeXmlLeafElement("Comment",store.getValue(item,"Comment"));
}
_1029+="</Term></PionConfig>";
console.debug("post_data = ",_1029);
_1023++;
dojo.rawXhrPost({url:url,handleAs:"xml",timeout:5000,contentType:"text/xml",postData:_1029,load:function(_102b,_102c){
console.debug("rawXhrPost for url = "+this.url,"; HTTP status code: ",_102c.xhr.status);
if(++_1024==_1023){
_1020.onSaveComplete();
}
return _102b;
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_1029})});
}
for(ID in this._pending._deletedItems){
url=dojox.dtl.filter.strings.urlencode("/config/terms/"+_1020.config["@id"]+"#"+ID);
console.debug("_saveCustom: url = ",url);
_1023++;
dojo.xhrDelete({url:url,handleAs:"xml",timeout:5000,load:function(_102d,_102e){
console.debug("xhrDelete for url = "+this.url,"; HTTP status code: ",_102e.xhr.status);
if(++_1024==_1023){
_1020.onSaveComplete();
}
return _102d;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
}
_1021();
};
},onSaveComplete:function(){
}});
dojo.declare("plugins.vocabularies.VocabularyInitDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog vocabulary_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Vocabulary Initialization</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\"\r\n\t\t><table\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>ID:</label></td\r\n\t\t\t\t><td><input dojoAttachPoint=\"id_widget\" dojoType=\"dijit.form.ValidationTextBox\" type=\"text\" name=\"@id\"\r\n\t\t\t\t\t regExp=\"\\w+\" required=\"true\"></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t><td><input dojoAttachPoint=\"name_widget\" dojoType=\"dijit.form.ValidationTextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t></div>\r\n\t<div class=\"save_cancel_delete\">\r\n\t\t<button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button>\r\n\t\t<button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: onCancel\">Cancel</button>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
var _102f=this;
this.id_widget.isValid=function(){
if(!this.validator(this.textbox.value,this.constraints)){
this.invalidMessage="Invalid Vocabulary ID";
return false;
}
if(pion.vocabularies.isDuplicateVocabularyId(this.textbox.value)){
this.invalidMessage="A Vocabulary with this ID already exists";
return false;
}
return true;
};
this.name_widget.isValid=function(){
if(pion.vocabularies.isDuplicateVocabularyName(this.textbox.value)){
this.invalidMessage="A Vocabulary with this name already exists";
return false;
}
return true;
};
}});
dojo.declare("plugins.vocabularies.TermInitDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog vocabulary_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Term Initialization</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\"\r\n\t\t><table\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>ID:</label></td\r\n\t\t\t\t><td><input dojoAttachPoint=\"id_widget\" dojoType=\"dijit.form.ValidationTextBox\" type=\"text\" name=\"@id\"\r\n\t\t\t\t\t regExp=\"[\\w-]+\" required=\"true\"></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Type:</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"Type\" dojoAttachEvent=\"onChange: _handleTypeChange\"\r\n\t\t\t\t\t\tstore=\"pion.terms.type_store\" searchAttr=\"description\" /></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Format:</label></td\r\n\t\t\t\t><td><input dojoAttachPoint=\"format_widget\" dojoType=\"dijit.form.ValidationTextBox\" type=\"text\" name=\"Format\" disabled=\"true\" \r\n\t\t\t\t\t regExp=\".*%.*\"></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Size:</label></td\r\n\t\t\t\t><td><input dojoAttachPoint=\"size_widget\" dojoType=\"dijit.form.ValidationTextBox\" type=\"text\" name=\"Size\" disabled=\"true\" \r\n\t\t\t\t\t regExp=\"[1-9][0-9]*\"></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t></div>\r\n\t<div class=\"save_cancel_delete\">\r\n\t\t<button dojoType=dijit.form.Button class=\"save\" dojoAttachPoint=\"save_button\" type=\"submit\">Save</button>\r\n\t\t<button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: onCancel\">Cancel</button>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
this.id_widget.isValid=function(){
if(!this.validator(this.textbox.value,this.constraints)){
this.invalidMessage="Invalid Term ID";
return false;
}
return true;
};
this.format_widget.isValid=function(){
if(!this.validator(this.textbox.value,this.constraints)){
this.invalidMessage="Invalid format.";
return false;
}
return true;
};
this.size_widget.isValid=function(){
if(!this.validator(this.textbox.value,this.constraints)){
this.invalidMessage="Must be a positive integer.";
return false;
}
return true;
};
},_handleTypeChange:function(type){
console.debug("_handleTypeChange: type = ",type);
if(type=="specific date"||type=="specific time"||type=="specific time & date"){
this.format_widget.set("disabled",false);
if(type=="specific date"){
this.format_widget.set("value","%Y-%m-%d");
}else{
if(type=="specific time"){
this.format_widget.set("value","%H:%M:%S");
}else{
this.format_widget.set("value","%Y-%m-%d %H:%M:%S");
}
}
this.format_widget.domNode.style.visibility="visible";
}else{
this.format_widget.set("disabled",true);
this.format_widget.set("value","");
this.format_widget.domNode.style.visibility="hidden";
}
if(type=="fixed-length string"){
this.size_widget.set("disabled",false);
this.size_widget.set("value","1");
this.size_widget.domNode.style.visibility="visible";
}else{
this.size_widget.set("disabled",true);
this.size_widget.set("value","");
this.size_widget.domNode.style.visibility="hidden";
}
},execute:function(_1030){
var _1031={ID:_1030["@id"],Type:_1030.Type,Comment:_1030.Comment};
_1031.Format=_1030.Format?_1030.Format:"-";
_1031.Size=_1030.Size?_1030.Size:"-";
this.vocabulary.vocab_term_store.newItem(_1031);
if(this.pane){
this.pane.markAsChanged();
}else{
this.vocabulary.saveChangedTerms();
if(this.onNewTermSaved){
this.onNewTermSaved(this.vocabulary.config["@id"]+"#"+_1031.ID);
}
}
}});
dojo.declare("plugins.vocabularies.VocabularyPane",[dijit.layout.ContentPane,dijit._Templated],{templateString:"<div class='vocab_pane' dojoAttachPoint='containerNode'\r\n\t><form dojoAttachPoint=\"form\" dojoType=\"dijit.form.Form\"\r\n\t\t><br/\r\n\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" width=\"100%\"\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name</label></td\r\n\t\t\t\t><td><input dojoAttachPoint=\"name\" dojoType=\"dijit.form.TextBox\" name=\"Name\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td rowspan=\"4\" valign=\"top\" width=\"20\">&nbsp;</td\r\n\t\t\t\t><td rowspan=\"1\"><label>Comments</label></td\r\n\t\t\t\t><td rowspan=\"4\" valign=\"top\"><textarea dojoAttachPoint=\"comment\" dojoType=\"dijit.form.SimpleTextarea\" name=\"Comment\" rows=\"4\"  class=\"comment\"></textarea></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>ID</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" disabled=\"true\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td rowspan=\"3\">&nbsp;</td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Locked</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"locked\"/></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><br/\r\n\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" style=\"border: 1px solid #999999;\" width=\"99%\"\r\n\t\t\t><tr\r\n\t\t\t\t><td class=\"matrixMainHeader\">Terms</td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td style=\"background-color: #f1f1f1;\"\r\n\t\t\t\t\t><div class=\"vocab_grid plugin_pane_grid\" dojoAttachPoint=\"vocab_term_grid_node\"></div\r\n\t\t\t\t\t><button dojoType=dijit.form.Button class=\"add_new_row\" dojoAttachPoint=\"add_new_term_button\" dojoAttachEvent=\"onClick:_handleAddNewTerm\">ADD NEW TERM</button\r\n\t\t\t\t></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><hr noshade=\"noshade\" size=\"1\" color=\"#999999\"\r\n\t\t><div class=\"save_cancel_delete\"\r\n\t\t\t><button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick:save\">Save Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick:cancel2\">Cancel Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"delete\" dojoAttachEvent=\"onClick:delete2\">Delete Vocabulary</button\r\n\t\t></div\r\n\t></form\r\n\t><div dojoAttachPoint=\"pane_end\" class=\"zero_height_end_marker\"></div\r\n></div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
var _1032=this;
this.vocabulary=new plugins.vocabularies.Vocabulary(this.config);
this.initGrid();
dojo.query("input",this.domNode).forEach(function(n){
dojo.connect(n,"change",_1032,_1032.markAsChanged);
});
dojo.query("textarea",this.domNode).forEach(function(n){
dojo.connect(n,"change",_1032,_1032.markAsChanged);
});
},getHeight:function(){
return this.pane_end.offsetTop;
},initGrid:function(){
var _1033=this;
this.vocab_grid_layout=[{defaultCell:{editable:true,type:dojox.grid.cells._Widget,styles:"text-align: left;"},rows:[{field:"ID",name:"ID",width:15,editable:false},{field:"Type",name:"Type",width:15,widgetClass:pion.widgets.SimpleSelect,widgetProps:{store:pion.terms.type_store,searchAttr:"description"}},{field:"Format",name:"Format",width:10,formatter:pion.xmlCellFormatter},{field:"Size",name:"Size",width:4,widgetClass:dijit.form.NumberTextBox,constraint:{min:1}},{field:"Comment",name:"Comment",relWidth:1,formatter:pion.xmlCellFormatter},{name:"Delete",classes:"delete button",editable:false,formatter:pion.makeDeleteButton}]}];
this.vocab_term_grid=new dojox.grid.DataGrid({store:this.vocabulary.vocab_term_store,structure:this.vocab_grid_layout,escapeHTMLInData:false,singleClickEdit:true},document.createElement("div"));
this.vocab_term_grid_node.appendChild(this.vocab_term_grid.domNode);
this.vocab_term_grid.startup();
this.vocab_term_grid.connect(this.vocab_term_grid,"onCellClick",function(e){
if(_1033.vocabulary.config.Locked){
return;
}
if(e.cell.name=="Delete"){
this.store.deleteItem(this.getItem(e.rowIndex));
dojo.addClass(_1033.domNode,"unsaved_changes");
dojo.stopEvent(e);
}
});
dojo.connect(this.vocab_term_grid,"onApplyCellEdit",this,_1033.markAsChanged);
this.vocab_term_grid.canEdit=function(cell,_1034){
if(_1033.vocabulary.config.Locked){
return false;
}else{
switch(cell.field){
case "Format":
var item=this.getItem(_1034);
var type=this.store.getValue(item,"Type").toString();
return (type=="specific date"||type=="specific time"||type=="specific time & date");
case "Size":
var item=this.getItem(_1034);
var type=this.store.getValue(item,"Type").toString();
return (type=="fixed-length string");
default:
return true;
}
}
};
},populateFromServerVocabStore:function(){
var _1035=this;
var h=dojo.connect(this.vocabulary,"onDoneLoadingTerms",function(){
dojo.disconnect(h);
_1035.name.set("readOnly",_1035.vocabulary.config.Locked);
_1035.comment.set("readOnly",_1035.vocabulary.config.Locked);
_1035.add_new_term_button.set("disabled",_1035.vocabulary.config.Locked);
var _1036=_1035.vocab_term_grid.layout.cellCount-1;
_1035.vocab_term_grid.layout.setColumnVisibility(_1036,!_1035.vocabulary.config.Locked);
var _1037=dojo.clone(_1035.vocabulary.config);
_1037.options=_1035.vocabulary.config.Locked?["locked"]:[];
_1035.form.set("value",_1037);
_1035.vocab_term_grid.setStore(_1035.vocabulary.vocab_term_store);
var node=_1035.domNode;
setTimeout(function(){
dojo.removeClass(node,"unsaved_changes");
},500);
});
this.vocabulary.populateFromServerVocabStore();
},_handleAddNewTerm:function(){
console.debug("_handleAddNewTerm");
var _1038=new plugins.vocabularies.TermInitDialog({vocabulary:this.vocabulary,pane:pion.vocabularies.selected_pane});
_1038.save_button.onClick=function(){
return _1038.isValid();
};
setTimeout(function(){
dojo.query("input",_1038.domNode)[0].select();
},500);
_1038.show();
},save:function(){
dojo.removeClass(this.domNode,"unsaved_changes");
this.saveVocabConfig();
this.vocabulary.saveChangedTerms();
},saveVocabConfig:function(){
var _1039=this;
var _103a=this.form.get("value");
_103a.Locked=dojo.indexOf(_103a.options,"locked")>=0;
var _103b="<PionConfig><Vocabulary>";
for(var tag in _103a){
if(tag.charAt(0)!="@"&&tag!="options"){
_103b+=pion.makeXmlLeafElement(tag,_103a[tag]);
}
}
_103b+="</Vocabulary></PionConfig>";
console.debug("put_data: ",_103b);
_1039=this;
dojo.rawXhrPut({url:"/config/vocabularies/"+this.vocabulary.config["@id"],contentType:"text/xml",handleAs:"xml",putData:_103b,load:function(_103c){
console.debug("response: ",_103c);
_1039.populateFromServerVocabStore();
},error:pion.getXhrErrorHandler(dojo.rawXhrPut,{putData:_103b})});
},cancel2:function(){
dojo.removeClass(this.domNode,"unsaved_changes");
this.vocabulary.vocab_term_store.revert();
this.populateFromServerVocabStore();
},delete2:function(){
dojo.removeClass(this.domNode,"unsaved_changes");
console.debug("delete2: selected vocabulary is ",this.title);
_this=this;
dojo.xhrDelete({url:"/config/vocabularies/"+this.vocabulary.config["@id"],handleAs:"xml",timeout:5000,load:function(_103d,_103e){
console.debug("xhrDelete for url = "+this.url,"; HTTP status code: ",_103e.xhr.status);
dijit.byId("vocab_config_accordion").forward();
dijit.byId("vocab_config_accordion").removeChild(_this);
pion.vocabularies._adjustAccordionSize();
return _103d;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
},markAsChanged:function(){
console.debug("markAsChanged");
dojo.addClass(this.domNode,"unsaved_changes");
}});
}
if(!dojo._hasResource["pion.vocabularies"]){
dojo._hasResource["pion.vocabularies"]=true;
dojo.provide("pion.vocabularies");
pion.vocabularies.vocabularies_by_id={};
pion.vocabularies.getHeight=function(){
return pion.vocabularies.vocab_config_height;
};
pion.vocabularies._adjustAccordionSize=function(){
var _103f=dijit.byId("vocab_config_accordion");
var _1040=pion.vocabularies.selected_pane.getHeight();
dojo.forEach(_103f.getChildren(),function(pane){
_1040+=pane._buttonWidget.getTitleHeight();
});
_103f.resize({h:_1040});
pion.vocabularies.vocab_config_height=dojo.byId("vocab_config_end").offsetTop;
dijit.byId("main_stack_container").resize({h:pion.vocabularies.vocab_config_height});
};
pion.vocabularies.isDuplicateVocabularyId=function(id){
var _1041="urn:vocab:"+id;
return (_1041 in pion.vocabularies.vocabularies_by_id);
};
pion.vocabularies.isDuplicateVocabularyName=function(name){
if(dijit.byId("vocab_config_accordion")){
var _1042=dijit.byId("vocab_config_accordion").getChildren();
for(var i=0;i<_1042.length;++i){
if(_1042[i].title==name){
return true;
}
}
}
return false;
};
pion.vocabularies.addNewVocabulary=function(){
var _1043=new plugins.vocabularies.VocabularyInitDialog();
dojo.query(".dijitButton.save",_1043.domNode).forEach(function(n){
dijit.byNode(n).onClick=function(){
return _1043.isValid();
};
});
setTimeout(function(){
dojo.query("input",_1043.domNode)[0].select();
},500);
_1043.show();
_1043.execute=function(_1044){
var _1045="<PionConfig><Vocabulary>";
_1045+=pion.makeXmlLeafElement("Name",_1044.Name);
_1045+=pion.makeXmlLeafElement("Comment",_1044.Comment);
_1045+="</Vocabulary></PionConfig>";
console.debug("post_data: ",_1045);
var _1046="urn:vocab:"+_1044["@id"];
dojo.rawXhrPost({url:"/config/vocabularies/"+_1046,contentType:"text/xml",handleAs:"xml",postData:_1045,load:function(_1047){
if(vocab_config_page_initialized){
pion.vocabularies.createNewPaneFromStore(_1046,pion.current_page.id=="vocab_config");
}
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_1045})});
};
};
pion.vocabularies.config_store=new dojox.data.XmlStore({url:"/config/vocabularies",rootItem:"VocabularyConfig",attributeMap:{"VocabularyConfig.id":"@id"}});
pion.vocabularies.init=function(){
pion.vocabularies.selected_pane=null;
pion.vocabularies.config_accordion=dijit.byId("vocab_config_accordion");
pion.vocabularies.config_accordion.title_attribute="@id";
pion.vocabularies.config_accordion.createNewPaneFromItem=function(item,store){
var id=pion.vocabularies.config_store.getValue(item,"@id");
var title=pion.escapeXml(store.getValue(item,this.title_attribute));
var _1048=new plugins.vocabularies.VocabularyPane({"class":"vocab_pane",title:title,config:{"@id":id}});
this.addChild(_1048);
return _1048;
};
var _1049=null;
var _104a=["@id","Type","@format","Size","Comment"];
var _104b=_104a.length;
pion.vocabularies._replaceAccordionPane=function(_104c){
var _104d=new plugins.vocabularies.VocabularyPane({title:_104c.title,config:_104c.config});
_104d.initialized=true;
var _104e=dijit.byId("vocab_config_accordion");
var idx=_104e.getIndexOfChild(_104c);
_104e.pendingSelection=_104d;
_104e.pendingRemoval=_104c;
_104e.addChild(_104d,idx);
};
pion.vocabularies._updatePane=function(pane){
pane.populateFromServerVocabStore();
pion.vocabularies._adjustAccordionSize();
dojo.style(pane.containerNode,"overflow","hidden");
};
function _104f(pane){
console.debug("Selected "+pane.title);
var _1050=pion.vocabularies.selected_pane;
if(pane==_1050){
return;
}
var _1051=dijit.byId("vocab_config_accordion");
if(_1050&&dojo.hasClass(_1050.domNode,"unsaved_changes")){
var _1052=new dijit.Dialog({title:"Warning: unsaved changes"});
_1052.attr("content","Please save or cancel unsaved changes before selecting another Vocabulary.");
_1052.show();
setTimeout(function(){
_1051.selectChild(_1050);
},500);
return;
}
setTimeout(function(){
if(_1051.pendingRemoval){
_1051.removeChild(_1051.pendingRemoval);
_1051.pendingRemoval=false;
}
if(!pane.initialized){
pion.vocabularies._replaceAccordionPane(pane);
}else{
pion.vocabularies.selected_pane=pane;
pion.vocabularies._updatePane(pane);
}
},_1051.duration+100);
};
function _1053(pane){
var _1054=dijit.byId("vocab_config_accordion");
setTimeout(function(){
if(_1054.pendingSelection){
_1054.selectChild(_1054.pendingSelection);
_1054.pendingSelection=false;
}
},_1054.duration);
};
function _1055(pane){
};
dojo.subscribe("vocab_config_accordion-selectChild",_104f);
dojo.subscribe("vocab_config_accordion-addChild",_1053);
dojo.subscribe("vocab_config_accordion-removeChild",_1055);
pion.vocabularies.createNewPaneFromStore=function(id,_1056){
pion.vocabularies.config_store.fetch({query:{"@id":id},onItem:function(item){
var _1057=pion.vocabularies.config_accordion.createNewPaneFromItem(item,pion.vocabularies.config_store);
if(_1056){
pion.vocabularies._adjustAccordionSize();
dijit.byId("vocab_config_accordion").selectChild(_1057);
}
},onError:pion.handleFetchError});
};
pion.vocabularies.config_store.fetch({onComplete:function(items,_1058){
pion.vocabularies.config_accordion.createPanesFromAllItems(items,pion.vocabularies.config_store);
pion.vocabularies.vocabularies_by_id={};
dojo.forEach(pion.vocabularies.config_accordion.getChildren(),function(pane){
var id=pane.vocabulary.config["@id"];
pion.vocabularies.vocabularies_by_id[id]=pane.vocabulary;
});
},onError:pion.handleFetchError});
dijit.byId("vocab_config").button.onClick=pion.vocabularies.addNewVocabulary;
};
}
if(!dojo._hasResource["plugins.protocols.Protocol"]){
dojo._hasResource["plugins.protocols.Protocol"]=true;
dojo.provide("plugins.protocols.Protocol");
dojo.declare("plugins.protocols.ProtocolInitDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog protocol_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Protocol Initialization</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\"\r\n\t\t><table\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Plugin&nbsp;Type</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"Plugin\" \r\n\t\t\t\t\t\tstore=\"pion.protocols.plugin_data_store\" searchAttr=\"label\" \r\n\t\t\t\t\t\tstyle=\"width: 100%;\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Name\" class=\"name_text_box\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Comments:</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Comment\" class=\"comment_text_box\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Event&nbsp;Type</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"EventType\" query=\"{Type: 'object'}\" \r\n\t\t\t\t\t\tstore=\"pion.terms.store\" searchAttr=\"id\" /></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><div class=\"save_cancel_delete\"\r\n\t\t\t><button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: hide\">Cancel</button\r\n\t\t></div\r\n\t></div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true});
dojo.declare("plugins.protocols.ProtocolPane",[dijit.layout.ContentPane,dijit._Templated],{templateString:"<div class='protocol_pane' dojoAttachPoint='containerNode'\r\n\t><form dojoAttachPoint=\"form\" dojoType=\"dijit.form.Form\"\r\n\t\t><br/\r\n\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" width=\"100%\"\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name</label></td\r\n\t\t\t\t><td><input dojoAttachPoint=\"name\" dojoType=\"dijit.form.TextBox\" name=\"Name\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td rowspan=\"4\" valign=\"top\" width=\"20\">&nbsp;</td\r\n\t\t\t\t><td rowspan=\"1\"><label>Comments</label></td\r\n\t\t\t\t><td rowspan=\"4\" valign=\"top\"><textarea dojoType=\"dijit.form.SimpleTextarea\" name=\"Comment\" rows=\"4\" class=\"comment\"></textarea></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>ID</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" disabled=\"true\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td rowspan=\"3\">&nbsp;</td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Plugin&nbsp;Type</label></td\r\n\t\t\t\t><td><div dojoType=pion.widgets.ConfigAccordionPluginType plugin_type=${plugin_type}></div></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Event&nbsp;Type</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"EventType\"\r\n\t\t\t\t\t\tstore=\"pion.terms.store\" searchAttr=\"id\" query=\"{Type: 'object'}\" /></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><br/\r\n\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" style=\"border: 1px solid #999999;\" width=\"99%\"\r\n\t\t\t><tr\r\n\t\t\t\t><td class=\"matrixMainHeader\">Extraction Rules</td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td style=\"background-color: #f1f1f1;\"\r\n\t\t\t\t\t><div class=\"protocol_grid plugin_pane_grid\" dojoAttachPoint=\"extraction_rule_grid_node\"></div\r\n\t\t\t\t\t><button dojoType=dijit.form.Button class=\"add_new_row\" dojoAttachEvent=\"onClick: _handleAddNewRule\">ADD NEW RULE</button\r\n\t\t\t\t></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><hr noshade=\"noshade\" size=\"1\" color=\"#999999\"\r\n\t\t><div class=\"save_cancel_delete\"\r\n\t\t\t><button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick:save\">Save Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick:cancel\">Cancel Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"delete\" dojoAttachEvent=\"onClick:delete2\">Delete Protocol</button\r\n\t\t></div\r\n\t></form\r\n\t><div dojoAttachPoint=\"pane_end\" class=\"zero_height_end_marker\"></div\r\n></div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
this.special_config_elements=["Extract","tagName","childNodes"];
this.populateWithDefaults();
var _1059=this;
this.has_extraction_rules="extraction_rule_grid_node" in this;
if(this.has_extraction_rules){
this.extraction_rule_store=new dojo.data.ItemFileWriteStore({data:{identifier:"ID",items:[]}});
this.extraction_rule_store.next_id=0;
this.extraction_rule_grid_layout=[{defaultCell:{editable:true,type:dojox.grid.cells._Widget,styles:"text-align: left;"},rows:[{field:"Term",name:"Term",relWidth:3,type:pion.widgets.TermTextCell},{field:"Source",name:"Source",styles:"",relWidth:1,type:dojox.grid.cells.Select,options:plugins.protocols.source_options},{field:"Name",name:"Name",relWidth:1,formatter:pion.xmlCellFormatter},{field:"Match",name:"Match",relWidth:1,formatter:pion.xmlCellFormatter},{field:"Format",name:"Format",relWidth:1,formatter:pion.xmlCellFormatter},{field:"ContentType",name:"ContentType",relWidth:1,formatter:pion.xmlCellFormatter},{field:"MaxSize",name:"MaxSize",relWidth:1,formatter:pion.xmlCellFormatter},{field:"MaxExtracts",name:"MaxExtracts",relWidth:1,formatter:pion.xmlCellFormatter},{name:"Delete",classes:"delete button",editable:false,formatter:pion.makeDeleteButton}]}];
this.extraction_rule_grid=new dojox.grid.DataGrid({store:this.extraction_rule_store,structure:this.extraction_rule_grid_layout,escapeHTMLInData:false,singleClickEdit:true},document.createElement("div"));
this.extraction_rule_grid_node.appendChild(this.extraction_rule_grid.domNode);
this.extraction_rule_grid.startup();
this.extraction_rule_grid.connect(this.extraction_rule_grid,"onCellClick",function(e){
if(e.cell.name=="Delete"){
this.store.deleteItem(this.getItem(e.rowIndex));
_1059.markAsChanged();
dojo.stopEvent(e);
}
});
dojo.connect(this.extraction_rule_grid,"onApplyCellEdit",this,_1059._handleCellEdit);
}
dojo.query("input",this.domNode).forEach(function(n){
dojo.connect(n,"change",_1059,_1059.markAsChanged);
});
dojo.query("textarea",this.domNode).forEach(function(n){
dojo.connect(n,"change",_1059,_1059.markAsChanged);
});
dojo.query("select",this.domNode).forEach(function(n){
dojo.connect(n,"change",_1059,_1059.markAsChanged);
});
},populateWithDefaults:function(){
},getHeight:function(){
return this.pane_end.offsetTop;
},populateFromConfigItem:function(item){
var store=pion.protocols.config_store;
var _105a={};
var _105b=store.getAttributes(item);
for(var i=0;i<_105b.length;++i){
if(dojo.indexOf(this.special_config_elements,_105b[i])==-1){
_105a[_105b[i]]=store.getValue(item,_105b[i]).toString();
}
}
if(this._addCustomConfigValues){
this._addCustomConfigValues(_105a,item);
}
this.form.set("value",_105a);
if(this.has_extraction_rules){
this._reloadExtractionRuleStore(item);
}
var node=this.domNode;
setTimeout(function(){
dojo.removeClass(node,"unsaved_changes");
},500);
},_reloadExtractionRuleStore:function(item){
var _105c=this;
this.extraction_rule_store.fetch({onItem:function(item){
_105c.extraction_rule_store.deleteItem(item);
},onComplete:function(){
var store=pion.protocols.config_store;
dojo.forEach(store.getValues(item,"Extract"),function(_105d){
var _105e={ID:_105c.extraction_rule_store.next_id++,Term:store.getValue(_105d,"@term")};
dojo.forEach(store.getAttributes(_105d),function(attr){
_105e[attr]=store.getValue(_105d,attr).toString();
});
_105c.extraction_rule_store.newItem(_105e);
});
},onError:pion.handleFetchError});
},_handleCellEdit:function(_105f,_1060,_1061){
console.debug("ProtocolPane._handleCellEdit inValue = ",_105f,", inRowIndex = ",_1060,", inFieldIndex = ",_1061);
dojo.addClass(this.domNode,"unsaved_changes");
},_handleAddNewRule:function(){
this.markAsChanged();
this.extraction_rule_store.newItem({ID:this.extraction_rule_store.next_id++});
var h=this.extraction_rule_grid.connect(this.extraction_rule_grid,"endUpdate",function(){
this.focus.setFocusIndex(this.rowCount-1,0);
this.disconnect(h);
});
},save:function(){
if(this.has_extraction_rules){
var _1062=this;
var _1063="";
var store=this.extraction_rule_store;
store.fetch({onItem:function(item){
_1063+="<Extract term=\""+store.getValue(item,"Term")+"\">";
_1063+=pion.makeXmlLeafElement("Source",store.getValue(item,"Source"));
if(store.getValue(item,"Name")){
_1063+=pion.makeXmlLeafElement("Name",store.getValue(item,"Name"));
}
if(store.getValue(item,"Match")){
_1063+=pion.makeXmlLeafElement("Match",store.getValue(item,"Match"));
}
if(store.getValue(item,"Format")){
_1063+=pion.makeXmlLeafElement("Format",store.getValue(item,"Format"));
}
if(store.getValue(item,"ContentType")){
_1063+=pion.makeXmlLeafElement("ContentType",store.getValue(item,"ContentType"));
}
if(store.getValue(item,"MaxSize")){
_1063+=pion.makeXmlLeafElement("MaxSize",store.getValue(item,"MaxSize"));
}
if(store.getValue(item,"MaxExtracts")){
_1063+=pion.makeXmlLeafElement("MaxExtracts",store.getValue(item,"MaxExtracts"));
}
_1063+="</Extract>";
},onComplete:function(){
_1062.extraction_rule_put_data=_1063;
_1062.doPutRequest();
dojo.removeClass(_1062.domNode,"unsaved_changes");
},onError:pion.handleFetchError});
}else{
this.extraction_rule_put_data="";
this.doPutRequest();
}
},doPutRequest:function(){
var _1064=this.form.get("value");
var _1065="<PionConfig><Protocol>";
for(var tag in _1064){
if(tag.charAt(0)!="@"&&tag!="options"){
console.debug("config[",tag,"] = ",_1064[tag]);
_1065+=pion.makeXmlLeafElement(tag,_1064[tag]);
}
}
if(this._makeCustomElements){
_1065+=this._makeCustomElements(_1064);
}
_1065+=this.extraction_rule_put_data;
_1065+="</Protocol></PionConfig>";
console.debug("put_data: ",_1065);
_this=this;
dojo.rawXhrPut({url:"/config/protocols/"+this.uuid,contentType:"text/xml",handleAs:"xml",putData:_1065,load:function(_1066){
console.debug("response: ",_1066);
pion.protocols.config_store.fetch({query:{"@id":_this.uuid},onItem:function(item){
_this.config_item=item;
_this.populateFromConfigItem(item);
},onError:pion.handleFetchError});
},error:pion.getXhrErrorHandler(dojo.rawXhrPut,{putData:_1065})});
},cancel:function(){
dojo.removeClass(this.domNode,"unsaved_changes");
this.populateFromConfigItem(this.config_item);
},delete2:function(){
dojo.removeClass(this.domNode,"unsaved_changes");
console.debug("delete2: selected protocol is ",this.title);
_this=this;
dojo.xhrDelete({url:"/config/protocols/"+this.uuid,handleAs:"xml",timeout:5000,load:function(_1067,_1068){
console.debug("xhrDelete for url = /config/protocols/"+this.uuid,"; HTTP status code: ",_1068.xhr.status);
dijit.byId("protocol_config_accordion").forward();
dijit.byId("protocol_config_accordion").removeChild(_this);
pion.protocols._adjustAccordionSize();
return _1067;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
},markAsChanged:function(){
console.debug("markAsChanged");
dojo.addClass(this.domNode,"unsaved_changes");
},protocol:""});
plugins.protocols.source_options=["query","cookie","cs-cookie","sc-cookie","cs-header","sc-header","cs-content","sc-content","cs-raw-content","sc-raw-content"];
}
if(!dojo._hasResource["plugins.protocols.HTTPProtocol"]){
dojo._hasResource["plugins.protocols.HTTPProtocol"]=true;
dojo.provide("plugins.protocols.HTTPProtocol");
plugins.protocols.HTTPProtocol.label="HTTP Protocol";
dojo.declare("plugins.protocols.HTTPProtocolPane",[plugins.protocols.ProtocolPane],{templateString:"<div class='protocol_pane' dojoAttachPoint='containerNode'\r\n\t><form dojoAttachPoint=\"form\" dojoType=\"dijit.form.Form\"\r\n\t\t><br /\r\n\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" width=\"100%\"\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Name</label></td\r\n\t\t\t\t><td><input dojoAttachPoint=\"name\" dojoType=\"dijit.form.TextBox\" name=\"Name\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td rowspan=\"3\" valign=\"top\" width=\"20\">&nbsp;</td\r\n\t\t\t\t><td rowspan=\"1\"><label>Comments</label></td\r\n\t\t\t\t><td rowspan=\"3\" valign=\"top\"><textarea dojoType=\"dijit.form.SimpleTextarea\" name=\"Comment\" rows=\"4\" class=\"comment\"></textarea></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>ID</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" disabled=\"true\" style=\"width: 100%;\"/></td\r\n\t\t\t\t><td rowspan=\"2\">&nbsp;</td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Plugin&nbsp;Type</label></td\r\n\t\t\t\t><td><div dojoType=pion.widgets.ConfigAccordionPluginType plugin_type=${plugin_type}></div></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Event&nbsp;Type</label></td\r\n\t\t\t\t><td><input dojoType=\"pion.widgets.SimpleSelect\" name=\"EventType\"\r\n\t\t\t\t\t\tstore=\"pion.terms.store\" searchAttr=\"id\" query=\"{Type: 'object'}\" /></td\r\n\t\t\t\t><td></td\r\n\t\t\t\t><td align=\"right\"><input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"RawRequestHeaders\" /></td\r\n\t\t\t\t><td><label>Save&nbsp;Raw&nbsp;Request&nbsp;Headers</label></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Max&nbsp;Request&nbsp;Content&nbsp;Length</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.ValidationTextBox\" type=\"text\" name=\"MaxRequestContentLength\" regExp=\"[1-9][0-9]*\" required=\"true\" /></td\r\n\t\t\t\t><td></td\r\n\t\t\t\t><td align=\"right\"><input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"RawResponseHeaders\" /></td\r\n\t\t\t\t><td><label>Save&nbsp;Raw&nbsp;Response&nbsp;Headers</label></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td><label>Max&nbsp;Response&nbsp;Content&nbsp;Length</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.ValidationTextBox\" type=\"text\" name=\"MaxResponseContentLength\" regExp=\"[1-9][0-9]*\" required=\"true\" /></td\r\n\t\t\t\t><td></td\r\n\t\t\t\t><td align=\"right\"><input dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"AllowUtf8Conversion\" dojoAttachEvent=\"onClick: updateDisabling\" /></td\r\n\t\t\t\t><td><label>Convert&nbsp;Content&nbsp;to&nbsp;UTF-8</label></td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td></td\r\n\t\t\t\t><td></td\r\n\t\t\t\t><td></td\r\n\t\t\t\t><td align=\"right\"><input dojoAttachPoint=\"allow_searching\" dojoType=\"dijit.form.CheckBox\" type=\"checkBox\" name=\"options\" value=\"AllowSearchingContentForCharset\" /></td\r\n\t\t\t\t><td><label dojoAttachPoint=\"allow_searching_label\">Allow&nbsp;Searching&nbsp;Content&nbsp;for&nbsp;Charset&nbsp;Declaration</label></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><br/\r\n\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" style=\"border: 1px solid #999999;\" width=\"99%\"\r\n\t\t\t><tr\r\n\t\t\t\t><td class=\"matrixMainHeader\">Extraction Rules</td\r\n\t\t\t></tr><tr\r\n\t\t\t\t><td style=\"background-color: #f1f1f1;\"\r\n\t\t\t\t\t><div class=\"protocol_grid plugin_pane_grid\" dojoAttachPoint=\"extraction_rule_grid_node\"></div\r\n\t\t\t\t\t><button dojoType=dijit.form.Button class=\"add_new_row\" dojoAttachEvent=\"onClick: _handleAddNewRule\">ADD NEW RULE</button\r\n\t\t\t\t></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t\t><hr noshade=\"noshade\" size=\"1\" color=\"#999999\"\r\n\t\t><div class=\"save_cancel_delete\"\r\n\t\t\t><button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick:save\">Save Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick:cancel\">Cancel Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"delete\" dojoAttachEvent=\"onClick:delete2\">Delete Protocol</button\r\n\t\t></div\r\n\t></form\r\n\t><div dojoAttachPoint=\"pane_end\" class=\"zero_height_end_marker\"></div\r\n></div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
},populateWithDefaults:function(){
this.inherited("populateWithDefaults",arguments);
this.form.attr("value",{MaxRequestContentLength:1048576,MaxResponseContentLength:1048576});
},getHeight:function(){
return this.pane_end.offsetTop;
},_addCustomConfigValues:function(_1069,item){
var store=pion.protocols.config_store;
_1069.options=[];
if(store.hasAttribute(item,"RawRequestHeaders")){
if(store.getValue(item,"RawRequestHeaders").toString()=="true"){
_1069.options.push("RawRequestHeaders");
}
}
if(store.hasAttribute(item,"RawResponseHeaders")){
if(store.getValue(item,"RawResponseHeaders").toString()=="true"){
_1069.options.push("RawResponseHeaders");
}
}
var _106a=true;
if(store.hasAttribute(item,"AllowUtf8Conversion")){
_106a=(store.getValue(item,"AllowUtf8Conversion").toString()=="true");
}
if(_106a){
_1069.options.push("AllowUtf8Conversion");
}
this.updateDisabling({target:{checked:_106a}});
var _106b=_106a;
if(store.hasAttribute(item,"AllowSearchingContentForCharset")){
_106b=(store.getValue(item,"AllowSearchingContentForCharset").toString()=="true");
}
if(_106b){
_1069.options.push("AllowSearchingContentForCharset");
}
},_makeCustomElements:function(_106c){
var _106d=this.allow_searching.attr("disabled");
if(_106d){
this.allow_searching.attr("disabled",false);
_106c=this.form.attr("value");
}
var _106e="<RawRequestHeaders>";
_106e+=(dojo.indexOf(_106c.options,"RawRequestHeaders")!=-1);
_106e+="</RawRequestHeaders><RawResponseHeaders>";
_106e+=(dojo.indexOf(_106c.options,"RawResponseHeaders")!=-1);
_106e+="</RawResponseHeaders><AllowUtf8Conversion>";
_106e+=(dojo.indexOf(_106c.options,"AllowUtf8Conversion")!=-1);
_106e+="</AllowUtf8Conversion><AllowSearchingContentForCharset>";
_106e+=(dojo.indexOf(_106c.options,"AllowSearchingContentForCharset")!=-1);
_106e+="</AllowSearchingContentForCharset>";
if(_106d){
this.allow_searching.attr("disabled",true);
}
return _106e;
},updateDisabling:function(e){
if(e.target.checked){
dojo.removeClass(this.allow_searching_label,"disabled");
this.allow_searching.set("disabled",false);
}else{
dojo.addClass(this.allow_searching_label,"disabled");
this.allow_searching.set("disabled",true);
}
}});
}
if(!dojo._hasResource["pion.protocols"]){
dojo._hasResource["pion.protocols"]=true;
dojo.provide("pion.protocols");
pion.protocols.getHeight=function(){
return pion.protocols.protocol_config_height;
};
pion.protocols.config_store=new dojox.data.XmlStore({url:"/config/protocols"});
pion.protocols.config_store.fetchItemByIdentity=function(_106f){
pion.protocols.config_store.fetch({query:{"@id":_106f.identity},onItem:_106f.onItem,onError:pion.handleFetchError});
};
pion.protocols.config_store.getIdentity=function(item){
return pion.protocols.config_store.getValue(item,"@id");
};
pion.protocols.default_id="593f044a-ac60-11dd-aba3-001cc02bd66b";
pion.protocols.init=function(){
pion.protocols.selected_pane=null;
pion.protocols.config_accordion=dijit.byId("protocol_config_accordion");
pion.protocols.getAllProtocolsInUIDirectory=function(){
var d=new dojo.Deferred();
var store=new dojox.data.XmlStore({url:"/config/protocols/plugins"});
store.fetch({onComplete:function(items){
var _1070=dojo.map(items,function(item){
return store.getValue(item,"Plugin").toString();
});
d.callback(_1070);
}});
return d;
};
var _1071=function(_1072){
var d=new dojo.Deferred();
plugin_data_store_items=[];
dojo.forEach(_1072,function(_1073){
if(dojo.indexOf(pion.plugins.available_plugins,_1073)!=-1){
var _1074=pion.plugins.getPluginPrototype("plugins.protocols",_1073,"/plugins/protocols");
plugin_data_store_items.push({plugin:_1073,label:_1074.label});
}
pion.protocols.plugin_data_store=new dojo.data.ItemFileWriteStore({data:{identifier:"plugin",items:plugin_data_store_items}});
});
d.callback();
return d;
};
var _1075=function(){
pion.protocols.config_store.fetch({onComplete:function(items,_1076){
pion.protocols.config_accordion.createPanesFromAllItems(items,pion.protocols.config_store);
},onError:pion.handleFetchError});
};
pion.plugins.initAvailablePluginList().addCallback(pion.protocols.getAllProtocolsInUIDirectory).addCallback(_1071).addCallback(_1075);
pion.protocols._replaceAccordionPane=function(_1077){
var _1078=pion.protocols.config_store.getValue(_1077.config_item,"Plugin");
var _1079="plugins.protocols."+_1078+"Pane";
var _107a=dojo.getObject(_1079);
if(_107a){
console.debug("found class ",_1079);
var _107b=new _107a({title:_1077.title,plugin_type:_1078});
}else{
console.debug("class ",_1079," not found; using plugins.protocols.ProtocolPane instead.");
var _107b=new plugins.protocols.ProtocolPane({title:_1077.title,plugin_type:_1078});
}
_107b.uuid=_1077.uuid;
_107b.config_item=_1077.config_item;
_107b.initialized=true;
var _107c=dijit.byId("protocol_config_accordion");
var idx=_107c.getIndexOfChild(_1077);
_107c.pendingSelection=_107b;
_107c.pendingRemoval=_1077;
_107c.addChild(_107b,idx);
};
pion.protocols._updatePane=function(pane){
console.debug("Fetching item ",pane.uuid);
var store=pion.protocols.config_store;
store.fetch({query:{"@id":pane.uuid},onItem:function(item){
console.debug("item: ",item);
pane.populateFromConfigItem(item);
},onError:pion.handleFetchError});
pion.protocols._adjustAccordionSize();
dojo.style(pane.containerNode,"overflow","hidden");
};
function _107d(pane){
console.debug("Selected "+pane.title);
var _107e=pion.protocols.selected_pane;
if(pane==_107e){
return;
}
var _107f=dijit.byId("protocol_config_accordion");
if(_107e&&dojo.hasClass(_107e.domNode,"unsaved_changes")){
var _1080=new dijit.Dialog({title:"Warning: unsaved changes"});
_1080.attr("content","Please save or cancel unsaved changes before selecting another Protocol.");
_1080.show();
setTimeout(function(){
_107f.selectChild(_107e);
},500);
return;
}
setTimeout(function(){
if(_107f.pendingRemoval){
_107f.removeChild(_107f.pendingRemoval);
_107f.pendingRemoval=false;
}
if(!pane.initialized){
pion.protocols._replaceAccordionPane(pane);
}else{
pion.protocols.selected_pane=pane;
pion.protocols._updatePane(pane);
}
},_107f.duration+100);
};
function _1081(pane){
var _1082=dijit.byId("protocol_config_accordion");
setTimeout(function(){
if(_1082.pendingSelection){
_1082.selectChild(_1082.pendingSelection);
_1082.pendingSelection=false;
}
},_1082.duration);
};
function _1083(pane){
};
dojo.subscribe("protocol_config_accordion-selectChild",_107d);
dojo.subscribe("protocol_config_accordion-addChild",_1081);
dojo.subscribe("protocol_config_accordion-removeChild",_1083);
pion.protocols.createNewPaneFromStore=function(id,_1084){
pion.protocols.config_store.fetch({query:{"@id":id},onItem:function(item){
var _1085=pion.protocols.config_accordion.createNewPaneFromItem(item,pion.protocols.config_store);
if(_1084){
pion.protocols._adjustAccordionSize();
dijit.byId("protocol_config_accordion").selectChild(_1085);
}
},onError:pion.handleFetchError});
};
function _1086(){
var _1087=new plugins.protocols.ProtocolInitDialog({title:"Add New Protocol"});
_1087.show();
_1087.execute=function(_1088){
_1089(_1088);
};
};
function _1089(_108a){
var _108b="<PionConfig><Protocol>";
for(var tag in _108a){
console.debug("dialogFields[",tag,"] = ",_108a[tag]);
_108b+=pion.makeXmlLeafElement(tag,_108a[tag]);
}
if(plugins.protocols[_108a.Plugin]&&plugins.protocols[_108a.Plugin].custom_post_data){
_108b+=plugins.protocols[_108a.Plugin].custom_post_data;
}
_108b+="</Protocol></PionConfig>";
console.debug("post_data: ",_108b);
dojo.rawXhrPost({url:"/config/protocols",contentType:"text/xml",handleAs:"xml",postData:_108b,load:function(_108c){
var node=_108c.getElementsByTagName("Protocol")[0];
var id=node.getAttribute("id");
console.debug("id (from server): ",id);
pion.protocols.createNewPaneFromStore(id,true);
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_108b})});
};
dijit.byId("protocol_config").button.onClick=_1086;
};
pion.protocols._adjustAccordionSize=function(){
var _108d=dijit.byId("protocol_config_accordion");
var _108e=pion.protocols.selected_pane.getHeight();
dojo.forEach(_108d.getChildren(),function(pane){
_108e+=pane._buttonWidget.getTitleHeight();
});
_108d.resize({h:_108e});
pion.protocols.protocol_config_height=dojo.byId("protocol_config_end").offsetTop;
dijit.byId("main_stack_container").resize({h:pion.protocols.protocol_config_height});
};
}
if(!dojo._hasResource["pion.widgets.User"]){
dojo._hasResource["pion.widgets.User"]=true;
dojo.provide("pion.widgets.User");
dojo.declare("pion.widgets.UserInitDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog user_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Add New User</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\"\r\n\t\t><table\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Username</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.ValidationTextBox\" regExp=\"[\\w-]+\" name=\"@id\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Last name</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"LastName\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>First name</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"FirstName\"/></td\r\n\t\t\t></tr\r\n\t\t\t><tr\r\n\t\t\t\t><td><label>Password</label></td\r\n\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Password\" type=\"password\"/></td\r\n\t\t\t></tr\r\n\t\t></table\r\n\t</div>\r\n\t<div class=\"save_cancel_delete\">\r\n\t\t<button dojoType=dijit.form.Button class=\"save\" type=\"submit\">Save</button>\r\n\t\t<button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: onCancel\">Cancel</button>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true});
dojo.declare("pion.widgets.UserPane",[dijit.layout.ContentPane,dijit._Templated],{templateString:"<div class='user_pane' dojoAttachPoint='containerNode'\r\n\t><form dojoAttachPoint=\"form\" dojoType=\"dijit.form.Form\"\r\n\t\t><br/\r\n\t\t><div\r\n\t\t\t><div style=\"float: left\"\r\n\t\t\t\t><table cellpadding=\"5\" cellspacing=\"0\" border=\"0\" width=\"275px\"\r\n\t\t\t\t\t><tr\r\n\t\t\t\t\t\t><td><label>Username</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"@id\" disabled=\"true\"/></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>Last name</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"LastName\"/></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>First name</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"FirstName\"/></td\r\n\t\t\t\t\t></tr><tr\r\n\t\t\t\t\t\t><td><label>Password</label></td\r\n\t\t\t\t\t\t><td><input dojoType=\"dijit.form.TextBox\" name=\"Password\" type=\"password\"/></td\r\n\t\t\t\t\t></tr\r\n\t\t\t\t></table\r\n\t\t\t></div\r\n\t\t\t><div style=\"float: right\" dojoAttachPoint=\"service_permissions\"\r\n\t\t\t></div\r\n\t\t\t><div style=\"float: right; margin-right: 50px\"\r\n\t\t\t\t><input dojoType=\"dijit.form.CheckBox\" name=\"tab_check_boxes\" value=\"Admin\" dojoAttachPoint=\"admin_check_box\" /><label>Administrator</label><br /\r\n\t\t\t\t><span class=\"group_label\">Reactor Workspaces</span><br /\r\n\t\t\t\t><div class=\"single_indent\" dojoAttachPoint=\"reactors_unrestricted\"\r\n\t\t\t\t\t><input dojoType=\"dijit.form.CheckBox\" name=\"workspace_check_box_group\" value=\"Unrestricted\" dojoAttachPoint=\"reactors_unrestricted_check_box\" /><label>Unrestricted</label><br /\r\n\t\t\t\t></div \r\n\t\t\t\t><input dojoType=\"dijit.form.CheckBox\" name=\"tab_check_boxes\" value=\"Vocabularies\" dojoAttachPoint=\"vocabularies_check_box\" /><label>Vocabularies</label><br /\r\n\t\t\t\t><input dojoType=\"dijit.form.CheckBox\" name=\"tab_check_boxes\" value=\"Codecs\" dojoAttachPoint=\"codecs_check_box\" /><label>Codecs</label><br /\r\n\t\t\t\t><input dojoType=\"dijit.form.CheckBox\" name=\"tab_check_boxes\" value=\"Databases\" dojoAttachPoint=\"databases_check_box\" /><label>Databases</label><br /\r\n\t\t\t\t><input dojoType=\"dijit.form.CheckBox\" name=\"tab_check_boxes\" value=\"Protocols\" dojoAttachPoint=\"protocols_check_box\" /><label>Protocols</label><br /\r\n\t\t\t></div\r\n\t\t\t><div style=\"clear: both\"></div\r\n\t\t></div\r\n\t\t><hr noshade=\"noshade\" size=\"1\" color=\"#999999\"\r\n\t\t><div class=\"save_cancel_delete\"\r\n\t\t\t><button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick:save\">Save Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick:cancel\">Cancel Changes</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"delete\" dojoAttachEvent=\"onClick:delete2\">Delete User</button\r\n\t\t></div\r\n\t></form\r\n\t><div dojoAttachPoint=\"pane_end\" class=\"zero_height_end_marker\"></div\r\n></div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
this.special_config_elements=["@id","tab_check_boxes","workspace_check_box_group"];
var _108f=this;
this.admin_check_box.onClick=function(e){
_108f._onAdminCheckBoxChanged(e.target.checked);
_108f.form.set("value",_108f.config);
};
this._initReactorsCheckBoxes();
this._initServicesCheckBoxes();
dojo.query("input",this.domNode).forEach(function(n){
dojo.connect(n,"change",_108f,_108f.markAsChanged);
});
},_onAdminCheckBoxChanged:function(_1090){
this.config.tab_check_boxes=_1090?["Admin","Vocabularies","Codecs","Databases","Protocols"]:[];
this._onReactorsUnrestrictedCheckBoxChanged(_1090);
this.reactors_unrestricted_check_box.set("disabled",_1090);
this.vocabularies_check_box.set("disabled",_1090);
this.codecs_check_box.set("disabled",_1090);
this.databases_check_box.set("disabled",_1090);
this.protocols_check_box.set("disabled",_1090);
var _1091=this;
dojo.forEach(pion.services.restrictable_services,function(_1092){
var _1093=_1091[_1092.plugin+"_main_check_box"];
var _1094=_1091[_1092.plugin+"_unrestricted_check_box"];
if(_1093){
_1091._onMainServiceCheckBoxChanged(_1090,_1092);
_1093.set("disabled",_1090);
if(_1094){
_1094.set("disabled",true);
}
var _1095=_1091[_1092.plugin+"_option_obj"];
for(key in _1095){
dojo.forEach(_1095[key].check_boxes,function(_1096){
_1096.set("disabled",true);
});
}
}else{
if(_1094){
_1091._onServiceUnrestrictedCheckBoxChanged(_1090,_1092);
_1094.set("disabled",_1090);
}else{
var _1095=_1091[_1092.plugin+"_option_obj"];
for(key in _1095){
dojo.forEach(_1095[key].check_boxes,function(_1097){
_1097.set("disabled",_1090);
});
_1091.config[_1092.plugin+"_"+key+"_check_boxes"]=_1090?_1095[key].values:[];
}
}
}
});
},_initReactorsCheckBoxes:function(){
this.reactors_unrestricted_check_box.onClick=function(e){
_1098._onReactorsUnrestrictedCheckBoxChanged(e.target.checked);
_1098.form.set("value",_1098.config);
};
var _1098=this;
this.workspace_check_boxes=[];
dojo.xhrGet({url:"/config/workspaces",preventCache:true,handleAs:"xml",timeout:1000,load:function(_1099,_109a){
var _109b=_1099.getElementsByTagName("Workspace");
dojo.forEach(_109b,function(_109c){
var id=_109c.getAttribute("id");
var name=dojox.xml.parser.textContent(_109c);
var _109d=document.createElement("div");
_1098.reactors_unrestricted.appendChild(_109d);
_1098.workspace_check_boxes.push(new dijit.form.CheckBox({name:"workspace_check_box_group",value:id,onClick:function(){
_1098.config=_1098.form.get("value");
}},_109d));
var _109e=dojo.create("label",{innerHTML:name});
_1098.reactors_unrestricted.appendChild(_109e);
_1098.reactors_unrestricted.appendChild(dojo.create("br"));
});
},error:pion.handleXhrGetError});
},_setCheckBoxInConfig:function(_109f,value,_10a0){
if(_10a0){
this.config[_109f].push(value);
}else{
this.config[_109f]=dojo.filter(this.config[_109f],function(v){
return v!=value;
});
}
},_onReactorsUnrestrictedCheckBoxChanged:function(_10a1){
this.config.workspace_check_box_group=_10a1?["Unrestricted"]:[];
dojo.forEach(this.workspace_check_boxes,function(_10a2){
_10a2.set("disabled",_10a1);
});
},_initServicesCheckBoxes:function(){
var _10a3=this;
dojo.forEach(pion.services.restrictable_services,function(_10a4){
_10a4.permission_subtypes=[];
for(key in _10a4.permission_layout){
if(key!="Unrestricted"&&key!="top_level_checkbox"&&key!="top_level_label"){
_10a4.permission_subtypes.push(key);
}
}
var _10a5=_10a4.plugin+"_check_boxes";
_10a3.special_config_elements.push(_10a5);
var _10a6=document.createElement("div");
_10a3.service_permissions.appendChild(_10a6);
if("top_level_checkbox" in _10a4.permission_layout){
var _10a7=new dijit.form.CheckBox({name:_10a5,value:_10a4.plugin},_10a6);
_10a7.onClick=function(e){
_10a3._onMainServiceCheckBoxChanged(e.target.checked,_10a4);
_10a3.form.set("value",_10a3.config);
};
_10a3[_10a4.plugin+"_main_check_box"]=_10a7;
var _10a8=dojo.create("label",{innerHTML:_10a4.permission_layout.top_level_checkbox});
}else{
var label=_10a4.permission_layout.top_level_label?_10a4.permission_layout.top_level_label:_10a4.plugin;
var _10a8=dojo.create("label",{innerHTML:label});
dojo.addClass(_10a8,"group_label");
}
_10a3.service_permissions.appendChild(_10a8);
_10a3.service_permissions.appendChild(dojo.create("br"));
if("Unrestricted" in _10a4.permission_layout){
var _10a6=document.createElement("div");
var _10a9=document.createElement("div");
dojo.addClass(_10a9,"single_indent");
_10a3.service_permissions.appendChild(_10a9);
_10a9.appendChild(_10a6);
var _10aa=new dijit.form.CheckBox({name:_10a5,value:"Unrestricted"},_10a6);
_10aa.onClick=function(e){
_10a3._onServiceUnrestrictedCheckBoxChanged(e.target.checked,_10a4);
_10a3.form.set("value",_10a3.config);
};
_10a3[_10a4.plugin+"_unrestricted_check_box"]=_10aa;
var _10a8=dojo.create("label",{innerHTML:_10a4.permission_layout.Unrestricted});
_10a9.appendChild(_10a8);
_10a9.appendChild(dojo.create("br"));
}
var _10ab={};
dojo.forEach(_10a4.permission_subtypes,function(key){
_10ab[key]={check_boxes:[],values:[]};
var _10ac=_10a4.plugin+"_"+key+"_check_boxes";
_10a3.special_config_elements.push(_10ac);
dojo.forEach(_10a4.permission_layout[key],function(_10ad){
var _10ae=document.createElement("div");
var _10af=document.createElement("div");
dojo.addClass(_10af,"single_indent");
_10a3.service_permissions.appendChild(_10af);
_10af.appendChild(_10ae);
_10ab[key].values.push(_10ad.value);
_10ab[key].check_boxes.push(new dijit.form.CheckBox({name:_10ac,value:_10ad.value,onClick:function(){
_10a3.config=_10a3.form.get("value");
}},_10ae));
var _10b0=dojo.create("label",{innerHTML:_10ad.label});
_10af.appendChild(_10b0);
_10af.appendChild(dojo.create("br"));
});
});
_10a3[_10a4.plugin+"_option_obj"]=_10ab;
});
},_onMainServiceCheckBoxChanged:function(_10b1,_10b2){
var _10b3=_10b2.plugin+"_check_boxes";
this.config[_10b3]=_10b1?[_10b2.plugin]:[];
var _10b4=this[_10b2.plugin+"_option_obj"];
if("Unrestricted" in _10b2.permission_layout){
this._onServiceUnrestrictedCheckBoxChanged(_10b1,_10b2);
var _10b5=this[_10b2.plugin+"_unrestricted_check_box"];
_10b5.set("disabled",!_10b1);
for(key in _10b4){
dojo.forEach(_10b4[key].check_boxes,function(_10b6){
_10b6.set("disabled",true);
});
}
}else{
for(key in _10b4){
dojo.forEach(_10b4[key].check_boxes,function(_10b7){
_10b7.set("disabled",!_10b1);
});
this.config[_10b2.plugin+"_"+key+"_check_boxes"]=_10b1?_10b4[key].values:[];
}
}
},_onServiceUnrestrictedCheckBoxChanged:function(_10b8,_10b9){
var _10ba=_10b9.plugin+"_check_boxes";
if(!(_10ba in this.config)){
this.config[_10ba]=[];
}
this._setCheckBoxInConfig(_10ba,"Unrestricted",_10b8);
var _10bb=this[_10b9.plugin+"_option_obj"];
for(key in _10bb){
this.config[_10b9.plugin+"_"+key+"_check_boxes"]=[];
dojo.forEach(_10bb[key].check_boxes,function(_10bc){
_10bc.set("disabled",_10b8);
});
}
},getHeight:function(){
return this.pane_end.offsetTop;
},populateFromConfigItem:function(item){
var store=pion.users.config_store;
this.config={};
var _10bd=this;
dojo.forEach(store.getAttributes(item),function(attr){
if(attr!="Permission"&&attr!="tagName"&&attr!="childNodes"){
_10bd.config[attr]=store.getValue(item,attr).toString();
}
});
this.config.tab_check_boxes=[];
var _10be=dojo.some(store.getValues(item,"Permission"),function(_10bf){
return store.hasAttribute(_10bf,"@type")&&store.getValue(_10bf,"@type")=="Admin";
});
if(_10be){
this._onAdminCheckBoxChanged(true);
}else{
this._onAdminCheckBoxChanged(false);
dojo.forEach(store.getValues(item,"Permission"),function(_10c0){
if(store.hasAttribute(_10c0,"@type")){
var _10c1=store.getValue(_10c0,"@type");
if(_10c1=="Reactors"){
if(store.hasAttribute(_10c0,"Unrestricted")&&store.getValue(_10c0,"Unrestricted")=="true"){
_10bd._onReactorsUnrestrictedCheckBoxChanged(true);
}else{
_10bd._onReactorsUnrestrictedCheckBoxChanged(false);
var _10c2=store.getValues(_10c0,"Workspace");
_10bd.config.workspace_check_box_group=dojo.map(_10c2,function(v){
return v.toString();
});
}
}else{
if(dojo.indexOf(["Vocabularies","Codecs","Databases","Protocols"],_10c1)!=-1){
_10bd.config.tab_check_boxes.push(_10c1);
}else{
var _10c3=dojo.filter(pion.services.restrictable_services,function(_10c4){
return _10c4.plugin==_10c1;
});
if(_10c3.length==0){
}else{
service=_10c3[0];
if("top_level_checkbox" in service.permission_layout){
_10bd._onMainServiceCheckBoxChanged(true,service);
}
var _10c5=false;
if(store.hasAttribute(_10c0,"Unrestricted")){
_10c5=store.getValue(_10c0,"Unrestricted")=="true";
}
if("Unrestricted" in service.permission_layout){
_10bd._onServiceUnrestrictedCheckBoxChanged(_10c5,service);
}
if(!_10c5){
dojo.forEach(service.permission_subtypes,function(key){
var _10c6=store.getValues(_10c0,key);
check_box_group=service.plugin+"_"+key+"_check_boxes";
_10bd.config[check_box_group]=dojo.map(_10c6,function(v){
return v.toString();
});
});
}
}
}
}
}
});
}
this.form.set("value",this.config);
var node=this.domNode;
setTimeout(function(){
dojo.removeClass(node,"unsaved_changes");
},500);
},save:function(){
var _10c7=this.form.get("value");
if(this.uuid==pion.last_logged_in_user&&dojo.indexOf(_10c7.tab_check_boxes,"Admin")==-1){
pion.doDeleteConfirmationDialog("You are about to delete your own permission to make further changes to your own configuration.  Proceed?",dojo.hitch(this,this.doSave));
}else{
if(!dojo.some(dojo.query("input[type=checkbox]",this.form.domNode),function(n){
return n.checked;
})){
pion.doDeleteConfirmationDialog("You are about to delete all permissions for user \""+this.uuid+"\".  Proceed?",dojo.hitch(this,this.doSave));
}else{
this.doSave();
}
}
},doSave:function(){
dojo.removeClass(this.domNode,"unsaved_changes");
var _10c8=this.form.get("value");
var _10c9="<PionConfig><User>";
for(var tag in _10c8){
if(dojo.indexOf(this.special_config_elements,tag)==-1){
_10c9+=pion.makeXmlLeafElement(tag,_10c8[tag]);
}
}
if(dojo.indexOf(_10c8.tab_check_boxes,"Admin")!=-1){
_10c9+="<Permission type=\"Admin\" />";
}else{
dojo.forEach(_10c8.tab_check_boxes,function(_10ca){
_10c9+="<Permission type=\""+_10ca+"\" />";
});
if(_10c8.workspace_check_box_group.length>0){
_10c9+="<Permission type=\"Reactors\">";
if(dojo.indexOf(_10c8.workspace_check_box_group,"Unrestricted")!=-1){
_10c9+="<Unrestricted>true</Unrestricted>";
}else{
dojo.forEach(_10c8.workspace_check_box_group,function(_10cb){
_10c9+="<Workspace>"+_10cb+"</Workspace>";
});
}
_10c9+="</Permission>";
}
dojo.forEach(pion.services.restrictable_services,function(_10cc){
var _10cd=_10cc.plugin+"_check_boxes";
var _10ce=_10c8[_10cd]||[];
var _10cf=(_10ce.length>0)||dojo.some(_10cc.permission_subtypes,function(key){
var _10d0=_10cc.plugin+"_"+key+"_check_boxes";
var _10d1=_10c8[_10d0]||[];
return _10d1.length>0;
});
if(_10cf){
_10c9+="<Permission type=\""+_10cc.plugin+"\">";
if(dojo.indexOf(_10ce,"Unrestricted")!=-1){
_10c9+="<Unrestricted>true</Unrestricted>";
}else{
dojo.forEach(_10cc.permission_subtypes,function(key){
var _10d2=_10cc.plugin+"_"+key+"_check_boxes";
var _10d3=_10c8[_10d2]||[];
dojo.forEach(_10d3,function(_10d4){
_10c9+="<"+key+">"+_10d4+"</"+key+">";
});
});
}
_10c9+="</Permission>";
}
});
}
_10c9+="</User></PionConfig>";
_this=this;
dojo.rawXhrPut({url:"/config/users/"+this.uuid,contentType:"text/xml",handleAs:"xml",putData:_10c9,load:function(_10d5){
if(_this.uuid==pion.last_logged_in_user&&dojo.indexOf(_10c8.tab_check_boxes,"Admin")==-1){
location.replace("/");
}
pion.users.config_store.fetch({query:{"@id":_this.uuid},onItem:function(item){
_this.config_item=item;
_this.populateFromConfigItem(item);
},onError:pion.handleFetchError});
},error:pion.getXhrErrorHandler(dojo.rawXhrPut,{putData:_10c9})});
},cancel:function(){
dojo.removeClass(this.domNode,"unsaved_changes");
this.populateFromConfigItem(this.config_item);
},delete2:function(){
dojo.removeClass(this.domNode,"unsaved_changes");
console.debug("delete2: selected user is ",this.title);
_this=this;
dojo.xhrDelete({url:"/config/users/"+this.uuid,handleAs:"xml",timeout:5000,load:function(_10d6,_10d7){
console.debug("xhrDelete for url = /config/users/"+this.uuid,"; HTTP status code: ",_10d7.xhr.status);
dijit.byId("user_config_accordion").forward();
dijit.byId("user_config_accordion").removeChild(_this);
pion.users._adjustAccordionSize();
return _10d6;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
},markAsChanged:function(){
console.debug("markAsChanged");
dojo.addClass(this.domNode,"unsaved_changes");
},user:""});
}
if(!dojo._hasResource["pion.users"]){
dojo._hasResource["pion.users"]=true;
dojo.provide("pion.users");
pion.users.getHeight=function(){
return pion.users.user_config_height;
};
pion.users.config_store=new dojox.data.XmlStore({url:"/config/users"});
pion.users.init=function(){
pion.users.selected_pane=null;
pion.users.config_accordion=dijit.byId("user_config_accordion");
pion.users.config_accordion.title_attribute="@id";
pion.users._replaceAccordionPane=function(_10d8){
var _10d9=new pion.widgets.UserPane({title:_10d8.title});
_10d9.uuid=_10d8.uuid;
_10d9.config_item=_10d8.config_item;
_10d9.initialized=true;
var _10da=dijit.byId("user_config_accordion");
var idx=_10da.getIndexOfChild(_10d8);
_10da.pendingSelection=_10d9;
_10da.pendingRemoval=_10d8;
_10da.addChild(_10d9,idx);
};
pion.users._updatePane=function(pane){
console.debug("Fetching item ",pane.uuid);
var store=pion.users.config_store;
store.fetch({query:{"@id":pane.uuid},onItem:function(item){
console.debug("item: ",item);
pane.populateFromConfigItem(item);
},onError:pion.handleFetchError});
pion.users._adjustAccordionSize();
dojo.style(pane.containerNode,"overflow","hidden");
};
function _10db(pane){
console.debug("Selected "+pane.title);
var _10dc=pion.users.selected_pane;
if(pane==_10dc){
return;
}
var _10dd=dijit.byId("user_config_accordion");
if(_10dc&&dojo.hasClass(_10dc.domNode,"unsaved_changes")){
var _10de=new dijit.Dialog({title:"Warning: unsaved changes"});
_10de.attr("content","Please save or cancel unsaved changes before selecting another User.");
_10de.show();
setTimeout(function(){
_10dd.selectChild(_10dc);
},500);
return;
}
setTimeout(function(){
if(_10dd.pendingRemoval){
_10dd.removeChild(_10dd.pendingRemoval);
_10dd.pendingRemoval=false;
}
if(!pane.initialized){
pion.users._replaceAccordionPane(pane);
}else{
pion.users.selected_pane=pane;
pion.users._updatePane(pane);
}
},_10dd.duration+100);
};
function _10df(pane){
var _10e0=dijit.byId("user_config_accordion");
setTimeout(function(){
if(_10e0.pendingSelection){
_10e0.selectChild(_10e0.pendingSelection);
_10e0.pendingSelection=false;
}
},_10e0.duration);
};
function _10e1(pane){
};
dojo.subscribe("user_config_accordion-selectChild",_10db);
dojo.subscribe("user_config_accordion-addChild",_10df);
dojo.subscribe("user_config_accordion-removeChild",_10e1);
pion.users.createNewPaneFromStore=function(id,_10e2){
pion.users.config_store.fetch({query:{"@id":id},onItem:function(item){
var _10e3=pion.users.config_accordion.createNewPaneFromItem(item,pion.users.config_store);
if(_10e2){
pion.users._adjustAccordionSize();
dijit.byId("user_config_accordion").selectChild(_10e3);
}
},onError:pion.handleFetchError});
};
function _10e4(items,_10e5){
pion.users.config_accordion.createPanesFromAllItems(items,pion.users.config_store);
};
pion.users.config_store.fetch({onComplete:_10e4,onError:pion.handleFetchError});
function _10e6(){
var _10e7=new pion.widgets.UserInitDialog();
setTimeout(function(){
dojo.query("input",_10e7.domNode)[0].select();
},500);
_10e7.show();
_10e7.execute=function(_10e8){
console.debug(_10e8);
var id=_10e8["@id"];
delete _10e8["@id"];
var _10e9="<PionConfig><User id=\""+pion.escapeXml(id)+"\">";
for(var tag in _10e8){
console.debug("dialogFields[",tag,"] = ",_10e8[tag]);
_10e9+=pion.makeXmlLeafElement(tag,_10e8[tag]);
}
for(var _10ea in pion.tab_ids_by_resource){
_10e9+="<Permit>"+_10ea+"</Permit>";
}
_10e9+="</User></PionConfig>";
console.debug("post_data: ",_10e9);
dojo.rawXhrPost({url:"/config/users",contentType:"text/xml",handleAs:"xml",postData:_10e9,load:function(_10eb){
pion.users.createNewPaneFromStore(id,true);
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_10e9})});
};
};
dijit.byId("user_config").button.onClick=_10e6;
};
pion.users._adjustAccordionSize=function(){
var _10ec=dijit.byId("user_config_accordion");
var _10ed=pion.users.selected_pane.getHeight();
dojo.forEach(_10ec.getChildren(),function(pane){
_10ed+=pane._buttonWidget.getTitleHeight();
});
_10ec.resize({h:_10ed});
pion.users.user_config_height=dojo.byId("user_config_end").offsetTop;
dijit.byId("main_stack_container").resize({h:pion.users.user_config_height});
};
}
if(!dojo._hasResource["pion.widgets.XMLImport"]){
dojo._hasResource["pion.widgets.XMLImport"]=true;
dojo.provide("pion.widgets.XMLImport");
dojo.declare("pion.widgets.XMLImportDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog XML_import_dialog\" style=\"width: 600px\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Import XML Configuration</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\">\r\n\t\t<div style=\"padding: 10px\">\r\n\t\t\tEnter XML configurations for one or more Reactors, Connections, Codecs or Databases below.\r\n\t\t\tThe set of components and their references to other components must be complete.\r\n\t\t\tFor example, if you include the following Reactor configuration: \r\n\t\t\t<pre>\r\n\t\t&lt;Reactor id=\"11111111-2222-3333-4444-555555555555\"&gt;\r\n\t\t\t...\r\n\t\t\t&lt;Codec&gt;22222222-3333-4444-5555-666666666666&lt;/Codec&gt;\r\n\t\t\t...\r\n\t\t&lt;/Reactor&gt;\r\n\t\t\t</pre>\r\n\t\t\tthen you must also include the following Codec configuration:\r\n\t\t\t<pre>\r\n\t\t&lt;Codec id=\"22222222-3333-4444-5555-666666666666\"&gt;\r\n\t\t\t...\r\n\t\t&lt;/Codec&gt;\r\n\t\t\t</pre>\r\n\t\t\tA configuration need not specify its own UUID if no other included configuration needs to refer to it.\r\n\t\t\tNew UUIDs will be assigned for all included components, with all specified relationships preserved.\r\n\t\t</div>\r\n\t\t<div class=\"dijitDialogPaneContent\">\r\n\t\t\t<textarea dojoAttachPoint=\"XML_text_area\" style=\"width: 100%\" rows=\"8\" dojoAttachEvent=\"oninput: enableApply, onkeydown: enableApply\"></textarea>\r\n\t\t</div>\r\n\t\t<div class=\"dijitDialogPaneContent\">\r\n\t\t\t<textarea dojoAttachPoint=\"result_text_area\" style=\"width: 100%\" rows=\"8\" disabled=\"true\" wrap=\"off\"></textarea>\r\n\t\t</div>\r\n\t\t<div class=\"save_cancel_delete\">\r\n\t\t\t<button dojoType=dijit.form.Button class=\"save\" dojoAttachEvent=\"onClick: applyXML\"\r\n\t\t\t\t\tdojoAttachPoint=\"apply_button\" disabled=\"true\">Apply</button>\r\n\t\t\t<button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: onCancel\">Exit</button>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",widgetsInTemplate:true,postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},postCreate:function(){
this.inherited("postCreate",arguments);
this.uuid_replacements={};
},enableApply:function(){
console.debug("enableApply called");
this.apply_button.attr("disabled",false);
},applyXML:function(){
console.debug("applyXML called");
this.apply_button.attr("disabled",true);
var _10ee="<PionConfig>"+this.XML_text_area.value+"</PionConfig>";
var _10ef=_10ee.replace(/>\s*/g,">");
if(dojo.isIE){
var _10f0=dojox.data.dom.createDocument();
_10f0.loadXML(_10ef);
}else{
var _10f1=new DOMParser();
var _10f0=_10f1.parseFromString(_10ef,"text/xml");
}
var _10f2=_10f0.childNodes[0].childNodes;
this.result_text_area.value+=_10f2.length+" configurations found.\n";
this.configs_by_type={Codec:[],Database:[],Reactor:[],Connection:[]};
for(var i=0;i<_10f2.length;++i){
var type=_10f2[i].nodeName;
if(!this.configs_by_type[type]){
this.result_text_area.value+="Error: unknown configuration type \""+type+"\".\n";
return;
}
this.configs_by_type[type].push(_10f2[i]);
}
this.processCodecs();
},processCodecs:function(){
if(this.configs_by_type.Codec.length==0){
this.result_text_area.value+="No Codec configurations found.\n";
this.processDatabases();
}else{
this.result_text_area.value+=this.configs_by_type.Codec.length+" Codec configurations found.\n";
var _10f3=0;
var _10f4=this;
dojo.forEach(this.configs_by_type.Codec,function(_10f5){
var _10f6=_10f5.getAttribute("id");
var _10f7="<PionConfig>"+dojox.data.dom.innerXML(_10f5)+"</PionConfig>";
dojo.rawXhrPost({url:"/config/codecs",contentType:"text/xml",handleAs:"xml",postData:_10f7,load:function(_10f8){
var node=_10f8.getElementsByTagName("Codec")[0];
var _10f9=node.getAttribute("id");
if(_10f6){
_10f4.uuid_replacements[_10f6]=_10f9;
}
if(codec_config_page_initialized){
pion.codecs.createNewPaneFromStore(_10f9,false);
}
var name=node.getElementsByTagName("Name")[0].childNodes[0].nodeValue;
_10f4.result_text_area.value+="Codec named \""+name+"\" added with new UUID "+_10f9+"\n";
if(++_10f3==_10f4.configs_by_type.Codec.length){
_10f4.processDatabases();
}
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_10f7})});
});
}
},processDatabases:function(){
if(this.configs_by_type.Database.length==0){
this.result_text_area.value+="No Database configurations found.\n";
this.processReactors();
}else{
this.result_text_area.value+=this.configs_by_type.Database.length+" Database configurations found.\n";
var _10fa=0;
var _10fb=this;
dojo.forEach(this.configs_by_type.Database,function(_10fc){
var _10fd=_10fc.getAttribute("id");
var _10fe="<PionConfig>"+dojox.data.dom.innerXML(_10fc)+"</PionConfig>";
dojo.rawXhrPost({url:"/config/databases",contentType:"text/xml",handleAs:"xml",postData:_10fe,load:function(_10ff){
var node=_10ff.getElementsByTagName("Database")[0];
var _1100=node.getAttribute("id");
if(_10fd){
_10fb.uuid_replacements[_10fd]=_1100;
}
if(database_config_page_initialized){
pion.databases.createNewPaneFromStore(_1100,false);
}
var name=node.getElementsByTagName("Name")[0].childNodes[0].nodeValue;
_10fb.result_text_area.value+="Database named \""+name+"\" added with new UUID "+_1100+"\n";
if(++_10fa==_10fb.configs_by_type.Database.length){
_10fb.processReactors();
}
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_10fe})});
});
}
},processReactors:function(){
if(this.configs_by_type.Reactor.length==0){
this.result_text_area.value+="No Reactor configurations found.\n";
console.debug("this.uuid_replacements = ",this.uuid_replacements);
this.processConnections();
}else{
dijit.byId("main_stack_container").selectChild(dijit.byId("reactor_config"));
this.result_text_area.value+=this.configs_by_type.Reactor.length+" Reactor configurations found.\n";
var _1101=0;
var _1102=this;
dojo.forEach(this.configs_by_type.Reactor,function(_1103){
var _1104=_1103.getAttribute("id");
var _1105="<PionConfig>"+dojox.data.dom.innerXML(_1103)+"</PionConfig>";
for(var _1106 in _1102.uuid_replacements){
_1105=_1105.replace(RegExp(_1106,"g"),_1102.uuid_replacements[_1106]);
}
console.debug("post_data = ",_1105);
dojo.rawXhrPost({url:"/config/reactors",contentType:"text/xml",handleAs:"xml",postData:_1105,load:function(_1107){
var node=_1107.getElementsByTagName("Reactor")[0];
var _1108=node.getAttribute("id");
if(_1104){
_1102.uuid_replacements[_1104]=_1108;
}
var _1109={"@id":_1108};
var _110a=node.childNodes;
for(var i=0;i<_110a.length;++i){
if(_110a[i].firstChild){
_1109[_110a[i].tagName]=_110a[i].firstChild.nodeValue;
}
}
pion.reactors.createReactorInConfiguredWorkspace(_1109);
_1102.result_text_area.value+="Reactor named \""+_1109.Name+"\" added with new UUID "+_1108+"\n";
if(++_1101==_1102.configs_by_type.Reactor.length){
dijit.byId("main_stack_container").selectChild(dijit.byId("system_config"));
console.debug("this.uuid_replacements = ",this.uuid_replacements);
pion.reactors.updateRunButtons();
_1102.processConnections();
}
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_1105})});
});
}
},processConnections:function(){
if(this.configs_by_type.Connection.length==0){
this.result_text_area.value+="No Connection configurations found.\n";
}else{
dijit.byId("main_stack_container").selectChild(dijit.byId("reactor_config"));
this.result_text_area.value+=this.configs_by_type.Connection.length+" Connections found.\n";
var _110b=0;
var _110c=this;
dojo.forEach(this.configs_by_type.Connection,function(_110d){
var _110e=_110d.getAttribute("id");
var _110f="<PionConfig>"+dojox.data.dom.innerXML(_110d)+"</PionConfig>";
for(var _1110 in _110c.uuid_replacements){
_110f=_110f.replace(RegExp(_1110,"g"),_110c.uuid_replacements[_1110]);
}
console.debug("post_data = ",_110f);
dojo.rawXhrPost({url:"/config/connections",contentType:"text/xml",handleAs:"xml",postData:_110f,load:function(_1111){
var node=_1111.getElementsByTagName("Connection")[0];
var _1112=node.getAttribute("id");
var _1113=_1111.getElementsByTagName("From")[0].firstChild.nodeValue;
var to_id=_1111.getElementsByTagName("To")[0].firstChild.nodeValue;
pion.reactors.createConnection(_1113,to_id,_1112);
_110c.result_text_area.value+="Connection from "+_1113+" to "+to_id+" added with new UUID "+_1112+"\n";
if(++_110b==_110c.configs_by_type.Connection.length){
dijit.byId("main_stack_container").selectChild(dijit.byId("system_config"));
}
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_110f})});
});
}
}});
}
if(!dojo._hasResource["pion.system"]){
dojo._hasResource["pion.system"]=true;
dojo.provide("pion.system");
var server_store;
dojo.declare("childlessChildrenFirstStore",dojo.data.ItemFileWriteStore,{getValues:function(item,_1114){
var _1115=this.inherited("getValues",arguments);
if(_1114!="services"){
return _1115;
}
var len=_1115.length;
for(var i=0;i<len;++i){
if(_1115[0].services){
_1115.push(_1115[0]);
_1115.splice(0,1);
}
}
return _1115;
}});
pion.system.getHeight=function(){
return pion.getMaxMainStackContainerHeightWithoutScroll();
};
pion.system.init=function(){
dijit.byId("main_stack_container").resize({h:pion.system.getHeight()});
dojo.xhrGet({url:"/config",handleAs:"xml",timeout:5000,load:function(_1116,_1117){
console.debug("in load()");
if(dojo.isIE){
dojo.byId("platform_conf_file").innerHTML=_1116.getElementsByTagName("PlatformConfig")[0].xml;
dojo.byId("reactor_conf_file").innerHTML=_1116.getElementsByTagName("ReactorConfig")[0].xml;
dojo.byId("vocab_conf_file").innerHTML=_1116.getElementsByTagName("VocabularyConfig")[0].xml;
dojo.byId("codec_conf_file").innerHTML=_1116.getElementsByTagName("CodecConfig")[0].xml;
dojo.byId("database_conf_file").innerHTML=_1116.getElementsByTagName("DatabaseConfig")[0].xml;
dojo.byId("user_conf_file").innerHTML=_1116.getElementsByTagName("UserConfig")[0].xml;
dojo.byId("protocol_conf_file").innerHTML=_1116.getElementsByTagName("ProtocolConfig")[0].xml;
dojo.byId("service_conf_file").innerHTML=_1116.getElementsByTagName("ServiceConfig")[0].xml;
dojo.byId("log_conf_file").innerHTML=_1116.getElementsByTagName("LogConfig")[0].xml;
dojo.byId("vocab_path").innerHTML=_1116.getElementsByTagName("VocabularyPath")[0].xml;
dojo.byId("data_directory").innerHTML=_1116.getElementsByTagName("DataDirectory")[0].xml;
}else{
dojo.byId("platform_conf_file").innerHTML=_1116.getElementsByTagName("PlatformConfig")[0].textContent;
dojo.byId("reactor_conf_file").innerHTML=_1116.getElementsByTagName("ReactorConfig")[0].textContent;
dojo.byId("vocab_conf_file").innerHTML=_1116.getElementsByTagName("VocabularyConfig")[0].textContent;
dojo.byId("codec_conf_file").innerHTML=_1116.getElementsByTagName("CodecConfig")[0].textContent;
dojo.byId("database_conf_file").innerHTML=_1116.getElementsByTagName("DatabaseConfig")[0].textContent;
dojo.byId("user_conf_file").innerHTML=_1116.getElementsByTagName("UserConfig")[0].textContent;
dojo.byId("protocol_conf_file").innerHTML=_1116.getElementsByTagName("ProtocolConfig")[0].textContent;
dojo.byId("service_conf_file").innerHTML=_1116.getElementsByTagName("ServiceConfig")[0].textContent;
dojo.byId("log_conf_file").innerHTML=_1116.getElementsByTagName("LogConfig")[0].textContent;
dojo.byId("vocab_path").innerHTML=_1116.getElementsByTagName("VocabularyPath")[0].textContent;
dojo.byId("data_directory").innerHTML=_1116.getElementsByTagName("DataDirectory")[0].textContent;
}
var _1118=dojo.byId("plugin_paths");
var _1119=_1118.getElementsByTagName("tr")[0];
while(_1118.firstChild){
_1118.removeChild(_1118.firstChild);
}
var _111a=_1116.getElementsByTagName("PluginPath");
var _111b=[];
for(var i=0;i<_111a.length;++i){
if(dojo.isIE){
_111b[i]=_1118.insertRow();
dojo.forEach(_1119.childNodes,function(n){
_111b[i].appendChild(dojo.clone(n));
});
}else{
_111b[i]=dojo.clone(_1119);
_1118.appendChild(_111b[i]);
}
_111b[i].getElementsByTagName("label")[0].innerHTML="Plugin Path "+(i+1);
var _111c=dojo.isIE?_111a[i].xml:_111a[i].textContent;
_111b[i].getElementsByTagName("td")[1].innerHTML=_111c;
}
return _1116;
},error:pion.handleXhrGetError});
dojo.byId("platform_conf_file").firstChild.nodeValue="actual/path/here/PlatformConfigFile.xml";
server_store=new dojox.data.XmlStore({url:"/config/services"});
server_store.getFeatures=function(){
return {"dojo.data.api.Read":true,"dojo.data.api.Identity":true};
};
server_store.getIdentity=function(item){
console.debug("server_store.getValue(item, '@id') = ",server_store.getValue(item,"@id"));
console.debug("server_store.getAttributes(item) = ",server_store.getAttributes(item));
return server_store.getValue(item,"@id");
};
pion.system.myModel=new dijit.tree.ForestStoreModel({store:server_store,query:{tagName:"Server"},rootId:"serverRoot",childrenAttrs:["childNodes"]});
server_store.fetch({query:{tagName:"Server"},onComplete:function(){
pion.system.buildTree();
},onError:pion.handleFetchError});
};
pion.system.buildTree=function(){
new dijit.Tree({model:pion.system.myModel,showRoot:false,getLabel:function(item){
if(item.root){
return;
}
var label=server_store.getValue(item,"tagName");
var id=server_store.getValue(item,"@id");
if(id){
return label+": "+id;
}
if(label=="Option"){
label+=" "+server_store.getValue(item,"@name");
}
if(server_store.hasAttribute(item,"text()")){
return label+": "+server_store.getValue(item,"text()");
}
return label;
}},dojo.byId("server_tree"));
};
pion.system.importXMLConfiguration=function(){
var _111d=new pion.widgets.XMLImportDialog();
_111d.show();
};
}
if(!dojo._hasResource["plugins.services.Service"]){
dojo._hasResource["plugins.services.Service"]=true;
dojo.provide("plugins.services.Service");
dojo.declare("plugins.services.Service",null,{constructor:function(_111e){
dojo.mixin(this,_111e);
if(!this.title){
console.error("No title specified for Service.");
}
if(!this.resource){
console.error("No resource specified for Service "+this.title);
}
},onSelect:function(){
dijit.byId("main_stack_container").resize({h:this.getHeight()});
if(!this.initialized){
this.initialized=true;
var query=window.location.search.substring(1);
var names=dojo.map(query.split("&"),function(piece){
return piece.split("=")[0];
});
var idx=dojo.indexOf(names,"id");
if(idx==-1){
this.init();
}else{
var pairs=dojo.map(query.split("&"),function(piece){
return piece.split("=");
});
var _111f=pairs[idx][1];
if(_111f==this.id){
var _1120=this;
this.init().addCallback(function(){
_1120.handleQueryFromUrl(names,pairs);
});
}else{
this.init();
}
}
}
}});
}
if(!dojo._hasResource["pion.services"]){
dojo._hasResource["pion.services"]=true;
dojo.provide("pion.services");
pion.services.config_store=new dojox.data.XmlStore({url:"/config/services",rootItem:"PlatformService"});
pion.services.createService=function(_1121,_1122){
var _1123={title:_1121.label,resource:_1121.resource,wizard_config:_1122};
if("tab_id" in _1121){
_1123.id=_1121.tab_id;
}
new _1121(_1123);
console.debug("UI for service \"",_1121.label,"\" has been added.");
};
pion.services.init=function(_1124){
init_services_standby.show();
pion.services.getAllServicesInUIDirectory=function(){
var d=new dojo.Deferred();
var store=new dojox.data.XmlStore({url:"/config/services/plugins"});
store.fetch({onComplete:function(items){
var _1125=dojo.map(items,function(item){
return store.getValue(item,"Plugin").toString();
});
d.callback(_1125);
}});
return d;
};
pion.services.getConfiguredServices=function(_1126){
var d=new dojo.Deferred();
pion.services.config_store.fetch({onComplete:function(items){
var _1127=dojo.map(items,function(item){
return {resource:pion.services.config_store.getValue(item,"Resource").toString(),plugin:pion.services.config_store.getValue(item,"Plugin").toString()};
});
d.callback({services_in_ui_dir:_1126,configured_services:_1127});
},onError:pion.handleFetchError});
return d;
};
pion.services.restrictable_services=[];
var _1128=function(_1129){
var d=new dojo.Deferred();
var _112a=dojo.filter(_1129.configured_services,function(_112b){
var _112c=dojo.indexOf(_1129.services_in_ui_dir,_112b.plugin)!=-1;
var _112d=dojo.indexOf(pion.plugins.available_plugins,_112b.plugin)!=-1;
return _112c&&_112d;
});
var _112e=[];
dojo.forEach(_112a,function(_112f){
var _1130=pion.plugins.getPluginPrototype("plugins.services",_112f.plugin,"/plugins/services");
if("requiresPermission" in _1130&&_1130.requiresPermission(_112f)){
if(!(_112f.plugin in pion.permissions_object||"Admin" in pion.permissions_object)){
return;
}
pion.services.restrictable_services.push(_112f);
}
_1130.resource=_112f.resource;
if("isUsable" in _1130){
_112e.push(_1130);
}else{
pion.services.createService(_1130,_1124);
}
});
var _1131=_112e.length;
if(_1131==0){
d.callback();
}else{
dojo.forEach(_112e,function(_1132){
_1132.isUsable(_1132.resource).addCallback(function(_1133){
if(_1133){
pion.services.createService(_1132,_1124);
}else{
console.debug("UI for service \"",_1132.label,"\" has NOT been added: isUsable() returned false.");
}
_1131--;
if(_1131==0){
d.callback();
}
}).addErrback(function(e){
console.debug("UI for service \"",_1132.label,"\" has NOT been added: ",e);
_1131--;
if(_1131==0){
d.callback();
}
});
});
}
return d;
};
pion.plugins.initAvailablePluginList().addCallback(pion.plugins.getPermissions).addCallback(pion.services.getAllServicesInUIDirectory).addCallback(pion.services.getConfiguredServices).addCallback(_1128).addCallback(pion.initTabs);
};
}
if(!dojo._hasResource["pion.about"]){
dojo._hasResource["pion.about"]=true;
dojo.provide("pion.about");
pion.about.ops_temporarily_suppressed=false;
dojo.declare("pion.about.LicenseKeyDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog about_dialog\" style=\"height: 550px; width: 600px\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">About Pion</span>\r\n\t\t<span dojoAttachPoint=\"closeButtonNode\" class=\"dijitDialogCloseIcon\" dojoAttachEvent=\"onclick: hide\">\r\n\t\t\t<span dojoAttachPoint=\"closeText\" class=\"closeText\">x</span>\r\n\t\t</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\">\r\n\t\t<p>\r\n\t\t\t<big><strong><span id=\"full_version\" dojoAttachPoint=\"full_version\"></span></strong></big><br/>\r\n\t\t\tCopyright &copy; 2007-2011 Atomic Labs, Inc.  All Rights Reserved.\r\n\t\t</p>\r\n\t\t<p>\r\n\t\t\tPion includes a collection of <a href=\"third_party_libraries.html\" target=\"_blank\" style=\"color:#0033CC; text-decoration:underline\">third party\r\n\t\t\tlibraries</a>, all of which may be downloaded from \r\n\t\t\t<a href=\"http://pion.org/projects/pion-platform/documentation/libraries\" target=\"_blank\" style=\"color:#0033CC; text-decoration:underline\">our\r\n\t\t\tcommunity website.</a>\r\n\t\t</p>\r\n\r\n\t\t<h2>License Information</h2>\r\n\t\t<hr>\r\n\r\n\t\t<div id=\"license_block\">\r\n\r\n\t\t\t<div id=\"community_license\" dojoAttachPoint=\"community_license\"\r\n\t\t\t\tstyle=\"display: none\">\r\n\r\n\t\t\t\t<p>\r\n\t\t\t\t\tPion Core is licensed under the\r\n\t\t\t\t\t<a href=\"/licenses/gpl_affero.html\" target=\"_blank\" style=\"color:#0033CC; text-decoration:underline\">\r\n\t\t\t\t\t\tGNU Affero\r\n\t\t\t\t\t\tGeneral Public License\r\n\t\t\t\t\t</a>.\r\n\t\t\t\t</p>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t<div id=\"enterprise_not_licensed\" dojoAttachPoint=\"enterprise_not_licensed\"\r\n\t\t\t\tstyle=\"display: none\">\r\n\t\t\t\r\n\t\t\t\t<p><span id=\"reason_needs_license\" dojoAttachPoint=\"reason_needs_license\"></span></p>\r\n\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\tPlease cut and paste your license key into the box below and click \"Submit Key.\"<br/>\r\n\t\t\t\t\t\tIf you don't have a license key, you can obtain one from\r\n\t\t\t\t\t\t<a href=\"http://www.atomiclabs.com/pion/trial-license.php\" style=\"color:#0033CC; text-decoration:underline\">atomiclabs.com</a>.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<textarea id=\"license_key\" dojoAttachPoint=\"license_key\" cols=\"65\" rows=\"8\"></textarea><br/>\r\n\t\t\t\t\t<button dojoType=\"dijit.form.Button\" class=\"content_button\" dojoAttachEvent=\"onClick: submitKey\">Submit Key</button>\r\n\t\t\t\t</form>\r\n\t\t\t\t<p><big><strong><span id=\"result_of_submitting_key\" dojoAttachPoint=\"result_of_submitting_key\"></span></strong></big></p>\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<div id=\"enterprise_licensed\" dojoAttachPoint=\"enterprise_licensed\"\r\n\t\t\t\tstyle=\"display: none\">\r\n\t\t\t\r\n\t\t\t\t<p>Pion is licensed under the\r\n\t\t\t\t<a href=\"/licenses/atomic_enterprise.html\" target=\"_blank\" style=\"color:#0033CC; text-decoration:underline\">Atomic Labs\r\n\t\t\t\tEnterprise Software License Agreement</a>.</p>\r\n\t\t\t\t\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td><big><strong>Name:</strong></big></td>\r\n\t\t\t\t\t\t<td><span id=\"license_name\" dojoAttachPoint=\"license_name\"></span></td>\r\n\t\t\t\t\t</tr><tr>\r\n\t\t\t\t\t\t<td><big><strong>Email:</strong></big></td>\r\n\t\t\t\t\t\t<td><span id=\"license_email\" dojoAttachPoint=\"license_email\"></span></td>\r\n\t\t\t\t\t</tr><tr>\r\n\t\t\t\t\t\t<td><big><strong>Version:</strong></big></td>\r\n\t\t\t\t\t\t<td><span id=\"license_version\" dojoAttachPoint=\"license_version\"></span></td>\r\n\t\t\t\t\t</tr><tr>\r\n\t\t\t\t\t\t<td><big><strong>Products:</strong></big></td>\r\n\t\t\t\t\t\t<td><span id=\"license_products\" dojoAttachPoint=\"license_products\"></span></td>\r\n\t\t\t\t\t</tr><tr>\r\n\t\t\t\t\t\t<td><big><strong>Expiration:</strong></big></td>\r\n\t\t\t\t\t\t<td><span id=\"license_expiration\" dojoAttachPoint=\"license_expiration\"></span></td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\r\n\t\t\t\t<br />\r\n\t\t\t\t<button dojoType=\"dijit.form.Button\" class=\"content_button\" dojoAttachEvent=\"onClick: doLicenseKeyDialog\">Replace License Key</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
var _1134=this;
dojo.xhrGet({url:"/config",preventCache:true,handleAs:"xml",timeout:5000,load:function(_1135,_1136){
if(dojo.isIE){
var _1137=_1135.getElementsByTagName("Version")[0].childNodes[0].nodeValue;
}else{
var _1137=_1135.getElementsByTagName("Version")[0].textContent;
}
pion.about.checkKeyStatusDfd().addCallback(function(_1138){
if(!pion.key_service_running){
_1134.doLicenseStuff(_1137,"Pion Core");
}else{
if(_1138=="invalid"){
_1134.doLicenseStuff(_1137,"Pion","invalid");
}else{
if(_1138=="none"){
_1134.doLicenseStuff(_1137,"Pion","none");
}else{
_1134.doLicenseStuff(_1137,"Pion","valid");
}
}
}
});
return _1135;
}});
this.connect(this,"hide",function(){
this.destroyRecursive(false);
if(_1134.always_callback){
_1134.always_callback();
}
if(pion.about.ops_temporarily_suppressed){
var _1139=dijit.byId("ops_toggle_button");
_1139.attr("checked",false);
pion.about.ops_temporarily_suppressed=false;
}
});
},submitKey:function(e){
var key=this.license_key.value;
console.debug("key = ",key);
var _113a=this;
dojo.rawXhrPut({url:"/key",contentType:"text/plain",handleAs:"text",putData:key,load:function(_113b){
console.debug("response: ",_113b);
_113a.hide();
pion.about.doDialog({always_callback:_113a.success_callback});
return _113b;
},error:function(_113c,_113d){
console.debug(_113d);
_113a.result_of_submitting_key.innerHTML="Error: Key not accepted.";
return _113c;
}});
},doLicenseKeyDialog:function(){
this.hide();
var title="Please enter the replacement license key";
var _113e=new pion.widgets.LicenseKeyDialog({title:title});
_113e.show();
},doLicenseStuff:function(_113f,_1140,_1141){
full_version_str=_1140+" v"+_113f;
this.full_version.innerHTML=full_version_str;
if(_1140=="Pion Core"){
this.community_license.style.display="block";
}else{
if(_1141=="valid"){
var _1142=this;
dojo.xhrGet({url:"/key",preventCache:true,handleAs:"xml",timeout:5000,load:function(_1143,_1144){
var _1145=function(p){
return dojox.xml.parser.textContent(p);
};
var _1146=dojox.xml.parser.textContent(_1143.getElementsByTagName("Name")[0]);
var _1147=dojox.xml.parser.textContent(_1143.getElementsByTagName("Email")[0]);
var _1148=dojo.map(_1143.getElementsByTagName("Version"),_1145);
var _1149=dojo.map(_1143.getElementsByTagName("Product"),_1145);
var _114a=dojo.map(_1143.getElementsByTagName("Expiration"),_1145);
_1142.license_name.innerHTML=_1146;
_1142.license_email.innerHTML=_1147;
if(_1148.length==0){
_1142.license_version.innerHTML="All versions";
}else{
_1142.license_version.innerHTML=_1148[0];
}
if(_1149.length==0){
_1142.license_products.innerHTML="None";
}else{
_1142.license_products.innerHTML=_1149.join(", ");
}
if(_114a.length==0){
_1142.license_expiration.innerHTML="None";
}else{
_1142.license_expiration.innerHTML=_114a[0];
}
_1142.enterprise_licensed.style.display="block";
return _1143;
},error:pion.handleXhrGetError});
}else{
if(_1141=="invalid"){
this.reason_needs_license.innerHTML="Invalid license key (may have expired).";
}else{
this.reason_needs_license.innerHTML="No license key found.";
}
this.enterprise_not_licensed.style.display="block";
}
}
}});
pion.about.doDialog=function(_114b){
var _114c=dijit.byId("ops_toggle_button");
if(!_114c.checked){
_114c.attr("checked",true);
pion.about.ops_temporarily_suppressed=true;
}
var _114d=new pion.about.LicenseKeyDialog(_114b);
_114d.show();
};
pion.about.checkKeyStatus=function(_114e){
dojo.xhrGet({url:"/key/status",preventCache:true,handleAs:"xml",timeout:5000,load:function(_114f,_1150){
pion.key_service_running=true;
if(dojo.isIE){
var _1151=_114f.getElementsByTagName("Status")[0].childNodes[0].nodeValue;
}else{
var _1151=_114f.getElementsByTagName("Status")[0].textContent;
}
if(_1151=="valid"){
if(_114e.always_callback){
_114e.always_callback();
}
if(_114e.success_callback){
_114e.success_callback();
}
}else{
pion.about.doDialog(_114e);
}
return _114f;
},error:function(_1152,_1153){
if(_1153.xhr.status==401){
if(!dojo.cookie("logged_in")){
location.replace("login.html");
}
pion.login.doLoginDialog({success_callback:function(){
pion.about.doDialog(_114e);
},suppress_default_key_status_check:true});
}else{
if(_1153.xhr.status==404){
pion.key_service_running=false;
pion.updateLicenseState("core");
if(_114e.always_callback){
_114e.always_callback();
}
}else{
pion.about.doDialog(_114e);
}
}
return _1152;
}});
};
pion.about.checkKeyStatusDfd=function(){
var dfd=new dojo.Deferred();
dojo.xhrGet({url:"/key/status",preventCache:true,handleAs:"xml",timeout:5000,load:function(_1154,_1155){
pion.key_service_running=true;
var _1156=_1154.getElementsByTagName("Status")[0];
var _1157=dojo.isIE?_1156.childNodes[0].nodeValue:_1156.textContent;
var _1158=dojo.map(_1154.getElementsByTagName("Product"),function(p){
return dojox.xml.parser.textContent(p);
});
if(_1157=="invalid"){
pion.updateLicenseState("lite");
dfd.callback("invalid");
}else{
if(dojo.indexOf(_1158,"Pion Replay")!=-1){
pion.updateLicenseState("replay");
dfd.callback("replay");
}else{
if(dojo.indexOf(_1158,"Pion Enterprise")!=-1){
pion.updateLicenseState("enterprise");
dfd.callback("enterprise");
}else{
pion.updateLicenseState("lite");
dfd.callback("none");
}
}
}
return _1154;
},error:function(_1159,_115a){
if(_115a.xhr.status==404){
pion.key_service_running=false;
pion.updateLicenseState("core");
dfd.callback("none");
}else{
pion.handleXhrGetError(_1159,_115a);
}
return _1159;
}});
return dfd;
};
}
if(!dojo._hasResource["pion.widgets.KeyStoreEditor"]){
dojo._hasResource["pion.widgets.KeyStoreEditor"]=true;
dojo.provide("pion.widgets.KeyStoreEditor");
dojo.declare("pion.widgets.KeyStoreEditor",[dijit._Widget,dijit._Templated],{templateString:"<div class=\"key_store_editor\">\r\n\t<h2>Please enter one key at a time</h2>\r\n\t<table cellspacing=\"0\" cellpadding=\"4\" border=\"0\" style=\"background: #ffffff; border: 0px;\">\r\n\t\t<tr>\r\n\t\t\t<td width=\"100\"><label>Name:</label></td>\r\n\t\t\t<td width=\"450\"><input dojoType=dijit.form.TextBox dojoAttachPoint=\"name_widget\" /></td>\r\n\t\t\t<td width=\"350\" rowspan=\"4\" valign=\"top\" style=\"background: #fcecef; border: 1px solid pink;\">\r\n\t\t\t\t<label>Saved keys:</label>\r\n\t\t\t\t<select dojoAttachPoint=\"key_select\" size=8 style=\"width: 95%\">\r\n\t\t\t\t</select>\r\n\t\t\t\t<button class=\"delete disabled\" dojoAttachEvent=\"onclick: _deleteKey\" dojoAttachPoint=\"delete_key_button\" disabled=true style=\"width: 180px; margin-bottom: 7px;\">Delete selected key</button>\r\n\t\t\t</td>\r\n\t\t</tr><tr>\r\n\t\t\t<td><label>Password:</label></td>\r\n\t\t\t<td><input dojoType=dijit.form.TextBox dojoAttachPoint=\"password_widget\" type=\"password\" /></td>\r\n\t\t</tr><tr>\r\n\t\t\t<td valign=\"top\"><label>PEM:</label></td>\r\n\t\t\t<td colspan=\"2\"><textarea dojoAttachPoint=\"pem\" cols=\"30\" rows=\"3\" dojoAttachEvent=\"oninput: enableSave, onkeydown: enableSave\">\r\n\t\t\t</textarea></td>\r\n\t\t</tr><tr>\r\n\t\t\t<td>&nbsp;</td>\r\n\t\t\t<td>\r\n\t\t\t\t<button class=\"add_new disabled\" disabled=true dojoAttachPoint=\"save_key_button\" dojoAttachEvent=\"onclick: _handleAddNewKey\" style=\"width: 130px; margin-bottom: 7px;\">Save key</button>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</table>\r\n</div>\r\n",_handleAddNewKey:function(e){
var _115b="<PionConfig><Key>";
_115b+=pion.makeXmlLeafElement("Name",this.name_widget.value);
_115b+=pion.makeXmlLeafElement("Password",this.password_widget.value);
_115b+=pion.makeXmlLeafElement("PEM",this.pem.value);
_115b+="</Key></PionConfig>";
var _115c=this;
dojo.rawXhrPost({url:"/keystore",contentType:"text/xml",handleAs:"xml",postData:_115b,load:function(_115d){
_115c.updateKeyChoices("");
_115c.name_widget.value="";
_115c.password_widget.value="";
_115c.pem.value="";
_115c.save_key_button.disabled=true;
dojo.addClass(_115c.save_key_button,"disabled");
return _115d;
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_115b})});
},_deleteKey:function(){
var _115e=this;
dojo.xhrDelete({url:"/keystore/"+this.key_select.value,handleAs:"xml",timeout:5000,load:function(_115f,_1160){
_115e.updateKeyChoices("");
return _115f;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
},_setText:function(node,text){
while(node.firstChild){
node.removeChild(node.firstChild);
}
node.appendChild(dojo.doc.createTextNode(text));
},postCreate:function(){
this.inherited(arguments);
var _1161=this;
var _1162=this.initial_key?this.initial_key:"";
this.updateKeyChoices(_1162);
this.key_select.onchange=function(){
_1161.delete_key_button.disabled=false;
dojo.removeClass(_1161.delete_key_button,"disabled");
};
},enableSave:function(){
this.save_key_button.disabled=false;
dojo.removeClass(this.save_key_button,"disabled");
},updateKeyChoices:function(_1163){
var index=0;
var _1164=0;
this.key_select.options.length=0;
var _1165=this;
pion.widgets.key_store.fetch({sort:[{attribute:"@id"}],onItem:function(item){
var id=pion.widgets.key_store.getValue(item,"@id");
if(id==_1163){
_1164=index;
}
var _1166=pion.widgets.key_store.getValue(item,"Name");
if(dojo.isIE){
_1165.key_select.add(new Option(_1166,id));
}else{
_1165.key_select.add(new Option(_1166,id),null);
}
++index;
},onComplete:function(){
_1165.key_select.focus();
_1165.key_select.selectedIndex=_1164;
_1165.key_select.onchange();
},onError:pion.handleFetchError});
},onChange:function(value){
}});
pion.widgets.key_store=new dojox.data.XmlStore({url:"/keystore",rootItem:"Key",attributeMap:{"Key.id":"@id"}});
}
if(!dojo._hasResource["pion.widgets.Wizard"]){
dojo._hasResource["pion.widgets.Wizard"]=true;
dojo.provide("pion.widgets.Wizard");
dojo.declare("pion.widgets.Wizard",[dojox.widget.Wizard],{widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
pion.wizard_nlsStrings=dojo.i18n.getLocalization("pion","wizard");
pion.wizard=this;
},start:function(_1167){
dojo.removeClass("wizard","hidden");
dijit.byId("wizard").resize();
document.body.appendChild(device_list_standby.domNode);
device_list_standby.show();
pion.wizard.cookies=[];
pion.wizard.devices=[];
pion.wizard.dashboards=[];
pion.wizard.max_disk_usage="NA";
new pion.widgets.KeyStoreEditor({},"key_store_editor");
dijit.byId("review_setup").doneFunction=dojo.hitch(this,"finish");
pion.reactors.deleteAllWorkspaces();
pion.services.config_store.fetch({onItem:function(item){
var _1168=pion.services.config_store.getValue(item,"Plugin");
if(_1168=="ReplayService"){
var id=pion.services.config_store.getValue(item,"@id");
dojo.xhrDelete({url:"/config/services/"+id,handleAs:"xml",timeout:5000,load:function(_1169,_116a){
return _1169;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
}
},onError:pion.handleFetchError});
dojo.forEach(dojo.query("label",dojo.byId("select_analytics_provider_form")),function(node){
node.innerHTML=dojo.string.substitute(node.innerHTML,pion.wizard_nlsStrings);
});
if(dojo.cookie("pion_edition")){
pion.edition=dojo.cookie("pion_edition");
dijit.byId("select_edition_form").attr("value",{edition:pion.edition});
}else{
if(_1167=="enterprise"){
dijit.byId("select_edition_form").attr("value",{edition:"Enterprise"});
}else{
if(_1167=="replay"){
dijit.byId("select_edition_form").attr("value",{edition:"Replay"});
}
}
}
var _116b=this;
var _116c=this.selectedChildWidget;
dojo.forEach(dojo.query(".next_button",_116c.domNode),function(node){
_116b.nextButton.attr("label",node.innerHTML);
});
dijit.byId("license_acceptance_pane").init=pion.widgets.Wizard.prepareLicensePane;
dijit.byId("host_pane").init=pion.widgets.Wizard.prepareHostPane;
dijit.byId("cookie_pane").init=pion.widgets.Wizard.prepareCookiePane;
dijit.byId("analytics_provider_pane").init=pion.widgets.Wizard.prepareAnalyticsProviderPane;
dijit.byId("omniture_pane").init=pion.widgets.Wizard.prepareOmniturePane;
dijit.byId("webtrends_pane").init=pion.widgets.Wizard.prepareWebtrendsPane;
dijit.byId("google_pane").init=pion.widgets.Wizard.prepareGooglePane;
dijit.byId("unica_pane").init=pion.widgets.Wizard.prepareUnicaPane;
dijit.byId("capture_devices_pane").init=pion.widgets.Wizard.prepareCaptureDevicesPane;
dijit.byId("replay_setup_pane").init=pion.widgets.Wizard.prepareReplaySetupPane;
dijit.byId("dashboard_pane").init=pion.widgets.Wizard.prepareDashboardSelectionPane;
dojo.subscribe("wizard-selectChild",function(page){
dojo.forEach(dojo.query(".prev_button",page.domNode),function(node){
_116b.previousButton.attr("label",node.innerHTML);
if(node.getAttribute("returnPane")){
page.returnPane=node.getAttribute("returnPane");
}
});
var _116d=".prev_button_"+pion.edition.toLowerCase();
dojo.forEach(dojo.query(_116d,page.domNode),function(node){
_116b.previousButton.attr("label",node.innerHTML);
if(node.getAttribute("returnPane")){
page.returnPane=node.getAttribute("returnPane");
}
});
dojo.forEach(dojo.query(".next_button",page.domNode),function(node){
_116b.nextButton.attr("label",node.innerHTML);
});
_116d=".next_button_"+pion.edition.toLowerCase();
dojo.forEach(dojo.query(_116d,page.domNode),function(node){
_116b.nextButton.attr("label",node.innerHTML);
});
dojo.forEach(dojo.query(".done_button",page.domNode),function(node){
_116b.doneButton.attr("label",node.innerHTML);
});
if(page.init){
page.init();
}
});
},finish:function(){
pion.widgets.Wizard.switchToOuter();
var _116e=[];
var _116f="<Plugin>SnifferReactor</Plugin>"+"<X>50</X>"+"<Y>100</Y>"+"<Name>Capture Traffic</Name>"+"<Comment>Captures raw network traffic to generate HTTP request events</Comment>"+"<Protocol>"+pion.protocols.default_id+"</Protocol>"+"<ProcessingThreads>1</ProcessingThreads>"+"<MaxPacketQueueSize>100000</MaxPacketQueueSize>"+"<QueueEventDelivery>true</QueueEventDelivery>"+"<HideCreditCardNumbers>false</HideCreditCardNumbers>";
dojo.forEach(pion.wizard.devices,function(_1170){
var _1171=dojo.map(pion.wizard.ports,function(item){
return "tcp port "+item;
});
_116f+="<Capture><Interface>"+_1170+"</Interface><Filter>";
_116f+=_1171.join(" or ");
_116f+="</Filter></Capture>";
});
var _1172="<X>250</X>"+"<Y>200</Y>";
var _1173="";
var _1174=(pion.wizard.host_suffixes.length>0);
if(pion.wizard.host_suffixes.length>0){
var _1175=pion.wizard.host_suffixes[0].split(".");
var _1176=_1175.length;
var _1177=_1175[_1176==1?0:_1176-2];
_1173+="<SessionGroup id=\""+_1177+"\">"+"<Name>"+_1177+"</Name>";
dojo.forEach(pion.wizard.host_suffixes,function(host){
_1173+="<Host>"+dojo.trim(host)+"</Host>";
});
dojo.forEach(pion.wizard.cookies,function(_1178){
_1173+="<Cookie type=\""+(_1178.is_visitor_cookie?"v":"s")+"\">"+_1178.name+"</Cookie>";
});
_1173+="</SessionGroup>";
}
_116e.push({label:"clickstream",url:"/resources/ClickstreamTemplate.tmpl",substitutions:{IgnoreDefaultGroup:_1174,SessionGroupConfig:_1173}});
if(pion.wizard.analytics_provider=="Omniture"){
var _1179="<Plugin>OmnitureAnalyticsReactor</Plugin>"+"<X>50</X>"+"<Y>300</Y>"+"<Name>Omniture Analytics</Name>"+"<NumConnections>32</NumConnections>"+"<HttpHost>"+pion.wizard.omniture_host+"</HttpHost>"+"<AccountId>"+pion.wizard.omniture_report_suite+"</AccountId>"+"<EncryptConnections>false</EncryptConnections>"+"<SendTimestamp>true</SendTimestamp>"+"<StripClientIP>"+pion.wizard.strip_client_ip+"</StripClientIP>"+"<Query name=\"ipaddress\">urn:vocab:clickstream#c-ip</Query>"+"<Query name=\"userAgent\">urn:vocab:clickstream#useragent</Query>"+"<Query name=\"pageName\">urn:vocab:clickstream#page-title</Query>"+"<Query name=\"referrer\">urn:vocab:clickstream#referer</Query>"+"<Query name=\"visitorID\">[computed]</Query>"+"<Query name=\"server\">[computed]</Query>"+"<Query name=\"pageURL\">[computed]</Query>"+"<Query name=\"timestamp\">[computed]</Query>"+"<Query name=\"reportSuiteID\">[computed]</Query>";
}else{
if(pion.wizard.analytics_provider=="Webtrends"){
var _1179="<X>50</X>"+"<Y>300</Y>";
_116e.push({label:"analytics",is_json:true,plugin:"WebTrendsAnalyticsReactor",substitutions:{AccountId:pion.wizard.webtrends_account_id,HttpHost:pion.wizard.webtrends_host,StripClientIP:pion.wizard.strip_client_ip}});
}else{
if(pion.wizard.analytics_provider=="Google"){
var _1179="<Plugin>GoogleAnalyticsReactor</Plugin>"+"<X>50</X>"+"<Y>300</Y>"+"<Name>Google Analytics</Name>"+"<AccountId>"+pion.wizard.google_account_id+"</AccountId>"+"<NumConnections>32</NumConnections>"+"<EncryptConnections>false</EncryptConnections>"+"<StripClientIP>"+pion.wizard.strip_client_ip+"</StripClientIP>";
}else{
if(pion.wizard.analytics_provider=="Unica"){
var _1179="<X>50</X>"+"<Y>300</Y>";
_116e.push({label:"analytics",is_json:true,plugin:"UnicaAnalyticsReactor",substitutions:{AccountId:pion.wizard.unica_account_id,HttpHost:pion.wizard.unica_host,StripClientIP:pion.wizard.strip_client_ip}});
}else{
}
}
}
}
if(pion.edition=="Replay"){
var _117a="<Plugin>ContentHashReactor</Plugin>"+"<X>250</X>"+"<Y>100</Y>"+"<Name>Detect Page Content</Name>"+"<SourceTerm>urn:vocab:clickstream#sc-content</SourceTerm>"+"<MatchAllComparisons>true</MatchAllComparisons>"+"<Comment>Looks for page content in HTTP events that will be stored for Replay</Comment>"+"<Comparison>"+"<Term>urn:vocab:clickstream#status</Term>"+"<Type>equals</Type>"+"<Value>200</Value>"+"<MatchAllValues>false</MatchAllValues>"+"</Comparison>"+"<Comparison>"+"<Term>urn:vocab:clickstream#content-type</Term>"+"<Type>regex</Type>"+"<Value>^(text/html|application/xhtml|text/vnd.wap.wml)</Value>"+"<MatchAllValues>false</MatchAllValues>"+"</Comparison>";
var _117b="<X>250</X>"+"<Y>300</Y>";
_116e.push({label:"mdr",url:"/resources/MDRTemplate.tmpl",substitutions:{MaxDiskUsage:pion.wizard.max_disk_usage}});
var _117c=[{label:"sniffer",config:_116f},{label:"chr",config:_117a},{label:"clickstream",config:_1172},{label:"mdr",config:_117b}];
var _117d=[{from:"sniffer",to:"chr"},{from:"chr",to:"clickstream"},{from:"clickstream",to:"mdr"}];
}else{
var _117c=[{label:"sniffer",config:_116f},{label:"clickstream",config:_1172}];
var _117d=[{from:"sniffer",to:"clickstream"}];
}
if(_1179){
_117c.push({label:"analytics",config:_1179});
_117d.push({from:"clickstream",to:"analytics"});
}
var _117e=[{label:"clickstream",name:"Clickstream"}];
wizard_config={templates:_116e,reactors:_117c,connections:_117d,workspaces:_117e};
wizard_config.dashboards=[];
if(pion.wizard.dashboards.length>0){
_117e.push({label:"reports",name:"Dashboard Reports"});
_116e.push({label:"ReportsAnchorFilterReactor",url:"/resources/ReportsAnchorFilterReactor.tmpl",substitutions:{}});
_117c.push({label:"ReportsAnchorFilterReactor",workspace:"reports",config:""});
_117d.push({from:"clickstream",to:"ReportsAnchorFilterReactor"});
_116e.push({label:"HTTPEventsFilterReactor",url:"/resources/HTTPEventsFilterReactor.tmpl",substitutions:{}});
_117c.push({label:"HTTPEventsFilterReactor",workspace:"reports",config:""});
_117d.push({from:"ReportsAnchorFilterReactor",to:"HTTPEventsFilterReactor"});
}
if(dojo.indexOf(pion.wizard.dashboards,"Activity")!=-1){
wizard_config.dashboards.push({url:"/resources/ActivityDashboard.json"});
_116e.push({label:"RealUserRequestsAggregateReactor",url:"/resources/RealUserRequestsAggregateReactor.tmpl",substitutions:{}});
_117c.push({label:"RealUserRequestsAggregateReactor",workspace:"reports",config:""});
_117d.push({from:"HTTPEventsFilterReactor",to:"RealUserRequestsAggregateReactor"});
_116e.push({label:"AutomatedRequestsAggregateReactor",url:"/resources/AutomatedRequestsAggregateReactor.tmpl",substitutions:{}});
_117c.push({label:"AutomatedRequestsAggregateReactor",workspace:"reports",config:""});
_117d.push({from:"HTTPEventsFilterReactor",to:"AutomatedRequestsAggregateReactor"});
}
if(dojo.indexOf(pion.wizard.dashboards,"Availability")!=-1){
wizard_config.dashboards.push({url:"/resources/AvailabilityDashboard.json"});
_116e.push({label:"SuccessfulRequestsAggregateReactor",url:"/resources/SuccessfulRequestsAggregateReactor.tmpl",substitutions:{}});
_117c.push({label:"SuccessfulRequestsAggregateReactor",workspace:"reports",config:""});
_117d.push({from:"HTTPEventsFilterReactor",to:"SuccessfulRequestsAggregateReactor"});
_116e.push({label:"RefusedRequestsAggregateReactor",url:"/resources/RefusedRequestsAggregateReactor.tmpl",substitutions:{}});
_117c.push({label:"RefusedRequestsAggregateReactor",workspace:"reports",config:""});
_117d.push({from:"HTTPEventsFilterReactor",to:"RefusedRequestsAggregateReactor"});
_116e.push({label:"ClientErrorsAggregateReactor",url:"/resources/ClientErrorsAggregateReactor.tmpl",substitutions:{}});
_117c.push({label:"ClientErrorsAggregateReactor",workspace:"reports",config:""});
_117d.push({from:"HTTPEventsFilterReactor",to:"ClientErrorsAggregateReactor"});
_116e.push({label:"ServerErrorsAggregateReactor",url:"/resources/ServerErrorsAggregateReactor.tmpl",substitutions:{}});
_117c.push({label:"ServerErrorsAggregateReactor",workspace:"reports",config:""});
_117d.push({from:"HTTPEventsFilterReactor",to:"ServerErrorsAggregateReactor"});
}
if(dojo.indexOf(pion.wizard.dashboards,"Performance")!=-1){
wizard_config.dashboards.push({url:"/resources/PerformanceDashboard.json"});
_116e.push({label:"PageViewEventsFilterReactor",url:"/resources/PageViewEventsFilterReactor.tmpl",substitutions:{}});
_117c.push({label:"PageViewEventsFilterReactor",workspace:"reports",config:""});
_117d.push({from:"ReportsAnchorFilterReactor",to:"PageViewEventsFilterReactor"});
_116e.push({label:"TotalPageViewsAggregateReactor",url:"/resources/TotalPageViewsAggregateReactor.tmpl",substitutions:{}});
_117c.push({label:"TotalPageViewsAggregateReactor",workspace:"reports",config:""});
_117d.push({from:"PageViewEventsFilterReactor",to:"TotalPageViewsAggregateReactor"});
_116e.push({label:"PageLoadTimeAggregateReactor",url:"/resources/PageLoadTimeAggregateReactor.tmpl",substitutions:{}});
_117c.push({label:"PageLoadTimeAggregateReactor",workspace:"reports",config:""});
_117d.push({from:"PageViewEventsFilterReactor",to:"PageLoadTimeAggregateReactor"});
_116e.push({label:"ServerReplyTimeAggregateReactor",url:"/resources/ServerReplyTimeAggregateReactor.tmpl",substitutions:{}});
_117c.push({label:"ServerReplyTimeAggregateReactor",workspace:"reports",config:""});
_117d.push({from:"HTTPEventsFilterReactor",to:"ServerReplyTimeAggregateReactor"});
_116e.push({label:"DataCenterTimeAggregateReactor",url:"/resources/DataCenterTimeAggregateReactor.tmpl",substitutions:{}});
_117c.push({label:"DataCenterTimeAggregateReactor",workspace:"reports",config:""});
_117d.push({from:"HTTPEventsFilterReactor",to:"DataCenterTimeAggregateReactor"});
}
this.applyTemplatesIfNeeded(wizard_config).addCallback(pion.widgets.Wizard.addWorkspacesFromWizard).addCallback(pion.widgets.Wizard.addReactorsFromWizard).addCallback(pion.widgets.Wizard.addConnectionsFromWizard).addCallback(pion.widgets.Wizard.addReplayIfNeeded).addCallback(pion.widgets.Wizard.startSniffer).addCallback(pion.setup_success_callback);
},applyTemplatesIfNeeded:function(_117f){
var dfd=new dojo.Deferred();
if(_117f.templates.length==0){
dfd.callback(_117f);
return dfd;
}
var _1180=dojo.map(_117f.reactors,function(item){
return item.label;
});
var _1181=0;
dojo.forEach(_117f.templates,function(_1182){
var index=dojo.indexOf(_1180,_1182.label);
if(_1182.is_json){
dojo.xhrGet({url:"/resources/"+_1182.plugin+".json",handleAs:"json",timeout:20000,load:function(_1183){
var _1184="<Plugin>"+_1182.plugin+"</Plugin>";
dojo.forEach(_1183.required_input,function(name){
_1184+="<"+name+">"+_1182.substitutions[name]+"</"+name+">";
});
for(var name in _1183.option_defaults){
if(dojo.indexOf(_1183.required_input,name)==-1){
_1184+="<"+name+">"+_1183.option_defaults[name]+"</"+name+">";
}
}
for(var name in _1183.value_defaults){
if(dojo.indexOf(_1183.required_input,name)==-1){
_1184+="<"+name+">"+_1183.value_defaults[name]+"</"+name+">";
}
}
for(var tag in _1183.multivalued_defaults){
var _1185=_1183.multivalued_defaults[tag].identifier;
var data=_1183.multivalued_defaults[tag].data;
for(var key in data){
_1184+="<"+tag+" "+_1185+"=\""+key+"\">"+data[key]+"</"+tag+">";
}
}
_117f.reactors[index].config+=_1184;
if(++_1181==_117f.templates.length){
dfd.callback(_117f);
}
return _1183;
},error:pion.handleXhrGetError});
}else{
dojo.xhrGet({url:_1182.url,handleAs:"text",timeout:20000,load:function(_1186){
var _1187=dojo.string.substitute(_1186,_1182.substitutions);
var _1188=_1187.replace(/>\s*/g,">");
_117f.reactors[index].config+=_1188;
if(++_1181==_117f.templates.length){
dfd.callback(_117f);
}
return _1186;
},error:pion.handleXhrGetError});
}
});
return dfd;
},back:function(){
if(this.selectedChildWidget.returnPane){
this.selectChild(dijit.byId(this.selectedChildWidget.returnPane));
}else{
this.selectChild(this._adjacent(false));
}
},placeholder:function(){
}});
pion.widgets.Wizard.exitEarly=function(){
pion.widgets.Wizard.switchToOuter();
pion.setup_success_callback();
};
pion.widgets.Wizard.switchToOuter=function(){
dojo.addClass("wizard","hidden");
dojo.removeClass("outer","hidden");
dijit.byId("main_stack_container").resize();
dojo.byId("current_user_menu_section").style.visibility="visible";
dojo.byId("current_user").innerHTML=dojo.cookie("user");
};
pion.widgets.Wizard.forbid=function(){
return false;
};
pion.widgets.Wizard.checkLicenseKey=function(){
var _1189="Pion "+pion.edition;
var key=dojo.byId("license_key_text_area").value;
if(key==""){
return "You must enter a valid license key to use "+_1189+".";
}
dojo.rawXhrPut({url:"/key",contentType:"text/plain",handleAs:"xml",putData:key,load:function(_118a){
pion.key_service_running=true;
pion.about.checkKeyStatusDfd().addCallback(function(_118b){
if(_118b=="invalid"){
dojo.byId("result_of_submitting_key").innerHTML="Invalid license key (may have expired).";
}else{
var _118c=dojo.map(_118a.getElementsByTagName("Product"),function(p){
return dojox.xml.parser.textContent(p);
});
if(dojo.indexOf(_118c,_1189)==-1){
dojo.byId("result_of_submitting_key").innerHTML="Error: Key not valid for "+_1189+".";
}else{
if(dojo.indexOf(_118c,"Pion Replay")!=-1){
pion.updateLicenseState("replay");
}else{
if(dojo.indexOf(_118c,"Pion Enterprise")!=-1){
pion.updateLicenseState("enterprise");
}else{
pion.updateLicenseState("lite");
}
}
dojo.byId("license_key_text_area").value="";
dijit.byId("wizard").selectChild(dijit.byId("license_acceptance_pane"));
}
}
});
return _118a;
},error:function(_118d,_118e){
dojo.byId("result_of_submitting_key").innerHTML="Error: Key not accepted.";
return _118d;
}});
return false;
};
pion.widgets.Wizard.prepareLicensePane=function(){
dijit.byId("license_accept_checkbox").attr("checked",false);
if(pion.edition=="Core"){
dojo.byId("atomic_enterprise_license").style.display="none";
dojo.byId("gpl_affero_license").style.display="block";
}else{
dojo.byId("atomic_enterprise_license").style.display="block";
dojo.byId("gpl_affero_license").style.display="none";
}
return true;
};
pion.widgets.Wizard.checkLicenseAccepted=function(){
if(dijit.byId("license_accept_checkbox").attr("checked")){
if(pion.edition=="Core"){
pion.widgets.Wizard.exitEarly();
}
return true;
}else{
return pion.wizard_nlsStrings.license_checkbox_not_checked_message;
}
};
pion.widgets.Wizard.prepareHostPane=function(){
if(!pion.widgets.Wizard.host_pane_initialized){
if(dojo.cookie("host_suffixes")){
dijit.byId("host_suffixes").attr("value",dojo.cookie("host_suffixes"));
}
pion.widgets.Wizard.host_pane_initialized=true;
}
};
pion.widgets.Wizard.getArrayFromCSVString=function(_118f){
var _1190=_118f.split(",");
var _1191=dojo.map(_1190,function(item){
return dojo.trim(item);
});
return dojo.filter(_1191,function(item){
return item!="";
});
};
pion.widgets.Wizard.checkHosts=function(){
var _1192=dijit.byId("host_suffixes").attr("value").split(",");
var _1193=dojo.map(_1192,function(item){
return dojo.trim(item);
});
pion.wizard.host_suffixes=dojo.filter(_1193,function(item){
return item!="";
});
if(pion.wizard.host_suffixes.length==0){
var _1194=dijit.byId("analytics_provider_pane");
_1194.returnPane="host_pane";
dijit.byId("wizard").selectChild(_1194);
return false;
}else{
return true;
}
};
pion.widgets.Wizard.prepareCookiePane=function(){
if(!pion.widgets.Wizard.cookie_pane_initialized){
if(dojo.cookie("visitor_cookies")){
dijit.byId("visitor_cookies").attr("value",dojo.cookie("visitor_cookies"));
}
if(dojo.cookie("session_cookies")){
dijit.byId("session_cookies").attr("value",dojo.cookie("session_cookies"));
}
pion.widgets.Wizard.cookie_pane_initialized=true;
}
};
pion.widgets.Wizard.checkCookies=function(){
pion.wizard.cookies=[];
var _1195=pion.widgets.Wizard.getArrayFromCSVString(dijit.byId("visitor_cookies").attr("value"));
dojo.forEach(_1195,function(_1196){
pion.wizard.cookies.push({name:_1196,is_visitor_cookie:true});
});
var _1197=pion.widgets.Wizard.getArrayFromCSVString(dijit.byId("session_cookies").attr("value"));
dojo.forEach(_1197,function(_1198){
pion.wizard.cookies.push({name:_1198,is_visitor_cookie:false});
});
return true;
};
pion.widgets.Wizard.prepareAnalyticsProviderPane=function(){
if(!pion.widgets.Wizard.analytics_provider_pane_initialized){
if(dojo.cookie("analytics_provider")){
dijit.byId("select_analytics_provider_form").attr("value",{analytics_provider:dojo.cookie("analytics_provider")});
}
pion.widgets.Wizard.analytics_provider_pane_initialized=true;
}
};
pion.widgets.Wizard.checkAnalyticsProvider=function(){
pion.wizard.analytics_provider=dijit.byId("select_analytics_provider_form").attr("value").analytics_provider;
switch(pion.wizard.analytics_provider){
case "Omniture":
pion.wizard.selectChild(dijit.byId("omniture_pane"));
pion.wizard.analytics_provider_label=pion.wizard_nlsStrings.omniture_label;
break;
case "Webtrends":
pion.wizard.selectChild(dijit.byId("webtrends_pane"));
pion.wizard.analytics_provider_label=pion.wizard_nlsStrings.webtrends_label;
break;
case "Google":
pion.wizard.selectChild(dijit.byId("google_pane"));
pion.wizard.analytics_provider_label=pion.wizard_nlsStrings.google_label;
break;
case "Unica":
pion.wizard.selectChild(dijit.byId("unica_pane"));
pion.wizard.analytics_provider_label=pion.wizard_nlsStrings.unica_label;
break;
default:
pion.wizard.selectChild(dijit.byId("capture_devices_pane"));
pion.wizard.analytics_provider_label="None";
break;
}
return false;
};
pion.widgets.Wizard.skipAnalyticsProvider=function(){
pion.wizard.analytics_provider="";
pion.wizard.selectChild(dijit.byId("capture_devices_pane"));
pion.wizard.analytics_provider_label="None";
return false;
};
pion.widgets.Wizard.prepareOmniturePane=function(){
if(!pion.widgets.Wizard.omniture_pane_initialized){
if(dojo.cookie("omniture_host")){
dijit.byId("omniture_host").attr("value",dojo.cookie("omniture_host"));
}
if(dojo.cookie("omniture_report_suite")){
dijit.byId("omniture_report_suite").attr("value",dojo.cookie("omniture_report_suite"));
}
if(dojo.cookie("strip_client_ip")){
dijit.byId("omniture_strip_cip_checkbox").attr("checked",dojo.cookie("strip_client_ip")=="true");
}
pion.widgets.Wizard.omniture_pane_initialized=true;
}
};
pion.widgets.Wizard.checkOmnitureConfig=function(){
pion.wizard.omniture_host=dojo.trim(dijit.byId("omniture_host").attr("value"));
pion.wizard.omniture_report_suite=dojo.trim(dijit.byId("omniture_report_suite").attr("value"));
if(pion.wizard.omniture_host==""){
return "You must specify a Host.";
}
if(pion.wizard.omniture_report_suite==""){
return "You must specify a Report Suite.";
}
pion.wizard.strip_client_ip=dijit.byId("omniture_strip_cip_checkbox").attr("checked")?"true":"false";
pion.wizard.selectChild(dijit.byId("capture_devices_pane"));
return false;
};
pion.widgets.Wizard.prepareWebtrendsPane=function(){
if(!pion.widgets.Wizard.webtrends_pane_initialized){
if(dojo.cookie("webtrends_account_id")){
dijit.byId("webtrends_account_id").attr("value",dojo.cookie("webtrends_account_id"));
}
if(dojo.cookie("webtrends_host")){
dijit.byId("webtrends_host").attr("value",dojo.cookie("webtrends_host"));
}
if(dojo.cookie("strip_client_ip")){
dijit.byId("webtrends_strip_cip_checkbox").attr("checked",dojo.cookie("strip_client_ip")=="true");
}
pion.widgets.Wizard.webtrends_pane_initialized=true;
}
};
pion.widgets.Wizard.checkWebtrendsConfig=function(){
pion.wizard.webtrends_account_id=dojo.trim(dijit.byId("webtrends_account_id").attr("value"));
pion.wizard.webtrends_host=dojo.trim(dijit.byId("webtrends_host").attr("value"));
if(pion.wizard.webtrends_account_id==""){
return "You must specify an Account ID.";
}
if(pion.wizard.webtrends_host==""){
return "You must specify a Host.";
}
pion.wizard.strip_client_ip=dijit.byId("webtrends_strip_cip_checkbox").attr("checked")?"true":"false";
pion.wizard.selectChild(dijit.byId("capture_devices_pane"));
return false;
};
pion.widgets.Wizard.prepareGooglePane=function(){
if(!pion.widgets.Wizard.google_pane_initialized){
if(dojo.cookie("google_account_id")){
dijit.byId("google_account_id").attr("value",dojo.cookie("google_account_id"));
}
if(dojo.cookie("strip_client_ip")){
dijit.byId("google_strip_cip_checkbox").attr("checked",dojo.cookie("strip_client_ip")=="true");
}
pion.widgets.Wizard.google_pane_initialized=true;
}
};
pion.widgets.Wizard.checkGoogleConfig=function(){
pion.wizard.google_account_id=dojo.trim(dijit.byId("google_account_id").attr("value"));
if(pion.wizard.google_account_id==""){
return "You must specify an Account ID.";
}
pion.wizard.strip_client_ip=dijit.byId("google_strip_cip_checkbox").attr("checked")?"true":"false";
pion.wizard.selectChild(dijit.byId("capture_devices_pane"));
return false;
};
pion.widgets.Wizard.prepareUnicaPane=function(){
if(!pion.widgets.Wizard.unica_pane_initialized){
if(dojo.cookie("unica_account_id")){
dijit.byId("unica_account_id").attr("value",dojo.cookie("unica_account_id"));
}
if(dojo.cookie("unica_host")){
dijit.byId("unica_host").attr("value",dojo.cookie("unica_host"));
}
if(dojo.cookie("strip_client_ip")){
dijit.byId("unica_strip_cip_checkbox").attr("checked",dojo.cookie("strip_client_ip")=="true");
}
pion.widgets.Wizard.unica_pane_initialized=true;
}
};
pion.widgets.Wizard.checkUnicaConfig=function(){
pion.wizard.unica_account_id=dojo.trim(dijit.byId("unica_account_id").attr("value"));
pion.wizard.unica_host=dojo.trim(dijit.byId("unica_host").attr("value"));
if(pion.wizard.unica_account_id==""){
return "You must specify a Site.";
}
if(pion.wizard.unica_host==""){
return "You must specify a Host.";
}
pion.wizard.strip_client_ip=dijit.byId("unica_strip_cip_checkbox").attr("checked")?"true":"false";
pion.wizard.selectChild(dijit.byId("capture_devices_pane"));
return false;
};
pion.widgets.Wizard.prepareCaptureDevicesPane=function(){
if(!pion.widgets.Wizard.capture_devices_pane_initialized){
var _1199="<PionConfig><Reactor>"+"<Plugin>SnifferReactor</Plugin>"+"<Workspace>dummy</Workspace>"+"<Protocol>"+pion.protocols.default_id+"</Protocol>"+"</Reactor></PionConfig>";
dojo.rawXhrPost({url:"/config/reactors",contentType:"text/xml",handleAs:"xml",postData:_1199,load:function(_119a){
var node=_119a.getElementsByTagName("Reactor")[0];
var id=node.getAttribute("id");
var _119b=new dojox.data.XmlStore({url:"/query/reactors/"+id+"/interfaces"});
var _119c=dojo.byId("device_list");
var _119d=dojo.cookie("selected_interfaces")?dojo.cookie("selected_interfaces").split(","):[];
_119b.fetch({query:{tagName:"Interface"},onItem:function(item){
var _119e=_119b.getValue(item,"Name");
var _119f=_119b.getValue(item,"Description");
if(!_119f){
_119f="";
}
var _11a0=document.createElement("div");
_119c.appendChild(_11a0);
var _11a1=(dojo.indexOf(_119d,_119e)!=-1);
new dijit.form.CheckBox({name:"device_check_boxes",value:_119e,checked:_11a1},_11a0);
var _11a2=dojo.create("span",{innerHTML:_119e});
dojo.addClass(_11a2,"device_name");
_119c.appendChild(_11a2);
_119c.appendChild(dojo.create("br"));
var _11a3=dojo.create("div",{innerHTML:_119f});
dojo.addClass(_11a3,"device_description");
_119c.appendChild(_11a3);
_119c.appendChild(dojo.create("br"));
pion.wizard.device_found=true;
},onComplete:function(){
device_list_standby.hide();
dojo.xhrDelete({url:"/config/reactors/"+id,handleAs:"xml",timeout:5000,load:function(_11a4,_11a5){
return _11a4;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
if(!pion.wizard.device_found){
_119c.innerHTML="Error: no capture devices found.  Pion must be run as the root/administrator user.";
}
pion.widgets.Wizard.capture_devices_pane_initialized=true;
}});
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_1199})});
}
};
pion.widgets.Wizard.checkCaptureDevices=function(){
if(!pion.wizard.device_found){
return "Error: no capture devices found.";
}
pion.wizard.devices=dijit.byId("device_list").attr("value").device_check_boxes;
if(pion.wizard.devices.length==0){
return "You must select at least one device.";
}
return true;
};
pion.widgets.Wizard.checkPorts=function(){
var _11a6=dijit.byId("port_list").attr("value");
pion.wizard.ports=pion.widgets.Wizard.getArrayFromCSVString(_11a6.ports);
if(pion.wizard.ports.length==0){
return "You must enter at least one port.";
}
return true;
};
pion.widgets.Wizard.checkSSLKeys=function(){
pion.wizard.ssl_keys=[];
pion.widgets.key_store.fetch({onItem:function(item){
var _11a7=pion.widgets.key_store.getValue(item,"Name");
pion.wizard.ssl_keys.push(_11a7);
},onComplete:function(){
if(pion.edition=="Lite"){
pion.widgets.Wizard.prepareSetupReview();
pion.wizard.selectChild(dijit.byId("review_setup"));
}else{
if(pion.edition=="Enterprise"){
pion.widgets.Wizard.prepareDashboardSelectionPane();
pion.wizard.selectChild(dijit.byId("dashboard_pane"));
}
}
},onError:pion.handleFetchError});
if(pion.edition=="Replay"){
return true;
}else{
return false;
}
};
pion.widgets.Wizard.prepareReplaySetupPane=function(){
if(!pion.widgets.Wizard.replay_setup_pane_initialized){
if(dojo.cookie("max_disk_usage")){
dijit.byId("replay_setup").attr("value",{max_disk_usage:dojo.cookie("max_disk_usage")});
}
pion.widgets.Wizard.replay_setup_pane_initialized=true;
}
};
pion.widgets.Wizard.checkReplaySetup=function(){
var _11a8=dijit.byId("replay_setup").attr("value");
if(_11a8.max_disk_usage<10){
return "Maximum disk usage must be at least 10 GB.";
}
pion.wizard.max_disk_usage=_11a8.max_disk_usage;
pion.widgets.Wizard.prepareDashboardSelectionPane();
return true;
};
pion.widgets.Wizard.prepareDashboardSelectionPane=function(){
if(!pion.widgets.Wizard.dashboard_pane_initialized){
if(dojo.cookie("sample_dashboards")!==undefined){
dijit.byId("dashboard_selection_form").attr("value",{dashboard_check_boxes:dojo.cookie("sample_dashboards").split(",")});
}
pion.widgets.Wizard.dashboard_pane_initialized=true;
}
};
pion.widgets.Wizard.checkDashboardSelection=function(){
pion.wizard.dashboards=dijit.byId("dashboard_selection_form").attr("value").dashboard_check_boxes;
dojo.cookie("sample_dashboards",pion.wizard.dashboards.join(","),{expires:5000});
pion.widgets.Wizard.prepareSetupReview();
return true;
};
pion.widgets.Wizard.prepareSetupReview=function(){
dojo.byId("setup_review_form_edition").innerHTML="Pion "+pion.edition;
dojo.byId("setup_review_form_web_site").innerHTML=pion.wizard.host_suffixes.join(", ");
dojo.byId("setup_review_form_web_analytics").innerHTML=pion.wizard.analytics_provider_label;
dojo.byId("setup_review_form_cookies").innerHTML=dojo.map(pion.wizard.cookies,function(item){
return item.name;
}).join(", ");
dojo.byId("setup_review_form_devices").innerHTML=pion.wizard.devices.join(", ");
dojo.byId("setup_review_form_ports").innerHTML=pion.wizard.ports.join(", ");
dojo.byId("setup_review_form_ssl_keys").innerHTML=pion.wizard.ssl_keys.join(", ");
dojo.byId("setup_review_form_replay_alloc").innerHTML=pion.wizard.max_disk_usage;
dojo.byId("setup_review_form_dashboards").innerHTML=pion.wizard.dashboards.join(", ");
};
pion.widgets.Wizard.deleteAllReactorsAndReload=function(_11a9){
var _11aa=0;
var _11ab=function(p){
return dojox.xml.parser.textContent(p);
};
dojo.cookie("analytics_provider","none",{expires:5000});
dojo.forEach(_11a9,function(_11ac){
var _11ad=dojo.map(_11ac.getElementsByTagName("Source"),_11ab);
if(_11ad.length&&_11ad[0]=="Wizard"){
var _11ae=dojox.xml.parser.textContent(_11ac.getElementsByTagName("Plugin")[0]);
switch(_11ae){
case "ClickstreamReactor":
var _11af=[];
var _11b0=[];
var _11b1=[];
var _11b2=_11ac.getElementsByTagName("SessionGroup");
for(i=0;i<_11b2.length&&_11b2[i].getAttribute("id")=="default";++i){
}
if(i<_11b2.length){
var _11b3=_11b2[i];
_11af=dojo.map(_11b3.getElementsByTagName("Host"),_11ab);
dojo.forEach(_11b3.getElementsByTagName("Cookie"),function(_11b4){
var type=_11b4.getAttribute("type");
if(type){
if(type.indexOf("s")!=-1){
_11b0.push(_11ab(_11b4));
}
if(type.indexOf("v")!=-1){
_11b1.push(_11ab(_11b4));
}
}
});
}
dojo.cookie("host_suffixes",_11af.join(", "),{expires:5000});
dojo.cookie("session_cookies",_11b0.join(", "),{expires:5000});
dojo.cookie("visitor_cookies",_11b1.join(", "),{expires:5000});
break;
case "OmnitureAnalyticsReactor":
dojo.cookie("analytics_provider","Omniture",{expires:5000});
dojo.cookie("omniture_host",_11ab(_11ac.getElementsByTagName("HttpHost")[0]));
dojo.cookie("omniture_report_suite",_11ab(_11ac.getElementsByTagName("AccountId")[0]));
dojo.cookie("strip_client_ip",_11ab(_11ac.getElementsByTagName("StripClientIP")[0]));
break;
case "WebTrendsAnalyticsReactor":
dojo.cookie("analytics_provider","Webtrends",{expires:5000});
dojo.cookie("webtrends_account_id",_11ab(_11ac.getElementsByTagName("AccountId")[0]));
dojo.cookie("webtrends_host",_11ab(_11ac.getElementsByTagName("HttpHost")[0]));
dojo.cookie("strip_client_ip",_11ab(_11ac.getElementsByTagName("StripClientIP")[0]));
break;
case "GoogleAnalyticsReactor":
dojo.cookie("analytics_provider","Google",{expires:5000});
dojo.cookie("google_account_id",_11ab(_11ac.getElementsByTagName("AccountId")[0]));
dojo.cookie("strip_client_ip",_11ab(_11ac.getElementsByTagName("StripClientIP")[0]));
break;
case "UnicaAnalyticsReactor":
dojo.cookie("analytics_provider","Unica",{expires:5000});
dojo.cookie("unica_account_id",_11ab(_11ac.getElementsByTagName("AccountId")[0]));
dojo.cookie("unica_host",_11ab(_11ac.getElementsByTagName("HttpHost")[0]));
dojo.cookie("strip_client_ip",_11ab(_11ac.getElementsByTagName("StripClientIP")[0]));
break;
case "SnifferReactor":
var _11b5=dojo.map(_11ac.getElementsByTagName("Interface"),_11ab);
dojo.cookie("selected_interfaces",_11b5.join(","),{expires:5000});
break;
case "MultiDatabaseReactor":
dojo.cookie("max_disk_usage",_11ab(_11ac.getElementsByTagName("MaxDiskUsage")[0]));
break;
}
}
var id=_11ac.getAttribute("id");
dojo.xhrDelete({url:"/config/reactors/"+id,handleAs:"xml",timeout:5000,load:function(_11b6,_11b7){
if(++_11aa==_11a9.length){
pion.widgets.Wizard.finishCleanupAndReload();
}
return _11b6;
},error:pion.getXhrErrorHandler(dojo.xhrDelete)});
});
};
pion.widgets.Wizard.deleteAllDashboards=function(){
var dfd=new dojo.Deferred();
var _11b8=dijit.byId("dashboard_service_tab");
if(_11b8){
_11b8.deleteAllDashboards().addCallback(function(){
dfd.callback();
});
}else{
dfd.callback();
}
return dfd;
};
pion.widgets.Wizard.finishCleanupAndReload=function(){
pion.widgets.Wizard.deleteAllDashboards().addCallback(function(){
pion.reactors.deleteAllWorkspaces();
}).addCallback(function(){
dojo.cookie("pion_edition","",{expires:-1});
location.replace("/");
});
};
pion.widgets.Wizard.restart=function(){
dojo.xhrGet({url:"/config/reactors",preventCache:true,handleAs:"xml",timeout:5000,load:function(_11b9,_11ba){
var _11bb=_11b9.getElementsByTagName("Reactor");
if(_11bb.length==0){
pion.widgets.Wizard.finishCleanupAndReload();
}else{
var _11bc=function(_11bd){
var dfd=new dojo.Deferred();
var _11be=dijit.byId("dashboard_service_tab");
if(_11be){
_11be.getNumDashboardPanes().addCallback(function(_11bf){
_11bd.num_dashboard_panes=_11bf;
dfd.callback(_11bd);
});
}else{
_11bd.num_dashboard_panes=0;
dfd.callback(_11bd);
}
return dfd;
};
pion.services.getConfiguredServices().addCallback(_11bc).addCallback(function(_11c0){
var _11c1=dojo.some(_11c0.configured_services,function(_11c2){
return _11c2.plugin=="ReplayService";
});
var _11c3=_11c0.num_dashboard_panes;
var _11c4="Warning: You currently have "+(_11bb.length==1?"one Reactor":_11bb.length+" Reactors")+((_11c1&&_11c3==0)?" and a Replay Service":"")+((_11c1&&_11c3==1)?", a Replay Service and one Dashboard chart":"")+((_11c1&&_11c3>1)?", a Replay Service and "+_11c3+" Dashboard charts":"")+((!_11c1&&_11c3==1)?" and one Dashboard chart":"")+((!_11c1&&_11c3>1)?" and "+_11c3+" Dashboard charts":"")+" configured.  If you continue, "+(_11bb.length==1&&!_11c1&&_11c3==0?"it ":"they ")+"will be deleted, and the Wizard will guide you through "+"creating a new configuration from scratch.  If you want to edit the configuration of a "+"particular Reactor, you can do so by double clicking on it in the Reactors "+"tab, or by editing reactors.xml.  "+(_11c1?"The Replay Service can be edited by editing services.xml.  ":"")+(_11c3>0?"Dashboards can be edited by editing dashboards.xml.  ":"")+"Do you want to delete your current Reactors"+((_11c1&&_11c3==0)?" and Replay Service":"")+((_11c1&&_11c3>0)?", Replay Service and Dashboard charts":"")+((!_11c1&&_11c3>0)?" and Dashboard charts":"")+" and continue to the Wizard?";
pion.doDeleteConfirmationDialog(_11c4,pion.widgets.Wizard.deleteAllReactorsAndReload,_11bb);
});
}
},error:pion.handleXhrGetError});
};
pion.widgets.Wizard.addWorkspacesFromWizard=function(_11c5){
var dfd=new dojo.Deferred();
var _11c6=0;
_11c5.workspace_ids={};
var _11c7="<PionConfig><Workspace><Name>";
dojo.forEach(_11c5.workspaces,function(_11c8){
var _11c9=_11c7+_11c8.name+"</Name></Workspace></PionConfig>";
dojo.rawXhrPost({url:"/config/workspaces",contentType:"text/xml",handleAs:"xml",postData:_11c9,load:function(_11ca){
var node=_11ca.getElementsByTagName("Workspace")[0];
_11c5.workspace_ids[_11c8.label]=node.getAttribute("id");
if(++_11c6==_11c5.workspaces.length){
dfd.callback(_11c5);
}
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_11c9})});
});
return dfd;
};
pion.widgets.Wizard.addReactorsFromWizard=function(_11cb){
var dfd=new dojo.Deferred();
if(_11cb.reactors.length==0){
dfd.callback(_11cb);
return dfd;
}
var _11cc=0;
_11cb.reactor_ids={};
var _11cd="<PionConfig><Reactor><Source>Wizard</Source><Workspace>";
dojo.forEach(_11cb.reactors,function(_11ce){
var _11cf=_11cb.workspace_ids[_11ce.workspace?_11ce.workspace:"clickstream"];
var _11d0=_11cd+_11cf+"</Workspace>"+_11ce.config+"</Reactor></PionConfig>";
dojo.rawXhrPost({url:"/config/reactors",contentType:"text/xml",handleAs:"xml",postData:_11d0,load:function(_11d1){
var node=_11d1.getElementsByTagName("Reactor")[0];
_11cb.reactor_ids[_11ce.label]=node.getAttribute("id");
if(++_11cc==_11cb.reactors.length){
dfd.callback(_11cb);
}
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_11d0})});
});
return dfd;
};
pion.widgets.Wizard.addConnectionsFromWizard=function(_11d2){
var dfd=new dojo.Deferred();
if(_11d2.connections.length==0){
dfd.callback(_11d2);
}
var _11d3=0;
dojo.forEach(_11d2.connections,function(_11d4){
var _11d5="<PionConfig><Connection><Type>reactor</Type>"+"<From>"+_11d2.reactor_ids[_11d4.from]+"</From>"+"<To>"+_11d2.reactor_ids[_11d4.to]+"</To>"+"</Connection></PionConfig>";
dojo.rawXhrPost({url:"/config/connections",contentType:"text/xml",handleAs:"xml",postData:_11d5,load:function(_11d6){
if(++_11d3==_11d2.connections.length){
dfd.callback(_11d2);
}
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_11d5})});
});
return dfd;
};
pion.widgets.Wizard.addReplayIfNeeded=function(_11d7){
var dfd=new dojo.Deferred();
if(pion.edition!="Replay"){
dfd.callback(_11d7);
return dfd;
}
var _11d8="<Name>Replay Query Service</Name>"+"<Comment>Pion Replay query service</Comment>"+"<Plugin>ReplayService</Plugin>"+"<Resource>/replay</Resource>"+"<Server>main-server</Server>"+"<Namespace id=\"0\">"+"<Comment>Default Instance</Comment>"+"<MultiDatabaseOutputReactor>"+_11d7.reactor_ids["mdr"]+"</MultiDatabaseOutputReactor>"+"</Namespace>";
var _11d9="<PionConfig><PlatformService>"+_11d8+"</PlatformService></PionConfig>";
dojo.rawXhrPost({url:"/config/services",contentType:"text/xml",handleAs:"xml",postData:_11d9,load:function(_11da){
var node=_11da.getElementsByTagName("PlatformService")[0];
dfd.callback(_11d7);
return _11da;
},error:pion.getXhrErrorHandler(dojo.rawXhrPost,{postData:_11d9})});
return dfd;
};
pion.widgets.Wizard.startSniffer=function(_11db){
var dfd=new dojo.Deferred();
dojo.xhrPut({url:"/config/reactors/"+_11db.reactor_ids["sniffer"]+"/start",load:function(_11dc){
dfd.callback(_11db);
return _11dc;
},error:pion.getXhrErrorHandler(dojo.xhrPut)});
return dfd;
};
}
if(!dojo._hasResource["pion.widgets.EditionSelector"]){
dojo._hasResource["pion.widgets.EditionSelector"]=true;
dojo.provide("pion.widgets.EditionSelector");
function popitup(url){
newwindow=window.open(url,"Pion Features Matrix","height=500, width=800");
if(window.focus){
newwindow.focus();
}
return false;
};
dojo.declare("pion.widgets.EditionSelectorForm",[dijit.form.Form],{templateString:"<div dojoAttachPoint='containerNode' style=\"margin-left: 20px;\">\r\n\t<form dojoAttachPoint=\"form\" dojoType=\"dijit.form.Form\">\r\n\t\t<table width=\"600\" style=\"font-size: 12px;\">\r\n\t\t\t<tr>\r\n\t\t\t\t<td width=\"50%\">\r\n\t\t\t\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" class=\"edition_button lite\" dojoAttachEvent=\"onClick: liteEditionSelected\"></button>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t${pion_lite_description}\r\n\t\t\t\t</td><td width=\"70\">\r\n\t\t\t\t\t<img src=\"images/spacer.png\" width=\"70\" height=\"1\">\r\n\t\t\t\t</td><td width=\"50%\">\r\n\t\t\t\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" class=\"edition_button enterprise\" dojoAttachEvent=\"onClick: enterpriseEditionSelected\"></button>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t${pion_enterprise_description} <img src=\"/images/key.png\">\r\n\t\t\t\t</td>\r\n\t\t\t</tr><tr>\r\n\t\t\t\t<td width=\"50%\">\r\n\t\t\t\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" class=\"edition_button core\" dojoAttachEvent=\"onClick: coreEditionSelected\"></button>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t${pion_core_description}\r\n\t\t\t\t</td><td width=\"70\">\r\n\t\t\t\t\t<img src=\"images/spacer.png\" width=\"70\" height=\"1\">\r\n\t\t\t\t</td><td width=\"50%\">\r\n\t\t\t\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" class=\"edition_button replay\" dojoAttachEvent=\"onClick: replayEditionSelected\"></button>\r\n\t\t\t\t\t<br />\r\n\t\t\t\t\t${pion_replay_description} <img src=\"/images/key.png\">\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</table>\r\n\r\n\t\t<p style=\"font-size: 11px;\"><a href=\"features-matrix.html\" onclick=\"return popitup('features-matrix.html')\">Compare features (pop up)</a></p>\r\n\r\n\t\t<p class=\"wizard_key_link\"><img src=\"/images/key.png\"> Requires trial or commercial license key from Atomic Labs. <a href=\"http://www.atomiclabs.com/pion/trial-license.php\" target=\"_blank\" style=\"font-size: 11px;\">Click here to obtain a new license key</a></p>\r\n\t</form>\r\n</div>\r\n",widgetsInTemplate:true,postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
var _11dd=dojo.i18n.getLocalization("pion","wizard");
dojo.mixin(this,_11dd);
},postCreate:function(){
this.inherited("postCreate",arguments);
dojo.connect(this,"hide",this,"destroyRecursive");
this.set("value",{edition:""});
},coreEditionSelected:function(){
pion.edition="Core";
dojo.cookie("pion_edition",pion.edition,{expires:5000});
pion.wizard.selectChild(dijit.byId("license_acceptance_pane"));
},liteEditionSelected:function(){
pion.edition="Lite";
dojo.cookie("pion_edition",pion.edition,{expires:5000});
pion.wizard.selectChild(dijit.byId("license_acceptance_pane"));
},replayEditionSelected:function(){
if(!pion.key_service_running){
alert(pion.wizard_nlsStrings.edition_disabled_because_key_service_not_running);
var form=dijit.byId("select_edition_form");
form.set("value",{edition:""});
return;
}
pion.about.checkKeyStatusDfd().addBoth(function(_11de){
pion.edition="Replay";
dojo.cookie("pion_edition","replay",{expires:5000});
if(_11de!="replay"){
pion.wizard.selectChild(dijit.byId("license_key_pane"));
}else{
pion.wizard.selectChild(dijit.byId("license_acceptance_pane"));
}
});
},enterpriseEditionSelected:function(){
if(!pion.key_service_running){
alert(pion.wizard_nlsStrings.edition_disabled_because_key_service_not_running);
var form=dijit.byId("select_edition_form");
form.set("value",{edition:""});
return;
}
pion.about.checkKeyStatusDfd().addBoth(function(_11df){
pion.edition="Enterprise";
dojo.cookie("pion_edition","enterprise",{expires:5000});
if(_11df!="replay"&&_11df!="enterprise"){
pion.wizard.selectChild(dijit.byId("license_key_pane"));
}else{
pion.wizard.selectChild(dijit.byId("license_acceptance_pane"));
}
});
}});
dojo.declare("pion.widgets.EditionSelectorDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog edition_selector_dialog\" style=\"width: 600px\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" tabindex=\"0\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Please Select an Edition</span>\r\n\t</div>\r\n\t<div dojoAttachPoint='containerNode'>\r\n\t\t<form dojoAttachPoint=\"form\" dojoType=\"dijit.form.Form\">\r\n\t\t\t<table width=\"630\" style=\"font-size: 11px;\">\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td width=\"50%\">\r\n\t\t\t\t\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" class=\"edition_button lite\" dojoAttachEvent=\"onClick: liteEditionSelected\"></button>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t${pion_lite_description}\r\n\t\t\t\t\t</td><td width=\"70\">\r\n\t\t\t\t\t\t<img src=\"images/spacer.png\" width=\"70\" height=\"1\">\r\n\t\t\t\t\t</td><td width=\"50%\">\r\n\t\t\t\t\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" class=\"edition_button enterprise\" dojoAttachEvent=\"onClick: enterpriseEditionSelected\"></button>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t${pion_enterprise_description} <img src=\"/images/key.png\">\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr><tr>\r\n\t\t\t\t\t<td colspan=\"3\" height=\"15\">\r\n\t\t\t\t\t\t<img src=\"images/spacer.png\" width=\"1\" height=\"15\">\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr><tr>\r\n\t\t\t\t\t<td width=\"50%\">\r\n\t\t\t\t\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" class=\"edition_button core\" dojoAttachEvent=\"onClick: coreEditionSelected\"></button>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t${pion_core_description}\r\n\t\t\t\t\t</td><td width=\"70\">\r\n\t\t\t\t\t\t<img src=\"images/spacer.png\" width=\"70\" height=\"1\">\r\n\t\t\t\t\t</td><td width=\"50%\">\r\n\t\t\t\t\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" class=\"edition_button replay\" dojoAttachEvent=\"onClick: replayEditionSelected\"></button>\r\n\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t${pion_replay_description} <img src=\"/images/key.png\">\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</table>\r\n\t\t</form>\r\n\t</div>\r\n</div>\r\n",widgetsInTemplate:true,postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
var _11e0=dojo.i18n.getLocalization("pion","wizard");
dojo.mixin(this,_11e0);
},postCreate:function(){
this.inherited("postCreate",arguments);
var _11e1=this;
},handleSelection:function(){
dojo.cookie("pion_edition",pion.edition,{expires:5000});
dojo.removeClass("outer","hidden");
dijit.byId("main_stack_container").resize();
dojo.byId("current_user_menu_section").style.visibility="visible";
dojo.byId("current_user").innerHTML=dojo.cookie("user");
pion.terms.init();
pion.services.init();
this.hide();
},coreEditionSelected:function(){
pion.edition="Core";
this.handleSelection();
},liteEditionSelected:function(){
pion.edition="Lite";
this.handleSelection();
},enterpriseEditionSelected:function(){
if(!pion.key_service_running){
alert(pion.wizard_nlsStrings.edition_disabled_because_key_service_not_running);
return;
}
var title="Please enter your Pion Enterprise license key";
var _11e2=new pion.widgets.LicenseKeyDialog({title:title,requested_product:"Pion Enterprise"});
_11e2.show();
var _11e3=this;
_11e2.callback=function(_11e4){
if(_11e4){
pion.edition="Enterprise";
_11e3.handleSelection();
}
};
},replayEditionSelected:function(){
if(!pion.key_service_running){
alert(pion.wizard_nlsStrings.edition_disabled_because_key_service_not_running);
return;
}
var title="Please enter your Pion Replay license key";
var _11e5=new pion.widgets.LicenseKeyDialog({title:title,requested_product:"Pion Replay"});
_11e5.show();
var _11e6=this;
_11e5.callback=function(_11e7){
if(_11e7){
pion.edition="Replay";
_11e6.handleSelection();
}
};
}});
}
if(!dojo._hasResource["pion.widgets.MainTabController"]){
dojo._hasResource["pion.widgets.MainTabController"]=true;
dojo.provide("pion.widgets.MainTabController");
dojo.declare("pion.widgets.MainTabController",dijit.layout.ScrollingTabController,{buildRendering:function(){
this.dir="rtl";
this.inherited(arguments);
}});
}
if(!dojo._hasResource["pion.widgets.ReactorConfigTab"]){
dojo._hasResource["pion.widgets.ReactorConfigTab"]=true;
dojo.provide("pion.widgets.ReactorConfigTab");
dojo.declare("pion.widgets.ReactorConfigTab",[dijit.layout.ContentPane,dijit._Templated],{templateString:dojo.cache("pion.widgets","templates/ReactorConfigTab.html","<div dojoAttachPoint='containerNode' dir=\"ltr\">\r\n\t<div dojoType=\"dijit.layout.BorderContainer\" gutters=\"false\" design=\"sidebar\">\r\n\t\t<!-- start left sidebar -->\r\n\t\t<div id=\"side\" dojoType=\"dijit.layout.BorderContainer\" region=\"left\" style=\"overflow: hidden\" gutters=\"false\">\r\n\t\t\t<div dojoType=\"dijit.layout.BorderContainer\" gutters=\"false\" region=\"center\">\r\n\t\t\t\t<div id=\"sidebarTop\" dojoType=\"dijit.layout.ContentPane\" region=\"top\">\r\n\t\t\t\t\t<div class=\"sidebarHeader\">Reactor Types</div>\r\n\t\t\t\t\t<div class=\"sidebarInstructions\">\r\n\t\t\t\t\t\tDrag reactors onto Workspace\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id=\"sidebarMain\" dojoType=\"dijit.layout.AccordionContainer\" class=\"sidebar\" duration=\"200\" region=\"center\">\r\n\t\t\t\t\t<div dojoType=\"dijit.layout.ContentPane\" class=\"collection\" selected=\"true\" title=\"Collection Reactors\">\r\n\t\t\t\t\t\t<div jsId=\"collectionReactors\" dojoType=\"dojo.dnd.Source\" class=\"reactorBucket\" copyOnly=\"true\" accept=\"nothing\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div dojoType=\"dijit.layout.ContentPane\" class=\"processing\" title=\"Processing Reactors\">\r\n\t\t\t\t\t\t<div jsId=\"processingReactors\" dojoType=\"dojo.dnd.Source\" class=\"reactorBucket\" copyOnly=\"true\" accept=\"nothing\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div dojoType=\"dijit.layout.ContentPane\" class=\"storage\" title=\"Storage Reactors\">\r\n\t\t\t\t\t\t<div jsId=\"storageReactors\" dojoType=\"dojo.dnd.Source\" class=\"reactorBucket\" copyOnly=\"true\" accept=\"nothing\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div id=\"accordion_padding\" dojoType=\"dijit.layout.ContentPane\" region=\"bottom\">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div id=\"sidebarBottom\" dojoType=\"dijit.layout.ContentPane\" region=\"bottom\">\r\n\t\t\t\t<div class=\"sidebarHeader\">Connect Reactors</div>\r\n\t\t\t\t<div class=\"sidebarInstructions\">\r\n\t\t\t\t\tDrag to connect Reactors\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"sidebar\">\r\n\t\t\t\t\t<div dojoType=\"dojo.dnd.Source\" class=\"connectorBucket\" copyOnly=\"true\">\r\n\t\t\t\t\t\t<div class=\"dojoDndItem\" dndType=\"connector\" reactor_type=\"connector\"><img src=\"images/icon-connector.png\" width=\"148\" height=\"25\" alt=\"Connector\" /></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<!-- end left sidebar -->\r\n\r\n\t\t<div id=\"workspace_config_header\" dojoType=\"dijit.layout.ContentPane\" region=\"top\">\r\n\t\t\t<div dojoType=\"pion.widgets.MainStackContentHeader\" title=\"Reactor Configuration\" help=\"plugins/reactors/getting_started\"></div>\r\n\t\t</div>\r\n\r\n\t\t<!-- start tabbed workspaces -->\r\n\t\t<div id=\"reactor_config_content\" class=\"config_content\" dojoType=\"dijit.layout.ContentPane\" region=\"center\">\r\n\t\t\t<div id=\"mainTabContainer\" dojoType=\"dijit.layout.TabContainer\" tabPosition=\"bottom\" style=\"height: 100%\">\r\n\t\t\t\t<div id=\"new_workspace_tab\" dojoType=\"dijit.layout.ContentPane\" title=\"Add new workspace\">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t<div id=\"counterBackground\">\r\n\t\t\t<span class=\"counterTitle\">Operations per Second</span>\r\n\t\t\t<span class=\"counterNumbersLeft\">\r\n\t\t\t\tGlobal:<br />\r\n\t\t\t\tWorkspace:\r\n\t\t\t</span><span class=\"counterNumbersRight\">\r\n\t\t\t\t<span id=\"global_ops\"></span><br />\r\n\t\t\t\t<span id=\"workspace_ops\"></span>\r\n\t\t\t</span><span class=\"counterToggle\"><button id=\"ops_toggle_button\" dojoType=dijit.form.ToggleButton></button></span>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t<!-- end tabbed workspaces -->\r\n\t</div>\r\n</div>\r\n\r\n"),postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
}});
}
if(!dojo._hasResource["pion.widgets.SystemConfigTab"]){
dojo._hasResource["pion.widgets.SystemConfigTab"]=true;
dojo.provide("pion.widgets.SystemConfigTab");
dojo.declare("pion.widgets.SystemConfigTab",[dijit.layout.ContentPane,dijit._Templated],{templateString:dojo.cache("pion.widgets","templates/SystemConfigTab.html","<div dojoAttachPoint='containerNode' dir=\"ltr\">\r\n\t<div dojoType=\"dijit.layout.BorderContainer\" gutters=\"false\">\r\n\t\t<div dojoType=\"dijit.layout.ContentPane\" region=\"top\">\r\n\t\t\t<div dojoType=\"pion.widgets.MainStackContentHeader\" title=\"System Configuration\"></div>\r\n\t\t</div>\r\n\t\t<div dojoType=\"dijit.layout.ContentPane\" region=\"left\" style=\"width: 50%; padding: 10px;\" splitter=\"true\" minSize=\"100\">\r\n\t\t\t<div dojoType=\"pion.widgets.MainStackContentHeader\" class=\"nested\" title=\"Configuration Files\"></div>\r\n\t\t\t<hr />\r\n\t\t\t<table cellpadding=\"5\" border=\"0\" class=\"pathsTable\" width=\"100%\">\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td align=\"right\" width=\"80px\"><label>Platform</label></td>\r\n\t\t\t\t\t<td id=\"platform_conf_file\">your/path/here/PlatformConfigFile.xml</td>\r\n\t\t\t\t</tr><tr>\r\n\t\t\t\t\t<td align=\"right\"><label>Reactors</label></td>\r\n\t\t\t\t\t<td id=\"reactor_conf_file\">your/path/here/ReactorsConfigFile.xml</td>\r\n\t\t\t\t</tr><tr>\r\n\t\t\t\t\t<td align=\"right\"><label>Vocabularies</label></td>\r\n\t\t\t\t\t<td id=\"vocab_conf_file\">your/path/here/VocabulariesConfigFile.xml</td>\r\n\t\t\t\t</tr><tr>\r\n\t\t\t\t\t<td align=\"right\"><label>Codecs</label></td>\r\n\t\t\t\t\t<td id=\"codec_conf_file\">your/path/here/CodecsConfigFile.xml</td>\r\n\t\t\t\t</tr><tr>\r\n\t\t\t\t\t<td align=\"right\"><label>Databases</label></td>\r\n\t\t\t\t\t<td id=\"database_conf_file\">your/path/here/DatabasesConfigFile.xml</td>\r\n\t\t\t\t</tr><tr>\r\n\t\t\t\t\t<td align=\"right\"><label>Protocols</label></td>\r\n\t\t\t\t\t<td id=\"protocol_conf_file\">your/path/here/ProtocolsConfigFile.xml</td>\r\n\t\t\t\t</tr><tr>\r\n\t\t\t\t\t<td align=\"right\"><label>Users</label></td>\r\n\t\t\t\t\t<td id=\"user_conf_file\">your/path/here/UsersConfigFile.xml</td>\r\n\t\t\t\t</tr><tr>\r\n\t\t\t\t\t<td align=\"right\"><label>Services</label></td>\r\n\t\t\t\t\t<td id=\"service_conf_file\">your/path/here/ServicesConfigFile.xml</td>\r\n\t\t\t\t</tr><tr>\r\n\t\t\t\t\t<td align=\"right\"><label>Logging</label></td>\r\n\t\t\t\t\t<td id=\"log_conf_file\">your/path/here/logconfig.txt</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</table>\r\n\t\t\t<br />\r\n\t\t\t<button dojoType=\"dijit.form.Button\" class=\"content_button\" onClick=\"pion.system.importXMLConfiguration\">Import XML Configuration</button>\r\n\t\t\t<br />\r\n\t\t\t<h2>Configuration Paths</h2>\r\n\t\t\t<hr />\r\n\t\t\t<table cellpadding=\"5\" border=\"0\" class=\"pathsTable\" width=\"100%\">\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td align=\"right\" width=\"80px\"><label>Vocabularies</label></td>\r\n\t\t\t\t\t<td id=\"vocab_path\">your/path/here/VocabularyPath</td>\r\n\t\t\t\t</tr><tr>\r\n\t\t\t\t\t<td align=\"right\" width=\"80px\"><label>Data Directory</label></td>\r\n\t\t\t\t\t<td id=\"data_directory\">your/path/here/DataDirectory</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</table>\r\n\t\t\t<br />\r\n\t\t\t<h2>Plugin Paths</h2>\r\n\t\t\t<hr />\r\n\t\t\t<table id=\"plugin_paths\" cellpadding=\"5\" border=\"0\" class=\"pathsTable\" width=\"100%\">\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td align=\"right\" width=\"80px\"><label>Plugin 1</label></td>\r\n\t\t\t\t\t<td>your/path/here/PluginPath</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</table>\r\n\t\t</div>\r\n\t\t<div id=\"services_pane\" dojoType=\"dijit.layout.ContentPane\" region=\"center\" minSize=\"100\">\r\n\t\t\t<div dojoType=\"pion.widgets.MainStackContentHeader\" class=\"nested\" title=\"Services\" help=\"plugins/services\"></div>\r\n\t\t\t<hr/>\r\n\t\t\t<!-- relevant class names start with dijitTree (e.g., in tundra.css) -->\r\n\t\t\t<div id=\"server_tree\"></div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n"),postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
}});
}
if(!dojo._hasResource["pion.widgets.ConfigAccordionTab"]){
dojo._hasResource["pion.widgets.ConfigAccordionTab"]=true;
dojo.provide("pion.widgets.ConfigAccordionTab");
dojo.declare("pion.widgets.ConfigAccordionTab",[dijit.layout.ContentPane,dijit._Templated],{templateString:dojo.cache("pion.widgets","templates/ConfigAccordionTab.html","<div dojoAttachPoint='containerNode' dir=\"ltr\">\r\n\t<div dojoType=\"pion.widgets.MainStackContentHeader\" title=\"${header}\" help=\"${help}\"></div>\r\n\t<div class=\"config_content\">\r\n\t\t<div id=\"${id}_accordion\" dojoType=\"pion.widgets.ConfigAccordion\">\r\n\t\t\t<div dojoType=\"dijit.layout.ContentPane\"></div>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<button dojoAttachPoint=\"button\" dojoType=dijit.form.Button class=\"add_new_pane\">${button}</button>\r\n\t\t</div>\r\n\t</div>\r\n\t<div id=\"${id}_end\"></div>\r\n</div>\r\n"),postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
},widgetsInTemplate:true,postCreate:function(){
this.inherited("postCreate",arguments);
}});
}
dojo.registerModulePath("pion","/scripts");
dojo.registerModulePath("plugins","/plugins");
var reactor_config_page_initialized=false;
var vocab_config_page_initialized=false;
var codec_config_page_initialized=false;
var database_config_page_initialized=false;
var protocol_config_page_initialized=false;
var user_config_page_initialized=false;
var system_config_page_initialized=false;
var firefox_on_mac;
dojo.declare("pion.DeleteConfirmationDialog",[dijit.Dialog],{templateString:"<div class=\"dijitDialog delete_dialog\">\r\n\t<div dojoAttachPoint=\"titleBar\" class=\"dijitDialogTitleBar\" waiRole=\"dialog\">\r\n\t\t<span dojoAttachPoint=\"titleNode\" class=\"dijitDialogTitle\">Delete Confirmation</span>\r\n\t</div>\r\n\t<div dojoAttachPoint=\"containerNode\" class=\"dijitDialogPaneContent\"\r\n\t\t><img src=\"images/pion-alert.png\" width=\"66\" height=\"60\" alt=\"Alert\" class=\"alert\"\r\n\t\t><div id=\"are_you_sure\" class=\"warning_text\"></div\r\n\t\t><div class=\"save_cancel_delete\"\r\n\t\t\t><button dojoType=dijit.form.Button class=\"cancel\" dojoAttachEvent=\"onClick: onCancel\">Cancel</button\r\n\t\t\t><button dojoType=dijit.form.Button class=\"delete\" dojoAttachPoint=\"delete_button\">Delete</button\r\n\t\t></div\r\n\t></div>\r\n</div>\r\n",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
if(this.templatePath){
this.templateString="";
}
},widgetsInTemplate:true});
pion.doDeleteConfirmationDialog=function(_11e8,_11e9,_11ea){
var _11eb=pion.delete_confirmation_dialog;
if(!_11eb){
_11eb=new pion.DeleteConfirmationDialog();
pion.delete_confirmation_dialog=_11eb;
}
dojo.byId("are_you_sure").innerHTML=_11e8;
_11eb.delete_button.onClick=function(){
_11eb.onCancel();
_11e9(_11ea);
};
_11eb.show();
};
pion.initOptionalValue=function(store,item,_11ec,_11ed,_11ee){
if(store.hasAttribute(item,_11ed)){
_11ec[_11ed]=store.getValue(item,_11ed);
}else{
if(_11ee!==undefined){
_11ec[_11ed]=_11ee;
}
}
};
pion.config_tab_table=[{permission_type:"Reactors",widget:"ReactorConfigTab",params:{id:"reactor_config",title:"Reactors"}},{permission_type:"Vocabularies",widget:"ConfigAccordionTab",params:{id:"vocab_config",title:"Vocabularies",header:"Vocabulary Configuration",help:"docs/vocabularies",button:"ADD A NEW VOCABULARY"}},{permission_type:"Codecs",widget:"ConfigAccordionTab",params:{id:"codec_config",title:"Codecs",header:"Codec Configuration",help:"plugins/codecs",button:"ADD A NEW CODEC"}},{permission_type:"Databases",widget:"ConfigAccordionTab",params:{id:"database_config",title:"Databases",header:"Database Configuration",help:"plugins/databases",button:"ADD A NEW DATABASE"}},{permission_type:"Protocols",widget:"ConfigAccordionTab",params:{id:"protocol_config",title:"Protocols",header:"Protocol Configuration",help:"plugins/protocols",button:"ADD A NEW PROTOCOL"}},{permission_type:"Admin",widget:"ConfigAccordionTab",params:{id:"user_config",title:"Users",header:"User Configuration",help:"docs/users",button:"ADD A NEW USER"}},{permission_type:"Admin",widget:"SystemConfigTab",params:{id:"system_config",title:"System"}}];
pion.initTabs=function(){
var _11ef=dijit.byId("main_stack_container");
_11ef.selectChild=function(page,_11f0){
if(!dijit.byId(page).controlButton.disabled){
this.inherited("selectChild",arguments);
}
};
var _11f1=plugins.services.num_rightmost_tabs_added||0;
dojo.forEach(pion.config_tab_table,function(entry){
if("Admin" in pion.permissions_object||entry.permission_type in pion.permissions_object){
var _11f2=dojo.getObject("pion.widgets."+entry.widget);
_11ef.addChild(new _11f2(entry.params),_11f1);
}
});
var tabs=_11ef.getChildren();
if(tabs.length>0){
var _11f3=function(tabs,i){
var dfd=new dojo.Deferred();
if(i==0){
dfd.callback(tabs[tabs.length-1]);
}
if("isEmpty" in tabs[i]){
tabs[i].isEmpty().addCallback(function(_11f4){
if(_11f4){
_11f3(tabs,i-1).addCallback(function(tab){
dfd.callback(tab);
});
}else{
dfd.callback(tabs[i]);
}
});
}else{
dfd.callback(tabs[i]);
}
return dfd;
};
_11f3(tabs,tabs.length-1).addCallback(function(tab){
_11ef.selectChild(tab);
configPageSelected(tab);
});
}else{
alert("There are no access rights defined for this user account.  You may need to update your users.xml file.");
}
init_services_standby.hide();
dojo.subscribe("main_stack_container-selectChild",configPageSelected);
if("Admin" in pion.permissions_object&&pion.key_service_running){
dojo.byId("wizard_menu_section").style.visibility="visible";
}
};
pion.updateLicenseState=function(_11f5){
pion.license_state=_11f5;
pion.updateLogo(_11f5);
};
pion.updateLogo=function(_11f6){
var _11f7=dojo.byId("logo");
dojo.query("p.logo",_11f7).forEach(function(n){
if(dojo.hasClass(n,_11f6)){
dojo.removeClass(n,"hidden");
}else{
dojo.addClass(n,"hidden");
}
});
};
pion.setup_success_callback=function(_11f8){
pion.terms.init();
pion.services.init(_11f8);
};
pion.editionSetup=function(_11f9){
dojo.xhrGet({url:"/config/reactors",preventCache:true,handleAs:"xml",timeout:5000,load:function(_11fa,_11fb){
dojo.cookie("logged_in","true",{expires:1});
pion.last_logged_in_user=dojo.cookie("user");
var _11fc=_11fa.getElementsByTagName("Reactor");
if(!pion.key_service_running){
dojo.removeClass("outer","hidden");
dijit.byId("main_stack_container").resize();
dojo.byId("current_user_menu_section").style.visibility="visible";
dojo.byId("current_user").innerHTML=dojo.cookie("user");
pion.setup_success_callback();
}else{
if(_11fc.length>0||dojo.cookie("pion_edition")){
if(_11f9=="invalid"&&dojo.cookie("pion_edition")!="Core"&&dojo.cookie("pion_edition")!="Lite"){
var _11fd=new pion.widgets.EditionSelectorDialog;
_11fd.show();
}else{
dojo.removeClass("outer","hidden");
dijit.byId("main_stack_container").resize();
dojo.byId("current_user_menu_section").style.visibility="visible";
dojo.byId("current_user").innerHTML=dojo.cookie("user");
pion.setup_success_callback();
}
}else{
var _11fe=dijit.byId("wizard");
_11fe.start(_11f9);
}
}
},error:function(_11ff,_1200){
pion.handleXhrGetError();
}});
};
pion.checkKeyService=function(){
pion.about.checkKeyStatusDfd().addCallback(function(_1201){
pion.editionSetup(_1201);
});
};
var init=function(){
firefox_on_mac=navigator.userAgent.indexOf("Mac")>=0&&navigator.userAgent.indexOf("Firefox")>=0;
pion.checkKeyService();
};
dojo.addOnLoad(init);
function configPageSelected(page){
pion.current_page=page;
if(page.id=="reactor_config"){
if(reactor_config_page_initialized){
pion.reactors.reselectCurrentWorkspace();
dijit.byId("main_stack_container").resize({h:pion.reactors.getHeight()});
}else{
pion.reactors.init();
reactor_config_page_initialized=true;
}
}else{
if(page.id=="vocab_config"){
if(vocab_config_page_initialized){
dijit.byId("main_stack_container").resize({h:pion.vocabularies.getHeight()});
}else{
pion.vocabularies.init();
vocab_config_page_initialized=true;
}
}else{
if(page.id=="codec_config"){
if(codec_config_page_initialized){
pion.codecs._adjustAccordionSize();
dijit.byId("main_stack_container").resize({h:pion.codecs.getHeight()});
}else{
pion.codecs.init();
codec_config_page_initialized=true;
}
}else{
if(page.id=="database_config"){
if(database_config_page_initialized){
pion.databases._adjustAccordionSize();
dijit.byId("main_stack_container").resize({h:pion.databases.getHeight()});
}else{
pion.databases.init();
database_config_page_initialized=true;
}
}else{
if(page.id=="protocol_config"){
if(protocol_config_page_initialized){
pion.protocols._adjustAccordionSize();
dijit.byId("main_stack_container").resize({h:pion.protocols.getHeight()});
}else{
pion.protocols.init();
protocol_config_page_initialized=true;
}
}else{
if(page.id=="user_config"){
if(user_config_page_initialized){
dijit.byId("main_stack_container").resize({h:pion.users.getHeight()});
}else{
pion.users.init();
user_config_page_initialized=true;
}
}else{
if(page.id=="system_config"){
if(system_config_page_initialized){
dijit.byId("main_stack_container").resize({h:pion.system.getHeight()});
}else{
pion.system.init();
system_config_page_initialized=true;
}
}else{
if(page.onSelect){
page.onSelect();
}
}
}
}
}
}
}
}
};
pion.getMaxMainStackContainerHeightWithoutScroll=function(){
var _1202=dojo.byId("outer").offsetHeight-(dojo.byId("topBar").offsetHeight+dojo.byId("bottomBar").offsetHeight);
if(dojo.isIE){
_1202-=15;
}
return _1202;
};
dojo.declare("pion.widgets.MainStackContentHeader",[dijit._Widget,dijit._Templated],{title:"???",help:"",help_label:"",templateString:"<div class=\"config_header\">"+"<div class=\"title\">${title}</div>"+"<a class=\"header help\" href=\"http://pion.org/${help}\" target=\"_blank\">${help_label}</a>"+"<div class=\"bottom\" />"+"</div>",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
dojo.mixin(this,dojo.i18n.getLocalization("pion","general"));
if(this.help.length==0){
this.help_label="";
}else{
if(this.help_label.length==0){
if((" "+this["class"]+" ").indexOf(" nested ")>=0){
this.help_label=this.default_nested_header_help_label;
}else{
this.help_label=this.default_header_help_label;
}
}
}
if(this.templatePath){
this.templateString="";
}
},postCreate:function(){
this.inherited("postCreate",arguments);
}});
dojo.declare("pion.widgets.ReactorGridHeader",[dijit._Widget,dijit._Templated],{title:"???",help:"",help_label:"",templateString:"<div class=\"reactor_grid_header\">"+"<div class=\"title\">${title}</div>"+"<a class=\"header help\" href=\"http://pion.org/${help}\" target=\"_blank\">${help_label}</a>"+"<div class=\"bottom\" />"+"</div>",postMixInProperties:function(){
this.inherited("postMixInProperties",arguments);
dojo.mixin(this,dojo.i18n.getLocalization("pion","general"));
if(this.help.length==0){
this.help_label="";
}else{
if(this.help_label.length==0){
this.help_label=this.default_grid_header_help_label;
}
}
if(this.templatePath){
this.templateString="";
}
},postCreate:function(){
this.inherited("postCreate",arguments);
}});
dijit.form.TextBox.prototype._setValueAttr=function(value,_1203,_1204){
var _1205;
if(value!==undefined){
_1205=this.filter(value);
if(_1205!==null&&((typeof _1205!="number")||!isNaN(_1205))){
if(_1204===undefined||!_1204.toString){
_1204=this.format(_1205,this.constraints);
}
}else{
_1204="";
}
}
if(_1204!=null&&_1204!=undefined){
this.textbox.value=_1204;
}
dijit.form.TextBox.superclass._setValueAttr.call(this,_1205,_1203);
};
dijit.Dialog.prototype._size=function(){
var mb=dojo.marginBox(this.domNode);
var _1206=dijit.getViewport();
if(mb.w>=_1206.w||mb.h>=_1206.h){
dojo.style(this.containerNode,{height:Math.min(mb.h,Math.floor(_1206.h*0.9))+"px",overflow:"auto",position:"relative"});
}
};
dojo.i18n._preloadLocalizations("dojo.nls.pion-dojo",["ROOT","en","en-gb","en-us","xx"]);
